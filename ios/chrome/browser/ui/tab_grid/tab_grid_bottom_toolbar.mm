// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#import "ios/chrome/browser/ui/tab_grid/tab_grid_bottom_toolbar.h"

#import "ios/chrome/browser/ui/tab_grid/tab_grid_constants.h"
#import "ios/chrome/browser/ui/tab_grid/tab_grid_new_tab_button.h"
#import "ios/chrome/browser/ui/util/uikit_ui_util.h"

#if !defined(__has_feature) || !__has_feature(objc_arc)
#error "This file requires ARC support."
#endif

@implementation TabGridBottomToolbar {
  UIBarButtonItem* _spaceItem;
  UIImage* _transparentBackground;
  UIImage* _translucentBackground;
}

- (void)hide {
  self.newTabButton.button.alpha = 0.0;
  if ([self shouldUseCompactLayout]) {
    self.backgroundColor = UIColor.blackColor;
  }
}

- (void)show {
  self.newTabButton.button.alpha = 1.0;
  if ([self shouldUseCompactLayout]) {
    self.backgroundColor = UIColor.clearColor;
  }
}

#pragma mark - UIView

- (void)willMoveToSuperview:(UIView*)newSuperview {
  // The first time this moves to a superview, perform the view setup.
  if (newSuperview && self.subviews.count == 0) {
    [self setupViews];
  }
}

- (void)traitCollectionDidChange:(UITraitCollection*)previousTraitCollection {
  [super traitCollectionDidChange:previousTraitCollection];
  [self setItemsForTraitCollection:self.traitCollection];
}

#pragma mark - Private

- (void)setItemsForTraitCollection:(UITraitCollection*)traitCollection {
  if ([self shouldUseCompactLayout]) {
    _newTabButton.sizeClass = TabGridNewTabButtonSizeClassSmall;
    [self setItems:@[
      self.leadingButton, _spaceItem, _newTabButton, _spaceItem,
      self.trailingButton
    ]];
    self.clipsToBounds = NO;
    [self setBackgroundImage:_translucentBackground
          forToolbarPosition:UIBarPositionAny
                  barMetrics:UIBarMetricsDefault];
  } else {
    _newTabButton.sizeClass = TabGridNewTabButtonSizeClassLarge;
    [self setItems:@[ _spaceItem, _newTabButton ]];
    self.clipsToBounds = YES;
    [self setBackgroundImage:_transparentBackground
          forToolbarPosition:UIToolbarPositionAny
                  barMetrics:UIBarMetricsDefault];
  }
}

- (void)setupViews {
  self.translatesAutoresizingMaskIntoConstraints = NO;
  self.barStyle = UIBarStyleBlack;
  self.translucent = YES;
  // Remove the border of UIToolbar.
  [self setShadowImage:[[UIImage alloc] init]
      forToolbarPosition:UIBarPositionAny];

  _leadingButton = [[UIBarButtonItem alloc] init];
  _leadingButton.tintColor = UIColorFromRGB(kTabGridToolbarTextButtonColor);

  _trailingButton = [[UIBarButtonItem alloc] init];
  _trailingButton.style = UIBarButtonItemStyleDone;
  _trailingButton.tintColor = UIColorFromRGB(kTabGridToolbarTextButtonColor);

  _newTabButton = [[TabGridNewTabButton alloc] init];

  _spaceItem = [[UIBarButtonItem alloc]
      initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace
                           target:nil
                           action:nil];

  // Store the translucent background generated by self.translucent=YES.
  _translucentBackground =
      [self backgroundImageForToolbarPosition:UIBarPositionAny
                                   barMetrics:UIBarMetricsDefault];
  _transparentBackground = [[UIImage alloc] init];

  [self setItemsForTraitCollection:self.traitCollection];
}

// Returns YES if should use compact bottom toolbar layout.
- (BOOL)shouldUseCompactLayout {
  return self.traitCollection.verticalSizeClass ==
             UIUserInterfaceSizeClassRegular &&
         self.traitCollection.horizontalSizeClass ==
             UIUserInterfaceSizeClassCompact;
}

@end
