// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module media.mojom;

import "media/mojo/interfaces/audio_decoder.mojom";
import "media/mojo/interfaces/cdm_proxy.mojom";
import "media/mojo/interfaces/decryptor.mojom";
import "media/mojo/interfaces/content_decryption_module.mojom";
import "media/mojo/interfaces/renderer.mojom";
import "media/mojo/interfaces/video_decoder.mojom";
import "mojo/public/mojom/base/token.mojom";

// DEPRECATED: This will be cleaned up as part of https://crbug.com/936528.
// It is currently left in to prevent breaking the ChromeCast build, and will
// be removed before M74 branch.
// Defines the types of renderers that can be hosted by a mojo Renderer.
enum HostedRendererType {
  // media::DefaultRenderer: Used to offload normal rendering scenarios to a
  // different process, for stability or performance reasons.
  kDefault,

  // DEPRECATED: Use CreateMediaPlayerRenderer() instead.
  [EnableIf=is_android]
  kMediaPlayer,

  // DEPRECATED: Use CreateFlingingRenderer() instead.
  [EnableIf=is_android]
  kFlinging,
};

// A factory for creating media mojo interfaces. Renderers can only access
// ContentDecryptionModules created with the same factory.
interface InterfaceFactory {
  CreateAudioDecoder(AudioDecoder& audio_decoder);
  CreateVideoDecoder(VideoDecoder& video_decoder);

  // DEPRECATED: This will be cleaned up as part of https://crbug.com/936528.
  // It is currently left in to prevent breaking the ChromeCast build, and will
  // be removed before M74 branch.
  CreateRenderer(HostedRendererType type, string audio_device_id,
                 Renderer& renderer);

  // Creates a regular media::Renderer (DefaultRendererFactory).
  CreateDefaultRenderer(string audio_device_id, Renderer& renderer);

  [EnableIf=is_android]
  // Creates a MediaPlayerRenderer (MediaPlayerRendererFactory).
  CreateMediaPlayerRenderer(Renderer& renderer);

  [EnableIf=is_android]
  // Creates a FlingingRenderer (FlingingRendererFactory).
  // The |presentation_id| is used to find an already set-up RemotePlayback
  // session (see blink::RemotePlayback).
  CreateFlingingRenderer(string presentation_id, Renderer& renderer);

  // Creates a CDM based on the |key_system| provided. A |key_system| is a
  // generic term for a decryption mechanism and/or content protection provider.
  // It should be a reverse domain name, e.g. "com.example.somesystem". However,
  // this call may be initiated by an untrusted process (e.g. renderer), so the
  // implementation must fully validate |key_system| before creating the CDM.
  CreateCdm(string key_system, ContentDecryptionModule& cdm);

  // Creates a Decryptor associated with the |cdm_id|.
  CreateDecryptor(int32 cdm_id, Decryptor& decryptor);

  // Creates a CdmProxy that proxies part of CDM functionalities to a different
  // entity, e.g. hardware CDM modules. The created |cdm_proxy| must match the
  // type of the CDM, identified by |cdm_guid|.
  // TODO(crbug.com/676224): Conditionally enable this when EnabledIf attribute
  // is supported in mojom files.
  CreateCdmProxy(mojo_base.mojom.Token cdm_guid, CdmProxy& cdm_proxy);
};
