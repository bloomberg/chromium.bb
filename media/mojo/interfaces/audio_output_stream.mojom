// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module media.mojom;

import "media/mojo/interfaces/audio_data_pipe.mojom";
import "media/mojo/interfaces/audio_parameters.mojom";
import "media/mojo/interfaces/media_types.mojom";

// An interface for controlling an audio output stream.
// To close the stream, just close the message pipe.
// The AudioOutputStream may expire due to other reasons than actual errors,
// such as user-initiated actions to close the stream. In this case, the
// connection is closed without calling OnError.
interface AudioOutputStream {
  // Starts rendering audio.
  Play();

  // Stops rendering audio and sends a signal on the AudioDataPipe indicating
  // this.
  Pause();

  // Sets volume. Volume must be in the range [0, 1].
  SetVolume(double volume);
};

interface AudioOutputStreamClient {
  // Called if the stream has an error such as failing to open/losing access to
  // a device. This renders the stream unusable.
  OnError();
};

interface AudioOutputStreamProvider {
  // Creates a new AudioOutputStream using |params|. |data_pipe| is used to
  // transfer audio data.
  // Can only be called once.
  Acquire(AudioOutputStream& output_stream, AudioOutputStreamClient client,
    AudioParameters params)
    => (AudioDataPipe data_pipe);
};

// An AudioOutputStreamObserver gets notifications about events related to an
// AudioOutputStream. DidStartPlaying() is invoked when the stream starts
// playing and it is eventually followed by a DidStopPlaying() call. A stream
// may start playing again after being stopped.
//
// Note: It is possible that DidStopPlaying() is not called in shutdown
// situations.
interface AudioOutputStreamObserver {
  // This notification indicates that the stream started playing. The stream
  // should be considered non-audible until a DidChangeAudibleState() call says
  // otherwise.
  DidStartPlaying();

  // This notification indicates that the stream stopped playing. The stream
  // should be considered no longer audible at this time; no further
  // audible-state change notifications will be issued.
  DidStopPlaying();

  // This notification carries the latest value of the audible state of the
  // stream. Multiple instances of this notification may occur after
  // DidStartPlaying() and before DidStopPlaying().
  DidChangeAudibleState(bool is_audible);
};
