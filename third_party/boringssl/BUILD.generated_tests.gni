# Copyright (c) 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This file is created by generate_build_files.py. Do not edit manually.

test_support_sources = [
  "src/crypto/test/file_test.cc",
  "src/crypto/test/file_test.h",
  "src/crypto/test/gtest_main.h",
  "src/crypto/test/malloc.cc",
  "src/crypto/test/test_util.cc",
  "src/crypto/test/test_util.h",
  "src/ssl/test/async_bio.h",
  "src/ssl/test/packeted_bio.h",
  "src/ssl/test/test_config.h",
]

crypto_test_sources = [
  "crypto_test_data.cc",
  "src/crypto/asn1/asn1_test.cc",
  "src/crypto/base64/base64_test.cc",
  "src/crypto/bio/bio_test.cc",
  "src/crypto/bytestring/bytestring_test.cc",
  "src/crypto/chacha/chacha_test.cc",
  "src/crypto/cipher_extra/aead_extra_test.cc",
  "src/crypto/cmac/cmac_test.cc",
  "src/crypto/compiler_test.cc",
  "src/crypto/constant_time_test.cc",
  "src/crypto/curve25519/ed25519_test.cc",
  "src/crypto/curve25519/spake25519_test.cc",
  "src/crypto/curve25519/x25519_test.cc",
  "src/crypto/dh/dh_test.cc",
  "src/crypto/digest_extra/digest_test.cc",
  "src/crypto/dsa/dsa_test.cc",
  "src/crypto/err/err_test.cc",
  "src/crypto/evp/evp_extra_test.cc",
  "src/crypto/evp/pbkdf_test.cc",
  "src/crypto/fipsmodule/aes/aes_test.cc",
  "src/crypto/fipsmodule/ec/ec_test.cc",
  "src/crypto/fipsmodule/rand/ctrdrbg_test.cc",
  "src/crypto/hkdf/hkdf_test.cc",
  "src/crypto/lhash/lhash_test.cc",
  "src/crypto/pool/pool_test.cc",
  "src/crypto/refcount_test.cc",
  "src/crypto/rsa_extra/rsa_test.cc",
  "src/crypto/test/file_test_gtest.cc",
  "src/crypto/test/gtest_main.cc",
]

ssl_test_sources = [
  "src/crypto/test/gtest_main.cc",
  "src/ssl/ssl_test.cc",
]

template("create_tests") {
  executable("boringssl_aead_test") {
    sources = [
      "src/crypto/cipher_extra/aead_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_cipher_test") {
    sources = [
      "src/crypto/cipher_extra/cipher_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_ecdh_test") {
    sources = [
      "src/crypto/ecdh/ecdh_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_evp_test") {
    sources = [
      "src/crypto/evp/evp_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_bn_test") {
    sources = [
      "src/crypto/fipsmodule/bn/bn_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_example_mul") {
    sources = [
      "src/crypto/fipsmodule/ec/example_mul.c",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_p256-x86_64_test") {
    sources = [
      "src/crypto/fipsmodule/ec/p256-x86_64_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_ecdsa_sign_test") {
    sources = [
      "src/crypto/fipsmodule/ecdsa/ecdsa_sign_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_ecdsa_test") {
    sources = [
      "src/crypto/fipsmodule/ecdsa/ecdsa_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_ecdsa_verify_test") {
    sources = [
      "src/crypto/fipsmodule/ecdsa/ecdsa_verify_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_gcm_test") {
    sources = [
      "src/crypto/fipsmodule/modes/gcm_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_ctrdrbg_vector_test") {
    sources = [
      "src/crypto/fipsmodule/rand/ctrdrbg_vector_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_hmac_test") {
    sources = [
      "src/crypto/hmac_extra/hmac_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_obj_test") {
    sources = [
      "src/crypto/obj/obj_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_pkcs7_test") {
    sources = [
      "src/crypto/pkcs7/pkcs7_test.c",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_pkcs12_test") {
    sources = [
      "src/crypto/pkcs8/pkcs12_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_pkcs8_test") {
    sources = [
      "src/crypto/pkcs8/pkcs8_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_poly1305_test") {
    sources = [
      "src/crypto/poly1305/poly1305_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_thread_test") {
    sources = [
      "src/crypto/thread_test.c",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_x509_test") {
    sources = [
      "src/crypto/x509/x509_test.cc",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_tab_test") {
    sources = [
      "src/crypto/x509v3/tab_test.c",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  executable("boringssl_v3name_test") {
    sources = [
      "src/crypto/x509v3/v3name_test.c",
    ]
    sources += test_support_sources
    if (defined(invoker.configs_exclude)) {
      configs -= invoker.configs_exclude
    }
    configs += invoker.configs
    deps = invoker.deps + [ "//build/config:exe_and_shlib_deps" ]
  }

  group(target_name) {
    deps = [
      ":boringssl_aead_test",
      ":boringssl_bn_test",
      ":boringssl_cipher_test",
      ":boringssl_ctrdrbg_vector_test",
      ":boringssl_ecdh_test",
      ":boringssl_ecdsa_sign_test",
      ":boringssl_ecdsa_test",
      ":boringssl_ecdsa_verify_test",
      ":boringssl_evp_test",
      ":boringssl_example_mul",
      ":boringssl_gcm_test",
      ":boringssl_hmac_test",
      ":boringssl_obj_test",
      ":boringssl_p256-x86_64_test",
      ":boringssl_pkcs12_test",
      ":boringssl_pkcs7_test",
      ":boringssl_pkcs8_test",
      ":boringssl_poly1305_test",
      ":boringssl_tab_test",
      ":boringssl_thread_test",
      ":boringssl_v3name_test",
      ":boringssl_x509_test",
    ]
  }
}
