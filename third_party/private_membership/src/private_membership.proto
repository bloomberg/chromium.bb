// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package private_membership;

// An enum describing different types of available hash functions.
enum HashType {
  HASH_TYPE_UNDEFINED = 0;
  TEST_HASH_TYPE = 1;
  SHA256 = 2;
  // Add more hash types if necessary.
}

// A proto message that holds the doubly encrypted identifier.
message DoublyEncryptedId {
  // The identifier encrypted using the elliptic curve commutative
  // cipher under an ephemeral key generated by the client that was sent in
  // the request.
  bytes queried_encrypted_id = 1;

  // The double encryption of a client requested identifier. The encryption
  // scheme used is the Elliptic Curve commutation cipher. The
  // first encryption layer uses the client's ephemeral key while the second
  // encryption layer uses the server's match key.
  //
  // The client will decrypt this field to get their queried identifier
  // encrypted under only the server's key. The client will use this value to
  // match with the contents of the encrypted bucket to determine if there is a
  // match or not.
  bytes doubly_encrypted_id = 2;
}

// A proto message used to store the plaintext response of a membership query of
// a single identifier.
message MembershipResponse {
  // True if and only if the queried identifier was a member.
  bool is_member = 1;

  // The associated value if the queried identifier was a member. If the
  // queried identifier is not a member, the value will be an empty string.
  string value = 2;
}
