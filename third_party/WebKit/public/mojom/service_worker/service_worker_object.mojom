// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "third_party/WebKit/public/mojom/message_port/message_port.mojom";
import "third_party/WebKit/public/mojom/service_worker/service_worker_state.mojom";
import "url/mojom/origin.mojom";
import "url/mojom/url.mojom";

const int32 kInvalidServiceWorkerHandleId = -1;
const int64 kInvalidServiceWorkerVersionId = -1;

// Describes a ServiceWorker object:
// https://w3c.github.io/ServiceWorker/#serviceworker-interface
struct ServiceWorkerObjectInfo {
  // |handle_id| and |version_id| are internal state not exposed to the web.
  // |handle_id| is used for interprocess reference counting to keep the
  // content::ServiceWorkerVersion in the browser process alive while an object
  // refers to it; it will be removed when Mojofication is complete.
  // |version_id| identifies the service worker.
  int32 handle_id = kInvalidServiceWorkerHandleId;
  int64 version_id = kInvalidServiceWorkerVersionId;

  // ServiceWorker#state
  ServiceWorkerState state = ServiceWorkerState.kUnknown;

  // ServiceWorker#scriptURL
  url.mojom.Url url;

  // This object's host in the browser process.
  associated ServiceWorkerObjectHost host_ptr_info;
};

// The browser-side host of one ServiceWorker JavaScript object. The renderer
// uses this interface to ask the browser process to do operations needed to
// implement ServiceWorker methods.
interface ServiceWorkerObjectHost {
  // Corresponds to ServiceWorker#postMessage().
  // TODO(leonhsl): Remove |source_origin| by having the browser process keep
  // track of the origin of this endpoint at binding time. The original legacy
  // IPC code this is converted from sent the origin in the IPC message, so it
  // was kept as a convenience during migration to Mojo, but we should remove it
  // now.
  PostMessageToServiceWorker(TransferableMessage message,
                             url.mojom.Origin source_origin);

  // Tells the browser process to terminate the service worker. Used in layout
  // tests to verify behavior when a service worker isn't running. The callback
  // is called when the browser process actually observes the termination.
  TerminateForTesting() => ();
};
