// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "url/mojo/url.mojom";

struct PresentationInfo {
  url.mojom.Url url;
  string id;
};

enum ScreenAvailability {
  UNKNOWN,
  UNAVAILABLE,
  SOURCE_NOT_SUPPORTED,
  DISABLED,
  AVAILABLE
};

enum PresentationConnectionState {
  CONNECTING,
  CONNECTED,
  CLOSED,
  TERMINATED
};

enum PresentationConnectionCloseReason {
  CONNECTION_ERROR,
  CLOSED,
  WENT_AWAY
};

enum PresentationErrorType {
  NO_AVAILABLE_SCREENS,
  PRESENTATION_REQUEST_CANCELLED,
  NO_PRESENTATION_FOUND,
  PREVIOUS_START_IN_PROGRESS,
  UNKNOWN,
};

struct PresentationError {
  PresentationErrorType error_type;
  string message;
};

union PresentationConnectionMessage {
  string message;
  array<uint8> data;
};

interface PresentationConnection {
   // Called when a message is sent by the target connection.
   OnMessage(PresentationConnectionMessage message) => (bool success);

   // Called when target connection notifies connection state change.
   DidChangeState(PresentationConnectionState state);

   // Called when target connection calls close().
   OnClose();
};

interface PresentationService {
  // Sets the PresentationServiceClient.
  SetClient(PresentationServiceClient client);

  ///////////// Functions here are for the controller part of the API. /////////

  // Called when the frame sets or changes the default presentation URLs.
  // When the default presentation is started on this frame,
  // PresentationServiceClient::OnDefaultPresentationStarted will be invoked.
  SetDefaultPresentationUrls(array<url.mojom.Url> presentation_urls);

  // Starts listening for screen availability for presentation of
  // |availability_url|. Availability results will be returned to the client via
  // PresentationServiceClient::OnScreenAvailabilityUpdated.
  ListenForScreenAvailability(url.mojom.Url availability_url);

  // Stops listening for screen availability for the presentation of |url|. The
  // PresentationServiceClient will stop receiving availability updates for
  // |url|.
  StopListeningForScreenAvailability(url.mojom.Url availability_url);

  // Called when start() is called by the frame. The result callback
  // will return a non-null and valid PresentationInfo if starting the
  // presentation succeeded, or null with a PresentationError if starting the
  // presentation failed.
  StartPresentation(array<url.mojom.Url> presentation_urls)
      => (PresentationInfo? presentation_info, PresentationError? error);

  // Called when reconnect() is called by the frame. The result callback
  // works the same as for the method above. reconnect() will create a new
  // connection to a presentation with the matching URL and id.
  ReconnectPresentation(array<url.mojom.Url> presentation_urls, string presentation_id)
      => (PresentationInfo? presentation_info, PresentationError? error);

  // Notifies the service that a PresentationConnection has been started.
  // |controller_connection_ptr| is a handle to a PresentationConnection in
  // the page that started the presentation (aka the "controller"). This can be
  // used by PresentationService to send messages to the controller
  // PresentationConnection, for example.
  // The PresentationService should bind |receiver_connection_request| to a
  // PresentationConnection implementation in order to receive messages and
  // commands issued by the controller PresentationConnection.
  SetPresentationConnection(
      PresentationInfo presentation_info,
      PresentationConnection controller_connection_ptr,
      PresentationConnection& receiver_connection_request);

  //////////////////////////////////////////////////////////////////////////////
  // Called when close() is called by the frame.
  CloseConnection(url.mojom.Url presentation_url, string presentation_id);

  // Called when terminate() is called by the frame.
  Terminate(url.mojom.Url presentation_url, string presentation_id);
};

interface PresentationServiceClient {
  //////////  This API is implemented by a controlling frame.  /////////////////

  // Called when the client is listening for screen availability for
  // presentation of |url| and the state changes. When the client starts to
  // listen for screen availability, this method will always be called to give
  // the current known state. It will then be called to notify of state updates.
  OnScreenAvailabilityUpdated(url.mojom.Url url,
                              ScreenAvailability availability);

  // See PresentationService::SetDefaultPresentationURL.
  OnDefaultPresentationStarted(PresentationInfo presentation_info);

  //////////  This API is implemented by an offscreen presentation frame.  /////

  // Called on a presentation receiver when a connection for |presentation_info|
  // is available from the controlling page.
  OnReceiverConnectionAvailable(
      PresentationInfo presentation_info,
      PresentationConnection controller_connection_ptr,
      PresentationConnection& receiver_connection_request);

  //////////  This API is implemented by both frame types.  ////////////////////

  // Called when the state of PresentationConnection |connection| started on
  // this frame has changed to |newState|.
  OnConnectionStateChanged(PresentationInfo presentation_info,
                           PresentationConnectionState newState);

  // Caled when the state of |presentation_info| started on this frame has changed to
  // CLOSED.
  OnConnectionClosed(PresentationInfo presentation_info,
                     PresentationConnectionCloseReason reason,
                     string message);
};
