This is a testharness.js-based test.
PASS This test uses interpolation-test.js.
PASS CSS Transitions: property <--color-list> from [initial] to [blue red] at (-0.3) is [rgb(255, 0, 0) rgb(0, 0, 255)]
PASS CSS Transitions: property <--color-list> from [initial] to [blue red] at (0) is [rgb(255, 0, 0) rgb(0, 0, 255)]
PASS CSS Transitions: property <--color-list> from [initial] to [blue red] at (0.5) is [rgb(128, 0, 128) rgb(128, 0, 128)]
PASS CSS Transitions: property <--color-list> from [initial] to [blue red] at (1) is [rgb(0, 0, 255) rgb(255, 0, 0)]
PASS CSS Transitions: property <--color-list> from [initial] to [blue red] at (1.5) is [rgb(0, 0, 255) rgb(255, 0, 0)]
PASS CSS Transitions: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (-0.3) is [rgb(15, 15, 15) rgb(78, 78, 78)]
PASS CSS Transitions: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (0) is [rgb(30, 30, 30) rgb(60, 60, 60)]
PASS CSS Transitions: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (0.5) is [rgb(55, 55, 55) rgb(30, 30, 30)]
PASS CSS Transitions: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (1) is [rgb(80, 80, 80) rgb(0, 0, 0)]
PASS CSS Transitions: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (1.5) is [rgb(105, 105, 105) rgb(0, 0, 0)]
PASS CSS Transitions: property <--color-list> from [unset] to [tan tomato] at (-0.3) is [rgb(255, 0, 0) rgb(0, 0, 255)]
PASS CSS Transitions: property <--color-list> from [unset] to [tan tomato] at (0) is [rgb(255, 0, 0) rgb(0, 0, 255)]
PASS CSS Transitions: property <--color-list> from [unset] to [tan tomato] at (0.5) is [rgb(233, 90, 70) rgb(128, 50, 163)]
PASS CSS Transitions: property <--color-list> from [unset] to [tan tomato] at (1) is [rgb(210, 180, 140) rgb(255, 99, 71)]
PASS CSS Transitions: property <--color-list> from [unset] to [tan tomato] at (1.5) is [rgb(188, 255, 210) rgb(255, 149, 0)]
PASS CSS Transitions: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (-0.3) is [rgb(0, 255, 0) rgb(255, 165, 28)]
PASS CSS Transitions: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (0) is [rgb(0, 255, 0) rgb(255, 127, 80)]
PASS CSS Transitions: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (0.5) is [rgb(0, 128, 64) rgb(128, 64, 168)]
PASS CSS Transitions: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (1) is [rgb(0, 0, 128) rgb(0, 0, 255)]
PASS CSS Transitions: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (1.5) is [rgb(0, 0, 192) rgb(0, 0, 255)]
PASS CSS Transitions: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (-0.3) is [rgb(52, 40, 40) rgb(104, 104, 104)]
PASS CSS Transitions: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (0) is [rgb(40, 40, 40) rgb(80, 80, 80)]
PASS CSS Transitions: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (0.5) is [rgb(20, 40, 40) rgb(40, 40, 40)]
PASS CSS Transitions: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (1) is [rgb(0, 40, 40) rgb(0, 0, 0)]
PASS CSS Transitions: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (1.5) is [rgb(0, 40, 40) rgb(0, 0, 0)]
PASS CSS Animations: property <--color-list> from [initial] to [blue red] at (-0.3) is [rgb(255, 0, 0) rgb(0, 0, 255)]
PASS CSS Animations: property <--color-list> from [initial] to [blue red] at (0) is [rgb(255, 0, 0) rgb(0, 0, 255)]
PASS CSS Animations: property <--color-list> from [initial] to [blue red] at (0.5) is [rgb(128, 0, 128) rgb(128, 0, 128)]
PASS CSS Animations: property <--color-list> from [initial] to [blue red] at (1) is [rgb(0, 0, 255) rgb(255, 0, 0)]
PASS CSS Animations: property <--color-list> from [initial] to [blue red] at (1.5) is [rgb(0, 0, 255) rgb(255, 0, 0)]
PASS CSS Animations: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (-0.3) is [rgb(15, 15, 15) rgb(78, 78, 78)]
PASS CSS Animations: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (0) is [rgb(30, 30, 30) rgb(60, 60, 60)]
PASS CSS Animations: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (0.5) is [rgb(55, 55, 55) rgb(30, 30, 30)]
PASS CSS Animations: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (1) is [rgb(80, 80, 80) rgb(0, 0, 0)]
PASS CSS Animations: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (1.5) is [rgb(105, 105, 105) rgb(0, 0, 0)]
PASS CSS Animations: property <--color-list> from [unset] to [tan tomato] at (-0.3) is [rgb(255, 0, 0) rgb(0, 0, 255)]
PASS CSS Animations: property <--color-list> from [unset] to [tan tomato] at (0) is [rgb(255, 0, 0) rgb(0, 0, 255)]
PASS CSS Animations: property <--color-list> from [unset] to [tan tomato] at (0.5) is [rgb(233, 90, 70) rgb(128, 50, 163)]
PASS CSS Animations: property <--color-list> from [unset] to [tan tomato] at (1) is [rgb(210, 180, 140) rgb(255, 99, 71)]
PASS CSS Animations: property <--color-list> from [unset] to [tan tomato] at (1.5) is [rgb(188, 255, 210) rgb(255, 149, 0)]
PASS CSS Animations: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (-0.3) is [rgb(0, 255, 0) rgb(255, 165, 28)]
PASS CSS Animations: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (0) is [rgb(0, 255, 0) rgb(255, 127, 80)]
PASS CSS Animations: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (0.5) is [rgb(0, 128, 64) rgb(128, 64, 168)]
PASS CSS Animations: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (1) is [rgb(0, 0, 128) rgb(0, 0, 255)]
PASS CSS Animations: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (1.5) is [rgb(0, 0, 192) rgb(0, 0, 255)]
FAIL CSS Animations: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (-0.3) is [rgba(0, 0, 0, 0) rgba(0, 0, 0, 0)] assert_equals: expected "rgb ( 52 , 40 , 40 ) rgb ( 104 , 104 , 104 ) " but got "rgba ( 0 , 0 , 0 , 0 ) rgba ( 0 , 0 , 0 , 0 ) "
FAIL CSS Animations: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (0) is [rgba(0, 0, 0, 0) rgba(0, 0, 0, 0)] assert_equals: expected "rgb ( 40 , 40 , 40 ) rgb ( 80 , 80 , 80 ) " but got "rgba ( 0 , 0 , 0 , 0 ) rgba ( 0 , 0 , 0 , 0 ) "
FAIL CSS Animations: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (0.5) is [rgba(0, 40, 40, 0.5) rgba(0, 0, 0, 0.5)] assert_equals: expected "rgb ( 20 , 40 , 40 ) rgb ( 40 , 40 , 40 ) " but got "rgba ( 0 , 40 , 40 , 0.5 ) rgba ( 0 , 0 , 0 , 0.5 ) "
PASS CSS Animations: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (1) is [rgb(0, 40, 40) rgb(0, 0, 0)]
FAIL CSS Animations: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (1.5) is [rgb(0, 60, 60) rgb(0, 0, 0)] assert_equals: expected "rgb ( 0 , 40 , 40 ) rgb ( 0 , 0 , 0 ) " but got "rgb ( 0 , 60 , 60 ) rgb ( 0 , 0 , 0 ) "
PASS Web Animations: property <--color-list> from [initial] to [blue red] at (-0.3) is [rgb(255, 0, 0) rgb(0, 0, 255)]
PASS Web Animations: property <--color-list> from [initial] to [blue red] at (0) is [rgb(255, 0, 0) rgb(0, 0, 255)]
PASS Web Animations: property <--color-list> from [initial] to [blue red] at (0.5) is [rgb(128, 0, 128) rgb(128, 0, 128)]
PASS Web Animations: property <--color-list> from [initial] to [blue red] at (1) is [rgb(0, 0, 255) rgb(255, 0, 0)]
PASS Web Animations: property <--color-list> from [initial] to [blue red] at (1.5) is [rgb(0, 0, 255) rgb(255, 0, 0)]
PASS Web Animations: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (-0.3) is [rgb(15, 15, 15) rgb(78, 78, 78)]
PASS Web Animations: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (0) is [rgb(30, 30, 30) rgb(60, 60, 60)]
PASS Web Animations: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (0.5) is [rgb(55, 55, 55) rgb(30, 30, 30)]
PASS Web Animations: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (1) is [rgb(80, 80, 80) rgb(0, 0, 0)]
PASS Web Animations: property <--color-list> from [inherit] to [rgb(80, 80, 80) rgb(0, 0, 0)] at (1.5) is [rgb(105, 105, 105) rgb(0, 0, 0)]
PASS Web Animations: property <--color-list> from [unset] to [tan tomato] at (-0.3) is [rgb(255, 0, 0) rgb(0, 0, 255)]
PASS Web Animations: property <--color-list> from [unset] to [tan tomato] at (0) is [rgb(255, 0, 0) rgb(0, 0, 255)]
PASS Web Animations: property <--color-list> from [unset] to [tan tomato] at (0.5) is [rgb(233, 90, 70) rgb(128, 50, 163)]
PASS Web Animations: property <--color-list> from [unset] to [tan tomato] at (1) is [rgb(210, 180, 140) rgb(255, 99, 71)]
PASS Web Animations: property <--color-list> from [unset] to [tan tomato] at (1.5) is [rgb(188, 255, 210) rgb(255, 149, 0)]
PASS Web Animations: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (-0.3) is [rgb(0, 255, 0) rgb(255, 165, 28)]
PASS Web Animations: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (0) is [rgb(0, 255, 0) rgb(255, 127, 80)]
PASS Web Animations: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (0.5) is [rgb(0, 128, 64) rgb(128, 64, 168)]
PASS Web Animations: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (1) is [rgb(0, 0, 128) rgb(0, 0, 255)]
PASS Web Animations: property <--color-list> from [hsl(120, 100%, 50%) coral] to [navy hsl(240, 100%, 50%)] at (1.5) is [rgb(0, 0, 192) rgb(0, 0, 255)]
FAIL Web Animations: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (-0.3) is [rgba(0, 0, 0, 0) rgba(0, 0, 0, 0)] assert_equals: expected "rgb ( 52 , 40 , 40 ) rgb ( 104 , 104 , 104 ) " but got "rgba ( 0 , 0 , 0 , 0 ) rgba ( 0 , 0 , 0 , 0 ) "
FAIL Web Animations: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (0) is [rgba(0, 0, 0, 0) rgba(0, 0, 0, 0)] assert_equals: expected "rgb ( 40 , 40 , 40 ) rgb ( 80 , 80 , 80 ) " but got "rgba ( 0 , 0 , 0 , 0 ) rgba ( 0 , 0 , 0 , 0 ) "
FAIL Web Animations: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (0.5) is [rgba(0, 40, 40, 0.5) rgba(0, 0, 0, 0.5)] assert_equals: expected "rgb ( 20 , 40 , 40 ) rgb ( 40 , 40 , 40 ) " but got "rgba ( 0 , 40 , 40 , 0.5 ) rgba ( 0 , 0 , 0 , 0.5 ) "
PASS Web Animations: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (1) is [rgb(0, 40, 40) rgb(0, 0, 0)]
FAIL Web Animations: property <--color-list> from neutral to [rgb(0, 40, 40) black] at (1.5) is [rgb(0, 60, 60) rgb(0, 0, 0)] assert_equals: expected "rgb ( 0 , 40 , 40 ) rgb ( 0 , 0 , 0 ) " but got "rgb ( 0 , 60 , 60 ) rgb ( 0 , 0 , 0 ) "
FAIL Compositing: property <--color-list> underlying [darkslategray rgb(10, 10, 10)] from add [rgb(10, 10, 10) navy] to add [rgb(30, 30, 30) teal] at (-0.3) is [rgb(4, 4, 4) rgb(0, 0, 128)] assert_equals: expected "rgb ( 51 , 83 , 83 ) rgb ( 10 , 0 , 138 ) " but got "rgb ( 4 , 4 , 4 ) rgb ( 0 , 0 , 128 ) "
FAIL Compositing: property <--color-list> underlying [darkslategray rgb(10, 10, 10)] from add [rgb(10, 10, 10) navy] to add [rgb(30, 30, 30) teal] at (0) is [rgb(10, 10, 10) rgb(0, 0, 128)] assert_equals: expected "rgb ( 57 , 89 , 89 ) rgb ( 10 , 10 , 138 ) " but got "rgb ( 10 , 10 , 10 ) rgb ( 0 , 0 , 128 ) "
FAIL Compositing: property <--color-list> underlying [darkslategray rgb(10, 10, 10)] from add [rgb(10, 10, 10) navy] to add [rgb(30, 30, 30) teal] at (0.5) is [rgb(20, 20, 20) rgb(0, 64, 128)] assert_equals: expected "rgb ( 67 , 99 , 99 ) rgb ( 10 , 74 , 138 ) " but got "rgb ( 20 , 20 , 20 ) rgb ( 0 , 64 , 128 ) "
FAIL Compositing: property <--color-list> underlying [darkslategray rgb(10, 10, 10)] from add [rgb(10, 10, 10) navy] to add [rgb(30, 30, 30) teal] at (1) is [rgb(30, 30, 30) rgb(0, 128, 128)] assert_equals: expected "rgb ( 77 , 109 , 109 ) rgb ( 10 , 138 , 138 ) " but got "rgb ( 30 , 30 , 30 ) rgb ( 0 , 128 , 128 ) "
FAIL Compositing: property <--color-list> underlying [darkslategray rgb(10, 10, 10)] from add [rgb(10, 10, 10) navy] to add [rgb(30, 30, 30) teal] at (1.5) is [rgb(40, 40, 40) rgb(0, 192, 128)] assert_equals: expected "rgb ( 87 , 119 , 119 ) rgb ( 10 , 202 , 138 ) " but got "rgb ( 40 , 40 , 40 ) rgb ( 0 , 192 , 128 ) "
FAIL Compositing: property <--color-list> underlying [gold rgb(100, 100, 100)] from add [navy rgb(0, 0, 0)] to replace [rgb(17, 17, 17) rgb(1, 1, 1)] at (-0.3) is [rgb(0, 0, 161) rgb(0, 0, 0)] assert_equals: expected "rgb ( 255 , 255 , 161 ) rgb ( 130 , 130 , 130 ) " but got "rgb ( 0 , 0 , 161 ) rgb ( 0 , 0 , 0 ) "
FAIL Compositing: property <--color-list> underlying [gold rgb(100, 100, 100)] from add [navy rgb(0, 0, 0)] to replace [rgb(17, 17, 17) rgb(1, 1, 1)] at (0) is [rgb(0, 0, 128) rgb(0, 0, 0)] assert_equals: expected "rgb ( 255 , 215 , 128 ) rgb ( 100 , 100 , 100 ) " but got "rgb ( 0 , 0 , 128 ) rgb ( 0 , 0 , 0 ) "
FAIL Compositing: property <--color-list> underlying [gold rgb(100, 100, 100)] from add [navy rgb(0, 0, 0)] to replace [rgb(17, 17, 17) rgb(1, 1, 1)] at (0.5) is [rgb(9, 9, 73) rgb(1, 1, 1)] assert_equals: expected "rgb ( 136 , 116 , 73 ) rgb ( 51 , 51 , 51 ) " but got "rgb ( 9 , 9 , 73 ) rgb ( 1 , 1 , 1 ) "
PASS Compositing: property <--color-list> underlying [gold rgb(100, 100, 100)] from add [navy rgb(0, 0, 0)] to replace [rgb(17, 17, 17) rgb(1, 1, 1)] at (1) is [rgb(17, 17, 17) rgb(1, 1, 1)]
FAIL Compositing: property <--color-list> underlying [gold rgb(100, 100, 100)] from add [navy rgb(0, 0, 0)] to replace [rgb(17, 17, 17) rgb(1, 1, 1)] at (1.5) is [rgb(26, 26, 0) rgb(2, 2, 2)] assert_equals: expected "rgb ( 0 , 0 , 0 ) rgb ( 0 , 0 , 0 ) " but got "rgb ( 26 , 26 , 0 ) rgb ( 2 , 2 , 2 ) "
Harness: the test ran to completion.

