This scenario verifies that the green "container" element and lime "innerScrolling" element scroll properly even though there is a blue fixed-position element layered in between them.

The catch is that the squashing requirements should be computed in correct paint order, so that the green container does not accidentally position itself with respect to the wrong layer and not scroll.

CASE 1, original layer tree:
{
  "layers": [
    {
      "name": "LayoutView #document",
      "bounds": [785, 4100],
      "contentsOpaque": true,
      "backgroundColor": "#FFFFFF"
    },
    {
      "name": "LayoutBlockFlow (positioned) DIV id='backgroundFixed'",
      "bounds": [400, 400],
      "contentsOpaque": true,
      "backgroundColor": "#808080"
    },
    {
      "name": "LayoutBlockFlow (positioned) DIV id='container'",
      "position": [100, 100],
      "bounds": [100, 4000],
      "contentsOpaque": true,
      "backgroundColor": "#008000"
    },
    {
      "name": "LayoutBlockFlow (positioned) DIV id='innerFixed'",
      "position": [100, 150],
      "bounds": [200, 100],
      "contentsOpaque": true,
      "backgroundColor": "#0000FF"
    },
    {
      "name": "LayoutBlockFlow (positioned) DIV id='innerScrolling'",
      "position": [200, 100],
      "bounds": [100, 100],
      "contentsOpaque": true,
      "backgroundColor": "#00FF00"
    }
  ]
}
CASE 2, scrolling y by 10 pixels, both the "container" and "inner" should scroll properly.
{
  "layers": [
    {
      "name": "LayoutView #document",
      "bounds": [785, 4100],
      "contentsOpaque": true,
      "backgroundColor": "#FFFFFF"
    },
    {
      "name": "LayoutBlockFlow (positioned) DIV id='backgroundFixed'",
      "position": [0, 10],
      "bounds": [400, 400],
      "contentsOpaque": true,
      "backgroundColor": "#808080"
    },
    {
      "name": "LayoutBlockFlow (positioned) DIV id='container'",
      "position": [100, 100],
      "bounds": [100, 4000],
      "contentsOpaque": true,
      "backgroundColor": "#008000"
    },
    {
      "name": "LayoutBlockFlow (positioned) DIV id='innerFixed'",
      "position": [100, 160],
      "bounds": [200, 100],
      "contentsOpaque": true,
      "backgroundColor": "#0000FF"
    },
    {
      "name": "LayoutBlockFlow (positioned) DIV id='innerScrolling'",
      "position": [200, 100],
      "bounds": [100, 100],
      "contentsOpaque": true,
      "backgroundColor": "#00FF00"
    }
  ]
}
CASE 3, scrolling y further so that "inner" no longer overlaps the fixed-pos layer, then the stacking context of "container" includes the "innerScrolling" layer, and doubles in width:
{
  "layers": [
    {
      "name": "LayoutView #document",
      "bounds": [785, 4100],
      "contentsOpaque": true,
      "backgroundColor": "#FFFFFF"
    },
    {
      "name": "LayoutBlockFlow (positioned) DIV id='backgroundFixed'",
      "position": [0, 110],
      "bounds": [400, 400],
      "contentsOpaque": true,
      "backgroundColor": "#808080"
    },
    {
      "name": "LayoutBlockFlow (positioned) DIV id='container'",
      "position": [100, 100],
      "bounds": [200, 4000],
      "backgroundColor": "#008000",
      "paintInvalidations": [
        {
          "object": "LayoutBlockFlow (positioned) DIV id='innerScrolling'",
          "rect": [100, 0, 100, 100],
          "reason": "compositing update"
        }
      ]
    },
    {
      "name": "LayoutBlockFlow (positioned) DIV id='innerFixed'",
      "position": [100, 260],
      "bounds": [200, 100],
      "contentsOpaque": true,
      "backgroundColor": "#0000FF"
    }
  ],
  "objectPaintInvalidations": [
    {
      "object": "LayoutBlockFlow (positioned) DIV id='innerScrolling'",
      "reason": "compositing update"
    }
  ]
}

