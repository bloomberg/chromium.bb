This is a testharness.js-based test.
FAIL If details.id is missing, assign a identifier Failed to construct 'PaymentRequest': The provided value cannot be converted to a sequence.
FAIL If details.id is missing, assign a unique identifier Failed to construct 'PaymentRequest': The provided value cannot be converted to a sequence.
FAIL If the same id is provided, then use it Failed to construct 'PaymentRequest': The provided value cannot be converted to a sequence.
FAIL Use ids even if they are strange Failed to construct 'PaymentRequest': The provided value cannot be converted to a sequence.
FAIL Use provided request ID Failed to construct 'PaymentRequest': The provided value cannot be converted to a sequence.
PASS If the length of the methodData sequence is zero, then throw a TypeError 
FAIL Method data must be JSON-serializable object (a list in this case) assert_false: shouldn't throw when using a list expected false got true
FAIL Method data must be JSON-serializable object (an object in this case) Failed to construct 'PaymentRequest': The provided value cannot be converted to a sequence.
PASS Rethrow any exceptions of JSON-serializing paymentMethod.data into a string 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "-1"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "-1.0"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "-1.00"), then throw a TypeError 
PASS If details.total.amount.value is not a valid decimal monetary value (in this case "-1000.000"), then throw a TypeError 
FAIL PaymentDetailsBase.0 can be 0 length assert_true: 0 can be zero length expected true got false
FAIL PaymentDetailsBase.1 can be 0 length assert_true: 1 can be zero length expected true got false
FAIL PaymentDetailsBase.2 can be 0 length assert_true: 2 can be zero length expected true got false
PASS If the first character of details.total.amount.value is U+002D HYPHEN-MINUS, then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError 
PASS For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError 
FAIL Negative values are allowed for displayItems.amount.value, irrespective of total amount assert_false: shouldn't throw when given a negative value expected false got true
FAIL it handles high precision currency values without throwing assert_false: shouldn't throw when given absurd monetary values expected false got true
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError 
PASS For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError 
FAIL If there is no selected shipping option, then PaymentRequest.shippingOption remains null Failed to construct 'PaymentRequest': The provided value cannot be converted to a sequence.
FAIL If there is a selected shipping option, then it becomes synchronously selected Failed to construct 'PaymentRequest': The provided value cannot be converted to a sequence.
FAIL If there is a multiple selected shipping options, only the last is selected Failed to construct 'PaymentRequest': The provided value cannot be converted to a sequence.
FAIL If there are any duplicate shipping option ids, then there are no shipping options Failed to construct 'PaymentRequest': The provided value cannot be converted to a sequence.
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1.0"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1.00"), then throw a TypeError 
PASS If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1000.000"), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case "-"), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case "10."), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case ".99"), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case "-10."), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case "10-"), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case ""), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case "null"), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError 
PASS If amount.value of additionalDisplayItems is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError 
FAIL Modifier data must be JSON-serializable object (a list in this case) assert_false: shouldn't throw when given a list expected false got true
FAIL Modifier data must be JSON-serializable object (an object in this case) assert_false: shouldn't throw when given an object value expected false got true
PASS Rethrow any exceptions of JSON-serializing modifier.data into a string 
PASS Shipping type should be valid 
FAIL PaymentRequest.shippingAddress must initially be null Failed to construct 'PaymentRequest': The provided value cannot be converted to a sequence.
FAIL If options.requestShipping is not set, then request.shippingType attribute is null. Failed to construct 'PaymentRequest': The provided value cannot be converted to a sequence.
FAIL If options.requestShipping is true, request.shippingType will be options.shippingType. Failed to construct 'PaymentRequest': The provided value cannot be converted to a sequence.
Harness: the test ran to completion.

