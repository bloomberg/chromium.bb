This is a testharness.js-based test.
FAIL Default bundlePolicy should be balanced pc.getConfiguration is not a function
FAIL new RTCPeerConnection({ bundlePolicy: undefined }) should have bundlePolicy balanced pc.getConfiguration is not a function
FAIL new RTCPeerConnection({ bundlePolicy: 'balanced' }) should succeed pc.getConfiguration is not a function
FAIL new RTCPeerConnection({ bundlePolicy: 'max-compat' }) should succeed pc.getConfiguration is not a function
FAIL new RTCPeerConnection({ bundlePolicy: 'max-bundle' }) should succeed pc.getConfiguration is not a function
PASS setConfiguration({}) with initial default bundlePolicy balanced should succeed 
PASS setConfiguration({}) with initial bundlePolicy balanced should succeed 
PASS setConfiguration({ bundlePolicy: balanced }) with initial default bundlePolicy balanced should succeed 
PASS setConfiguration({ bundlePolicy: 'balanced' }) with initial bundlePolicy balanced should succeed 
PASS setConfiguration({ bundlePolicy: 'max-compat' }) with initial bundlePolicy max-compat should succeed 
PASS setConfiguration({ bundlePolicy: 'max-bundle' }) with initial bundlePolicy max-bundle should succeed 
PASS new RTCPeerConnection({ bundlePolicy: null }) should throw TypeError 
PASS new RTCPeerConnection({ bundlePolicy: 'invalid' }) should throw TypeError 
FAIL setConfiguration({ bundlePolicy: 'max-compat' }) with initial bundlePolicy max-bundle should throw InvalidModificationError assert_own_property: expected property "setConfiguration" missing
FAIL setConfiguration({}) with initial bundlePolicy max-bundle should throw InvalidModificationError assert_own_property: expected property "setConfiguration" missing
Harness: the test ran to completion.

