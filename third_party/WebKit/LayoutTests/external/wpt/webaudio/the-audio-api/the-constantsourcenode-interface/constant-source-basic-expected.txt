This is a testharness.js-based test.
PASS # AUDIT TASK RUNNER STARTED.
PASS > [createConstantSource()] 
PASS   Factory method: node = context.createConstantSource() did not throw an exception.
PASS   Factory method: node instance of ConstantSourceNode is equal to true.
PASS   Factory method: node.numberOfInputs is equal to 0.
PASS   Factory method: node.numberOfOutputs is equal to 1.
PASS   Factory method: node.channelCount is equal to 2.
PASS   Factory method: node.channelCountMode is equal to max.
PASS   Factory method: node.channelInterpretation is equal to speakers.
PASS   Factory method: node.offset.value is equal to 1.
PASS   Factory method: node.offset.defaultValue is equal to 1.
PASS   Factory method: node.offset.minValue is equal to -3.4028234663852886e+38.
PASS   Factory method: node.offset.maxValue is equal to 3.4028234663852886e+38.
PASS < [createConstantSource()] All assertions passed. (total 11 assertions)
PASS > [new ConstantSourceNode()] 
PASS   Constructor: node = new ConstantSourceNode() did not throw an exception.
PASS   Constructor: node instance of ConstantSourceNode is equal to true.
PASS   Constructor: node.numberOfInputs is equal to 0.
PASS   Constructor: node.numberOfOutputs is equal to 1.
PASS   Constructor: node.channelCount is equal to 2.
PASS   Constructor: node.channelCountMode is equal to max.
PASS   Constructor: node.channelInterpretation is equal to speakers.
PASS   Constructor: node.offset.value is equal to 1.
PASS   Constructor: node.offset.defaultValue is equal to 1.
PASS   Constructor: node.offset.minValue is equal to -3.4028234663852886e+38.
PASS   Constructor: node.offset.maxValue is equal to 3.4028234663852886e+38.
PASS < [new ConstantSourceNode()] All assertions passed. (total 11 assertions)
PASS > [start/stop exceptions] 
PASS   start(NaN) threw EcmaScript error TypeError: "Failed to execute 'start' on 'AudioScheduledSourceNode': The provided double value is non-finite.".
PASS   start(Infinity) threw EcmaScript error TypeError: "Failed to execute 'start' on 'AudioScheduledSourceNode': The provided double value is non-finite.".
PASS   start(-Infinity) threw EcmaScript error TypeError: "Failed to execute 'start' on 'AudioScheduledSourceNode': The provided double value is non-finite.".
PASS   Calling stop() before start() threw InvalidStateError: "Failed to execute 'stop' on 'AudioScheduledSourceNode': cannot call stop without calling start first.".
FAIL X start(-1) threw "RangeError" instead of RangeError. assert_true: expected true got false
PASS   Calling start() twice threw InvalidStateError: "Failed to execute 'start' on 'AudioScheduledSourceNode': cannot call start more than once.".
FAIL X stop(-1) threw "RangeError" instead of RangeError. assert_true: expected true got false
PASS   stop(NaN) threw EcmaScript error TypeError: "Failed to execute 'stop' on 'AudioScheduledSourceNode': The provided double value is non-finite.".
PASS   stop(Infinity) threw EcmaScript error TypeError: "Failed to execute 'stop' on 'AudioScheduledSourceNode': The provided double value is non-finite.".
PASS   stop(-Infinity) threw EcmaScript error TypeError: "Failed to execute 'stop' on 'AudioScheduledSourceNode': The provided double value is non-finite.".
FAIL < [start/stop exceptions] 2 out of 10 assertions were failed. assert_true: expected true got false
FAIL # AUDIT TASK RUNNER FINISHED: 1 out of 3 tasks were failed. assert_true: expected true got false
Harness: the test ran to completion.

