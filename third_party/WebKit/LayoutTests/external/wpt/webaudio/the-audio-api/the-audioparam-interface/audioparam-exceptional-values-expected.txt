This is a testharness.js-based test.
Found 58 tests; 44 PASS, 14 FAIL, 0 TIMEOUT, 0 NOTRUN.
PASS # AUDIT TASK RUNNER STARTED.
PASS > [initialize] 
PASS   Creating context for testing did not throw an exception.
PASS < [initialize] All assertions passed. (total 1 assertions)
PASS > [test value] Test non-finite arguments for AudioParam value
PASS   gain.gain.setValueAtTime(Infinity,1) threw EcmaScript error TypeError: "Failed to execute 'setValueAtTime' on 'AudioParam': The provided float value is non-finite.".
PASS   gain.gain.linearRampToValueAtTime(Infinity,1) threw EcmaScript error TypeError: "Failed to execute 'linearRampToValueAtTime' on 'AudioParam': The provided float value is non-finite.".
PASS   gain.gain.exponentialRampToValueAtTime(Infinity,1) threw EcmaScript error TypeError: "Failed to execute 'exponentialRampToValueAtTime' on 'AudioParam': The provided float value is non-finite.".
PASS   gain.gain.setTargetAtTime(Infinity,1,1) threw EcmaScript error TypeError: "Failed to execute 'setTargetAtTime' on 'AudioParam': The provided float value is non-finite.".
PASS   gain.gain.setValueAtTime(-Infinity,1) threw EcmaScript error TypeError: "Failed to execute 'setValueAtTime' on 'AudioParam': The provided float value is non-finite.".
PASS   gain.gain.linearRampToValueAtTime(-Infinity,1) threw EcmaScript error TypeError: "Failed to execute 'linearRampToValueAtTime' on 'AudioParam': The provided float value is non-finite.".
PASS   gain.gain.exponentialRampToValueAtTime(-Infinity,1) threw EcmaScript error TypeError: "Failed to execute 'exponentialRampToValueAtTime' on 'AudioParam': The provided float value is non-finite.".
PASS   gain.gain.setTargetAtTime(-Infinity,1,1) threw EcmaScript error TypeError: "Failed to execute 'setTargetAtTime' on 'AudioParam': The provided float value is non-finite.".
PASS   gain.gain.setValueAtTime(NaN,1) threw EcmaScript error TypeError: "Failed to execute 'setValueAtTime' on 'AudioParam': The provided float value is non-finite.".
PASS   gain.gain.linearRampToValueAtTime(NaN,1) threw EcmaScript error TypeError: "Failed to execute 'linearRampToValueAtTime' on 'AudioParam': The provided float value is non-finite.".
PASS   gain.gain.exponentialRampToValueAtTime(NaN,1) threw EcmaScript error TypeError: "Failed to execute 'exponentialRampToValueAtTime' on 'AudioParam': The provided float value is non-finite.".
PASS   gain.gain.setTargetAtTime(NaN,1,1) threw EcmaScript error TypeError: "Failed to execute 'setTargetAtTime' on 'AudioParam': The provided float value is non-finite.".
PASS < [test value] All assertions passed. (total 12 assertions)
PASS > [test time] Test non-finite arguments for AudioParam time
PASS   gain.gain.setValueAtTime(1,Infinity) threw EcmaScript error TypeError: "Failed to execute 'setValueAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.linearRampToValueAtTime(1,Infinity) threw EcmaScript error TypeError: "Failed to execute 'linearRampToValueAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.exponentialRampToValueAtTime(1,Infinity) threw EcmaScript error TypeError: "Failed to execute 'exponentialRampToValueAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.setTargetAtTime(1,Infinity,1) threw EcmaScript error TypeError: "Failed to execute 'setTargetAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.setTargetAtTime(1,1,Infinity) threw EcmaScript error TypeError: "Failed to execute 'setTargetAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.setValueAtTime(1,-Infinity) threw EcmaScript error TypeError: "Failed to execute 'setValueAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.linearRampToValueAtTime(1,-Infinity) threw EcmaScript error TypeError: "Failed to execute 'linearRampToValueAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.exponentialRampToValueAtTime(1,-Infinity) threw EcmaScript error TypeError: "Failed to execute 'exponentialRampToValueAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.setTargetAtTime(1,-Infinity,1) threw EcmaScript error TypeError: "Failed to execute 'setTargetAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.setTargetAtTime(1,1,-Infinity) threw EcmaScript error TypeError: "Failed to execute 'setTargetAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.setValueAtTime(1,NaN) threw EcmaScript error TypeError: "Failed to execute 'setValueAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.linearRampToValueAtTime(1,NaN) threw EcmaScript error TypeError: "Failed to execute 'linearRampToValueAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.exponentialRampToValueAtTime(1,NaN) threw EcmaScript error TypeError: "Failed to execute 'exponentialRampToValueAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.setTargetAtTime(1,NaN,1) threw EcmaScript error TypeError: "Failed to execute 'setTargetAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.setTargetAtTime(1,1,NaN) threw EcmaScript error TypeError: "Failed to execute 'setTargetAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS < [test time] All assertions passed. (total 15 assertions)
PASS > [test setValueCurve] Test non-finite arguments for setValueCurveAtTime
PASS   gain.gain.setValueCurveAtTime([0,0,0],Infinity,1) threw EcmaScript error TypeError: "Failed to execute 'setValueCurveAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.setValueCurveAtTime([0,0,0],-Infinity,1) threw EcmaScript error TypeError: "Failed to execute 'setValueCurveAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.setValueCurveAtTime([0,0,0],NaN,1) threw EcmaScript error TypeError: "Failed to execute 'setValueCurveAtTime' on 'AudioParam': The provided double value is non-finite.".
PASS   gain.gain.setValueCurveAtTime([1,2,Infinity,3],1,1) threw EcmaScript error TypeError: "Failed to execute 'setValueCurveAtTime' on 'AudioParam': The provided float value is non-finite.".
PASS   gain.gain.setValueCurveAtTime([1,NaN,2,3],1,1) threw EcmaScript error TypeError: "Failed to execute 'setValueCurveAtTime' on 'AudioParam': The provided float value is non-finite.".
PASS < [test setValueCurve] All assertions passed. (total 5 assertions)
PASS > [special cases 1] Test exceptions for finite values
FAIL X gain.gain.setValueAtTime(1,-1) threw "RangeError" instead of RangeError. assert_true: expected true got false
FAIL X gain.gain.linearRampToValueAtTime(1,-1) threw "RangeError" instead of RangeError. assert_true: expected true got false
FAIL X gain.gain.exponentialRampToValueAtTime(1,-1) threw "RangeError" instead of RangeError. assert_true: expected true got false
FAIL X gain.gain.setTargetAtTime(1,-1,1) threw "RangeError" instead of RangeError. assert_true: expected true got false
FAIL X gain.gain.setTargetAtTime(1,1,-1) threw "RangeError" instead of RangeError. assert_true: expected true got false
FAIL X gain.gain.setValueCurveAtTime([0,0,0],-1,1) threw "RangeError" instead of RangeError. assert_true: expected true got false
FAIL X gain.gain.setValueCurveAtTime([0,0,0],1,-1) threw "RangeError" instead of RangeError. assert_true: expected true got false
FAIL X gain.gain.setValueCurveAtTime(curve, 1, 0) threw "RangeError" instead of RangeError. assert_true: expected true got false
FAIL < [special cases 1] 8 out of 8 assertions were failed. assert_true: expected true got false
PASS > [special cases 2] Test special cases for expeonentialRamp
FAIL X gain.gain.exponentialRampToValueAtTime(0,1) threw "RangeError" instead of RangeError. assert_true: expected true got false
FAIL X gain.gain.exponentialRampToValueAtTime(-1e-100,1) threw "RangeError" instead of RangeError. assert_true: expected true got false
FAIL X gain.gain.exponentialRampToValueAtTime(1e-100,1) threw "RangeError" instead of RangeError. assert_true: expected true got false
FAIL < [special cases 2] 3 out of 3 assertions were failed. assert_true: expected true got false
FAIL # AUDIT TASK RUNNER FINISHED: 2 out of 6 tasks were failed. assert_true: expected true got false
Harness: the test ran to completion.

