This is a testharness.js-based test.
Found 70 tests; 67 PASS, 3 FAIL, 0 TIMEOUT, 0 NOTRUN.
PASS # AUDIT TASK RUNNER STARTED.
PASS > [initialize] 
PASS   context = new OfflineAudioContext(...) did not throw an exception.
PASS < [initialize] All assertions passed. (total 1 assertions)
PASS > [invalid constructor] 
PASS   new AnalyserNode() threw TypeError: "Failed to construct 'AnalyserNode': 1 argument required, but only 0 present.".
PASS   new AnalyserNode(1) threw TypeError: "Failed to construct 'AnalyserNode': parameter 1 is not of type 'BaseAudioContext'.".
PASS   new AnalyserNode(context, 42) threw TypeError: "Failed to construct 'AnalyserNode': parameter 2 ('options') is not an object.".
PASS < [invalid constructor] All assertions passed. (total 3 assertions)
PASS > [default constructor] 
PASS   node0 = new AnalyserNode(context) did not throw an exception.
PASS   node0 instanceof AnalyserNode is equal to true.
PASS   node0.numberOfInputs is equal to 1.
PASS   node0.numberOfOutputs is equal to 1.
FAIL X node0.channelCount is not equal to 2. Got 1. assert_true: expected true got false
PASS   node0.channelCountMode is equal to max.
PASS   node0.channelInterpretation is equal to speakers.
PASS   node0.fftSize is equal to 2048.
PASS   node0.frequencyBinCount is equal to 1024.
PASS   node0.minDecibels is equal to -100.
PASS   node0.maxDecibels is equal to -30.
PASS   node0.smoothingTimeConstant is equal to 0.8.
FAIL < [default constructor] 1 out of 12 assertions were failed. assert_true: expected true got false
PASS > [test AudioNodeOptions] 
PASS   new AnalyserNode(c, {channelCount: 17}} did not throw an exception.
PASS   node.channelCount is equal to 17.
PASS   new AnalyserNode(c, {channelCount: 0}) threw NotSupportedError: "Failed to construct 'AnalyserNode': The channel count provided (0) is outside the range [1, 32].".
PASS   new AnalyserNode(c, {channelCount: 99}) threw NotSupportedError: "Failed to construct 'AnalyserNode': The channel count provided (99) is outside the range [1, 32].".
PASS   new AnalyserNode(c, {channelCountMode: "max"} did not throw an exception.
PASS   node.channelCountMode is equal to max.
PASS   new AnalyserNode(c, {channelCountMode: "max"}) did not throw an exception.
PASS   node.channelCountMode after valid setter is equal to max.
PASS   new AnalyserNode(c, {channelCountMode: "clamped-max"}) did not throw an exception.
PASS   node.channelCountMode after valid setter is equal to clamped-max.
PASS   new AnalyserNode(c, {channelCountMode: "explicit"}) did not throw an exception.
PASS   node.channelCountMode after valid setter is equal to explicit.
PASS   new AnalyserNode(c, {channelCountMode: "foobar"} threw TypeError: "Failed to construct 'AnalyserNode': The provided value 'foobar' is not a valid enum value of type ChannelCountMode.".
PASS   node.channelCountMode after invalid setter is equal to explicit.
PASS   new AnalyserNode(c, {channelInterpretation: "speakers"}) did not throw an exception.
PASS   node.channelInterpretation is equal to speakers.
PASS   new AnalyserNode(c, {channelInterpretation: "discrete"}) did not throw an exception.
PASS   node.channelInterpretation is equal to discrete.
PASS   new AnalyserNode(c, {channelInterpretation: "foobar"}) threw TypeError: "Failed to construct 'AnalyserNode': The provided value 'foobar' is not a valid enum value of type ChannelInterpretation.".
PASS   node.channelInterpretation after invalid setter is equal to discrete.
PASS < [test AudioNodeOptions] All assertions passed. (total 20 assertions)
PASS > [constructor with options] 
PASS   node1 = new AnalyserNode(c, {"fftSize":32,"maxDecibels":1,"minDecibels":-13,"smoothingTimeConstant":0.125}) did not throw an exception.
PASS   node1 instanceof AnalyserNode is equal to true.
PASS   node1.fftSize is equal to 32.
PASS   node1.maxDecibels is equal to 1.
PASS   node1.minDecibels is equal to -13.
PASS   node1.smoothingTimeConstant is equal to 0.125.
PASS < [constructor with options] All assertions passed. (total 6 assertions)
PASS > [construct invalid options] 
PASS   node = new AnalyserNode(c, { fftSize: 33 }) threw IndexSizeError: "Failed to construct 'AnalyserNode': The value provided (33) is not a power of two.".
PASS   node = new AnalyserNode(c, { maxDecibels: -500 }) threw IndexSizeError: "Failed to construct 'AnalyserNode': maxDecibels (-500) must be greater than or equal to minDecibels ( -100).".
PASS   node = new AnalyserNode(c, { minDecibels: -10 }) threw IndexSizeError: "Failed to construct 'AnalyserNode': maxDecibels (-30) must be greater than or equal to minDecibels ( -10).".
PASS   node = new AnalyserNode(c, { smoothingTimeConstant: 2 }) threw IndexSizeError: "Failed to construct 'AnalyserNode': The smoothing value provided (2) is outside the range [0, 1].".
PASS   node = new AnalyserNode(c, { frequencyBinCount: 33 }) did not throw an exception.
PASS   node.frequencyBinCount is equal to 1024.
PASS < [construct invalid options] All assertions passed. (total 6 assertions)
PASS > [setting min/max] 
PASS   node = new AnalyserNode(c, {"minDecibels":-10,"maxDecibels":20}) did not throw an exception.
PASS   node = new AnalyserNode(c, {"maxDecibels":20,"minDecibels":-10}) did not throw an exception.
PASS   node = new AnalyserNode(c, {"minDecibels":-200,"maxDecibels":-150}) did not throw an exception.
PASS   node = new AnalyserNode(c, {"maxDecibels":-150,"minDecibels":-200}) did not throw an exception.
PASS   node = new AnalyserNode(c, {"maxDecibels":-150,"minDecibels":-10}) threw IndexSizeError: "Failed to construct 'AnalyserNode': maxDecibels (-150) must be greater than or equal to minDecibels ( -10).".
PASS   node = new AnalyserNode(c, {"minDecibels":-10,"maxDecibels":-150}) threw IndexSizeError: "Failed to construct 'AnalyserNode': maxDecibels (-150) must be greater than or equal to minDecibels ( -10).".
PASS < [setting min/max] All assertions passed. (total 6 assertions)
FAIL # AUDIT TASK RUNNER FINISHED: 1 out of 7 tasks were failed. assert_true: expected true got false
Harness: the test ran to completion.

