This is a testharness.js-based test.
PASS Use NewTarget's prototype, not the one stored at definition time
PASS Rethrow any exceptions thrown while getting the prototype
PASS If prototype is not object (null), derives the fallback from NewTarget's realm (autonomous custom elements)
PASS If prototype is not object (undefined), derives the fallback from NewTarget's realm (autonomous custom elements)
PASS If prototype is not object (5), derives the fallback from NewTarget's realm (autonomous custom elements)
PASS If prototype is not object (string), derives the fallback from NewTarget's realm (autonomous custom elements)
FAIL If prototype is not object (null), derives the fallback from NewTarget's realm (customized built-in elements) assert_equals: Must use the HTMLParagraphElement from the realm of NewTarget expected object "[object HTMLParagraphElement]" but got object "[object HTMLElement]"
FAIL If prototype is not object (undefined), derives the fallback from NewTarget's realm (customized built-in elements) assert_equals: Must use the HTMLParagraphElement from the realm of NewTarget expected object "[object HTMLParagraphElement]" but got object "[object HTMLElement]"
FAIL If prototype is not object (5), derives the fallback from NewTarget's realm (customized built-in elements) assert_equals: Must use the HTMLParagraphElement from the realm of NewTarget expected object "[object HTMLParagraphElement]" but got object "[object HTMLElement]"
FAIL If prototype is not object (string), derives the fallback from NewTarget's realm (customized built-in elements) assert_equals: Must use the HTMLParagraphElement from the realm of NewTarget expected object "[object HTMLParagraphElement]" but got object "[object HTMLElement]"
Harness: the test ran to completion.

