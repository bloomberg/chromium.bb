This is a testharness.js-based test.
PASS start: errors in start cause WritableStream constructor to throw
PASS close: throwing method should cause writer close() and ready to reject
PASS close: returning a rejected promise should cause writer close() and ready to reject
FAIL close: throwing getter should cause constructor to throw assert_throws: constructor should throw function "() => new WritableStream({
    get close() {
      throw error1;
    }
  })" did not throw
FAIL write: throwing getter should cause write() and closed to reject assert_throws: constructor should throw function "() => new WritableStream({
    get write() {
      throw error1;
    }
  })" did not throw
PASS write: throwing method should cause write() and closed to reject
PASS write: returning a promise that becomes rejected after the writer write() should cause writer write() and ready to reject
PASS write: returning a rejected promise (second write) should cause writer write() and ready to reject
FAIL abort: non-function abort method with .apply assert_throws: constructor should throw function "() => new WritableStream({
    abort: { apply() {} }
  })" did not throw
FAIL abort: throwing getter should cause abort() and closed to reject assert_throws: constructor should throw function "() => new WritableStream({
    get abort() {
      throw error1;
    }
  })" did not throw
FAIL abort: throwing method should cause abort() and closed to reject assert_throws: closed should reject with abortReason function "function() { throw e }" threw object "TypeError: The stream is in the process of being aborted" ("TypeError") expected object "Error: different string" ("Error")
Harness: the test ran to completion.

