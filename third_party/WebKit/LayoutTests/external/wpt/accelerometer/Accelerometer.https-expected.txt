This is a testharness.js-based test.
PASS Accelerometer: Test that 'onreading' is called and sensor reading is valid
PASS Accelerometer: sensor reading is correct
PASS Accelerometer: sensor timestamp is updated when time passes
PASS Accelerometer: Test that sensor can be successfully created and its states are correct.
PASS Accelerometer: sensor.start() returns undefined
PASS Accelerometer: no exception is thrown when calling start() on already started sensor
PASS Accelerometer: sensor.stop() returns undefined
PASS Accelerometer: no exception is thrown when calling stop() on already stopped sensor
PASS Accelerometer: Test that fresh reading is fetched on start()
PASS Accelerometer: frequency hint works
PASS Accelerometer: sensor receives suspend / resume notifications when  cross-origin subframe is focused
FAIL Accelerometer: throw 'TypeError' if frequency is invalid assert_throws: when freq is undefined function "() => { new sensorType({frequency: freq}) }" did not throw
PASS Accelerometer: sensor reading is correct when options.referenceFrame is 'screen'
PASS Accelerometer: throw 'TypeError' if referenceFrame is not one of enumeration values
FAIL GravitySensor: Test that 'onreading' is called and sensor reading is valid assert_true: expected true got false
FAIL GravitySensor: sensor reading is correct assert_true: expected true got false
FAIL GravitySensor: sensor timestamp is updated when time passes assert_true: expected true got false
FAIL GravitySensor: Test that sensor can be successfully created and its states are correct. assert_true: expected true got false
FAIL GravitySensor: sensor.start() returns undefined assert_true: expected true got false
FAIL GravitySensor: no exception is thrown when calling start() on already started sensor assert_true: expected true got false
FAIL GravitySensor: sensor.stop() returns undefined assert_true: expected true got false
FAIL GravitySensor: no exception is thrown when calling stop() on already stopped sensor assert_true: expected true got false
FAIL GravitySensor: Test that fresh reading is fetched on start() assert_true: expected true got false
FAIL GravitySensor: frequency hint works assert_true: expected true got false
FAIL GravitySensor: sensor receives suspend / resume notifications when  cross-origin subframe is focused assert_true: expected true got false
FAIL GravitySensor: throw 'TypeError' if frequency is invalid assert_true: expected true got false
FAIL GravitySensor: sensor reading is correct when options.referenceFrame is 'screen' assert_true: expected true got false
FAIL GravitySensor: throw 'TypeError' if referenceFrame is not one of enumeration values assert_true: expected true got false
PASS LinearAccelerationSensor: Test that 'onreading' is called and sensor reading is valid
PASS LinearAccelerationSensor: sensor reading is correct
PASS LinearAccelerationSensor: sensor timestamp is updated when time passes
PASS LinearAccelerationSensor: Test that sensor can be successfully created and its states are correct.
PASS LinearAccelerationSensor: sensor.start() returns undefined
PASS LinearAccelerationSensor: no exception is thrown when calling start() on already started sensor
PASS LinearAccelerationSensor: sensor.stop() returns undefined
PASS LinearAccelerationSensor: no exception is thrown when calling stop() on already stopped sensor
PASS LinearAccelerationSensor: Test that fresh reading is fetched on start()
PASS LinearAccelerationSensor: frequency hint works
PASS LinearAccelerationSensor: sensor receives suspend / resume notifications when  cross-origin subframe is focused
FAIL LinearAccelerationSensor: throw 'TypeError' if frequency is invalid assert_throws: when freq is undefined function "() => { new sensorType({frequency: freq}) }" did not throw
PASS LinearAccelerationSensor: sensor reading is correct when options.referenceFrame is 'screen'
PASS LinearAccelerationSensor: throw 'TypeError' if referenceFrame is not one of enumeration values
Harness: the test ran to completion.

