Tests JSON parsing.


Input: plain text
Invalid JSON

Input: {"x": 5, "y": false, "z":"foo"}
Prefix: 
Suffix: 
Data: {"x":5,"y":false,"z":"foo"}

Input: {"bar": [,,,1, 2, 3,,,], "baz": {"data": []}}
Prefix: 
Suffix: 
Data: {"bar":[null,null,null,1,2,3,null,null],"baz":{"data":[]}}

Input: [[],[],[]]
Prefix: 
Suffix: 
Data: [[],[],[]]

Input: /* GUARD */callback({"a": []]});
Invalid JSON

Input: foo({a = 5});
Invalid JSON

Input: (function(){return {"a": []}})()
Invalid JSON

Input: {"name": "value"}
Prefix: 
Suffix: 
Data: {"name":"value"}

Input: while(1); {"name": "value"}
Prefix: while(1); 
Suffix: 
Data: {"name":"value"}

Input: [, "foo", -4.2, true, false, null]
Prefix: 
Suffix: 
Data: [null,"foo",-4.2,true,false,null]

Input: [{"foo": {}, "bar": []},[[],{}]]
Prefix: 
Suffix: 
Data: [{"foo":{},"bar":[]},[[],{}]]

Input: /* vanilla */ run ( [1, 2, 3] ) ;
Prefix: /* vanilla */ run ( 
Suffix:  ) ;
Data: [1,2,3]

Input: ["A\"B\u0020C\nD\\E\u04ABF"]
Prefix: 
Suffix: 
Data: ["A\"B C\nD\\EÒ«F"]

Input: Text with with {}) inside
Invalid JSON

Input: <html>404 Page not found with foo({}) inside</html>
Invalid JSON

Input: /* vanilla prefix too large to be considered prefix Ok? */ run([1, 2, 3]); // since it is unlikely JSONP
Invalid JSON

Input: ["This is a really long string"]{"This is also a very long string":"short"}
Prefix: ["This is a really long string"]
Suffix: 
Data: {"This is also a very long string":"short"}

Input: {010:4}
Prefix: 
Suffix: 
Data: {"8":4}

Input: {"foo":bar}
Invalid JSON

Input: {"foo":<"bar"}
Invalid JSON

Input: {"foo":"b\ar"}
Prefix: 
Suffix: 
Data: {"foo":"bar"}

Input: ["foo"]
Prefix: 
Suffix: 
Data: ["foo"]

Input: {foo:"bar"}
Prefix: 
Suffix: 
Data: {"foo":"bar"}

Input: { 10 : 4 }
Prefix: 
Suffix: 
Data: {"10":4}

Input: { "foo" : 010 }
Prefix: 
Suffix: 
Data: {"foo":8}

Input: {"foo": 3e3}
Prefix: 
Suffix: 
Data: {"foo":3000}

Input: {"foo": 3e3,}
Prefix: 
Suffix: 
Data: {"foo":3000}

Input: [,,false, null, true,1,0,,,]
Prefix: 
Suffix: 
Data: [null,null,false,null,true,1,0,null,null]

Input: [,,,]
Prefix: 
Suffix: 
Data: [null,null,null]

Input: {foo:	{bar: null,**CR**},bar: [
],foo1: 1,foo2:**CR**
 -1,
**CR**foo3: -1e-30,foo4: 1E+30,foo5: -1E+1,foo6: "bar","foo7": false,"\"\f\o\o8": true,'fo\'o9': undefined,"foo10": ["bar", null],"": -Infinity,foo11: {},foo12: [{}],}
Prefix: 
Suffix: 
Data: {"foo":{"bar":null},"bar":[],"foo1":1,"foo2":-1,"foo3":-1e-30,"foo4":1e+30,"foo5":-10,"foo6":"bar","foo7":false,"\"\foo8":true,"fo'o9":"!<undefined>!","foo10":["bar",null],"":"!<-Infinity>!","foo11":{},"foo12":[{}]}

Input: 
Invalid JSON

Input: 

Invalid JSON

Input: []
Prefix: 
Suffix: 
Data: []

Input: {}
Prefix: 
Suffix: 
Data: {}

Input: ()
Invalid JSON

Input: foobar
Invalid JSON

Input: "foobar"
Invalid JSON

Input: "foo" "bar"
Invalid JSON

Input: [010, 10, 0x10]
Prefix: 
Suffix: 
Data: [8,10,16]

Input: {010: 010, 0x10: 0x10, 10: 10}
Prefix: 
Suffix: 
Data: {"8":8,"10":10,"16":16}

Input: {-010: -010}
Invalid JSON

Input: {-0x10: -0x10}
Invalid JSON

Input: {-10: -10}
Invalid JSON

Input: {010: -010, 0x10: -0x10, 10: -10}
Prefix: 
Suffix: 
Data: {"8":-8,"10":-10,"16":-16}

Input: [10000, 0x1000000, 0xfEaB3, 01023456, 1234567901, 123.456, -123.456,12.33E-5, 123.456e+5, 123.456e5]
Prefix: 
Suffix: 
Data: [10000,16777216,1043123,272174,1234567901,123.456,-123.456,0.0001233,12345600,12345600]

Input: ["S\"0**NULL**me\"teXt"]
Prefix: 
Suffix: 
Data: ["S\"0\u0000me\"teXt"]

Input:    
Invalid JSON

Input:    [ {} ]  
Prefix:    
Suffix:   
Data: [{}]

Input: var i=0;
Invalid JSON

Input: while(true) {}
Prefix: while(true) 
Suffix: 
Data: {}

Input: while(true); {d:5}
Prefix: while(true); 
Suffix: 
Data: {"d":5}

Input: while(true); {d:-5}
Prefix: while(true); 
Suffix: 
Data: {"d":-5}

Input: while(true); {d:[-5]}
Prefix: while(true); 
Suffix: 
Data: {"d":[-5]}

Input: while(true); {d:[-5,-0,03,0xF,0xFF]}
Prefix: while(true); 
Suffix: 
Data: {"d":[-5,0,3,15,255]}

Input: {d:function () {var i;}}
Invalid JSON

Input: {5:d}
Invalid JSON

Input: [-{},-[],{},[]]
Invalid JSON

Input: [-foo, foo, -bar, bar]
Invalid JSON

Input: [function(){}, -function(){}]
Invalid JSON

Input: {-true:0}
Invalid JSON

Input: {true: 0}
Prefix: 
Suffix: 
Data: {"true":0}

Input: [-true]
Invalid JSON

Input: [true]
Prefix: 
Suffix: 
Data: [true]

Input: [!true]
Invalid JSON

Input: [~true]
Invalid JSON

Input: {length: 0}
Prefix: 
Suffix: 
Data: {"length":0}

Input: [true, false]
Prefix: 
Suffix: 
Data: [true,false]

Input: [true, -false]
Invalid JSON

Input: [true, false, null, undefined, {}, [], "", "1", '', '1', 1, -1, -0, 0]
Prefix: 
Suffix: 
Data: [true,false,null,"!<undefined>!",{},[],"","1","","1",1,-1,0,0]

Input: [-{}, !{}, -[{}], ![{}]]
Invalid JSON

Input: [-1, -0, +1, +0, +-1, -!~0]
Invalid JSON

Input: [0xFF, -0xFF, +0xFF, 1e1, -1e1, 1E-1, -1E-1, 010, -010, +010]
Prefix: 
Suffix: 
Data: [255,-255,255,10,-10,0.1,-0.1,8,-8,8]

Input: {
            foo: 'bar',
            while: true,

            this: 'is a \
multi-line string',

            // this is an inline comment
            here: 'is another', // inline comment

            /* this is a block comment
               that continues on another line */

            hex: 0xDEADbeef,
            half: .5,
            delta: +10,
            to: Infinity,   // and beyond!

            finally: 'a trailing comma',
            oh: [
                "we shouldn't forget",
                'arrays can have',
                'trailing commas too',
            ],
        }
Prefix: 
Suffix: 
Data: {"foo":"bar","while":true,"this":"is a multi-line string","here":"is another","hex":3735928559,"half":0.5,"delta":10,"to":"!<Infinity>!","finally":"a trailing comma","oh":["we shouldn't forget","arrays can have","trailing commas too"]}

