{
  settings: {
    export_symbol: "CORE_EXPORT",
    include_path: "core/inspector",
    includes: [
      "core/probe/CoreProbes.h",
    ],
  },
  observers: {
    Animation: {
      probes: [
        "animationPlayStateChanged",
        "didClearDocumentOfWindowObject",
        "didCreateAnimation",
      ]
    },
    ApplicationCache: {
      probes: [
        "networkStateChanged",
        "updateApplicationCacheStatus",
      ]
    },
    CSS: {
      probes: [
        "activeStyleSheetsUpdated",
        "documentDetached",
        "fontsUpdated",
        "forcePseudoState",
        "mediaQueryResultChanged",
      ]
    },
    DOM: {
      probes: [
        "characterDataModified",
        "didCommitLoad",
        "didInsertDOMNode",
        "didInvalidateStyleAttr",
        "didModifyDOMAttr",
        "didPerformElementShadowDistribution",
        "didPerformSlotDistribution",
        "didPushShadowRoot",
        "didRemoveDOMAttr",
        "domContentLoadedEventFired",
        "frameDocumentUpdated",
        "pseudoElementCreated",
        "pseudoElementDestroyed",
        "willModifyDOMAttr",
        "willPopShadowRoot",
        "willRemoveDOMNode",
      ]
    },
    DOMDebugger: {
      probes: [
        "breakableLocation",
        "didCreateCanvasContext",
        "didFireWebGLError",
        "didFireWebGLErrorOrWarning",
        "didFireWebGLWarning",
        "didInsertDOMNode",
        "didInvalidateStyleAttr",
        "ExecuteScript",
        "scriptExecutionBlockedByCSP",
        "UserCallback",
        "willInsertDOMNode",
        "willModifyDOMAttr",
        "willRemoveDOMNode",
        "willSendXMLHttpOrFetchNetworkRequest",
      ]
    },
    LayerTree: {
      probes: [
        "didPaint",
        "layerTreeDidChange",
      ]
    },
    Log: {
      probes: [
        "consoleMessageAdded",
      ]
    },
    Network: {
      class: "InspectorNetworkAgent",
      probes: [
        "applyUserAgentOverride",
        "detachClientRequest",
        "didBlockRequest",
        "didChangeResourcePriority",
        "didCloseWebSocket",
        "didCommitLoad",
        "didCreateWebSocket",
        "didFailFetch",
        "didFailLoading",
        "didFailXHRLoading",
        "didFinishEventSourceRequest",
        "didFinishFetch",
        "didFinishLoading",
        "didFinishXHRLoading",
        "didReceiveCORSRedirectResponse",
        "didReceiveData",
        "didReceiveEncodedDataLength",
        "didReceiveResourceResponse",
        "didReceiveScriptResponse",
        "didReceiveWebSocketFrame",
        "didReceiveWebSocketFrameError",
        "didReceiveWebSocketHandshakeResponse",
        "didSendWebSocketFrame",
        "documentThreadableLoaderFailedToStartLoadingForClient",
        "documentThreadableLoaderStartedLoadingForClient",
        "frameClearedScheduledClientNavigation",
        "frameClearedScheduledNavigation",
        "frameScheduledClientNavigation",
        "frameScheduledNavigation",
        "markResourceAsCached",
        "scriptImported",
        "shouldBlockRequest",
        "shouldForceCORSPreflight",
        "willDispatchEventSourceEvent",
        "willLoadXHR",
        "willSendEventSourceRequest",
        "willSendRequest",
        "willSendWebSocketHandshakeRequest",
        "willStartFetch",
      ]
    },
    Page: {
      probes: [
        "didChangeViewport",
        "didClearDocumentOfWindowObject",
        "willCommitLoad",
        "didResizeMainFrame",
        "didRunJavaScriptDialog",
        "domContentLoadedEventFired",
        "frameAttachedToParent",
        "frameClearedScheduledNavigation",
        "frameDetachedFromParent",
        "frameScheduledNavigation",
        "frameStartedLoading",
        "frameStoppedLoading",
        "lifecycleEvent",
        "loadEventFired",
        "paintTiming",
        "RecalculateStyle",
        "UpdateLayout",
        "willRunJavaScriptDialog",
        "windowCreated",
      ]
    },
    Performance: {
      class: "PerformanceMonitor",
      include_path: "core/frame",
      probes: [
        "CallFunction",
        "ExecuteScript",
        "RecalculateStyle",
        "UpdateLayout",
        "UserCallback",
        "V8Compile",
        "didFailLoading",
        "didFinishLoading",
        "documentWriteFetchScript",
        "domContentLoadedEventFired",
        "willSendRequest",
      ]
    },
    PerformanceMetrics: {
      class: "InspectorPerformanceAgent",
      probes: [
        "consoleTimeStamp",
        "CallFunction",
        "ExecuteScript",
        "RecalculateStyle",
        "UpdateLayout",
      ]
    },
    TraceEvents: {
      class: "InspectorTraceEvents",
      probes: [
        "CallFunction",
        "ParseHTML",
        "didFailLoading",
        "didFinishLoading",
        "didReceiveData",
        "didReceiveResourceResponse",
        "paintTiming",
        "willSendRequest",
      ]
    },
    Tracing: {
      probes: [
        "frameStartedLoading",
        "frameStoppedLoading",
      ]
    },
    Worker: {
      probes: [
        "didStartWorker",
        "shouldWaitForDebuggerOnWorkerStart",
        "workerTerminated",
      ]
    },
  }
}
