{% filter format_blink_cpp_source_code %}

{% include 'copyright_block.txt' %}

#include "{{this_include_header_name}}"

{% for filename in cpp_includes %}
#include "{{filename}}"
{% endfor %}

namespace blink {

{# TODO(yukishiino): Remove |method.is_custom| once we support the author
   function\'s return value. #}
{% for method in methods if not method.is_custom %}

{% set return_success = 'return' if method.cpp_type == 'void' else 'return true' %}
{% set return_failure = 'return' if method.cpp_type == 'void' else 'return false' %}

{{method.cpp_type}} {{v8_class}}::{{method.name}}({{method.argument_declarations | join(', ')}}) {
  if (!IsCallbackFunctionRunnable(CallbackRelevantScriptState())) {
    {{return_success}};
  }

  ScriptState::Scope scope(CallbackRelevantScriptState());

  v8::Local<v8::Object> argument_creation_context =
      CallbackRelevantScriptState()->GetContext()->Global();
  ALLOW_UNUSED_LOCAL(argument_creation_context);
  {% for argument in method.arguments %}
  v8::Local<v8::Value> {{argument.handle}} = {{argument.cpp_value_to_v8_value}};
  {% endfor %}
  {% if method.arguments %}
  v8::Local<v8::Value> argv[] = { {{method.arguments | join(', ', 'handle')}} };
  {% else %}
  {# Empty array initializers are illegal, and don\'t compile in MSVC. #}
  v8::Local<v8::Value> *argv = 0;
  {% endif %}

  v8::Isolate* isolate = GetIsolate();

  v8::TryCatch exceptionCatcher(isolate);
  exceptionCatcher.SetVerbose(true);

  v8::Local<v8::Value> call_result;
  if (!V8ScriptRunner::CallFunction(
          CallbackObject().As<v8::Function>(),
          ExecutionContext::From(CallbackRelevantScriptState()),
          v8::Undefined(isolate),
          {{method.arguments | length}},
          argv,
          isolate).ToLocal(&call_result)) {
    {{return_failure}};
  }

  // TODO(yukishiino): This function throws the return value away, and it's
  // wrong. This function should return the return value converting it from
  // v8::Value to an native type.
  ALLOW_UNUSED_LOCAL(call_result);
  {{return_success}};
}

{% endfor %}

}  // namespace blink

{% endfilter %}{# format_blink_cpp_source_code #}
