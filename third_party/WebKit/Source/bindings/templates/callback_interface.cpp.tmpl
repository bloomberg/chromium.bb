{% filter format_blink_cpp_source_code %}

{% include 'copyright_block.txt' %}
#include "{{v8_class}}.h"

{% for filename in cpp_includes %}
#include "{{filename}}"
{% endfor %}

namespace blink {

{{v8_class}}::{{v8_class}}(v8::Local<v8::Function> callback, ScriptState* scriptState)
    : m_scriptState(scriptState) {
  m_callback.Set(scriptState->GetIsolate(), callback);
}

{{v8_class}}::~{{v8_class}}() {}

DEFINE_TRACE({{v8_class}}) {
  {{cpp_class}}::Trace(visitor);
}

{% for method in methods if not method.is_custom %}
{{method.cpp_type}} {{v8_class}}::{{method.name}}({{method.argument_declarations | join(', ')}}) {
  {% set return_default = 'return true'
         if method.idl_type == 'boolean' else 'return' %}{# void #}
  ExecutionContext* executionContext =
      ExecutionContext::From(m_scriptState.Get());
  DCHECK(!executionContext->IsContextSuspended());
  if (!executionContext || executionContext->IsContextDestroyed())
    {{return_default}};
  if (!m_scriptState->ContextIsValid())
    {{return_default}};

  ScriptState::Scope scope(m_scriptState.Get());
  {% if method.call_with_this_handle %}
  v8::Local<v8::Value> thisHandle = thisValue.V8Value();
  {% endif %}

  {% for argument in method.arguments %}
  v8::Local<v8::Value> {{argument.handle}} = {{argument.cpp_value_to_v8_value}};
  {% endfor %}
  {% if method.arguments %}
  v8::Local<v8::Value> argv[] = { {{method.arguments | join(', ', 'handle')}} };
  {% else %}
  {# Empty array initializers are illegal, and don\'t compile in MSVC. #}
  v8::Local<v8::Value> *argv = 0;
  {% endif %}

  v8::Isolate* isolate = m_scriptState->GetIsolate();
  {% set this_handle_parameter = 'thisHandle'
         if method.call_with_this_handle else 'v8::Undefined(isolate)' %}
  {% if method.idl_type == 'boolean' %}
  v8::TryCatch exceptionCatcher(isolate);
  exceptionCatcher.SetVerbose(true);
  V8ScriptRunner::CallFunction(m_callback.NewLocal(isolate),
                               executionContext,
                               {{this_handle_parameter}},
                               {{method.arguments | length}},
                               argv,
                               isolate);
  return !exceptionCatcher.HasCaught();
  {% else %}{# void #}
  V8ScriptRunner::CallFunction(m_callback.NewLocal(isolate),
                               ExecutionContext::From(m_scriptState.Get()),
                               {{this_handle_parameter}},
                               {{method.arguments | length}},
                               argv,
                               isolate);
  {% endif %}
}

{% endfor %}
}  // namespace blink

{% endfilter %}{# format_blink_cpp_source_code #}
