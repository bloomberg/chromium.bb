{% filter format_blink_cpp_source_code %}

{% include 'copyright_block.txt' %}
#ifndef {{v8_class}}_h
#define {{v8_class}}_h

{% for filename in header_includes %}
#include "{{filename}}"
{% endfor %}

namespace blink {

class {{v8_class}} final : public {{cpp_class}} {
 public:
  static {{v8_class}}* Create(v8::Local<v8::Function> callback, ScriptState* scriptState) {
    return new {{v8_class}}(callback, scriptState);
  }

  ~{{v8_class}}() override;

  DECLARE_VIRTUAL_TRACE();

{% for method in methods %}
  {{method.cpp_type}} {{method.name}}({{method.argument_declarations | join(', ')}}) override;
{% endfor %}

 private:
  {{exported}}{{v8_class}}(v8::Local<v8::Function>, ScriptState*);

  ScopedPersistent<v8::Function> callback_;
  RefPtr<ScriptState> script_state_;
};

}
#endif  // {{v8_class}}_h

{% endfilter %}{# format_blink_cpp_source_code #}
