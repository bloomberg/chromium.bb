# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//testing/libfuzzer/fuzzer_test.gni")
import("//third_party/WebKit/Source/bindings/bindings.gni")
import("//third_party/WebKit/Source/bindings/scripts/scripts.gni")
import("//third_party/WebKit/Source/core/core.gni")
import("//third_party/WebKit/Source/core/core_idl_files.gni")

visibility = [ "//third_party/WebKit/Source/*" ]

bindings_core_generated_union_type_files = [
  "$bindings_core_v8_output_dir/AddEventListenerOptionsOrBoolean.cpp",
  "$bindings_core_v8_output_dir/AddEventListenerOptionsOrBoolean.h",
  "$bindings_core_v8_output_dir/ArrayBufferOrArrayBufferView.cpp",
  "$bindings_core_v8_output_dir/ArrayBufferOrArrayBufferView.h",
  "$bindings_core_v8_output_dir/ArrayBufferOrArrayBufferViewOrBlobOrDocumentOrStringOrFormDataOrURLSearchParams.cpp",
  "$bindings_core_v8_output_dir/ArrayBufferOrArrayBufferViewOrBlobOrDocumentOrStringOrFormDataOrURLSearchParams.h",
  "$bindings_core_v8_output_dir/ArrayBufferOrArrayBufferViewOrBlobOrUSVString.cpp",
  "$bindings_core_v8_output_dir/ArrayBufferOrArrayBufferViewOrBlobOrUSVString.h",
  "$bindings_core_v8_output_dir/BooleanOrByteStringByteStringRecord.cpp",
  "$bindings_core_v8_output_dir/BooleanOrByteStringByteStringRecord.h",
  "$bindings_core_v8_output_dir/CSSStyleValueOrCSSStyleValueSequence.cpp",
  "$bindings_core_v8_output_dir/CSSStyleValueOrCSSStyleValueSequence.h",
  "$bindings_core_v8_output_dir/CSSStyleValueOrCSSStyleValueSequenceOrString.cpp",
  "$bindings_core_v8_output_dir/CSSStyleValueOrCSSStyleValueSequenceOrString.h",
  "$bindings_core_v8_output_dir/DictionarySequenceOrDictionary.cpp",
  "$bindings_core_v8_output_dir/DictionarySequenceOrDictionary.h",
  "$bindings_core_v8_output_dir/DoubleOrAutoKeyword.cpp",
  "$bindings_core_v8_output_dir/DoubleOrAutoKeyword.h",
  "$bindings_core_v8_output_dir/DoubleOrDoubleSequence.cpp",
  "$bindings_core_v8_output_dir/DoubleOrDoubleSequence.h",
  "$bindings_core_v8_output_dir/DoubleOrInternalEnum.cpp",
  "$bindings_core_v8_output_dir/DoubleOrInternalEnum.h",
  "$bindings_core_v8_output_dir/DoubleOrScrollTimelineAutoKeyword.cpp",
  "$bindings_core_v8_output_dir/DoubleOrScrollTimelineAutoKeyword.h",
  "$bindings_core_v8_output_dir/DoubleOrString.cpp",
  "$bindings_core_v8_output_dir/DoubleOrString.h",
  "$bindings_core_v8_output_dir/DoubleOrStringOrStringSequence.cpp",
  "$bindings_core_v8_output_dir/DoubleOrStringOrStringSequence.h",
  "$bindings_core_v8_output_dir/EventListenerOptionsOrBoolean.cpp",
  "$bindings_core_v8_output_dir/EventListenerOptionsOrBoolean.h",
  "$bindings_core_v8_output_dir/FileOrUSVString.cpp",
  "$bindings_core_v8_output_dir/FileOrUSVString.h",
  "$bindings_core_v8_output_dir/FloatOrStringElementRecord.cpp",
  "$bindings_core_v8_output_dir/FloatOrStringElementRecord.h",
  "$bindings_core_v8_output_dir/HTMLElementOrLong.cpp",
  "$bindings_core_v8_output_dir/HTMLElementOrLong.h",
  "$bindings_core_v8_output_dir/ImageBitmapSource.cpp",
  "$bindings_core_v8_output_dir/ImageBitmapSource.h",
  "$bindings_core_v8_output_dir/HTMLOptionElementOrHTMLOptGroupElement.cpp",
  "$bindings_core_v8_output_dir/HTMLOptionElementOrHTMLOptGroupElement.h",
  "$bindings_core_v8_output_dir/HTMLScriptElementOrSVGScriptElement.cpp",
  "$bindings_core_v8_output_dir/HTMLScriptElementOrSVGScriptElement.h",
  "$bindings_core_v8_output_dir/NodeListOrElement.cpp",
  "$bindings_core_v8_output_dir/NodeListOrElement.h",
  "$bindings_core_v8_output_dir/NodeOrString.cpp",
  "$bindings_core_v8_output_dir/NodeOrString.h",
  "$bindings_core_v8_output_dir/RadioNodeListOrElement.cpp",
  "$bindings_core_v8_output_dir/RadioNodeListOrElement.h",
  "$bindings_core_v8_output_dir/ScrollIntoViewOptionsOrBoolean.cpp",
  "$bindings_core_v8_output_dir/ScrollIntoViewOptionsOrBoolean.h",
  "$bindings_core_v8_output_dir/StringOrArrayBuffer.cpp",
  "$bindings_core_v8_output_dir/StringOrArrayBuffer.h",
  "$bindings_core_v8_output_dir/StringOrArrayBufferOrArrayBufferView.cpp",
  "$bindings_core_v8_output_dir/StringOrArrayBufferOrArrayBufferView.h",
  "$bindings_core_v8_output_dir/StringOrCSSVariableReferenceValue.cpp",
  "$bindings_core_v8_output_dir/StringOrCSSVariableReferenceValue.h",
  "$bindings_core_v8_output_dir/StringOrDictionary.cpp",
  "$bindings_core_v8_output_dir/StringOrDictionary.h",
  "$bindings_core_v8_output_dir/StringOrFloat.cpp",
  "$bindings_core_v8_output_dir/StringOrFloat.h",
  "$bindings_core_v8_output_dir/StringOrUnrestrictedDoubleSequence.cpp",
  "$bindings_core_v8_output_dir/StringOrUnrestrictedDoubleSequence.h",
  "$bindings_core_v8_output_dir/USVStringSequenceSequenceOrUSVStringUSVStringRecordOrUSVString.cpp",
  "$bindings_core_v8_output_dir/USVStringSequenceSequenceOrUSVStringUSVStringRecordOrUSVString.h",
  "$bindings_core_v8_output_dir/UnrestrictedDoubleOrKeyframeAnimationOptions.cpp",
  "$bindings_core_v8_output_dir/UnrestrictedDoubleOrKeyframeAnimationOptions.h",
  "$bindings_core_v8_output_dir/UnrestrictedDoubleOrKeyframeEffectOptions.cpp",
  "$bindings_core_v8_output_dir/UnrestrictedDoubleOrKeyframeEffectOptions.h",
  "$bindings_core_v8_output_dir/UnrestrictedDoubleOrString.cpp",
  "$bindings_core_v8_output_dir/UnrestrictedDoubleOrString.h",
  "$bindings_core_v8_output_dir/Uint8ClampedArrayOrUint16ArrayOrFloat32Array.cpp",
  "$bindings_core_v8_output_dir/Uint8ClampedArrayOrUint16ArrayOrFloat32Array.h",
  "$bindings_core_v8_output_dir/VideoTrackOrAudioTrackOrTextTrack.cpp",
  "$bindings_core_v8_output_dir/VideoTrackOrAudioTrackOrTextTrack.h",
]

generated_core_testing_callback_function_files = [
  "$bindings_core_v8_output_dir/TestCallback.cpp",
  "$bindings_core_v8_output_dir/TestCallback.h",
  "$bindings_core_v8_output_dir/TestEnumCallback.cpp",
  "$bindings_core_v8_output_dir/TestEnumCallback.h",
  "$bindings_core_v8_output_dir/TestInterfaceCallback.cpp",
  "$bindings_core_v8_output_dir/TestInterfaceCallback.h",
  "$bindings_core_v8_output_dir/TestReceiverObjectCallback.cpp",
  "$bindings_core_v8_output_dir/TestReceiverObjectCallback.h",
  "$bindings_core_v8_output_dir/TestSequenceCallback.cpp",
  "$bindings_core_v8_output_dir/TestSequenceCallback.h",
]

generated_core_callback_function_files = [
  "$bindings_core_v8_output_dir/FunctionStringCallback.cpp",
  "$bindings_core_v8_output_dir/FunctionStringCallback.h",
  "$bindings_core_v8_output_dir/IntersectionObserverCallback.cpp",
  "$bindings_core_v8_output_dir/IntersectionObserverCallback.h",
  "$bindings_core_v8_output_dir/MojoWatchCallback.cpp",
  "$bindings_core_v8_output_dir/MojoWatchCallback.h",
  "$bindings_core_v8_output_dir/MutationCallback.cpp",
  "$bindings_core_v8_output_dir/MutationCallback.h",
  "$bindings_core_v8_output_dir/PerformanceObserverCallback.cpp",
  "$bindings_core_v8_output_dir/PerformanceObserverCallback.h",
  "$bindings_core_v8_output_dir/ReportingObserverCallback.cpp",
  "$bindings_core_v8_output_dir/ReportingObserverCallback.h",
  "$bindings_core_v8_output_dir/ResizeObserverCallback.cpp",
  "$bindings_core_v8_output_dir/ResizeObserverCallback.h",
]

generate_conditional_features("bindings_core_conditional_features") {
  sources = core_idl_files + core_idl_with_modules_dependency_files +
            core_global_constructors_generated_idl_files
  component = "Core"
  output_dir = bindings_core_output_dir + "/v8"
  deps = [
    "//third_party/WebKit/Source/bindings/core:core_global_constructors_idls",
    "//third_party/WebKit/Source/bindings/core:interfaces_info_individual_core",
  ]
}

if (is_win || use_jumbo_build) {
  # On Windows Official release builds, we try to preserve symbol space.
  bindings_core_generated_interface_files =
      [ "$bindings_core_v8_output_dir/V8GeneratedCoreBindings.cpp" ]
} else {
  bindings_core_generated_interface_files =
      process_file_template(
          core_definition_idl_files,
          [
            "$bindings_core_v8_output_dir/V8{{source_name_part}}.cpp",
            "$bindings_core_v8_output_dir/V8{{source_name_part}}.h",
          ])
}

group("bindings_core_v8_generated") {
  public_deps = [
    ":bindings_core_impl_generated",
  ]
  if (is_win || use_jumbo_build) {
    public_deps += [ ":generate_bindings_core_v8_all_interfaces" ]
  } else {
    public_deps += [ ":generate_bindings_core_v8_interfaces" ]
  }
}

# IDL file lists; see: http://www.chromium.org/developers/web-idl-interfaces
# Interface IDL files: generate individual bindings (includes testing)
idl_compiler("generate_bindings_core_v8_interfaces") {
  sources = core_definition_idl_files + core_testing_definition_idl_files +
            generated_webcore_testing_idl_files
  output_dir = bindings_core_v8_output_dir
  output_name_suffix = ""
  target_component = "core"
}

aggregate_generated_bindings("generate_bindings_core_v8_all_interfaces") {
  sources = core_definition_idl_files
  outputs = [
    "$bindings_core_v8_output_dir/V8GeneratedCoreBindings.cpp",
  ]
  component = "core"
  public_deps = [
    ":generate_bindings_core_v8_interfaces",
  ]
}

idl_impl("bindings_core_impl_generated") {
  dict_idls = core_dictionary_idl_files + core_testing_dictionary_idl_files
  non_dict_outputs = bindings_core_generated_union_type_files +
                     generated_core_testing_callback_function_files +
                     generated_core_callback_function_files
  non_dict_output_dir = bindings_core_v8_output_dir
  target_component = "core"
}

# Even though the idl_impl() call above generates .cpp and .h files for both
# |core_dictionary_idl_files| and |core_testing_dictionary_idl_files|, we need
# to do some manual processing because the generated files are used in
# different targets.
generated_core_testing_dictionary_files =
    process_file_template(
        core_testing_dictionary_idl_files,
        [
          "$blink_core_output_dir/testing/{{source_name_part}}.cpp",
          "$blink_core_output_dir/testing/{{source_name_part}}.h",
        ])

# Compile the non-test sources generated above.
blink_core_sources("bindings_core_impl") {
  _non_testing_sources = get_target_outputs(":bindings_core_impl_generated") -
                         generated_core_testing_dictionary_files -
                         generated_core_testing_callback_function_files
  sources = _non_testing_sources + bindings_core_generated_interface_files +
            get_target_outputs(":bindings_core_conditional_features")

  deps = [
    ":bindings_core_conditional_features",
    ":bindings_core_v8_generated",
  ]
}

# Compile the test sources generated above. This test target doesn't count
# as part of the "core" component so shouldn't use the blink_core_sources for
# linking on Windows.
source_set("testing") {
  sources = generated_core_testing_dictionary_files +
            generated_core_testing_callback_function_files

  configs -= core_config_remove
  configs += [
    "//third_party/WebKit/Source:inside_blink",
    "//third_party/WebKit/Source:config",
  ]

  deps = [
    ":bindings_core_impl_generated",
    "//skia",
    "//third_party/WebKit/Source/platform",
    "//v8",
  ]
}

fuzzer_test("v8_serialized_script_value_fuzzer") {
  sources = [
    "serialization/SerializedScriptValueFuzzer.cpp",
  ]
  seed_corpus = "serialization/fuzz_corpus"
  deps = [
    "//third_party/WebKit/Source/core",
    "//third_party/WebKit/Source/platform:blink_fuzzer_test_support",
  ]
}
