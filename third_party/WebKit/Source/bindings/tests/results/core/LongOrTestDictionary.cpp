// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format off
#include "LongOrTestDictionary.h"

#include "bindings/core/v8/IDLTypes.h"
#include "bindings/core/v8/NativeValueTraitsImpl.h"
#include "bindings/core/v8/ToV8ForCore.h"

namespace blink {

LongOrTestDictionary::LongOrTestDictionary() : type_(SpecificTypeNone) {}

int32_t LongOrTestDictionary::getAsLong() const {
  DCHECK(isLong());
  return long_;
}

void LongOrTestDictionary::setLong(int32_t value) {
  DCHECK(isNull());
  long_ = value;
  type_ = SpecificTypeLong;
}

LongOrTestDictionary LongOrTestDictionary::fromLong(int32_t value) {
  LongOrTestDictionary container;
  container.setLong(value);
  return container;
}

const TestDictionary& LongOrTestDictionary::getAsTestDictionary() const {
  DCHECK(isTestDictionary());
  return test_dictionary_;
}

void LongOrTestDictionary::setTestDictionary(const TestDictionary& value) {
  DCHECK(isNull());
  test_dictionary_ = value;
  type_ = SpecificTypeTestDictionary;
}

LongOrTestDictionary LongOrTestDictionary::fromTestDictionary(const TestDictionary& value) {
  LongOrTestDictionary container;
  container.setTestDictionary(value);
  return container;
}

LongOrTestDictionary::LongOrTestDictionary(const LongOrTestDictionary&) = default;
LongOrTestDictionary::~LongOrTestDictionary() = default;
LongOrTestDictionary& LongOrTestDictionary::operator=(const LongOrTestDictionary&) = default;

DEFINE_TRACE(LongOrTestDictionary) {
  visitor->Trace(test_dictionary_);
}

void V8LongOrTestDictionary::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, LongOrTestDictionary& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState) {
  if (v8Value.IsEmpty())
    return;

  if (conversionMode == UnionTypeConversionMode::kNullable && IsUndefinedOrNull(v8Value))
    return;

  if (IsUndefinedOrNull(v8Value)) {
    TestDictionary cppValue;
    V8TestDictionary::toImpl(isolate, v8Value, cppValue, exceptionState);
    if (exceptionState.HadException())
      return;
    impl.setTestDictionary(cppValue);
    return;
  }

  if (v8Value->IsObject()) {
    TestDictionary cppValue;
    V8TestDictionary::toImpl(isolate, v8Value, cppValue, exceptionState);
    if (exceptionState.HadException())
      return;
    impl.setTestDictionary(cppValue);
    return;
  }

  if (v8Value->IsNumber()) {
    int32_t cppValue = NativeValueTraits<IDLLong>::NativeValue(isolate, v8Value, exceptionState, kNormalConversion);
    if (exceptionState.HadException())
      return;
    impl.setLong(cppValue);
    return;
  }

  {
    int32_t cppValue = NativeValueTraits<IDLLong>::NativeValue(isolate, v8Value, exceptionState, kNormalConversion);
    if (exceptionState.HadException())
      return;
    impl.setLong(cppValue);
    return;
  }
}

v8::Local<v8::Value> ToV8(const LongOrTestDictionary& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate) {
  switch (impl.type_) {
    case LongOrTestDictionary::SpecificTypeNone:
      return v8::Null(isolate);
    case LongOrTestDictionary::SpecificTypeLong:
      return v8::Integer::New(isolate, impl.getAsLong());
    case LongOrTestDictionary::SpecificTypeTestDictionary:
      return ToV8(impl.getAsTestDictionary(), creationContext, isolate);
    default:
      NOTREACHED();
  }
  return v8::Local<v8::Value>();
}

LongOrTestDictionary NativeValueTraits<LongOrTestDictionary>::NativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState) {
  LongOrTestDictionary impl;
  V8LongOrTestDictionary::toImpl(isolate, value, impl, UnionTypeConversionMode::kNotNullable, exceptionState);
  return impl;
}

}  // namespace blink
