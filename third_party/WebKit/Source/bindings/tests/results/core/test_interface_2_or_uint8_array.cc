// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format off
#include "test_interface_2_or_uint8_array.h"

#include "bindings/core/v8/ToV8ForCore.h"
#include "bindings/core/v8/V8TestInterface2.h"

namespace blink {

TestInterface2OrUint8Array::TestInterface2OrUint8Array() : type_(SpecificTypeNone) {}

TestInterface2* TestInterface2OrUint8Array::getAsTestInterface2() const {
  DCHECK(isTestInterface2());
  return test_interface_2_;
}

void TestInterface2OrUint8Array::setTestInterface2(TestInterface2* value) {
  DCHECK(isNull());
  test_interface_2_ = value;
  type_ = SpecificTypeTestInterface2;
}

TestInterface2OrUint8Array TestInterface2OrUint8Array::fromTestInterface2(TestInterface2* value) {
  TestInterface2OrUint8Array container;
  container.setTestInterface2(value);
  return container;
}

NotShared<DOMUint8Array> TestInterface2OrUint8Array::getAsUint8Array() const {
  DCHECK(isUint8Array());
  return uint8_array_;
}

void TestInterface2OrUint8Array::setUint8Array(NotShared<DOMUint8Array> value) {
  DCHECK(isNull());
  uint8_array_ = Member<DOMUint8Array>(value.View());
  type_ = SpecificTypeUint8Array;
}

TestInterface2OrUint8Array TestInterface2OrUint8Array::fromUint8Array(NotShared<DOMUint8Array> value) {
  TestInterface2OrUint8Array container;
  container.setUint8Array(value);
  return container;
}

TestInterface2OrUint8Array::TestInterface2OrUint8Array(const TestInterface2OrUint8Array&) = default;
TestInterface2OrUint8Array::~TestInterface2OrUint8Array() = default;
TestInterface2OrUint8Array& TestInterface2OrUint8Array::operator=(const TestInterface2OrUint8Array&) = default;

DEFINE_TRACE(TestInterface2OrUint8Array) {
  visitor->Trace(test_interface_2_);
  visitor->Trace(uint8_array_);
}

void V8TestInterface2OrUint8Array::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, TestInterface2OrUint8Array& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState) {
  if (v8Value.IsEmpty())
    return;

  if (conversionMode == UnionTypeConversionMode::kNullable && IsUndefinedOrNull(v8Value))
    return;

  if (V8TestInterface2::hasInstance(v8Value, isolate)) {
    TestInterface2* cppValue = V8TestInterface2::toImpl(v8::Local<v8::Object>::Cast(v8Value));
    impl.setTestInterface2(cppValue);
    return;
  }

  if (v8Value->IsUint8Array()) {
    NotShared<DOMUint8Array> cppValue = ToNotShared<NotShared<DOMUint8Array>>(isolate, v8Value, exceptionState);
    if (exceptionState.HadException())
      return;
    impl.setUint8Array(cppValue);
    return;
  }

  exceptionState.ThrowTypeError("The provided value is not of type '(TestInterface2 or Uint8Array)'");
}

v8::Local<v8::Value> ToV8(const TestInterface2OrUint8Array& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate) {
  switch (impl.type_) {
    case TestInterface2OrUint8Array::SpecificTypeNone:
      return v8::Null(isolate);
    case TestInterface2OrUint8Array::SpecificTypeTestInterface2:
      return ToV8(impl.getAsTestInterface2(), creationContext, isolate);
    case TestInterface2OrUint8Array::SpecificTypeUint8Array:
      return ToV8(impl.getAsUint8Array(), creationContext, isolate);
    default:
      NOTREACHED();
  }
  return v8::Local<v8::Value>();
}

TestInterface2OrUint8Array NativeValueTraits<TestInterface2OrUint8Array>::NativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState) {
  TestInterface2OrUint8Array impl;
  V8TestInterface2OrUint8Array::toImpl(isolate, value, impl, UnionTypeConversionMode::kNotNullable, exceptionState);
  return impl;
}

}  // namespace blink
