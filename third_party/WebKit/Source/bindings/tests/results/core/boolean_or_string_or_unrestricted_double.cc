// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format off
#include "boolean_or_string_or_unrestricted_double.h"

#include "bindings/core/v8/IDLTypes.h"
#include "bindings/core/v8/NativeValueTraitsImpl.h"
#include "bindings/core/v8/ToV8ForCore.h"

namespace blink {

BooleanOrStringOrUnrestrictedDouble::BooleanOrStringOrUnrestrictedDouble() : type_(SpecificTypeNone) {}

bool BooleanOrStringOrUnrestrictedDouble::getAsBoolean() const {
  DCHECK(isBoolean());
  return boolean_;
}

void BooleanOrStringOrUnrestrictedDouble::setBoolean(bool value) {
  DCHECK(isNull());
  boolean_ = value;
  type_ = SpecificTypeBoolean;
}

BooleanOrStringOrUnrestrictedDouble BooleanOrStringOrUnrestrictedDouble::fromBoolean(bool value) {
  BooleanOrStringOrUnrestrictedDouble container;
  container.setBoolean(value);
  return container;
}

const String& BooleanOrStringOrUnrestrictedDouble::getAsString() const {
  DCHECK(isString());
  return string_;
}

void BooleanOrStringOrUnrestrictedDouble::setString(const String& value) {
  DCHECK(isNull());
  string_ = value;
  type_ = SpecificTypeString;
}

BooleanOrStringOrUnrestrictedDouble BooleanOrStringOrUnrestrictedDouble::fromString(const String& value) {
  BooleanOrStringOrUnrestrictedDouble container;
  container.setString(value);
  return container;
}

double BooleanOrStringOrUnrestrictedDouble::getAsUnrestrictedDouble() const {
  DCHECK(isUnrestrictedDouble());
  return unrestricted_double_;
}

void BooleanOrStringOrUnrestrictedDouble::setUnrestrictedDouble(double value) {
  DCHECK(isNull());
  unrestricted_double_ = value;
  type_ = SpecificTypeUnrestrictedDouble;
}

BooleanOrStringOrUnrestrictedDouble BooleanOrStringOrUnrestrictedDouble::fromUnrestrictedDouble(double value) {
  BooleanOrStringOrUnrestrictedDouble container;
  container.setUnrestrictedDouble(value);
  return container;
}

BooleanOrStringOrUnrestrictedDouble::BooleanOrStringOrUnrestrictedDouble(const BooleanOrStringOrUnrestrictedDouble&) = default;
BooleanOrStringOrUnrestrictedDouble::~BooleanOrStringOrUnrestrictedDouble() = default;
BooleanOrStringOrUnrestrictedDouble& BooleanOrStringOrUnrestrictedDouble::operator=(const BooleanOrStringOrUnrestrictedDouble&) = default;

DEFINE_TRACE(BooleanOrStringOrUnrestrictedDouble) {
}

void V8BooleanOrStringOrUnrestrictedDouble::ToImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, BooleanOrStringOrUnrestrictedDouble& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState) {
  if (v8Value.IsEmpty())
    return;

  if (conversionMode == UnionTypeConversionMode::kNullable && IsUndefinedOrNull(v8Value))
    return;

  if (v8Value->IsBoolean()) {
    impl.setBoolean(v8Value.As<v8::Boolean>()->Value());
    return;
  }

  if (v8Value->IsNumber()) {
    double cppValue = NativeValueTraits<IDLUnrestrictedDouble>::NativeValue(isolate, v8Value, exceptionState);
    if (exceptionState.HadException())
      return;
    impl.setUnrestrictedDouble(cppValue);
    return;
  }

  {
    V8StringResource<> cppValue = v8Value;
    if (!cppValue.Prepare(exceptionState))
      return;
    impl.setString(cppValue);
    return;
  }
}

v8::Local<v8::Value> ToV8(const BooleanOrStringOrUnrestrictedDouble& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate) {
  switch (impl.type_) {
    case BooleanOrStringOrUnrestrictedDouble::SpecificTypeNone:
      return v8::Null(isolate);
    case BooleanOrStringOrUnrestrictedDouble::SpecificTypeBoolean:
      return v8::Boolean::New(isolate, impl.getAsBoolean());
    case BooleanOrStringOrUnrestrictedDouble::SpecificTypeString:
      return V8String(isolate, impl.getAsString());
    case BooleanOrStringOrUnrestrictedDouble::SpecificTypeUnrestrictedDouble:
      return v8::Number::New(isolate, impl.getAsUnrestrictedDouble());
    default:
      NOTREACHED();
  }
  return v8::Local<v8::Value>();
}

BooleanOrStringOrUnrestrictedDouble NativeValueTraits<BooleanOrStringOrUnrestrictedDouble>::NativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState) {
  BooleanOrStringOrUnrestrictedDouble impl;
  V8BooleanOrStringOrUnrestrictedDouble::ToImpl(isolate, value, impl, UnionTypeConversionMode::kNotNullable, exceptionState);
  return impl;
}

}  // namespace blink
