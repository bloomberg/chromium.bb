{% from 'templates/macros.tmpl' import license, source_files_for_generated_file %}
{{license()}}

{{source_files_for_generated_file(template_file, input_files)}}

#include "platform/RuntimeEnabledFeatures.h"

#include "platform/wtf/Assertions.h"
#include "platform/wtf/text/WTFString.h"

namespace blink {

RuntimeEnabledFeatures::Backup::Backup()
  : {% for feature in standard_features -%}
    {{feature.first_lowered_name}}_(RuntimeEnabledFeatures::{{feature.name}}Enabled())
    {%- if not loop.last %},
    {%+ endif -%}
    {% endfor %} {}

void RuntimeEnabledFeatures::Backup::Restore() {
  {% for feature in standard_features %}
  RuntimeEnabledFeatures::Set{{feature.name}}Enabled({{feature.first_lowered_name}}_);
  {% endfor %}
}

{% for feature_set in feature_sets %}
void RuntimeEnabledFeatures::Set{{feature_set|capitalize}}FeaturesEnabled(bool enable) {
  {% for feature in features if feature.status == feature_set %}
  Set{{feature.name}}Enabled(enable);
  {% endfor %}
}

{% endfor %}

void RuntimeEnabledFeatures::SetOriginTrialControlledFeaturesEnabled(bool enable) {
  {% for feature in origin_trial_controlled_features %}
  Set{{feature.name}}Enabled(enable);
  {% endfor %}
}

void RuntimeEnabledFeatures::SetFeatureEnabledFromString(
    const std::string& name, bool enable) {
  {% for feature in standard_features %}
  if (name == "{{feature.name}}") {
    Set{{feature.name}}Enabled(enable);
    return;
  }
  {% endfor %}
  DLOG(ERROR) << "RuntimeEnabledFeature not recognized: " << name;
}

{% for feature in standard_features %}
bool RuntimeEnabledFeatures::is{{feature.name}}Enabled = {{'true' if feature.status == 'stable' else 'false'}};
{% endfor %}

} // namespace blink
