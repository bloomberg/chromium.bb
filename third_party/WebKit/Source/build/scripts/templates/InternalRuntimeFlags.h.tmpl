{% from 'macros.tmpl' import license %}
{{license()}}

#ifndef InternalRuntimeFlags_h
#define InternalRuntimeFlags_h

#include "platform/bindings/ScriptWrappable.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/heap/Handle.h"
#include "platform/wtf/PassRefPtr.h"
#include "platform/wtf/RefPtr.h"
#include "platform/wtf/RefCounted.h"

namespace blink {

class InternalRuntimeFlags :
    public GarbageCollected<InternalRuntimeFlags>,
    public ScriptWrappable {
  DEFINE_WRAPPERTYPEINFO();
 public:
  static InternalRuntimeFlags* create() {
    return new InternalRuntimeFlags;
  }

  // These are reset between layout tests from Internals::resetToConsistentState
  // using RuntimeEnabledFeatures::Backup.
  {% for feature in standard_features if feature.settable_from_internals %}
  void set{{feature.name}}Enabled(bool isEnabled) {
    RuntimeEnabledFeatures::set{{feature.name}}Enabled(isEnabled);
  }
  {% endfor %}

  {% for feature in standard_features %}
  bool {{feature.first_lowered_name}}Enabled() {
    return RuntimeEnabledFeatures::{{feature.first_lowered_name}}Enabled();
  }
  {% endfor %}

  DEFINE_INLINE_TRACE() {}

 private:
  InternalRuntimeFlags() {}
};

} // namespace blink

#endif // InternalRuntimeFlags_h
