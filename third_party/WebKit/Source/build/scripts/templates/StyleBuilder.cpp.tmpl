{% from 'templates/macros.tmpl' import license, source_files_for_generated_file %}
{{license()}}

{{source_files_for_generated_file(template_file, input_files)}}

#include "core/css/resolver/StyleBuilder.h"

#include "StyleBuilderFunctions.h"
#include "core/css/CSSProperty.h"
#include "core/css/properties/CSSPropertyAPI.h"
#include "core/css/resolver/StyleResolverState.h"
#include "core/style/ComputedStyle.h"

// FIXME: currently we're just generating a switch statement, but we should
//   test other variations for performance once we have more properties here.

namespace blink {

void StyleBuilder::ApplyProperty(CSSPropertyID property,
                                 StyleResolverState& state,
                                 const CSSValue& value,
                                 bool isInitial,
                                 bool isInherit) {
  switch (property) {
    {% for property_id, property in properties.items()
        if property.should_declare_functions or property.use_handlers_for %}
    {% set used_property = properties[property.use_handlers_for] or property %}
    {% set used_property_id = used_property.property_id %}
    {% if used_property.use_api_in_stylebuilder %}
    case {{property_id}}:
      if (isInitial)
        Get{{used_property_id}}API().ApplyInitial(state);
      else if (isInherit)
        Get{{used_property_id}}API().ApplyInherit(state);
      else
        Get{{used_property_id}}API().ApplyValue(state, value);
      return;
      {% else %}
    case {{property_id}}:
      if (isInitial)
        StyleBuilderFunctions::applyInitial{{used_property_id}}(state);
      else if (isInherit)
        StyleBuilderFunctions::applyInherit{{used_property_id}}(state);
      else
        StyleBuilderFunctions::applyValue{{used_property_id}}(state, value);
      return;
    {% endif %}

    {% endfor %}
    case CSSPropertyVariable:
      DCHECK(!isInitial);
      DCHECK(!isInherit);
      StyleBuilderFunctions::applyValueCSSPropertyVariable(state, value);
      return;
    {% for property_id, property in properties.items() if property.direction_aware %}
    case {{property_id}}:
    {% endfor %}
    {
      CSSPropertyID resolvedProperty =
          CSSPropertyAPI::Get(property)
              .ResolveDirectionAwareProperty(state.Style()->Direction(),
                                             state.Style()->GetWritingMode())
              .PropertyID();
      DCHECK_NE(resolvedProperty, property);
      ApplyProperty(resolvedProperty, state, value);
      return;
    }
    {% for property_id, property in properties.items() if property.builder_skip %}
    case {{property_id}}:
    {% endfor %}
      return;
    default:
      NOTREACHED();
  }
}

} // namespace blink
