{% from "templates/macros.tmpl" import license, source_files_for_generated_file %}
{{ license() }}

{{source_files_for_generated_file(template_file, input_files)}}

#include "{{namespace}}ElementTypeHelpers.h"

#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/wtf/HashMap.h"

namespace blink {
{% if namespace == "HTML" %}
using HTMLTypeMap = HashMap<AtomicString, HTMLElementType>;

static HTMLTypeMap* html_type_map = 0;

void createHTMLTypeMap() {
  DCHECK(!html_type_map);
  html_type_map = new HTMLTypeMap;
  {% for tag in tags|sort %}
  html_type_map->Set(AtomicString("{{tag.name}}"), HTMLElementType::k{{tag.interface}});
  {% endfor %}
}

HTMLElementType htmlElementTypeForTag(const AtomicString& tagName) {
  if (!html_type_map) createHTMLTypeMap();
  if (html_type_map->Contains(tagName)) {
    {% for tag in tags|sort %}
    {% if tag.runtimeEnabled %}
    if (tagName == "{{tag.name}}") {
      if (!RuntimeEnabledFeatures::{{tag.runtimeEnabled}}Enabled()) {
        return HTMLElementType::kHTMLUnknownElement;
      }
    }
    {% endif %}
    {% endfor %}
    return html_type_map->at(tagName);
  } else {
    return HTMLElementType::kHTMLUnknownElement;
  }
}
{% endif %}
} // namespace blink
