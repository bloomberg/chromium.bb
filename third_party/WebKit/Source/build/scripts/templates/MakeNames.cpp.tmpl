{% from "templates/macros.tmpl" import license, source_files_for_generated_file %}
{{ license() }}

{{source_files_for_generated_file(template_file, input_files)}}

#include "{{namespace}}{{suffix}}Names.h"

#include "platform/wtf/StdLibExtras.h"

namespace blink {
namespace {{namespace}}Names {

using namespace WTF;

void* {{suffix}}NamesStorage[{{namespace}}{{suffix}}NamesCount * ((sizeof(AtomicString) + sizeof(void *) - 1) / sizeof(void *))];

{% for entry in entries|sort(attribute='name', case_sensitive=True) %}
const AtomicString& {{entry|symbol}} = reinterpret_cast<AtomicString*>(&{{suffix}}NamesStorage)[{{loop.index0}}];
{% endfor %}

void init{{suffix}}() {
  static bool isLoaded = false;
  if (isLoaded) return;
  isLoaded = true;

  struct NameEntry {
    const char* name;
    unsigned hash;
    unsigned char length;
  };

  static const NameEntry kNames[] = {
  {% for entry in entries|sort(attribute='name', case_sensitive=True) %}
    { "{{entry|cpp_name}}", {{entry|cpp_name|hash}}, {{entry|cpp_name|length}} },
  {% endfor %}
  };

  for (size_t i = 0; i < WTF_ARRAY_LENGTH(kNames); i++) {
    StringImpl* stringImpl = StringImpl::CreateStatic(kNames[i].name, kNames[i].length, kNames[i].hash);
    void* address = reinterpret_cast<AtomicString*>(&{{suffix}}NamesStorage) + i;
    new (address) AtomicString(stringImpl);
  }
}

} // {{namespace}}Names
} // namespace blink
