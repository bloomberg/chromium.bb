{% from 'templates/macros.tmpl' import license, source_files_for_generated_file %}
{{license()}}

{{source_files_for_generated_file(template_file, input_files)}}

#include "core/css/CSSPropertyMetadata.h"

#include "platform/RuntimeEnabledFeatures.h"
#include <bitset>

namespace blink {
{% for flag, function_name in switches %}

bool CSSPropertyMetadata::{{function_name}}(CSSPropertyID unresolvedProperty) {
  switch (unresolvedProperty) {
    case CSSPropertyInvalid:
      NOTREACHED();
      return false;
    {% for property in properties_including_aliases if property[flag] %}
    case {{property.property_id}}:
    {% endfor %}
    {% if function_name in ("IsInheritedProperty", "IsProperty") %}
    case CSSPropertyVariable:
    {% endif %}
    {% if function_name == "IsProperty" %}
    case CSSPropertyApplyAtRule:
    {% endif %}
      return true;
    default:
      return false;
  }
}
{% endfor %}

char CSSPropertyMetadata::RepetitionSeparator(CSSPropertyID unresolvedProperty) {
  switch (unresolvedProperty) {
  {% for property in properties_including_aliases if property.separator %}
  case {{property.property_id}}:
    return '{{property.separator}}';
  {% endfor %}
  default:
    return 0;
  }
}

bool CSSPropertyMetadata::PropertyIsRepeated(CSSPropertyID unresolvedProperty) {
  return RepetitionSeparator(unresolvedProperty) != 0;
}

bool CSSPropertyMetadata::IsEnabledProperty(CSSPropertyID unresolvedProperty) {
  CSSPropertyID property = resolveCSSPropertyID(unresolvedProperty);
  static std::bitset<numCSSProperties>* enabledProperties = []() {
    std::bitset<numCSSProperties>* props = new std::bitset<numCSSProperties>();
    props->set(); // All bits sets to 1.
    {% for property in properties_including_aliases if property.runtime_flag %}
    if (!RuntimeEnabledFeatures::{{property.runtime_flag}}Enabled())
      props->reset({{property.property_id}} - {{first_enum_value}});
    {% endfor %}
    {% for property in properties_including_aliases if property.is_internal %}
    props->reset({{property.property_id}} - {{first_enum_value}});
    {% endfor %}
    return props;
  }();

  if (unresolvedProperty >= {{first_enum_value}})
    return enabledProperties->test(property - {{first_enum_value}});

  if (unresolvedProperty == CSSPropertyVariable)
    return true;
  DCHECK_EQ(unresolvedProperty, CSSPropertyApplyAtRule);
  return RuntimeEnabledFeatures::CSSApplyAtRulesEnabled();
}

void CSSPropertyMetadata::FilterEnabledCSSPropertiesIntoVector(
    const CSSPropertyID* properties,
    size_t propertyCount,
    Vector<CSSPropertyID>& outVector) {
  for (unsigned i = 0; i < propertyCount; i++) {
    CSSPropertyID property = properties[i];
    if (IsEnabledProperty(property))
      outVector.push_back(property);
  }
}

} // namespace blink
