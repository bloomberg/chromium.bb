// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

{% from 'templates/macros.tmpl' import print_if, source_files_for_generated_file %}
{{source_files_for_generated_file(template_file, input_files)}}
// clang-format off

#include "core/css/properties/CSSPropertyAPI.h"

{% for api_class in api_classnames %}
#include "core/css/properties/{{api_class}}.h"
{% endfor %}

namespace blink {

namespace {

const CSSPropertyAPI& GetAPI(CSSPropertyID id) {

#if defined(OS_WIN) && defined(COMPILER_MSVC)
  // TODO(meade): Delete the Windows+MSVC-specific code when we stop compiling
  // blink with MSVC. In the meantime, this special implementation is required
  // because MSVC doesn't initialize vtables for objects defined as constexpr.
  // Not using constexpr is considerably slower, however we don't ship any
  // real builds using MSVC, and this is just to avoid crashing bots that
  // still need to use MSVC (e.g. for the dEQP tests, which use exceptions).
  // See http://crbug.com/753010.

  static const CSSPropertyAPI base_api;
  {% for api_class in api_classnames %}
  static const {{api_class}} api_{{api_class.lower()}};
  {% endfor %}

  static const CSSPropertyAPI* const property_apis[] = {
    {% for api_class_data in api_classes_by_property_id %}
      {% if api_class_data.classname %}
    &api_{{api_class_data.classname.lower()}},  // {{api_class_data.property_id}}
      {% else %}
    &base_api,  // API for {{api_class_data.property_id}} not implemented yet.
      {% endif %}
    {% endfor %}
  };

#else

  static constexpr CSSPropertyAPI base_api;
  {% for api_class in api_classnames %}
  static constexpr {{api_class}} api_{{api_class.lower()}};
  {% endfor %}

  static constexpr const CSSPropertyAPI* const property_apis[] = {
    {% for api_class_data in api_classes_by_property_id %}
      {% if api_class_data.classname %}
    &api_{{api_class_data.classname.lower()}},  // {{api_class_data.property_id}}
      {% else %}
    &base_api,  // API for {{api_class_data.property_id}} not implemented yet.
      {% endif %}
    {% endfor %}
  };

#endif

  return *property_apis[id - {{first_property_id}}];

}

} // namespace

const CSSPropertyAPI& CSSPropertyAPI::Get(CSSPropertyID id) {
  DCHECK_GE(id, {{first_property_id}});  // first_property_id
  DCHECK_LE(id, {{last_property_id}});  // last_property_id
  return GetAPI(id);
}

}  // namespace blink

