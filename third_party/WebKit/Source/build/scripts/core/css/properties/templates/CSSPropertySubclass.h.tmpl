// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

{% from 'templates/macros.tmpl' import source_files_for_generated_file %}
{% from 'core/css/properties/templates/application_macros.tmpl' import set_value, convert_and_set_value %}
{{source_files_for_generated_file(template_file, input_files)}}

#ifndef GEN_BLINK_CORE_CSS_PROPERTIES_{{property.superclass.upper()}}_{{property_classname}}_h
#define GEN_BLINK_CORE_CSS_PROPERTIES_{{property.superclass.upper()}}_{{property_classname}}_h

#include "core/css/properties/{{property.superclass}}.h"
{# conditional includes - only used in some property classes #}
{% for include in property.includes %}
#include "{{include}}"
{% endfor %}

namespace blink {

class CSSValue;

namespace CSS{{property.superclass}} {

{% if property.is_property %}
  {% if property.unique %}
// Implements the '{{property.name}}' CSS property
  {% else %}
// Implements multiple CSS properties
  {% endif %}
{% else %}
  {% if property.unique %}
// Implements the '{{property.name}}' CSS descriptor
  {% else %}
// Implements multiple CSS descriptors
  {% endif %}
{% endif %}
// See src/third_party/WebKit/Source/core/css/properties/README.md
class {{property_classname}} : public {{property.superclass}} {
 public:
  constexpr {{property_classname}}(CSSPropertyID id) : {{property.superclass}}(id) {}
  {% for property_method in property.property_methods %}
  {{property_method.return_type}} {{property_method.name}}{{property_method.parameters}} const override;
  {% endfor %}
  {% if property.interpolable %}
  bool IsInterpolable() const override { return true; }
  {% endif %}
  {% if property.inherited %}
  bool IsInherited() const override { return true; }
  {% endif %}
  {% if property.compositable %}
  bool IsCompositableProperty() const override { return true; }
  {% endif %}
  {% if property.separator != None %}
  bool IsRepeated() const override { return true; }
  char RepetitionSeparator() const override { return '{{property.separator}}'; }
  {% endif %}
  {% if property.is_descriptor %}
  bool IsDescriptor() const override { return true; }
  {% endif %}
  {# Style builder functions #}
{% macro declare_initial() %}
void ApplyInitial(StyleResolverState& state) const override {
{%- endmacro %}
{% macro declare_inherit() %}
void ApplyInherit(StyleResolverState& state) const override {
{%- endmacro %}
{% macro declare_value() %}
void ApplyValue(StyleResolverState& state, const CSSValue& value) const override {
{%- endmacro %}
  {% if property.should_declare_apply_functions %}
    {% if not property.custom_apply_functions_initial %}
  {{declare_initial()}}
      {% if property.svg %}
    {{set_value(property)}}(SVGComputedStyle::{{property.initial}}());
      {% elif property.font %}
    {{set_value(property)}}(FontBuilder::{{property.initial}}());
      {% else %}
    {{set_value(property)}}(ComputedStyleInitialValues::{{property.initial}}());
      {% endif %}
      {% if property.independent %}
    state.Style()->{{property.is_inherited_setter}}(false);
      {% endif %}
  }
    {% endif %}
    {# TODO(meade): else emit function declaration only #}
    {% if not property.custom_apply_functions_inherit %}
  {{declare_inherit()}}
      {% if property.svg %}
    {{set_value(property)}}(state.ParentStyle()->SvgStyle().{{property.getter}}());
      {% elif property.font %}
    {{set_value(property)}}(state.ParentFontDescription().{{property.getter}}());
      {% else %}
    {{set_value(property)}}(state.ParentStyle()->{{property.getter}}());
      {% endif %}
      {% if property.independent %}
    state.Style()->{{property.is_inherited_setter}}(true);
      {% endif %}
  }
    {% endif %}
    {# TODO(meade): else emit function declaration only #}
    {% if not property.custom_apply_functions_value %}
  {{declare_value()}}
    {{convert_and_set_value(property)}}
      {% if property.independent %}
    state.Style()->{{property.is_inherited_setter}}(false);
      {% endif %}
  }
    {% endif %}
    {# TODO(meade): else emit function declaration only #}
    {% if property.custom_apply == "auto" %}
    {% set auto_getter = property.custom_apply_args['auto_getter'] or
                         'HasAuto' + property.name_for_methods %}
    {% set auto_setter = property.custom_apply_args['auto_setter'] or
                         'SetHasAuto' + property.name_for_methods %}
    {% set auto_identity = property.custom_apply_args['auto_identity'] or
                           'CSSValueAuto' %}
  {{declare_initial()}}
    state.Style()->{{auto_setter}}();
  }
  {{declare_inherit()}}
    if (state.ParentStyle()->{{auto_getter}}())
      state.Style()->{{auto_setter}}();
    else
      {{set_value(property)}}(state.ParentStyle()->{{property.getter}}());
  }
  {{declare_value()}}
    if (value.IsIdentifierValue() &&
        ToCSSIdentifierValue(value).GetValueID() == {{auto_identity}})
      state.Style()->{{auto_setter}}();
    else
      {{convert_and_set_value(property)}}
  }
    {% endif %}
  {% endif %}
  {% if 'Percent' in property.typedom_types %}
  bool SupportsPercentage() const override { return true; }
  {% endif %}
  {% if not property.is_property %}
  bool IsProperty() const override { return false; }
  {% endif %}
  {% if property.is_internal %}
  bool IsEnabled() const override { return false; }
  {% elif property.runtime_flag %}
  bool IsEnabled() const override {
    return RuntimeEnabledFeatures::{{property.runtime_flag}}Enabled();
  }
  {% endif %}
  {% if not property.affected_by_all %}
  bool IsAffectedByAll() const override { return false; }
  {% endif %}
  {% if property.direction_aware_options %}
    {% if property.direction_aware_options.logical_side == "width" %}
  CSSPropertyID ResolveDirectionAwareProperty(
      TextDirection direction,
      WritingMode writing_mode) const override {
    if (IsHorizontalWritingMode(writing_mode))
      return {{property.direction_aware_options.shorthand_for_physical_side}}Width;
    return {{property.direction_aware_options.shorthand_for_physical_side}}Height;
  }
    {% elif property.direction_aware_options.logical_side == "height" %}
  CSSPropertyID ResolveDirectionAwareProperty(
      TextDirection direction,
      WritingMode writing_mode) const override {
    if (IsHorizontalWritingMode(writing_mode))
      return {{property.direction_aware_options.shorthand_for_physical_side}}Height;
    return {{property.direction_aware_options.shorthand_for_physical_side}}Width;
  }
    {% else %}
  CSSPropertyID ResolveDirectionAwareProperty(
      TextDirection direction,
      WritingMode writing_mode) const override {
    return Resolve{{property.direction_aware_options.logical_side[0].upper() + property.direction_aware_options.logical_side[1:]}}ToPhysicalProperty(
      direction,
      writing_mode,
      {{property.direction_aware_options.shorthand_for_physical_side}}());
  }
    {% endif %}
  {% endif %}
};

}  // namespace CSS{{property.superclass}}
}  // namespace blink

#endif  // GEN_BLINK_CORE_CSS_PROPERTIES_{{property.superclass.upper()}}_{{property_classname}}_h
