// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

{% from 'templates/macros.tmpl' import source_files_for_generated_file %}
{% from 'core/css/properties/templates/application_macros.tmpl' import set_value, convert_and_set_value %}
{{source_files_for_generated_file(template_file, input_files)}}

#ifndef {{api_classname}}_h
#define {{api_classname}}_h

#include "core/css/CSSPrimitiveValueMappings.h"
#include "core/css/properties/CSSPropertyAPI.h"
#include "core/css/resolver/StyleResolverState.h"
{# conditional includes - only used in some APIs #}
{% if property.converter == "CSSPrimitiveValue" %}
#include "core/css/CSSPrimitiveValue.h"
{% elif property.converter == "CSSIdentifierValue" %}
#include "core/css/CSSIdentifierValue.h"
{% elif property.converter %}
#include "core/css/resolver/StyleBuilderConverter.h"
{% endif %}
{% if property.font %}
#include "core/css/resolver/FontBuilder.h"
{% else %}
#include "core/style/ComputedStyle.h"
#include "core/style/SVGComputedStyle.h"
{% endif %}
{% if property.runtime_flag %}
#include "platform/runtime_enabled_features.h"
{% endif %}
{% if property.svg %}
#include "core/style/SVGComputedStyle.h"
{% endif %}
{% if property.runtime_flag %}
#include "platform/runtime_enabled_features.h"
{% endif %}

namespace blink {

class CSSParserTokenRange;
class CSSParserContext;
class CSSParserLocalContext;
class CSSProperty;
class CSSValue;

class {{api_classname}} : public CSSPropertyAPI {
 public:
  constexpr {{api_classname}}(CSSPropertyID id) : CSSPropertyAPI(id) {}

  {% for api_method in property.api_methods %}
  {{api_method.return_type}} {{api_method.name}}{{api_method.parameters}} const override;
  {% endfor %}

  {% if property.interpolable %}
  bool IsInterpolable() const override { return true; }
  {% endif %}
  {% if property.inherited %}
  bool IsInherited() const override { return true; }
  {% endif %}
  {% if property.separator != None %}
  bool IsRepeated() const override { return true; }
  char RepetitionSeparator() const override { return '{{property.separator}}'; }
  {% endif %}
  {% if property.is_descriptor %}
  bool IsDescriptor() const override { return true; }
  {% endif %}

  {% if property.should_declare_application_functions %}
    {% if not property.custom_initial %}
  void ApplyInitial(StyleResolverState& state) const override {
      {% if property.svg %}
    {{set_value(property)}}(SVGComputedStyle::{{property.initial}}());
      {% elif property.font %}
    {{set_value(property)}}(FontBuilder::{{property.initial}}());
      {% else %}
    {{set_value(property)}}(ComputedStyle::{{property.initial}}());
      {% endif %}
      {% if property.independent %}
    state.Style()->{{property.is_inherited_setter}}(false);
      {% endif %}
  }
    {% endif %}
    {# TODO(meade): else emit function declaration only #}

    {% if not property.custom_inherit %}
  void ApplyInherit(StyleResolverState& state) const override {
      {% if property.svg %}
    {{set_value(property)}}(state.ParentStyle()->SvgStyle().{{property.getter}}());
      {% elif property.font %}
    {{set_value(property)}}(state.ParentFontDescription().{{property.getter}}());
      {% else %}
    {{set_value(property)}}(state.ParentStyle()->{{property.getter}}());
      {% endif %}
      {% if property.independent %}
    state.Style()->{{property.is_inherited_setter}}(true);
      {% endif %}
  }
    {% endif %}
    {# TODO(meade): else emit function declaration only #}

    {% if not property.custom_value %}
  void ApplyValue(StyleResolverState& state, const CSSValue& value) const override {
    {{convert_and_set_value(property)}}
      {% if property.independent %}
    state.Style()->{{property.is_inherited_setter}}(false);
      {% endif %}
  }
    {% endif %}
    {# TODO(meade): else emit function declaration only #}
  {% endif %}
  {% if 'Percent' in property.typedom_types %}
  bool SupportsPercentage() const override { return true; }
  {% endif %}
  {% if not property.is_property %}
  bool IsProperty() const override { return false; }
  {% endif %}
  {% if property.is_internal %}
  bool IsEnabled() const override { return false; }
  {% elif property.runtime_flag %}
  bool IsEnabled() const override {
    return RuntimeEnabledFeatures::{{property.runtime_flag}}Enabled();
  }
  {% endif %}
  {% if not property.affected_by_all %}
  bool IsAffectedByAll() const override { return false; }
  {% endif %}

  {% if property.direction_aware %}
  const CSSPropertyAPI& ResolveDirectionAwareProperty(
      TextDirection,
      WritingMode) const override;
  {% endif %}
};

}  // namespace blink

#endif  // {{api_classname}}_h
