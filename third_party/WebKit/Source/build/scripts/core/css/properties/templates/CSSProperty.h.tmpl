// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

{% from 'templates/macros.tmpl' import source_files_for_generated_file %}
{{source_files_for_generated_file(template_file, input_files)}}
// clang-format off

#ifndef CSSProperty_h
#define CSSProperty_h

#include "core/CSSPropertyNames.h"
#include "core/css/CSSValue.h"
#include "core/css/properties/CSSUnresolvedProperty.h"
#include "platform/heap/HeapAllocator.h"
#include "platform/text/TextDirection.h"
#include "platform/text/WritingMode.h"
#include "platform/wtf/text/WTFString.h"

namespace blink {

class ComputedStyle;
class CSSParserContext;
class CSSParserLocalContext;
class CSSParserTokenRange;
class LayoutObject;
class Longhand;
class Shorthand;
class SVGComputedStyle;
class StylePropertyShorthand;

enum PhysicalBoxSide { kTopSide, kRightSide, kBottomSide, kLeftSide };

class CSSProperty : public CSSUnresolvedProperty {
 public:
  CORE_EXPORT static const CSSProperty& Get(CSSPropertyID);

  // For backwards compatibility when passing around CSSUnresolvedProperty
  // references. In case we need to call a function that hasn't been converted
  // to using property classes yet.
  virtual CSSPropertyID PropertyID() const {
    NOTREACHED();
    return CSSPropertyInvalid;
  }
  bool IDEquals(CSSPropertyID id) const { return PropertyID() == id; }
  bool IsResolvedProperty() const override { return true; }
  virtual const WTF::String GetJSPropertyName() const {
    NOTREACHED();
    return g_empty_string;
  }
  virtual bool IsInterpolable() const { return false; }
  virtual bool IsInherited() const { return false; }
  virtual bool IsCompositableProperty() const { return false; }
  virtual bool IsRepeated() const { return false; }
  virtual char RepetitionSeparator() const {
    NOTREACHED();
    return 0;
  }
  virtual bool IsDescriptor() const { return false; }
  virtual bool SupportsPercentage() const { return false; }
  virtual bool IsProperty() const { return true; }
  virtual bool IsEnabled() const { return true; }
  virtual bool IsAffectedByAll() const { return IsEnabled() && IsProperty(); }
  virtual bool IsLayoutDependent(const ComputedStyle* style, LayoutObject* layout_object) const { return false; }

  // Properties that do not override this method:
  // CSSPropertyWebkitFontSizeDelta
  // CSSPropertyWebkitTextEmphasis
  // CSSPropertyFontDisplay
  // CSSPropertySrc
  // CSSPropertyUnicodeRange
  // CSSPropertyPage
  // CSSPropertySize
  // CSSPropertyWebkitMarginCollapse
  // CSSPropertyWebkitMask
  // CSSPropertyWebkitMaskRepeatX
  // CSSPropertyWebkitMaskRepeatY
  // CSSPropertyWebkitPerspectiveOriginX
  // CSSPropertyWebkitPerspectiveOriginY
  // CSSPropertyWebkitTextStroke
  // CSSPropertyWebkitTransformOriginX
  // CSSPropertyWebkitTransformOriginY
  // CSSPropertyWebkitTransformOriginZ
  // CSSPropertyMaxZoom
  // CSSPropertyMinZoom
  // CSSPropertyOrientation
  // CSSPropertyUserZoom
  // CSSPropertyMarker
  // CSSPropertyAll
  // CSSPropertyVariable (Variables are retrieved via Get(AtomicString))
  virtual const CSSValue* CSSValueFromComputedStyleInternal(const ComputedStyle&,
                                                            const SVGComputedStyle&,
                                                            const LayoutObject*,
                                                            Node*,
                                                            bool allow_visited_style) const { return nullptr; }
  // FIXME: Resolve computed auto alignment in applyProperty/ComputedStyle and
  // remove this non-const Node parameter.
  const CSSValue* CSSValueFromComputedStyle(const ComputedStyle&,
                                            const LayoutObject*,
                                            Node*,
                                            bool allow_visited_style) const;
  virtual const CSSProperty& ResolveDirectionAwareProperty(
      TextDirection,
      WritingMode) const {
    return *this;
  }
  virtual bool IsShorthand() const { return false; }
  virtual bool IsLonghand() const { return false; }
  static void FilterEnabledCSSPropertiesIntoVector(const CSSPropertyID*,
                                                   size_t length,
                                                   Vector<const CSSProperty*>&);

 protected:
  constexpr CSSProperty() : CSSUnresolvedProperty() {}

  static const StylePropertyShorthand& BorderDirections();
  static const CSSProperty& ResolveAfterToPhysicalProperty(
      TextDirection,
      WritingMode,
      const StylePropertyShorthand&);
  static const CSSProperty& ResolveBeforeToPhysicalProperty(
      TextDirection,
      WritingMode,
      const StylePropertyShorthand&);
  static const CSSProperty& ResolveEndToPhysicalProperty(
      TextDirection,
      WritingMode,
      const StylePropertyShorthand&);
  static const CSSProperty& ResolveStartToPhysicalProperty(
      TextDirection,
      WritingMode,
      const StylePropertyShorthand&);
};

DEFINE_TYPE_CASTS(CSSProperty,
                  CSSUnresolvedProperty,
                  unresolved,
                  unresolved->IsResolvedProperty(),
                  unresolved.IsResolvedProperty());

CORE_EXPORT const CSSProperty& GetCSSPropertyVariable();
{% for property_class_data in property_classes_by_property_id %}
CORE_EXPORT const CSSProperty& Get{{property_class_data.property_id}}();
{% endfor %}

}  // namespace blink

#endif  // CSSProperty_h
