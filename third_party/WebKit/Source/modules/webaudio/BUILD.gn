# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//third_party/WebKit/Source/modules/modules.gni")

blink_modules_sources("webaudio") {
  sources = [
    "AnalyserNode.cpp",
    "AnalyserNode.h",
    "AsyncAudioDecoder.cpp",
    "AsyncAudioDecoder.h",
    "AudioBasicInspectorNode.cpp",
    "AudioBasicInspectorNode.h",
    "AudioBasicProcessorHandler.cpp",
    "AudioBasicProcessorHandler.h",
    "AudioBuffer.cpp",
    "AudioBuffer.h",
    "AudioBufferSourceNode.cpp",
    "AudioBufferSourceNode.h",
    "AudioContext.cpp",
    "AudioContext.h",
    "AudioDestinationNode.cpp",
    "AudioDestinationNode.h",
    "AudioListener.cpp",
    "AudioListener.h",
    "AudioNode.cpp",
    "AudioNode.h",
    "AudioNodeInput.cpp",
    "AudioNodeInput.h",
    "AudioNodeOutput.cpp",
    "AudioNodeOutput.h",
    "AudioParam.cpp",
    "AudioParam.h",
    "AudioParamMap.cpp",
    "AudioParamMap.h",
    "AudioParamTimeline.cpp",
    "AudioParamTimeline.h",
    "AudioProcessingEvent.cpp",
    "AudioProcessingEvent.h",
    "AudioScheduledSourceNode.cpp",
    "AudioScheduledSourceNode.h",
    "AudioSummingJunction.cpp",
    "AudioSummingJunction.h",
    "AudioWorklet.cpp",
    "AudioWorklet.h",
    "AudioWorkletGlobalScope.cpp",
    "AudioWorkletGlobalScope.h",
    "AudioWorkletMessagingProxy.cpp",
    "AudioWorkletMessagingProxy.h",
    "AudioWorkletNode.cpp",
    "AudioWorkletNode.h",
    "AudioWorkletObjectProxy.cpp",
    "AudioWorkletObjectProxy.h",
    "AudioWorkletProcessor.cpp",
    "AudioWorkletProcessor.h",
    "AudioWorkletProcessorDefinition.cpp",
    "AudioWorkletProcessorDefinition.h",
    "AudioWorkletThread.cpp",
    "AudioWorkletThread.h",
    "BaseAudioContext.cpp",
    "BaseAudioContext.h",
    "BiquadDSPKernel.cpp",
    "BiquadDSPKernel.h",
    "BiquadFilterNode.cpp",
    "BiquadFilterNode.h",
    "BiquadProcessor.cpp",
    "BiquadProcessor.h",
    "ChannelMergerNode.cpp",
    "ChannelMergerNode.h",
    "ChannelSplitterNode.cpp",
    "ChannelSplitterNode.h",
    "ConstantSourceNode.cpp",
    "ConstantSourceNode.h",
    "ConvolverNode.cpp",
    "ConvolverNode.h",
    "CrossThreadAudioWorkletProcessorInfo.h",
    "DefaultAudioDestinationNode.cpp",
    "DefaultAudioDestinationNode.h",
    "DeferredTaskHandler.cpp",
    "DeferredTaskHandler.h",
    "DelayDSPKernel.cpp",
    "DelayDSPKernel.h",
    "DelayNode.cpp",
    "DelayNode.h",
    "DelayProcessor.cpp",
    "DelayProcessor.h",
    "DynamicsCompressorNode.cpp",
    "DynamicsCompressorNode.h",
    "GainNode.cpp",
    "GainNode.h",
    "IIRDSPKernel.cpp",
    "IIRDSPKernel.h",
    "IIRFilterNode.cpp",
    "IIRFilterNode.h",
    "IIRProcessor.cpp",
    "IIRProcessor.h",
    "MediaElementAudioSourceNode.cpp",
    "MediaElementAudioSourceNode.h",
    "MediaStreamAudioDestinationNode.cpp",
    "MediaStreamAudioDestinationNode.h",
    "MediaStreamAudioSourceNode.cpp",
    "MediaStreamAudioSourceNode.h",
    "OfflineAudioCompletionEvent.cpp",
    "OfflineAudioCompletionEvent.h",
    "OfflineAudioContext.cpp",
    "OfflineAudioContext.h",
    "OfflineAudioDestinationNode.cpp",
    "OfflineAudioDestinationNode.h",
    "OscillatorNode.cpp",
    "OscillatorNode.h",
    "PannerNode.cpp",
    "PannerNode.h",
    "PeriodicWave.cpp",
    "PeriodicWave.h",
    "RealtimeAnalyser.cpp",
    "RealtimeAnalyser.h",
    "ScriptProcessorNode.cpp",
    "ScriptProcessorNode.h",
    "StereoPannerNode.cpp",
    "StereoPannerNode.h",
    "WaveShaperDSPKernel.cpp",
    "WaveShaperDSPKernel.h",
    "WaveShaperNode.cpp",
    "WaveShaperNode.h",
    "WaveShaperProcessor.cpp",
    "WaveShaperProcessor.h",
    "WindowAudioWorklet.cpp",
    "WindowAudioWorklet.h",
  ]

  if (is_win) {
    jumbo_excluded_sources = [
      # Uses Supplement<LocalDOMWindow> with MODULES_EXPORT while
      # other files use Supplement<LocalDOMWindow> with
      # CORE_EXPORT. Mixing those in the same compilation unit
      # triggers link errors in Windows. https://crbug.com/739340
      "WindowAudioWorklet.cpp",
    ]

    # Result of 32-bit shift implicitly converted to 64 bits.
    cflags = [ "/wd4334" ]
  }
}
