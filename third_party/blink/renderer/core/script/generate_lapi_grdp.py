#!/usr/bin/env python
# Copyright (c) 2019 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import sys
import os


def main():
    core_script_path = os.path.dirname(sys.argv[0])

    # The path to the directory containing layered API files.
    input_path = os.path.join(core_script_path, 'resources/layered_api')

    # Relative path from the main grd file; in this case,
    # third_party/blink/public/blink_resources.grd.
    input_relative_path = '../renderer/core/script/resources/layered_api'

    # Output .grdp file.
    output_grdp_file = open(
        os.path.join(core_script_path, 'resources/layered_api/resources.grdp'),
        'w')

    # Output .h file.
    output_header_file = open(
        os.path.join(core_script_path, 'layered_api_resources.h'), 'w')

    print >> output_grdp_file, '''<?xml version="1.0" encoding="utf-8"?>
<grit-part>
  <!-- Layered API scripts. This file is generated by
       core/script/generate_lapi_grdp.py and shouldn't modified manually.
       A corresponding header file (layered_api_resources.h) is also generated.
       The paths are relative to the main grd file, i.e.
       third_party/blink/public/blink_resources.grd.
    -->'''

    print >> output_header_file, '''// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/resources/grit/blink_resources.h"
#include "third_party/blink/renderer/core/script/layered_api.h"

#ifndef THIRD_PARTY_BLINK_RENDERER_CORE_SCRIPT_LAYERED_API_RESOURCES_H_
#define THIRD_PARTY_BLINK_RENDERER_CORE_SCRIPT_LAYERED_API_RESOURCES_H_

// This file is generated by
// core/script/generate_lapi_grdp.py and shouldn't modified manually.
// A corresponding grdp file (layered_api_resources.grdp) is also generated.

// This file should be included only once from core/script/layered_api.cc.

namespace blink {

namespace layered_api {

namespace {

const LayeredAPIResource kLayeredAPIResources[] = {'''

    for root, _, filenames in sorted(os.walk(input_path)):
        if root == 'resources/layered_api':
            # We don't include top-level files under resources/layered_api,
            # including generated resources.grdp.
            continue
        for filename in sorted(filenames):
            if filename.startswith('.') or filename.startswith(
                    'README') or filename.startswith('OWNERS'):
                continue
            relpath = os.path.relpath(os.path.join(root, filename), input_path)
            relpath = relpath.replace('\\', '/')
            resource_id = relpath
            resource_id = resource_id.replace('/', '_')
            resource_id = resource_id.replace('-', '_')
            resource_id = resource_id.replace('.', '_')
            resource_id = resource_id.upper()
            resource_id = "IDR_LAYERED_API_" + resource_id
            print >> output_header_file, (
                '    {"%s",\n     %s},' % (relpath, resource_id))
            print >> output_grdp_file, (
                '  <include name="%s" file="%s/%s" type="BINDATA" skip_minify="true" compress="gzip"/>'
                % (resource_id, input_relative_path, relpath))
        print >> output_header_file, ''
    print >> output_grdp_file, '</grit-part>'

    print >> output_header_file, '''};

}  // namespace

}  // namespace layered_api

}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_CORE_SCRIPT_LAYERED_API_RESOURCES_H_'''
    output_grdp_file.close()
    output_header_file.close()


if __name__ == '__main__':
    main()
