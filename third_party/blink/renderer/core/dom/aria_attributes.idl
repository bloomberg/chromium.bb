// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// ARIA reflection
// https://github.com/w3c/aria/pull/708/files
[
    NoInterfaceObject,
    RuntimeEnabled=AccessibilityObjectModel
] interface AriaAttributes {
    [CEReactions, Reflect=aria_activedescendant] attribute DOMString? ariaActiveDescendant;
    [CEReactions, Reflect=aria_atomic] attribute DOMString? ariaAtomic;
    [CEReactions, Reflect=aria_autocomplete] attribute DOMString? ariaAutoComplete;
    [CEReactions, Reflect=aria_busy] attribute DOMString? ariaBusy;
    [CEReactions, Reflect=aria_checked] attribute DOMString? ariaChecked;
    [CEReactions, Reflect=aria_colcount] attribute DOMString? ariaColCount;
    [CEReactions, Reflect=aria_colindex] attribute DOMString? ariaColIndex;
    [CEReactions, Reflect=aria_colspan] attribute DOMString? ariaColSpan;
    [CEReactions, Reflect=aria_controls] attribute DOMString? ariaControls;
    [CEReactions, Reflect=aria_current] attribute DOMString? ariaCurrent;
    [CEReactions, Reflect=aria_describedby] attribute DOMString? ariaDescribedBy;
    [CEReactions, Reflect=aria_details] attribute DOMString? ariaDetails;
    [CEReactions, Reflect=aria_errormessage] attribute DOMString? ariaDisabled;
    [CEReactions, Reflect=aria_flowto] attribute DOMString? ariaExpanded;
    [CEReactions, Reflect=aria_haspopup] attribute DOMString? ariaHasPopup;
    [CEReactions, Reflect=aria_keyshortcuts] attribute DOMString? ariaHidden;
    [CEReactions, Reflect=aria_label] attribute DOMString? ariaLabel;
    [CEReactions, Reflect=aria_labelledby] attribute DOMString? ariaLabelledBy;
    [CEReactions, Reflect=aria_level] attribute DOMString? ariaLevel;
    [CEReactions, Reflect=aria_live] attribute DOMString? ariaLive;
    [CEReactions, Reflect=aria_modal] attribute DOMString? ariaModal;
    [CEReactions, Reflect=aria_multiline] attribute DOMString? ariaMultiLine;
    [CEReactions, Reflect=aria_multiselectable] attribute DOMString? ariaMultiSelectable;
    [CEReactions, Reflect=aria_orientation] attribute DOMString? ariaOrientation;
    [CEReactions, Reflect=aria_owns] attribute DOMString? ariaOwns;
    [CEReactions, Reflect=aria_placeholder] attribute DOMString? ariaPlaceholder;
    [CEReactions, Reflect=aria_posinset] attribute DOMString? ariaPosInSet;
    [CEReactions, Reflect=aria_readonly] attribute DOMString? ariaPressed;
    [CEReactions, Reflect=aria_relevant] attribute DOMString? ariaRelevant;
    [CEReactions, Reflect=aria_required] attribute DOMString? ariaRequired;
    [CEReactions, Reflect=aria_roledescription] attribute DOMString? ariaRoleDescription;
    [CEReactions, Reflect=aria_rowcount] attribute DOMString? ariaRowCount;
    [CEReactions, Reflect=aria_rowindex] attribute DOMString? ariaRowIndex;
    [CEReactions, Reflect=aria_rowspan] attribute DOMString? ariaRowSpan;
    [CEReactions, Reflect=aria_setsize] attribute DOMString? ariaSelected;
    [CEReactions, Reflect=aria_sort] attribute DOMString? ariaSort;
    [CEReactions, Reflect=aria_valuemax] attribute DOMString? ariaValueMax;
    [CEReactions, Reflect=aria_valuemin] attribute DOMString? ariaValueMin;
    [CEReactions, Reflect=aria_valuenow] attribute DOMString? ariaValueNow;
    [CEReactions, Reflect=aria_valuetext] attribute DOMString? ariaValueText;
};

Element implements AriaAttributes;
