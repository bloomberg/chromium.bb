# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/buildflag_header.gni")
import("//build/config/jumbo.gni")
import("//testing/test.gni")
import("//third_party/blink/renderer/platform/platform.gni")

declare_args() {
  # Enables heap verification.
  enable_blink_heap_verification = false
}

buildflag_header("blink_heap_buildflags") {
  header = "heap_buildflags.h"
  header_dir = "third_party/blink/renderer/platform/heap"

  flags = [ "BLINK_HEAP_VERIFICATION=$enable_blink_heap_verification" ]
}

blink_platform_sources("heap") {
  sources = [
    "address_cache.cc",
    "address_cache.h",
    "atomic_entry_flag.h",
    "blink_gc.cc",
    "blink_gc.h",
    "blink_gc_memory_dump_provider.cc",
    "blink_gc_memory_dump_provider.h",
    "cancelable_task_scheduler.cc",
    "cancelable_task_scheduler.h",
    "disallow_new_wrapper.h",
    "finalizer_traits.h",
    "garbage_collected.h",
    "gc_info.cc",
    "gc_info.h",
    "gc_task_runner.h",
    "handle.h",
    "heap.cc",
    "heap.h",
    "heap_allocator.cc",
    "heap_allocator.h",
    "heap_compact.cc",
    "heap_compact.h",
    "heap_linked_stack.h",
    "heap_page.cc",
    "heap_page.h",
    "heap_stats_collector.cc",
    "heap_stats_collector.h",
    "heap_traits.h",
    "marking_verifier.cc",
    "marking_verifier.h",
    "marking_visitor.cc",
    "marking_visitor.h",
    "member.h",
    "name_traits.h",
    "page_memory.cc",
    "page_memory.h",
    "page_pool.cc",
    "page_pool.h",
    "persistent.h",
    "persistent_node.cc",
    "persistent_node.h",
    "process_heap.cc",
    "process_heap.h",
    "self_keep_alive.h",
    "thread_state.cc",
    "thread_state.h",
    "thread_state_scopes.h",
    "thread_state_statistics.cc",
    "thread_state_statistics.h",
    "threading_traits.h",
    "trace_traits.h",
    "unified_heap_controller.cc",
    "unified_heap_controller.h",
    "unified_heap_marking_visitor.cc",
    "unified_heap_marking_visitor.h",
    "visitor.h",
    "worklist.h",
  ]

  deps = [
    ":blink_heap_buildflags",
    "//base",
    "//third_party/blink/renderer/platform:make_platform_generated",
    "//third_party/blink/renderer/platform/heap/asm",
    "//third_party/icu",
    "//v8",
  ]
}

jumbo_source_set("test_support") {
  testonly = true

  sources = [
    "heap_test_utilities.cc",
    "heap_test_utilities.h",
  ]

  deps = [
    "//testing/gtest",
    "//third_party/blink/public/mojom:mojom_platform_blink_headers",
    "//third_party/blink/renderer/platform:bindings_buildflags",
  ]
}

test("blink_heap_unittests") {
  deps = [
    ":blink_heap_unittests_sources",
  ]
  if (is_android) {
    deps += [
      "//base:base_java",
      "//content/shell/android:content_shell_assets",
      "//net/android:net_java",
      "//ui/android:ui_full_java",
    ]
  }
}

jumbo_source_set("blink_heap_unittests_sources") {
  testonly = true
  sources = [
    "../testing/run_all_tests.cc",
    "address_cache_test.cc",
    "blink_gc_memory_dump_provider_test.cc",
    "cancelable_task_scheduler_test.cc",
    "gc_info_test.cc",
    "heap_compact_test.cc",
    "heap_stats_collector_test.cc",
    "heap_test.cc",
    "heap_thread_test.cc",
    "heap_traits_test.cc",
    "incremental_marking_test.cc",
    "marking_verifier_test.cc",
    "name_trait_test.cc",
    "object_start_bitmap_test.cc",
    "persistent_test.cc",
    "thread_state_scheduling_test.cc",
    "worklist_test.cc",
    "write_barrier_perftest.cc",
  ]

  configs += [
    "//third_party/blink/renderer/platform/wtf:wtf_config",
    "//third_party/blink/renderer:config",
    "//third_party/blink/renderer:inside_blink",
  ]

  deps = [
    "//base",
    "//base/test:test_support",
    "//testing/gmock",
    "//testing/gtest",
    "//third_party/blink/renderer/platform:test_support",
    "//third_party/blink/renderer/platform/wtf",
  ]

  if (is_fuchsia) {
    # Needed for ../testing/run_all_tests.cc.
    deps += [ "//skia:test_fonts" ]
  }
}
