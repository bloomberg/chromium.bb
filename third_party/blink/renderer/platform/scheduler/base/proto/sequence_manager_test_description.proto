syntax = "proto2";

package base.sequence_manager;

// Describes the grammar of the fuzzer's test description. At a high level, it
// describes a sequence of actions that can be executed.
message SequenceManagerTestDescription {
  // NEXT ID = 2

  enum QueuePriority {
    // NEXT ID = 6

    UNDEFINED = 0;
    BEST_EFFORT = 1;
    LOW = 2;
    NORMAL = 3;
    HIGH = 4;
    HIGHEST = 5;
  }

  // Describes interfaces that can be tested by the fuzzer.
  // TODO(farahcharab) Add more interfaces here.
  message Action {
    // NEXT ID = 4

    optional uint64 action_id = 1;

    oneof action {
      CreateTaskQueueAction create_task_queue = 2;
      PostDelayedTaskAction post_delayed_task = 3;
    }
  }

  message Task {
    // NEXT ID = 4

    optional uint64 task_id = 1;

    optional uint64 duration_ms = 2;

    // If not set, then this is a no-op task.
    repeated Action action = 3;
  }

  // Describes the grammar of SequenceManager::CreateTaskQueue.
  message CreateTaskQueueAction {
    // NEXT ID = 2

    optional QueuePriority initial_priority = 1;
  }

  // Describes the grammar of TaskQueue::PostDelayedTask.
  message PostDelayedTaskAction {
    // NEXT ID = 4

    // Used to identify the queue to post to.
    optional uint64 task_queue_id = 1;

    optional Task task = 2;

    // Delay parameter passed to TaskQueue::PostDelayedTask i.e. the delay is
    // measured after executing the PostDelayedTaskAction.
    optional uint64 delay_ms = 3;
  }

  repeated Action initial_actions = 1;
}
