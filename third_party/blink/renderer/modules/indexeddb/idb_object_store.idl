/*
 * Copyright (C) 2010 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// https://w3c.github.io/IndexedDB/#idl-def-IDBObjectStore

[
    Exposed=(Window,Worker)
] interface IDBObjectStore {
    [RaisesException=Setter] attribute DOMString name;
    [CallWith=ScriptState] readonly attribute any keyPath;
    readonly attribute DOMStringList indexNames;
    [SameObject] readonly attribute IDBTransaction transaction;
    readonly attribute boolean autoIncrement;

    [NewObject, CallWith=ScriptState, RaisesException] IDBRequest put(any value, [DefaultValue=Undefined] optional any key);
    [NewObject, CallWith=ScriptState, RaisesException] IDBRequest add(any value, [DefaultValue=Undefined] optional any key);
    [NewObject, CallWith=ScriptState, ImplementedAs=Delete, RaisesException] IDBRequest delete(any key);
    [NewObject, CallWith=ScriptState, RaisesException] IDBRequest clear();
    [NewObject, CallWith=ScriptState, RaisesException] IDBRequest get(any key);
    [NewObject, CallWith=ScriptState, RaisesException] IDBRequest getKey(any key);
    [NewObject, CallWith=ScriptState, RaisesException] IDBRequest getAll([DefaultValue=Undefined] optional any query,
                                                                         optional [EnforceRange] unsigned long count);
    [NewObject, CallWith=ScriptState, RaisesException] IDBRequest getAllKeys([DefaultValue=Undefined] optional any query,
                                                                             optional [EnforceRange] unsigned long count);
    [NewObject, CallWith=ScriptState, RaisesException] IDBRequest count([DefaultValue=Undefined] optional any key);

    [NewObject, CallWith=ScriptState, RaisesException] IDBRequest openCursor([DefaultValue=Undefined] optional any range,
                                                                             optional IDBCursorDirection direction = "next");
    [NewObject, CallWith=ScriptState, RaisesException] IDBRequest openKeyCursor([DefaultValue=Undefined] optional any range,
                                                                                optional IDBCursorDirection direction = "next");

    [RaisesException] IDBIndex index(DOMString name);
    [NewObject, CallWith=ScriptState, RaisesException] IDBIndex createIndex(DOMString name,
                                                                            (DOMString or sequence<DOMString>) keyPath,
                                                                            optional IDBIndexParameters options);
    [RaisesException] void deleteIndex(DOMString name);
};
