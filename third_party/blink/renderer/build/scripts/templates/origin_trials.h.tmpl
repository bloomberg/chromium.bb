{% from 'templates/macros.tmpl' import license, source_files_for_generated_file %}
{{license()}}

{{source_files_for_generated_file(template_file, input_files)}}

#ifndef {{header_guard}}
#define {{header_guard}}

#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/platform/runtime_enabled_features.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
#include "third_party/blink/renderer/platform/wtf/vector.h"

#define ASSERT_ORIGIN_TRIAL(feature) \
static_assert(std::is_same<decltype(::blink::origin_trials::feature##Enabled(\
                                        nullptr)), bool>(), \
              #feature " must be part of an origin trial");

namespace blink {

class ExecutionContext;

// A namespace with dynamic tests for experimental features which can be
// enabled by the origin trials framework via origin trial tokens.
namespace origin_trials {

// Return true if there is a feature with the passed |trial_name|.
CORE_EXPORT bool IsTrialValid(const String& trial_name);

// Return origin trials features that are enabled by the passed |trial_name|.
// The trial name MUST be valid (call IsTrialValid() before calling this function).
CORE_EXPORT const Vector<OriginTrialFeature>& FeaturesForTrial(const String& trial_name);

{% for feature in features %}
{% if feature.origin_trial_feature_name %}
CORE_EXPORT bool {{feature.name}}Enabled(const ExecutionContext*);
{% endif %}
{% endfor %}

// Return the list of features which will also be enabled if the given
// |feature| is enabled.
Vector<OriginTrialFeature> GetImpliedFeatures(OriginTrialFeature feature);

bool FeatureEnabledForOS(OriginTrialFeature feature);

}  // namespace origin_trials

}  // namespace blink

#endif  // {{header_guard}}
