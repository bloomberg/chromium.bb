// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "third_party/blink/public/mojom/referrer.mojom";
import "ui/gfx/geometry/mojom/geometry.mojom";
import "url/mojom/origin.mojom";
import "url/mojom/url.mojom";

// These are messages sent from the browser to the renderer in relation to
// running prerenders.
interface PrerenderHandleClient {
  // Signals to launcher that a prerender is running.
  OnPrerenderStart();

  // Signals to launcher that a prerender has stopped loading.
  OnPrerenderStopLoading();

  // Signals to launcher that a prerender has had it's 'domcontentloaded' event.
  OnPrerenderDomContentLoaded();

  // Signals to a launcher that a prerender is no longer running.
  OnPrerenderStop();
};

// A handle to a requested prerender. Dropping a connection to the handle is
// treated equivalently to calling the Abandon method.
interface PrerenderHandle {
  // Notifies on removal of a <link rel=prerender> element from the document.
  // This method does not trigger an OnPrerenderStop() call.
  Cancel();

  // A prerender is abandoned when it's navigated away from or suspended in the
  // page cache. This is a weaker signal than Cancel(), since the launcher
  // hasn't indicated that the prerender isn't wanted, and we may end up using
  // it after, for instance, a short redirect chain.
  Abandon();
};

struct PrerenderAttributes {
  url.mojom.Url url;
  uint32 rel_types;
  blink.mojom.Referrer referrer;
  url.mojom.Origin initiator_origin;
  gfx.mojom.Size view_size;
};

// Used by a renderer that is loading a web page to process prerender /
// prefetch requests, that are generally in the form of <link rel> tags that
// the web page author provided as hints.
interface PrerenderProcessor {
  // Called to add a prerender request to the queue for processing. The
  // |prerender_handle_client| will be notified as the prerendering makes
  // progress, and |prerender_handle| provides the caller with the ability to
  // further control the prerender.
  AddPrerender(PrerenderAttributes prerender_attribute,
               pending_remote<PrerenderHandleClient> prerender_handle_client,
               pending_receiver<PrerenderHandle> prerender_handle);
};
