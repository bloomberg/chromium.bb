// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "third_party/blink/public/mojom/blob/blob.mojom";
import "third_party/blink/public/mojom/blob/serialized_blob.mojom";
import "third_party/blink/public/mojom/native_file_system/native_file_system_error.mojom";
import "third_party/blink/public/mojom/native_file_system/native_file_system_file_writer.mojom";
import "third_party/blink/public/mojom/native_file_system/native_file_system_transfer_token.mojom";
import "third_party/blink/public/mojom/permissions/permission_status.mojom";

// This interface represents a handle to a directory in the Native File System
// API.
interface NativeFileSystemFileHandle {
  // Queries the current permission status for this handle.
  GetPermissionStatus(bool writable) => (PermissionStatus status);

  // Requests read and/or write permission for this handle. Returns the new
  // permission status for this handle.
  RequestPermission(bool writable) => (PermissionStatus status);

  // Returns a blob representing the current state of this file.
  AsBlob() => (NativeFileSystemError result, SerializedBlob? blob);

  // Deletes this file.
  // TODO(oyiptong): Remove this method. It isn't part of the spec anymore.
  Remove() => (NativeFileSystemError result);

  // Write data from |data| to the given |position| in the file being written
  // to. Returns whether the operation succeeded and if so how many bytes were
  // written.
  // TODO(mek): This might need some way of reporting progress events back to
  // the renderer.
  // TODO(oyiptong): Refactor into NFSFileWriter.
  Write(uint64 offset, Blob data) => (NativeFileSystemError result,
                                      uint64 bytes_written);

  // Write data from |stream| to the given |position| in the file being written
  // to. Returns whether the operation succeeded and if so how many bytes were
  // written.
  // TODO(mek): This might need some way of reporting progress events back to
  // the renderer.
  // TODO(oyiptong): Refactor into NFSFileWriter.
  WriteStream(uint64 offset, handle<data_pipe_consumer> stream) =>
      (NativeFileSystemError result, uint64 bytes_written);

  // Changes the length of the file to be |length|. If |length| is larger than
  // the current size of the file, the file will be extended, and the extended
  // part is filled with null bytes.
  // TODO(oyiptong): Refactor into NFSFileWriter.
  Truncate(uint64 length) => (NativeFileSystemError result);

  // Returns a FileWriter object. The FileWriter provides write operations on a file.
  CreateFileWriter() => (NativeFileSystemError result, NativeFileSystemFileWriter? writer);

  // Create a TransferToken for this directory. This token can be used to pass
  // a reference to this directory to other methods, for example to copy or move
  // the file, or when transferring the handle over postMessage.
  Transfer(NativeFileSystemTransferToken& token);
};
