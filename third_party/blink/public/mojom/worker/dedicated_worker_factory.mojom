// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "services/service_manager/public/mojom/interface_provider.mojom";
import "third_party/blink/public/mojom/blob/blob_url_store.mojom";
import "third_party/blink/public/mojom/loader/url_loader_factory_bundle.mojom";
import "third_party/blink/public/mojom/worker/worker_main_script_load_params.mojom";
import "third_party/blink/public/mojom/service_worker/controller_service_worker.mojom";
import "third_party/blink/public/mojom/service_worker/service_worker_provider.mojom";
import "url/mojom/origin.mojom";
import "url/mojom/url.mojom";

// The name of the InterfaceProviderSpec in service manifests used by the
// frame tree to expose dedicated-worker-specific interfaces between renderer
// and browser.
const string kNavigation_DedicatedWorkerSpec = "navigation:dedicated_worker";

// PlzDedicatedWorker:
// An interface implemented by clients (e.g., the renderer where "new Worker()"
// was invoked) to observe events on the DedicatedWorkerFactory.
interface DedicatedWorkerFactoryClient {
  // Called when the worker host is created.
  OnWorkerHostCreated(
      // Used for accessing services from the worker.
      service_manager.mojom.InterfaceProvider interface_provider);

  // Called when the main worker script is successfully loaded. This is called
  // after OnWorkerHostCreated().
  OnScriptLoaded(
      // The info about the service worker provider in the browser process that
      // provides support for this worker to be a service worker client.
      ServiceWorkerProviderInfoForWorker service_worker_provider_info,

      // Used for passing the main script pre-requested by the browser process
      // and its redirect information.
      WorkerMainScriptLoadParams main_script_load_params,

      // Used for loading subresources where applicable. For example, this
      // allows the worker to load chrome-extension:// URLs which the renderer's
      // default loader factory can't load.
      URLLoaderFactoryBundle? subresource_loader_factories,

      // Used to make fetches from the worker go through the controller service
      // worker. This is null when there're no controller service worker.
      ControllerServiceWorkerInfo? controller_info);

  // Called when the host fails to load the main worker script. This is called
  // after OnWorkerHostCreated().
  OnScriptLoadFailed();
};

// An interface used to instantiate a dedicated worker. The implementation of
// this interface lives in the browser process.
interface DedicatedWorkerFactory {
  // Non-PlzDedicatedWorker:
  // The factory client should call this instead of CreateAndStartLoad() when
  // PlzDedicatedWorker is disabled.
  //
  // Informs the browser that the renderer has created a new dedicated worker,
  // requesting |worker_interface_provider| to provide the worker access to mojo
  // interfaces. |origin| must either be unique or match the origin of the
  // creating document.
  CreateDedicatedWorker(
      url.mojom.Origin origin,
      service_manager.mojom.InterfaceProvider& worker_interface_provider);

  // PlzDedicatedWorker:
  // The factory client should call this instead of CreateDedicatedWorker() when
  // PlzDedicatedWorker is enabled.
  //
  // Informs the browser that the renderer has created a new dedicated worker,
  // and requests to start worker script loading. |origin| must either be unique
  // or match the origin of the creating context (Document or
  // DedicatedWorkerGlobalScope).
  CreateAndStartLoad(url.mojom.Url script_url,
                     url.mojom.Origin origin,
                     blink.mojom.BlobURLToken? blob_url_token,
                     DedicatedWorkerFactoryClient client);
};
