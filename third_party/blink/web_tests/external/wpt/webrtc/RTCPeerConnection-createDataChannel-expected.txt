This is a testharness.js-based test.
PASS createDataChannel with no argument should throw TypeError
PASS createDataChannel with closed connection should throw InvalidStateError
FAIL createDataChannel attribute default values assert_equals: expected (object) null but got (undefined) undefined
FAIL createDataChannel with provided parameters should initialize attributes to provided values Failed to execute 'createDataChannel' on 'RTCPeerConnection': RTCDataChannel is not supported
PASS createDataChannel with label "foo" should succeed
PASS createDataChannel with label null should succeed
PASS createDataChannel with label undefined should succeed
PASS createDataChannel with label lone surrogate should succeed
PASS createDataChannel with ordered false should succeed
PASS createDataChannel with ordered null/undefined should succeed
FAIL createDataChannel with maxPacketLifeTime 0 should succeed assert_equals: expected (number) 0 but got (undefined) undefined
PASS createDataChannel with maxRetransmits 0 should succeed
FAIL createDataChannel with both maxPacketLifeTime and maxRetransmits null should succeed Failed to execute 'createDataChannel' on 'RTCPeerConnection': RTCDataChannel is not supported
FAIL createDataChannel with both maxPacketLifeTime and maxRetransmits should throw TypeError assert_throws: function "() => pc.createDataChannel('', {
    maxPacketLifeTime: 0,
    maxRetransmits: 0
  })" threw object "NotSupportedError: Failed to execute 'createDataChannel' on 'RTCPeerConnection': RTCDataChannel is not supported" ("NotSupportedError") expected object "TypeError" ("TypeError")
PASS createDataChannel with protocol "foo" should succeed
PASS createDataChannel with protocol null should succeed
PASS createDataChannel with protocol undefined should succeed
PASS createDataChannel with protocol lone surrogate should succeed
PASS createDataChannel with id 0 should succeed
PASS createDataChannel with id 1 should succeed
FAIL createDataChannel with id 65534 should succeed Failed to execute 'createDataChannel' on 'RTCPeerConnection': RTCDataChannel is not supported
PASS createDataChannel with id -1 should throw TypeError
FAIL createDataChannel with id 65535 should throw TypeError assert_throws: function "() => pc.createDataChannel('', { id })" threw object "NotSupportedError: Failed to execute 'createDataChannel' on 'RTCPeerConnection': RTCDataChannel is not supported" ("NotSupportedError") expected object "TypeError" ("TypeError")
PASS createDataChannel with id 65536 should throw TypeError
FAIL createDataChannel with priority "high" should succeed assert_equals: expected (string) "high" but got (undefined) undefined
FAIL createDataChannel with invalid priority should throw TypeError assert_throws: function "() => pc.createDataChannel('', { priority: 'invalid' })" did not throw
FAIL createDataChannel with too long label should throw TypeError assert_throws: function "() =>
    pc.createDataChannel('l'.repeat(65536))" did not throw
FAIL createDataChannel with too long label (2 byte unicode) should throw TypeError assert_throws: function "() =>
    pc.createDataChannel('\u00b5'.repeat(32768))" did not throw
PASS createDataChannel with same label used twice should not throw
PASS createDataChannel with negotiated true should succeed
FAIL createDataChannel with too long protocol should throw TypeError assert_throws: function "() =>
    pc.createDataChannel('', {
      protocol: 'p'.repeat(65536)
    })" did not throw
FAIL createDataChannel with too long protocol (2 byte unicode) should throw TypeError assert_throws: function "() =>
    pc.createDataChannel('', {
      protocol: '\u00b6'.repeat(32768)
    })" did not throw
PASS createDataChannel with maximum length label and protocol should succeed
PASS createDataChannel with negotiated false should succeed
FAIL createDataChannel with negotiated false and id 42 should ignore the id assert_equals: Expect dc.id to be ignored (null) expected (object) null but got (number) 42
FAIL createDataChannel with negotiated true and id not defined should throw TypeError assert_throws: function "() =>
    pc.createDataChannel('test', {
      negotiated: true
    })" did not throw
FAIL createDataChannel with negotiated true and id null should throw TypeError assert_throws: function "() =>
    pc.createDataChannel('test', {
      negotiated: true,
      id: null
    })" did not throw
FAIL Channels created (after setRemoteDescription) should have id assigned assert_equals: Expect initial id to be null expected (object) null but got (number) 65535
FAIL Reusing a data channel id that is in use should throw OperationError assert_throws: function "() =>
    pc.createDataChannel('channel-3', {
      negotiated: true,
      id: 42,
    })" threw object "NotSupportedError: Failed to execute 'createDataChannel' on 'RTCPeerConnection': RTCDataChannel is not supported" that is not a DOMException OperationError: property "code" is equal to 9, expected 0
FAIL Reusing a data channel id that is in use (after setRemoteDescription) should throw OperationError assert_throws: function "() =>
    pc1.createDataChannel('channel-3', {
      negotiated: true,
      id: 42,
    })" threw object "NotSupportedError: Failed to execute 'createDataChannel' on 'RTCPeerConnection': RTCDataChannel is not supported" that is not a DOMException OperationError: property "code" is equal to 9, expected 0
FAIL Reusing a data channel id that is in use (after setRemoteDescription, negotiated via DCEP) should throw OperationError assert_throws: function "() =>
    pc1.createDataChannel('channel-2', {
      negotiated: true,
      id: dc1.id,
    })" threw object "NotSupportedError: Failed to execute 'createDataChannel' on 'RTCPeerConnection': RTCDataChannel is not supported" that is not a DOMException OperationError: property "code" is equal to 9, expected 0
PASS New data channel should be in the connecting state after creation (after connection establishment)
Harness: the test ran to completion.

