This test checks how text editor handles different movements: ctrl-left, ctrl-right, ctrl-shift-left, ctrl-backspace, alt-left, alt-right, alt-shift-left, alt-shift-right.

function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}

Running: testCtrlRightArrow
|function testFunction(foo, bar)
function| testFunction(foo, bar)
function testFunction|(foo, bar)
function testFunction(|foo, bar)
function testFunction(foo|, bar)
function testFunction(foo,| bar)
function testFunction(foo, bar|)
function testFunction(foo, bar)|
|{
{|
|    someFunctionCall(bar);
    someFunctionCall|(bar);
    someFunctionCall(|bar);
    someFunctionCall(bar|);
    someFunctionCall(bar);|
|    var b = 42;
    var| b = 42;
    var b| = 42;
    var b =| 42;
    var b = 42|;
    var b = 42;|
|    return a === 1 ? true : false;
    return| a === 1 ? true : false;
    return a| === 1 ? true : false;
    return a ===| 1 ? true : false;
    return a === 1| ? true : false;
    return a === 1 ?| true : false;
    return a === 1 ? true| : false;
    return a === 1 ? true :| false;
    return a === 1 ? true : false|;
    return a === 1 ? true : false;|
|}
}|
}|

Running: testCtrlLeftArrow
}|
|}
    return a === 1 ? true : false;|
    return a === 1 ? true : false|;
    return a === 1 ? true : |false;
    return a === 1 ? true |: false;
    return a === 1 ? |true : false;
    return a === 1 |? true : false;
    return a === |1 ? true : false;
    return a |=== 1 ? true : false;
    return |a === 1 ? true : false;
    |return a === 1 ? true : false;
|    return a === 1 ? true : false;
    var b = 42;|
    var b = 42|;
    var b = |42;
    var b |= 42;
    var |b = 42;
    |var b = 42;
|    var b = 42;
    someFunctionCall(bar);|
    someFunctionCall(bar|);
    someFunctionCall(|bar);
    someFunctionCall|(bar);
    |someFunctionCall(bar);
|    someFunctionCall(bar);
{|
|{
function testFunction(foo, bar)|
function testFunction(foo, bar|)
function testFunction(foo, |bar)
function testFunction(foo|, bar)
function testFunction(|foo, bar)
function testFunction|(foo, bar)
function |testFunction(foo, bar)
|function testFunction(foo, bar)
|function testFunction(foo, bar)

Running: testCtrlShiftRightArrow
|function testFunction(foo, bar)
>>function<<
>>function testFunction<<
>>function testFunction(<<
>>function testFunction(foo<<
>>function testFunction(foo,<<
>>function testFunction(foo, bar<<
>>function testFunction(foo, bar)<<
>>function testFunction(foo, bar)
<<
>>function testFunction(foo, bar)
{<<
>>function testFunction(foo, bar)
{
<<
>>function testFunction(foo, bar)
{
    someFunctionCall<<
>>function testFunction(foo, bar)
{
    someFunctionCall(<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b =<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a ===<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ?<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true :<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<

Running: testCtrlShiftLeftArrow
}|
>>}<<
>>
}<<
>>;
}<<
>>false;
}<<
>>: false;
}<<
>>true : false;
}<<
>>? true : false;
}<<
>>1 ? true : false;
}<<
>>=== 1 ? true : false;
}<<
>>a === 1 ? true : false;
}<<
>>return a === 1 ? true : false;
}<<
>>    return a === 1 ? true : false;
}<<
>>
    return a === 1 ? true : false;
}<<
>>;
    return a === 1 ? true : false;
}<<
>>42;
    return a === 1 ? true : false;
}<<
>>= 42;
    return a === 1 ? true : false;
}<<
>>b = 42;
    return a === 1 ? true : false;
}<<
>>var b = 42;
    return a === 1 ? true : false;
}<<
>>    var b = 42;
    return a === 1 ? true : false;
}<<
>>
    var b = 42;
    return a === 1 ? true : false;
}<<
>>);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<
>>function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}<<

Running: testCtrlBackspace
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
}
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;
<<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false;<<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : false<<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true : <<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? true <<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 ? <<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === 1 <<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a === <<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return a <<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    return <<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
    <<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;
<<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42;<<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = 42<<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b = <<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var b <<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    var <<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
    <<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);
<<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar);<<
===============
function testFunction(foo, bar)
{
    someFunctionCall(bar<<
===============
function testFunction(foo, bar)
{
    someFunctionCall(<<
===============
function testFunction(foo, bar)
{
    someFunctionCall<<
===============
function testFunction(foo, bar)
{
    <<
===============
function testFunction(foo, bar)
{
<<
===============
function testFunction(foo, bar)
{<<
===============
function testFunction(foo, bar)
<<
===============
function testFunction(foo, bar)<<
===============
function testFunction(foo, bar<<
===============
function testFunction(foo, <<
===============
function testFunction(foo<<
===============
function testFunction(<<
===============
function testFunction<<
===============
function <<
===============
<<

Running: testAltRight
====== CAMEL CASE MOVEMENTS ======
|function testMyCamelMove(foo, bar)
function| testMyCamelMove(foo, bar)
function test|MyCamelMove(foo, bar)
function testMy|CamelMove(foo, bar)
function testMyCamel|Move(foo, bar)
function testMyCamelMove|(foo, bar)
function testMyCamelMove(|foo, bar)
function testMyCamelMove(foo|, bar)
function testMyCamelMove(foo,| bar)
function testMyCamelMove(foo, bar|)
function testMyCamelMove(foo, bar)|
|{
{|
|    /* HelloWorld.TestSTRIng */
    /*| HelloWorld.TestSTRIng */
    /* Hello|World.TestSTRIng */
    /* HelloWorld|.TestSTRIng */
    /* HelloWorld.|TestSTRIng */
    /* HelloWorld.Test|STRIng */
    /* HelloWorld.TestSTR|Ing */
    /* HelloWorld.TestSTRIng| */
    /* HelloWorld.TestSTRIng */|
|    
    |
|    var a = e === 2;    
    var| a = e === 2;    
    var a| = e === 2;    
    var a =| e === 2;    
    var a = e| === 2;    
    var a = e ===| 2;    
    var a = e === 2|;    
    var a = e === 2;|    
    var a = e === 2;    |
|{}
{}|
|}
}|
}|

Running: testAltLeft
}|
|}
{}|
|{}
    var a = e === 2;    |
    var a = e === 2|;    
    var a = e === |2;    
    var a = e |=== 2;    
    var a = |e === 2;    
    var a |= e === 2;    
    var |a = e === 2;    
    |var a = e === 2;    
|    var a = e === 2;    
    |
|    
    /* HelloWorld.TestSTRIng */|
    /* HelloWorld.TestSTRIng |*/
    /* HelloWorld.TestSTR|Ing */
    /* HelloWorld.Test|STRIng */
    /* HelloWorld.|TestSTRIng */
    /* HelloWorld|.TestSTRIng */
    /* Hello|World.TestSTRIng */
    /* |HelloWorld.TestSTRIng */
    |/* HelloWorld.TestSTRIng */
|    /* HelloWorld.TestSTRIng */
{|
|{
function testMyCamelMove(foo, bar)|
function testMyCamelMove(foo, bar|)
function testMyCamelMove(foo, |bar)
function testMyCamelMove(foo|, bar)
function testMyCamelMove(|foo, bar)
function testMyCamelMove|(foo, bar)
function testMyCamel|Move(foo, bar)
function testMy|CamelMove(foo, bar)
function test|MyCamelMove(foo, bar)
function |testMyCamelMove(foo, bar)
|function testMyCamelMove(foo, bar)
|function testMyCamelMove(foo, bar)

Running: testAltShiftRight
|function testMyCamelMove(foo, bar)
>>function<<
>>function test<<
>>function testMy<<
>>function testMyCamel<<
>>function testMyCamelMove<<
>>function testMyCamelMove(<<
>>function testMyCamelMove(foo<<
>>function testMyCamelMove(foo,<<
>>function testMyCamelMove(foo, bar<<
>>function testMyCamelMove(foo, bar)<<
>>function testMyCamelMove(foo, bar)
<<
>>function testMyCamelMove(foo, bar)
{<<
>>function testMyCamelMove(foo, bar)
{
<<
>>function testMyCamelMove(foo, bar)
{
    /*<<
>>function testMyCamelMove(foo, bar)
{
    /* Hello<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.Test<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTR<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    <<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a =<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e ===<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    <<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<

Running: testAltShiftLeft
}|
>>}<<
>>
}<<
>>{}
}<<
>>
{}
}<<
>>;    
{}
}<<
>>2;    
{}
}<<
>>=== 2;    
{}
}<<
>>e === 2;    
{}
}<<
>>= e === 2;    
{}
}<<
>>a = e === 2;    
{}
}<<
>>var a = e === 2;    
{}
}<<
>>    var a = e === 2;    
{}
}<<
>>
    var a = e === 2;    
{}
}<<
>>    
    var a = e === 2;    
{}
}<<
>>
    
    var a = e === 2;    
{}
}<<
>>*/
    
    var a = e === 2;    
{}
}<<
>>Ing */
    
    var a = e === 2;    
{}
}<<
>>STRIng */
    
    var a = e === 2;    
{}
}<<
>>TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>World.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>/* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>Move(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>CamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>MyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<
>>function testMyCamelMove(foo, bar)
{
    /* HelloWorld.TestSTRIng */
    
    var a = e === 2;    
{}
}<<

