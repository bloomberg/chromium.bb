This is a testharness.js-based test.
FAIL Piping through a duck-typed pass-through transform stream should work Failed to execute 'pipeThrough' on 'ReadableStream': pipeThrough not yet implemented
FAIL Piping through a transform errored on the writable end does not cause an unhandled promise rejection Failed to execute 'pipeThrough' on 'ReadableStream': pipeThrough not yet implemented
FAIL pipeThrough should not call pipeTo on this Failed to execute 'pipeThrough' on 'ReadableStream': pipeThrough not yet implemented
FAIL pipeThrough should not call pipeTo on the ReadableStream prototype Failed to execute 'pipeThrough' on 'ReadableStream': pipeThrough not yet implemented
PASS pipeThrough should brand-check this and not allow 'null'
FAIL pipeThrough should brand-check readable and not allow 'null' assert_true: writable should have been accessed expected true got false
PASS pipeThrough should brand-check this and not allow 'undefined'
FAIL pipeThrough should brand-check readable and not allow 'undefined' assert_true: writable should have been accessed expected true got false
PASS pipeThrough should brand-check this and not allow '0'
FAIL pipeThrough should brand-check readable and not allow '0' assert_true: writable should have been accessed expected true got false
PASS pipeThrough should brand-check this and not allow 'NaN'
FAIL pipeThrough should brand-check readable and not allow 'NaN' assert_true: writable should have been accessed expected true got false
PASS pipeThrough should brand-check this and not allow 'true'
FAIL pipeThrough should brand-check readable and not allow 'true' assert_true: writable should have been accessed expected true got false
PASS pipeThrough should brand-check this and not allow 'ReadableStream'
FAIL pipeThrough should brand-check readable and not allow 'ReadableStream' assert_true: writable should have been accessed expected true got false
PASS pipeThrough should brand-check this and not allow '[object ReadableStream]'
FAIL pipeThrough should brand-check readable and not allow '[object ReadableStream]' assert_true: writable should have been accessed expected true got false
FAIL pipeThrough should brand-check writable and not allow 'null' assert_true: readable should have been accessed expected true got false
FAIL pipeThrough should brand-check writable and not allow 'undefined' assert_true: readable should have been accessed expected true got false
FAIL pipeThrough should brand-check writable and not allow '0' assert_true: readable should have been accessed expected true got false
FAIL pipeThrough should brand-check writable and not allow 'NaN' assert_true: readable should have been accessed expected true got false
FAIL pipeThrough should brand-check writable and not allow 'true' assert_true: readable should have been accessed expected true got false
FAIL pipeThrough should brand-check writable and not allow 'WritableStream' assert_true: readable should have been accessed expected true got false
FAIL pipeThrough should brand-check writable and not allow '[object WritableStream]' assert_true: readable should have been accessed expected true got false
FAIL pipeThrough should rethrow errors from accessing readable or writable assert_throws: pipeThrough should rethrow the error thrown by the writable getter function "() => ReadableStream.prototype.pipeThrough.call(rs, throwingWritable, {})" threw object "TypeError: Failed to execute 'pipeThrough' on 'ReadableStream': pipeThrough not yet implemented" ("TypeError") expected object "custom" ("custom")
PASS invalid values of signal should throw; specifically 'null'
PASS invalid values of signal should throw; specifically '0'
PASS invalid values of signal should throw; specifically 'NaN'
PASS invalid values of signal should throw; specifically 'true'
PASS invalid values of signal should throw; specifically 'AbortSignal'
PASS invalid values of signal should throw; specifically '[object AbortSignal]'
FAIL pipeThrough should accept a real AbortSignal Failed to execute 'pipeThrough' on 'ReadableStream': pipeThrough not yet implemented
PASS pipeThrough should throw if this is locked
PASS pipeThrough should throw if writable is locked
FAIL pipeThrough should not care if readable is locked Failed to execute 'pipeThrough' on 'ReadableStream': pipeThrough not yet implemented
FAIL preventCancel should work Failed to execute 'pipeThrough' on 'ReadableStream': pipeThrough not yet implemented
FAIL preventClose should work Failed to execute 'pipeThrough' on 'ReadableStream': pipeThrough not yet implemented
FAIL preventAbort should work Failed to execute 'pipeThrough' on 'ReadableStream': pipeThrough not yet implemented
Harness: the test ran to completion.

