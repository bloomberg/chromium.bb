@hex:
  # Since we can only track one restricted register at a time,
  # first operand of xchg is not considered zero-extended.
  87 d9 \\
  41 8a 04 1f
@dis:
     0:	87 d9                                        	xchg   %ebx,%ecx
     2:	41 8a 04 1f                                  	mov    (%r15,%rbx,1),%al
@rdfa_output:
  2: improper memory address - bad index
  return code: 1
@spec:
  2: register %rbx should be restricted, while in fact '%rcx' is restricted
----------------------------------------------------------------------
@hex:
  # Second operand is zero-extended fine.
  87 d9 \\
  41 8a 04 0f
@dis:
     0:	87 d9                                        	xchg   %ebx,%ecx
     2:	41 8a 04 0f                                  	mov    (%r15,%rcx,1),%al
@rdfa_output:
  return code: 0
@spec:
  SAFE
----------------------------------------------------------------------
@hex:
  # But we can't just ignore first operand: if it's rsp or rbp, that would
  # break sandboxing.
  87 e9 \\
  41 8a 04 0f
@dis:
     0:	87 e9                                        	xchg   %ebp,%ecx
     2:	41 8a 04 0f                                  	mov    (%r15,%rcx,1),%al
@rdfa_output:
  0: improper %rbp sandboxing
  return code: 1
@spec:
  0: ('non-zero-extending changes to ebp and esp are not allowed', Instruction(0x0: 87 e9  xchg %ebp,%ecx))
  2: register %rcx should be restricted, while in fact None is restricted
