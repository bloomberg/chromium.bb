@hex:
  # For background, see:
  # http://code.google.com/p/nativeclient/issues/detail?id=2576
  
  # "/4" encoding of SHL.  This is what assemblers generate.
  d3 e7
  d1 e7
  c1 e7 02
@dis:
     0:	d3 e7                                        	shl    %cl,%edi
     2:	d1 e7                                        	shl    %edi
     4:	c1 e7 02                                     	shl    $0x2,%edi
@rdfa_output:
  return code: 0
@spec:
  SAFE
----------------------------------------------------------------------
@hex:
  # "/6" encoding of SHL.  This is an alias encoding, which we should
  # disallow on the grounds of minimalism.
  d3 f7
@dis:
     0:	d3                                           	(bad)  
     1:	f7                                           	.byte 0xf7
@rdfa_output:
  0: unrecognized instruction
  return code: 1
@spec:
  0: ('objdump failed to decode', Instruction(0x0: d3  (bad)))
  1: ('objdump failed to decode', Instruction(0x1: f7  .byte 0xf7))
----------------------------------------------------------------------
@hex:
  d1 f7
@dis:
     0:	d1                                           	(bad)  
     1:	f7                                           	.byte 0xf7
@rdfa_output:
  0: unrecognized instruction
  return code: 1
@spec:
  0: ('objdump failed to decode', Instruction(0x0: d1  (bad)))
  1: ('objdump failed to decode', Instruction(0x1: f7  .byte 0xf7))
----------------------------------------------------------------------
@hex:
  c1 f7 02
@dis:
     0:	c1                                           	(bad)  
     1:	f7                                           	.byte 0xf7
     2:	02                                           	.byte 0x2
@rdfa_output:
  0: unrecognized instruction
  return code: 1
@spec:
  0: ('objdump failed to decode', Instruction(0x0: c1  (bad)))
  1: ('objdump failed to decode', Instruction(0x1: f7  .byte 0xf7))
  2: ('objdump failed to decode', Instruction(0x2: 02  .byte 0x2))
