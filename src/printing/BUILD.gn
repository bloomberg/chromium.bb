# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/chromeos/ui_mode.gni")
import("//build/config/features.gni")
import("//build/config/sysroot.gni")
import("//build/config/ui.gni")
import("//pdf/features.gni")
import("//printing/buildflags/buildflags.gni")
import("//testing/test.gni")
if (is_mac) {
  import("//build/config/mac/mac_sdk.gni")
}
if (is_android) {
  import("//build/config/android/rules.gni")
}

assert(enable_basic_printing)

if (is_win || enable_print_preview) {
  # Windows basic printing or print preview requires pdf enabled.
  assert(enable_pdf,
         "Windows basic printing or print preview needs pdf: " +
             "set enable_pdf=true.")
}

# Lower-dependency base printing files which are needed by both :printing and
# //printing/backend without incurring deeper UI dependencies (e.g.,
# //ui/accessibility).  New files should normally be added to :printing, and
# only be moved here if they are also required by //printing/backend.
component("printing_base") {
  sources = [
    "print_job_constants.cc",
    "print_job_constants.h",
    "printing_features.cc",
    "printing_features.h",
    "printing_utils.cc",
    "printing_utils.h",
    "units.cc",
    "units.h",
  ]
  if (use_cups_ipp || is_chromeos) {
    sources += [
      "printer_query_result.h",
      "printer_status.cc",
      "printer_status.h",
    ]
  }

  if (use_cups) {
    configs += [ ":cups" ]
  }

  configs += [ "//build/config/compiler:noshadowing" ]
  cflags = []
  defines = [ "IS_PRINTING_BASE_IMPL" ]

  public_deps = [ "//build:chromeos_buildflags" ]
  deps = [
    "//base",
    "//third_party/icu",
    "//ui/gfx",
    "//ui/gfx/geometry",
  ]
}

if (is_linux || is_chromeos) {
  source_set("printing_sandbox_hook") {
    sources = [
      "sandbox/print_backend_sandbox_hook_linux.cc",
      "sandbox/print_backend_sandbox_hook_linux.h",
    ]
    deps = [
      "//base",
      "//sandbox/linux:sandbox_services",
      "//sandbox/policy",
      "//services/network:network_sandbox_hook",
    ]
  }
}

component("printing") {
  sources = [
    "metafile.cc",
    "metafile.h",
    "metafile_skia.cc",
    "metafile_skia.h",
    "native_drawing_context.h",
    "nup_parameters.cc",
    "nup_parameters.h",
    "page_number.cc",
    "page_number.h",
    "page_range.cc",
    "page_range.h",
    "page_setup.cc",
    "page_setup.h",
    "pdf_render_settings.h",
    "print_dialog_gtk_interface.h",
    "print_settings.cc",
    "print_settings.h",
    "print_settings_conversion.cc",
    "print_settings_conversion.h",
    "printed_document.cc",
    "printed_document.h",
    "printing_context.cc",
    "printing_context.h",
    "pwg_raster_settings.h",
  ]

  configs += [ "//build/config/compiler:noshadowing" ]
  cflags = []
  defines = [ "IS_PRINTING_IMPL" ]

  public_deps = [
    ":printing_base",
    "//printing/backend",
    "//printing/buildflags",
  ]
  deps = [
    "//base",
    "//base:i18n",
    "//base/third_party/dynamic_annotations",
    "//build:chromeos_buildflags",
    "//cc/paint",
    "//printing/common",
    "//printing/mojom",
    "//skia",
    "//third_party/icu",
    "//ui/accessibility",
    "//ui/gfx",
    "//ui/gfx/geometry",
    "//url",
  ]

  if (is_android) {
    sources += [
      "printed_document_android.cc",
      "printing_context_android.cc",
      "printing_context_android.h",
    ]

    deps += [
      ":printing_jni_headers",
      "//ui/android",
    ]
  }

  if (is_chromeos) {
    sources += [
      "printed_document_chromeos.cc",
      "printing_context_no_system_dialog.cc",
      "printing_context_no_system_dialog.h",
    ]
  }

  if (is_linux) {
    sources += [
      "printed_document_linux.cc",
      "printing_context_linux.cc",
      "printing_context_linux.h",
    ]
  }

  if (is_mac) {
    sources += [
      "pdf_metafile_cg_mac.cc",
      "pdf_metafile_cg_mac.h",
      "print_settings_initializer_mac.cc",
      "print_settings_initializer_mac.h",
      "printed_document_mac.cc",
      "printing_context_mac.h",
      "printing_context_mac.mm",
    ]

    frameworks = [
      "AppKit.framework",
      "QuartzCore.framework",
      "ApplicationServices.framework",
      "CoreFoundation.framework",
      "CoreGraphics.framework",
    ]
  }

  if (is_win) {
    sources += [
      "emf_win.cc",
      "emf_win.h",
      "print_settings_initializer_win.cc",
      "print_settings_initializer_win.h",
      "printed_document_win.cc",
      "printed_page_win.cc",
      "printed_page_win.h",
      "printing_context_system_dialog_win.cc",
      "printing_context_system_dialog_win.h",
      "printing_context_win.cc",
      "printing_context_win.h",
    ]
  }

  if (use_aura) {
    deps += [ "//ui/aura" ]
  }

  if (use_cups) {
    configs += [ ":cups" ]

    if (is_chromeos) {
      sources += [
        "printing_context_chromeos.cc",
        "printing_context_chromeos.h",
      ]
    }
  }

  if (is_linux || is_chromeos) {
    deps += [ ":printing_sandbox_hook" ]
  }
}

static_library("test_support") {
  testonly = true
  sources = [
    "image.cc",
    "image.h",
  ]

  configs += [ "//build/config/compiler:noshadowing" ]
  public_deps = [
    "//printing",
    "//printing/backend:test_support",
    "//ui/gfx/geometry",
  ]
  deps = [
    "//base",
    "//build:chromeos_buildflags",
    "//skia",
    "//ui/gfx",
  ]

  if (is_android) {
    sources += [ "image_android.cc" ]
  }

  if (is_linux || is_chromeos) {
    sources += [ "image_linux.cc" ]
  }
  if (is_mac) {
    sources += [ "image_mac.cc" ]
  }
  if (is_win) {
    sources += [ "image_win.cc" ]
  }
}

test("printing_unittests") {
  sources = [
    "backend/mojom/print_backend_mojom_traits_unittest.cc",
    "backend/print_backend_unittest.cc",
    "backend/print_backend_utils_unittest.cc",
    "backend/test_print_backend_unittest.cc",
    "metafile_skia_unittest.cc",
    "mojom/printing_context_mojom_traits_unittest.cc",
    "nup_parameters_unittest.cc",
    "page_number_unittest.cc",
    "page_range_unittest.cc",
    "page_setup_unittest.cc",
    "print_settings_conversion_unittest.cc",
    "print_settings_unittest.cc",
    "printing_test.h",
    "printing_utils_unittest.cc",
    "units_unittest.cc",
  ]

  configs += [ "//build/config/compiler:noshadowing" ]
  deps = [
    ":printing",
    ":test_support",
    "//base/test:test_support",
    "//build:chromeos_buildflags",
    "//mojo/core/test:run_all_unittests",
    "//mojo/public/cpp/test_support:test_utils",
    "//printing/backend",
    "//printing/backend:test_support",
    "//printing/backend/mojom",
    "//printing/common",
    "//printing/mojom",
    "//printing/mojom:printing_context",
    "//testing/gmock",
    "//testing/gtest",
    "//ui/base",
    "//ui/gfx",
    "//ui/gfx:test_support",
    "//ui/gfx/geometry",
  ]

  if (is_mac) {
    sources += [ "pdf_metafile_cg_mac_unittest.cc" ]

    data = [
      "test/data/pdf_cg/",
      "../pdf/test/data/",
    ]
  }

  if (is_win) {
    sources += [
      "emf_win_unittest.cc",
      "printed_document_unittest.cc",
      "printed_page_win_unittest.cc",
      "printing_context_win_unittest.cc",
    ]

    data = [ "test/data/emf/" ]
  }

  if (use_cups) {
    configs += [ ":cups" ]

    if (use_cups_ipp) {
      sources += [ "backend/cups_ipp_helper_unittest.cc" ]
    }

    if (is_chromeos) {
      sources += [ "printing_context_chromeos_unittest.cc" ]
    }

    if (!is_chromeos_ash) {
      sources += [
        "backend/cups_helper_unittest.cc",
        "backend/print_backend_cups_unittest.cc",
      ]
    }
  }
}

if (use_cups) {
  config("cups") {
    defines = [ "USE_CUPS" ]

    if (is_mac) {
      libs = [ "cups" ]
      lib_dirs = [ "$mac_sdk_path/usr/lib" ]
    } else {
      # rebase_path does not accept an empty string
      if (use_sysroot) {
        cups_sysroot = rebase_path(sysroot)
      } else {
        cups_sysroot = ""
      }
      libs = exec_script("cups_config_helper.py",
                         [
                           "--libs-for-gn",
                           cups_sysroot,
                         ],
                         "value")
    }
  }
}

if (is_android) {
  generate_jni("printing_jni_headers") {
    sources = [ "android/java/src/org/chromium/printing/PrintingContext.java" ]
  }

  android_library("printing_java") {
    deps = [
      "//base:base_java",
      "//third_party/androidx:androidx_annotation_annotation_java",
      "//ui/android:ui_java",
    ]
    sources = [
      "android/java/src/org/chromium/printing/PrintDocumentAdapterWrapper.java",
      "android/java/src/org/chromium/printing/PrintManagerDelegate.java",
      "android/java/src/org/chromium/printing/PrintManagerDelegateImpl.java",
      "android/java/src/org/chromium/printing/Printable.java",
      "android/java/src/org/chromium/printing/PrintingContext.java",
      "android/java/src/org/chromium/printing/PrintingController.java",
      "android/java/src/org/chromium/printing/PrintingControllerImpl.java",
    ]
    annotation_processor_deps = [ "//base/android/jni_generator:jni_processor" ]
  }
}
