# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/ios/ios_test_runner_wrapper.gni")
import("//build/config/ios/rules.gni")
import("//ios/build/chrome_build.gni")
import("//ios/public/provider/chrome/browser/build_config.gni")

# EarlGrey tests are just XCTests that also depends on EarlGrey.
template("ios_eg_test") {
  _target_name = target_name
  _test_target = "${target_name}_test"
  ios_xctest_test(_test_target) {
    forward_variables_from(invoker,
                           "*",
                           [
                             "executable_args",
                             "retries",
                             "shards",
                             "xctest",
                             "xcode_parallelization",
                           ])
    if (!defined(bundle_deps)) {
      bundle_deps = []
    }
    if (!defined(include_provider_resources)) {
      include_provider_resources = true
    }
    bundle_deps += [
      "//ios/third_party/earl_grey:earl_grey+bundle",
      "//ios/third_party/gtx:gtx+bundle",
      "//ios/third_party/ochamcrest:ochamcrest+bundle",
    ]
    if (include_provider_resources) {
      bundle_deps += ios_providers_resources_targets
    }
    if (!defined(deps)) {
      deps = []
    }
    deps += [
      "//ios/third_party/earl_grey:earl_grey+link",
      "//ios/third_party/ochamcrest:ochamcrest+link",
    ]

    # TODO(crbug.com/1056328) Because we change the target name, the subnodes
    # are going to append with the _test in the naming, which won't be backwards
    # compatible during migration from iOS recipe to Chromium.
    output_name = "${_target_name}"
  }

  ios_test_runner_wrapper(target_name) {
    forward_variables_from(invoker,
                           [
                             "data",
                             "data_deps",
                             "deps",
                             "executable_args",
                             "retries",
                             "shards",
                             "xctest",
                             "xcode_parallelization",
                           ])

    _root_build_dir = rebase_path("${root_build_dir}", root_build_dir)

    # include the test target above as data_deps
    if (!defined(data_deps)) {
      data_deps = []
    }
    data_deps += [ ":${_test_target}" ]

    if (!defined(executable_args)) {
      executable_args = []
    }

    # EG test apps are *.app format. No host, but required xctest and may need
    # xcode-parallelization
    executable_args += [
      "--app",
      "@WrappedPath(${_root_build_dir}/${target_name}.app)",
    ]

    # Default xctest to true for EG tests. If set, only set arg if value = true
    if (!defined(xctest) || (defined(xctest) && xctest)) {
      executable_args += [ "--xctest" ]
    }

    # Default xcode_parallelization to true for EG tests.
    if (!defined(xcode_parallelization) ||
        (defined(xcode_parallelization) && xcode_parallelization)) {
      executable_args += [ "--xcode-parallelization" ]
    }
  }
}

set_defaults("ios_eg_test") {
  configs = default_executable_configs
}
