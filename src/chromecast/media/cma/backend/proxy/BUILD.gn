# Copyright 2020 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//chromecast/chromecast.gni")
import("//third_party/grpc/grpc_library.gni")
import("//third_party/protobuf/proto_library.gni")

# For .proto files with RPC definitions.
# TODO(b/172295002): Move this and proto compilation to Openscreen.
template("chromecast_media_grpc_library") {
  grpc_library(target_name) {
    proto_in_dir = "//"

    # NOTE: For using built-in proto files like empty.proto.
    import_dirs = [ "//third_party/protobuf/src" ]
    use_protobuf_full = true

    forward_variables_from(invoker,
                           [
                             "deps",
                             "sources",
                           ])
  }
}

chromecast_media_grpc_library("cast_audio_decoder_service_proto") {
  # This rule cannot be built on android because it causes linker issues,
  # as both `protobuf_lite` and `protobuf_full` are present.
  assert(!is_android)

  sources = [ "//third_party/openscreen/src/cast/cast_core/api/runtime/cast_audio_decoder_service.proto" ]
}

cast_source_set("proxy") {
  sources = [
    "audio_decoder_pipeline_node.cc",
    "audio_decoder_pipeline_node.h",
    "buffer_id_manager.cc",
    "buffer_id_manager.h",
    "cast_runtime_audio_channel_broker.cc",
    "cast_runtime_audio_channel_broker.h",
    "cma_backend_proxy.cc",
    "cma_backend_proxy.h",
    "cma_proxy_handler.h",
    "multizone_audio_decoder_proxy.h",
    "multizone_audio_decoder_proxy_impl.cc",
    "multizone_audio_decoder_proxy_impl.h",
    "proxy_call_translator.cc",
    "proxy_call_translator.h",
    "push_buffer_queue.cc",
    "push_buffer_queue.h",
  ]

  deps = [
    ":cast_audio_decoder_service_proto",
    "//base",
    "//chromecast/base",
    "//chromecast/media/api",
    "//chromecast/public/media",
    "//third_party/grpc:grpc++",
    "//third_party/protobuf:protobuf_full",
  ]

  if (!enable_chromium_runtime_cast_renderer ||
      chromecast_branding == "public") {
    sources += [ "audio_channel_broker_simple.cc" ]
  }
}
