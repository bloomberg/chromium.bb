// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module chromecast.mojom;

import "mojo/public/mojom/base/time.mojom";
import "url/mojom/url.mojom";

// Parameter used to change/set headers for HTTP requests.
// Only |value| can be updated once SetSubstitutableParameters is called.
struct SubstitutableParameter {
  // HTTP header name.
  // If a non-empty |replacement_token| or non-empty |suppression_token| are
  // present in the query string, |name| is ignored. Otherwise, an HTTP
  // header with |name| and associated |value| will be added to the request if
  // not already present.
  string name;

  // All instances of a non-empty |replacement_token| present in the URL's
  // query string will be replaced with |value|.
  string? replacement_token;

  // If non-empty and |suppression_token| is present in the URL's query,
  // all instances will be removed from the query string.
  // If |replacement_token| and |suppression_token| are both set,
  // |replacement_token| will take precedence.
  string? suppression_token;

  // If |is_signature| is true, |value| will be asynchronously populated via
  // `ClientAuthDelegate`
  bool is_signature;

  // Value of the header.
  string value;
};

// Pair of (index, value) used to update values of SubstitutableParameter.
// It's used for updating |value| of SubstitutableParameter (no other
// fields can be updated). The update is necessary since the list of
// SubstitutableParameter needs to be present in the renderer before the
// very first network request but some of the values are dynamically
// generated at runtime.
// |index| must be smaller than the size of the array sent in
// SetSubstitutableParameters.
struct IndexValuePair {
  // Index of the struct to be updated in the array sent in
  // SetSubstitutableParameters.
  uint32 index;

  // New value of SubstitutableParameter.
  string value;
};

// Controls when substitutable parameters should be applied to a request.
// These settings are per-app, and each frame only has one associated app.
struct AppSettings {
  // Bitmask of substituable parameters that should be used for this app.
  // Each position is an index into the list of substitutable params set for
  // the frame.
  int32 allowed_headers;

  // Whether the app is allowed to use auth headers.
  bool allowed_for_device_identification;

  // Full host names used to match allowed hosts.
  // Allowed hosts are a set of hosts which the app can access.
  // If the hostname of the URL in the URL request has a matching hostname,
  // the corresponding parameters specified in |allowed_headers| will be
  // applied to the URL request.
  array<string> full_host_names;

  // Wildcard host names are host name suffixes. If the hostname of the URL
  // in the URL request has a matching suffix, the corresponding parameters
  // specified in |allowed_headers| will be applied to the URL request.
  // Example: ".example.com" (the leading '.' is necessary).
  array<string> wildcard_host_names;
};

// Settings specific to a device.
struct DeviceSettings {
  // A map of header names and values that will be added to all requests
  // in this frame if not already present. Note that the added headers will
  // be CORS exempt.
  map<string, string> static_headers;

  // Map of URLs that will be rewritten. The key is generated by clearing
  // the reference and the query string. If the resulting URL matches a key
  // in this map, the query parameters of the replacement URL will be appended
  // to the query parameters from the original URL.
  // Note: URL comparison is cast-insensitive here.
  map<url.mojom.Url, url.mojom.Url> url_replacements;
};

// Delegate that is registered through IdentificationSettingsManager to sync
// signatures and certs from the browser process to renderers in callbacks.
// This interface is necessary since browser manages all the certificates.
// Async operation is needed since certs and signatures are generated upon
// request and are not populated along with other substitutable params.
interface ClientAuthDelegate {
  // Ensures the certs are created in the browser and synced to the renderer.
  EnsureCerts() => (array<IndexValuePair> cert_headers);

  // Ensures the signature is generated in the browser and synced to the
  // renderer.
  EnsureSignature() => (array<IndexValuePair> signature_headers,
                        mojo_base.mojom.Time next_refresh_time);
};

// This per-frame interface lives in the renderer and allows the browser to
// set parameters that will be used to modify URL requests.
interface IdentificationSettingsManager {
  // Sets the list of possible substitutable parameters. This may only be
  // called once; once called, the list of parameters is fixed. Values
  // associated with each substitutable parameter can later be updated with
  // a call to `UpdateSubstitutableParamValues`.
  // Note: This moethod needs to be called before the first network request
  // is made from a render frame, so it should be called on an associated
  // mojo endpoint when the render frame is created.
  SetSubstitutableParameters(array<SubstitutableParameter> params);

  // Sets the ClientAuthDelegate.
  SetClientAuth(ClientAuthDelegate client_auth_delegate);

  // Updates app specific settings.
  UpdateAppSettings(AppSettings app_settings);

  // Updates device specific settings.
  UpdateDeviceSettings(DeviceSettings device_settings);

  // Updates user tokens.
  UpdateSubstitutableParamValues(array<IndexValuePair> updated_values);

  // Updates the app's background mode.
  UpdateBackgroundMode(bool background_mode);
};
