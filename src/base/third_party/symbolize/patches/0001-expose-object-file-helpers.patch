diff --git a/base/third_party/symbolize/README.chromium b/base/third_party/symbolize/README.chromium
index 12075b03c9fe1..1c0ac04b8bd8b 100644
--- a/base/third_party/symbolize/README.chromium
+++ b/base/third_party/symbolize/README.chromium
@@ -2,7 +2,7 @@ Name: google-glog's symbolization library
 URL: https://github.com/google/glog
 License: BSD
 
-The following files are copied AS-IS from:
+The following files were copied from:
 https://github.com/google/glog/tree/130a3e10de248344cdaeda54aed4c8a5ad7cedac
 
 - demangle.cc
@@ -16,3 +16,7 @@ The following files are minimal stubs created for use in Chromium:
 - glog/logging.h
 - glog/raw_logging.h
 - utilities.h
+
+Modifications:
+ - Expose utility functions useful for parsing and pretty-printing ELF/DWARF
+   information. (patches/0001-expose-object-file-helpers.patch)
diff --git a/base/third_party/symbolize/patches/0001-expose-object-file-helpers.patch b/base/third_party/symbolize/patches/0001-expose-object-file-helpers.patch
new file mode 100644
index 0000000000000..e69de29bb2d1d
diff --git a/base/third_party/symbolize/symbolize.cc b/base/third_party/symbolize/symbolize.cc
index 803cde7c5fa31..27c025eabbc30 100644
--- a/base/third_party/symbolize/symbolize.cc
+++ b/base/third_party/symbolize/symbolize.cc
@@ -143,8 +143,8 @@ _START_GOOGLE_NAMESPACE_
 // descriptor "fd" into the buffer starting at "buf" while handling short reads
 // and EINTR.  On success, return the number of bytes read.  Otherwise, return
 // -1.
-static ssize_t ReadFromOffset(const int fd, void *buf, const size_t count,
-                              const off_t offset) {
+ssize_t ReadFromOffset(const int fd, void *buf, const size_t count,
+                       const off_t offset) {
   SAFE_ASSERT(fd >= 0);
   SAFE_ASSERT(count <= std::numeric_limits<ssize_t>::max());
   char *buf0 = reinterpret_cast<char *>(buf);
@@ -367,24 +367,17 @@ static bool GetSymbolFromObjectFile(const int fd,
   return false;
 }
 
-namespace {
 // Thin wrapper around a file descriptor so that the file descriptor
 // gets closed for sure.
-struct FileDescriptor {
-  const int fd_;
-  explicit FileDescriptor(int fd) : fd_(fd) {}
-  ~FileDescriptor() {
-    if (fd_ >= 0) {
-      close(fd_);
-    }
-  }
-  int get() { return fd_; }
+FileDescriptor::FileDescriptor(int fd) : fd_(fd) {}
 
- private:
-  explicit FileDescriptor(const FileDescriptor&);
-  void operator=(const FileDescriptor&);
-};
+FileDescriptor::~FileDescriptor() {
+  if (fd_ >= 0) {
+    close(fd_);
+  }
+}
 
+namespace {
 // Helper class for reading lines from file.
 //
 // Note: we don't use ProcMapsIterator since the object is big (it has
@@ -508,9 +501,10 @@ static char *GetHex(const char *start, const char *end, uint64_t *hex) {
 // file is opened successfully, returns the file descriptor.  Otherwise,
 // returns -1.  |out_file_name_size| is the size of the file name buffer
 // (including the null-terminator).
-static ATTRIBUTE_NOINLINE int
+ATTRIBUTE_NOINLINE int
 OpenObjectFileContainingPcAndGetStartAddress(uint64_t pc,
                                              uint64_t &start_address,
+                                             uint64_t &end_address,
                                              uint64_t &base_address,
                                              char *out_file_name,
                                              int out_file_name_size) {
@@ -558,7 +552,6 @@ OpenObjectFileContainingPcAndGetStartAddress(uint64_t pc,
     ++cursor;  // Skip '-'.
 
     // Read end address.
-    uint64_t end_address;
     cursor = GetHex(cursor, eol, &end_address);
     if (cursor == eol || *cursor != ' ') {
       return -1;  // Malformed line.
@@ -670,7 +663,7 @@ OpenObjectFileContainingPcAndGetStartAddress(uint64_t pc,
 // bytes. Output will be truncated as needed, and a NUL character is always
 // appended.
 // NOTE: code from sandbox/linux/seccomp-bpf/demo.cc.
-static char *itoa_r(intptr_t i, char *buf, size_t sz, int base, size_t padding) {
+char* itoa_r(intptr_t i, char* buf, size_t sz, int base, size_t padding) {
   // Make sure we can write at least one NUL byte.
   size_t n = 1;
   if (n > sz)
@@ -764,6 +757,7 @@ static ATTRIBUTE_NOINLINE bool SymbolizeAndDemangle(void *pc, char *out,
                                                     int out_size) {
   uint64_t pc0 = reinterpret_cast<uintptr_t>(pc);
   uint64_t start_address = 0;
+  uint64_t end_address = 0;
   uint64_t base_address = 0;
   int object_fd = -1;
 
@@ -780,6 +774,7 @@ static ATTRIBUTE_NOINLINE bool SymbolizeAndDemangle(void *pc, char *out,
   } else {
     object_fd = OpenObjectFileContainingPcAndGetStartAddress(pc0, start_address,
                                                              base_address,
+                                                             end_address,
                                                              out + 1,
                                                              out_size - 1);
   }
diff --git a/base/third_party/symbolize/symbolize.h b/base/third_party/symbolize/symbolize.h
index c6f9ec4360ede..00cfa022219e6 100644
--- a/base/third_party/symbolize/symbolize.h
+++ b/base/third_party/symbolize/symbolize.h
@@ -60,6 +60,9 @@
 
 #ifdef HAVE_SYMBOLIZE
 
+#include <algorithm>
+#include <utility>
+
 #if defined(__ELF__)  // defined by gcc
 #if defined(__OpenBSD__)
 #include <sys/exec_elf.h>
@@ -99,6 +101,44 @@ _START_GOOGLE_NAMESPACE_
 bool GetSectionHeaderByName(int fd, const char *name, size_t name_len,
                             ElfW(Shdr) *out);
 
+int OpenObjectFileContainingPcAndGetStartAddress(uint64_t pc,
+                                                 uint64_t& start_address,
+                                                 uint64_t& end_address,
+                                                 uint64_t& base_address,
+                                                 char* out_file_name,
+                                                 int out_file_name_size);
+
+ssize_t ReadFromOffset(const int fd,
+                       void* buf,
+                       const size_t count,
+                       const off_t offset);
+
+// Thin wrapper around a file descriptor so that the file descriptor
+// gets closed for sure.
+struct FileDescriptor {
+  int fd_;
+  explicit FileDescriptor(int fd);
+  ~FileDescriptor();
+
+  int get() { return fd_; }
+
+  explicit FileDescriptor(FileDescriptor&& other)
+      : fd_(std::exchange(other.fd_, -1)) {}
+
+  FileDescriptor& operator=(FileDescriptor&& rhs) {
+    if (&rhs != this) {
+      fd_ = std::exchange(rhs.fd_, -1);
+    }
+    return *this;
+  }
+
+ private:
+  FileDescriptor(const FileDescriptor&) = delete;
+  void operator=(const FileDescriptor&) = delete;
+};
+
+char* itoa_r(intptr_t i, char* buf, size_t sz, int base, size_t padding);
+
 _END_GOOGLE_NAMESPACE_
 
 #endif  /* __ELF__ */
