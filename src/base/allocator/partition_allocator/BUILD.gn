# Copyright (c) 2022 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//base/allocator/allocator.gni")
import("//base/allocator/partition_allocator/partition_alloc.gni")

# Add partition_alloc.gni and import it for partition_alloc configs.

config("partition_alloc_implementation") {
  # After introducing partition_alloc_export, replace BASE_IMPLEMENTATION with
  # PARTITION_ALLOC_IMPLEMENTATION.
  defines = [ "BASE_IMPLEMENTATION" ]
}

config("memory_tagging") {
  if (current_cpu == "arm64" && is_clang &&
      (is_linux || is_chromeos || is_android || is_fuchsia)) {
    # base/ has access to the MTE intrinsics because it needs to use them,
    # but they're not backwards compatible. Use base::CPU::has_mte()
    # beforehand to confirm or use indirect functions (ifuncs) to select
    # an MTE-specific implementation at dynamic link-time.
    cflags = [
      "-Xclang",
      "-target-feature",
      "-Xclang",
      "+mte",
    ]
  }
}

if (is_fuchsia) {
  config("fuchsia_sync_lib") {
    libs = [
      "sync",  # Used by spinning_mutex.h.
    ]
  }
}

if (make_partition_alloc_standalone) {
  partition_alloc_target_type = "component"
} else {
  partition_alloc_target_type = "source_set"
}

target(partition_alloc_target_type, "partition_alloc") {
  sources = [
    "address_pool_manager.cc",
    "address_pool_manager.h",
    "address_pool_manager_bitmap.cc",
    "address_pool_manager_bitmap.h",
    "address_pool_manager_types.h",
    "address_space_randomization.cc",
    "address_space_randomization.h",
    "address_space_stats.h",
    "allocation_guard.cc",
    "allocation_guard.h",
    "base/bits.h",
    "base/migration_adapter.h",
    "base/sys_byteorder.h",
    "dangling_raw_ptr_checks.cc",
    "dangling_raw_ptr_checks.h",
    "extended_api.cc",
    "extended_api.h",
    "memory_reclaimer.cc",
    "memory_reclaimer.h",
    "oom.cc",
    "oom.h",
    "oom_callback.cc",
    "oom_callback.h",
    "page_allocator.cc",
    "page_allocator.h",
    "page_allocator_constants.h",
    "page_allocator_internal.h",
    "partition_address_space.cc",
    "partition_address_space.h",
    "partition_alloc-inl.h",
    "partition_alloc.cc",
    "partition_alloc.h",
    "partition_alloc_check.h",
    "partition_alloc_config.h",
    "partition_alloc_constants.h",
    "partition_alloc_forward.h",
    "partition_alloc_hooks.cc",
    "partition_alloc_hooks.h",
    "partition_alloc_notreached.h",
    "partition_bucket.cc",
    "partition_bucket.h",
    "partition_bucket_lookup.h",
    "partition_cookie.h",
    "partition_direct_map_extent.h",
    "partition_freelist_entry.h",
    "partition_lock.h",
    "partition_oom.cc",
    "partition_oom.h",
    "partition_page.cc",
    "partition_page.h",
    "partition_ref_count.h",
    "partition_root.cc",
    "partition_root.h",
    "partition_stats.cc",
    "partition_stats.h",
    "partition_tag.h",
    "partition_tag_bitmap.h",
    "partition_tls.h",
    "random.cc",
    "random.h",
    "reservation_offset_table.cc",
    "reservation_offset_table.h",
    "spinning_mutex.cc",
    "spinning_mutex.h",
    "starscan/logging.h",
    "starscan/metadata_allocator.cc",
    "starscan/metadata_allocator.h",
    "starscan/pcscan.cc",
    "starscan/pcscan.h",
    "starscan/pcscan_internal.cc",
    "starscan/pcscan_internal.h",
    "starscan/pcscan_scheduling.cc",
    "starscan/pcscan_scheduling.h",
    "starscan/raceful_worklist.h",
    "starscan/scan_loop.h",
    "starscan/snapshot.cc",
    "starscan/snapshot.h",
    "starscan/stack/stack.cc",
    "starscan/stack/stack.h",
    "starscan/starscan_fwd.h",
    "starscan/state_bitmap.h",
    "starscan/stats_collector.cc",
    "starscan/stats_collector.h",
    "starscan/stats_reporter.h",
    "starscan/write_protector.cc",
    "starscan/write_protector.h",
    "tagging.cc",
    "tagging.h",
    "thread_cache.cc",
    "thread_cache.h",
    "yield_processor.h",
  ]
  defines = []
  if (is_win) {
    sources += [
      "page_allocator_internals_win.h",
      "partition_tls_win.cc",
    ]
  } else if (is_posix) {
    sources += [
      "page_allocator_internals_posix.cc",
      "page_allocator_internals_posix.h",
    ]
  } else if (is_fuchsia) {
    sources += [ "page_allocator_internals_fuchsia.h" ]
  }
  if (current_cpu == "x64") {
    defines += [ "PA_PCSCAN_STACK_SUPPORTED" ]
    sources += [ "starscan/stack/asm/x64/push_registers_asm.cc" ]
  } else if (current_cpu == "x86") {
    defines += [ "PA_PCSCAN_STACK_SUPPORTED" ]
    sources += [ "starscan/stack/asm/x86/push_registers_asm.cc" ]
  } else if (current_cpu == "arm") {
    defines += [ "PA_PCSCAN_STACK_SUPPORTED" ]
    sources += [ "starscan/stack/asm/arm/push_registers_asm.cc" ]
  } else if (current_cpu == "arm64") {
    defines += [ "PA_PCSCAN_STACK_SUPPORTED" ]
    sources += [ "starscan/stack/asm/arm64/push_registers_asm.cc" ]
  } else {
    # To support a trampoline for another arch, please refer to v8/src/heap/base.
  }
  public_deps = [
    "//base:debugging_buildflags",
    "//base:logging_buildflags",
    "//base:synchronization_buildflags",
    "//base:tracing_buildflags",
    "//base/allocator:buildflags",
    "//build:branding_buildflags",
    "//build:chromecast_buildflags",
    "//build:chromeos_buildflags",
    "//build/config/compiler:compiler_buildflags",
  ]
  deps = []
  configs += [
    ":partition_alloc_implementation",
    ":memory_tagging",
  ]
  public_configs = []
  if (is_android) {
    # tagging.cc requires __arm_mte_set_* functions.
    deps += [ "//third_party/android_ndk:cpu_features" ]
  }
  if (is_fuchsia) {
    public_deps += [
      "//third_party/fuchsia-sdk/sdk/pkg/fit",
      "//third_party/fuchsia-sdk/sdk/pkg/sync",
      "//third_party/fuchsia-sdk/sdk/pkg/zx",
    ]

    # Needed for users of spinning_mutex.h, which for performance reasons,
    # contains inlined calls to `libsync` inside the header file.
    # It appends an entry to the "libs" section of the dependent target.
    public_configs += [ ":fuchsia_sync_lib" ]
  }

  frameworks = []
  if (is_mac) {
    # SecTaskGetCodeSignStatus needs:
    frameworks += [ "Security.framework" ]
  }
}

# TODO(crbug.com/1151236): After making partition_alloc a standalone library,
# move test code here. i.e. test("partition_alloc_tests") { ... } and
# test("partition_alloc_perftests").

# TODO(crbug.com/1151236): Generate partition_alloc_buildflags. The following
# flags will be defined by the buildflags:
#    "USE_BACKUP_REF_PTR=$_use_backup_ref_ptr",
#    "ENABLE_BACKUP_REF_PTR_SLOW_CHECKS=$_enable_backup_ref_ptr_slow_checks",
#    "ENABLE_DANGLING_RAW_PTR_CHECKS=$_enable_dangling_raw_ptr_checks",
#    "PUT_REF_COUNT_IN_PREVIOUS_SLOT=$_put_ref_count_in_previous_slot",
#    "USE_MTE_CHECKED_PTR=$_use_mte_checked_ptr",
#    "RECORD_ALLOC_INFO=$_record_alloc_info",

