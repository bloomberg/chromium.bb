# Copyright 2014 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

[
##############################################################################
['system == macos and asan', {
  # BUG(820416).
  'BitsDeathTest*': [SKIP],
  'LiveRangeUnitTest*': [SKIP],
  'LoggingDeathTest*': [SKIP],
  'LoggingTest.CompareClassTypes': [SKIP],
  'LoggingTest.CompareWithDifferentSignedness': [SKIP],
  'LoggingTest.CompareWithReferenceType': [SKIP],
  'RandomNumberGenerator.NextSampleInvalidParam': [SKIP],
  'RandomNumberGenerator.NextSampleSlowInvalidParam1': [SKIP],
  'RandomNumberGenerator.NextSampleSlowInvalidParam2': [SKIP],
}],  # system == macos and asan

['system == macos and arch == arm64 and not simulator_run', {
  # Throwing C++ exceptions doesn't work; probably because the unittests
  # binary is built with -fno-exceptions?
  'LanguageServerJson.*': [SKIP],
  'LanguageServer.*': [SKIP],
  'Torque.*': [SKIP],

  # Test uses fancy signal handling. Needs investigation.
  'MemoryAllocationPermissionsTest.DoTest': [SKIP],

  # Time tick resolution appears to be ~42 microseconds. Tests expect 1 us.
  'TimeTicks.NowResolution': [FAIL],
  'RuntimeCallStatsTest.BasicJavaScript': [SKIP],
  'RuntimeCallStatsTest.FunctionLengthGetter': [SKIP],
}],  # system == macos and arch == arm64 and not simulator_run

# TODO(v8:12824): Enable this test once this is resolved.
['arch == arm64 and msan', {
  'WeakContainerTest.ConservativeGCTracesWeakContainer': [SKIP],
}],  # arch == arm64 and msan

##############################################################################
# TODO(v8:7777): Change this once wasm is supported in jitless mode.
['not has_webassembly or variant == jitless', {
  'ValueSerializerTestWithSharedArrayBufferClone.RoundTripWebAssemblyMemory': [SKIP],
  'ValueSerializerTestWithWasm.*': [SKIP],
}],  # not has_webassembly or variant == jitless

##############################################################################
['system == aix', {
  # PASE does not support detecting physical memory size
  'SysInfoTest.AmountOfPhysicalMemory': [SKIP],
}],  # system == aix

##############################################################################
['arch == ppc64', {
  # PPC Page size is too large for these tests.
  'HeapStatisticsCollectorTest.BriefStatisticsWithDiscardingOnNormalPage': [SKIP],
  'HeapStatisticsCollectorTest.DetailedStatisticsWithDiscardingOnNormalPage': [SKIP],
  'SweeperTest.DiscardingNormalPageMemory': [SKIP],
}],  # arch == ppc64

##############################################################################
['system == windows and asan', {
  # BUG(893437).
  'Torque*': [SKIP],

  # Hangs on asan.
  'PageMemoryRegionDeathTest*': [SKIP],
}],  # system == windows and asan

['system == windows and arch == x64 and mode == release', {
  # BUG(992783).
  'Torque.ConditionalFields': [SKIP],
  'Torque.UsingUnderscorePrefixedIdentifierError': [SKIP],
}],  # system == windows and arch == x64 and mode == release

['tsan == True', {
  # https://crbug.com/v8/9380
  # The test is broken and needs to be fixed to use separate isolates.
  'BackingStoreTest.RacyGrowWasmMemoryInPlace': [SKIP],

  # Tests that need to run sequentially (e.g. due to memory consumption).
  'MachineOperatorReducerTest.Word32EqualWithShiftedMaskedValueAndConstant': [PASS, HEAVY],
  'SequentialUnmapperTest.UnmapOnTeardown': [PASS, HEAVY],

  #https://crbug.com/v8/12638
  # Test seems super flaky, disabling for now
  'SandboxTest.PartiallyReservedSandboxPageAllocation':[SKIP],
}],  # tsan == True

##############################################################################
['variant == stress_js_bg_compile_wasm_code_gc', {
  # The test relies on deterministic allocation during compilation.
  'CompilerTest.DeepEagerCompilationPeakMemory': [SKIP],
}],  # variant == stress_js_bg_compile_wasm_code_gc

##############################################################################
['not pointer_compression', {
  # Tests are irrelevant without pointer compression
  'DecompressionOptimizerTest.*': [SKIP],
}],  # not pointer_compression

##############################################################################
['variant == stress_incremental_marking', {
  # BUG(v8:11820): the test adjusts GC flags, which does not work
  # if GC starts before the test.
  'RuntimeCallStatsTest.GarbageCollection': [SKIP],
}],  # variant == stress_incremental_marking

################################################################################
['variant == stress_snapshot', {
  '*': [SKIP],  # only relevant for mjsunit tests.
}],

################################################################################
['is_clang == False and arch == riscv64',{
  'LoggingTest.SourceLocation':[SKIP]  # issue-174
}],

##############################################################################
['lite_mode', {
  # TODO(mythria): Code logging tests that currently fail with lazy feedback
  # allocation. Fix logging to work without feedback vectors and enable these
  # tests in lite_mode.
  'LogExternalInterpretedFramesNativeStackTest.ExternalLogEventListenerWithInterpretedFramesNativeStack': [SKIP],
  'LogInterpretedFramesNativeStackTest.LogInterpretedFramesNativeStack': [SKIP],
  'LogInterpretedFramesNativeStackWithSerializationTest.LogInterpretedFramesNativeStackWithSerialization': [SKIP],
}], # lite_mode

['variant == jitless', {
  # --interpreted-frames-native-stack tests
  'LogExternalInterpretedFramesNativeStackTest.ExternalLogEventListenerWithInterpretedFramesNativeStack': [SKIP],
  'LogInterpretedFramesNativeStackTest.LogInterpretedFramesNativeStack': [SKIP],
  'LogInterpretedFramesNativeStackWithSerializationTest.LogInterpretedFramesNativeStackWithSerialization': [SKIP],
}], # jitless

################################################################################
['third_party_heap', {
  # Tests on OptimizingCompileDispatcher
  'OptimizingCompileDispatcherTest.NonBlockingFlush': [SKIP],
  'OptimizingCompileDispatcherTest.Construct': [SKIP],
  # Test V8 stock GC
  'SpacesTest.CompactionSpaceMerge': [SKIP],
  # Requires --concurrent_inlining / --finalize_streaming_on_background:
  'LocalFactoryTest.AstConsString_CreatesConsString': [SKIP],
  'LocalFactoryTest.AstRawString_IsInternalized': [SKIP],
  'LocalFactoryTest.EagerFunction': [SKIP],
  'LocalFactoryTest.EmptyScript': [SKIP],
  'LocalFactoryTest.GCDuringPublish': [SKIP],
  'LocalFactoryTest.ImplicitNameFunction': [SKIP],
  'LocalFactoryTest.LazyFunction': [SKIP],
  'LocalFactoryTest.OneByteInternalizedString_DuplicateIsDeduplicated': [SKIP],
  'LocalFactoryTest.OneByteInternalizedString_IsAddedToStringTable': [SKIP],
  # Requires write barriers
  'SpacesTest.WriteBarrierFromHeapObject': [SKIP],
  'SpacesTest.WriteBarrierInYoungGenerationToSpace': [SKIP],
  'SpacesTest.WriteBarrierInYoungGenerationFromSpace': [SKIP],
  # Requires a second isolate
  'ValueSerializerTest.DecodeArrayBufferOOM': [SKIP],
  'LogExternalLogEventListenerInnerFunctionTest.ExternalLogEventListenerInnerFunctions': [SKIP],
  'LogInterpretedFramesNativeStackWithSerializationTest.LogInterpretedFramesNativeStackWithSerialization': [SKIP],
  # Performs GC
  'APIExceptionTest.ExceptionMessageDoesNotKeepContextAlive': [SKIP],
  'LocalHeapTest.GCEpilogue': [SKIP],
  'UnifiedHeapDetachedTest.AllocationBeforeConfigureHeap': [SKIP],
  'UnifiedHeapTest.FindingV8ToBlinkReference': [SKIP],

  # CodeRange tests
  'CodePagesTest.LargeCodeObjectWithSignalHandler': [SKIP],
  'CodePagesTest.LargeCodeObject': [SKIP],
  'CodePagesTest.OptimizedCodeWithCodeRange': [SKIP],
  'CodePagesTest.Sorted': [SKIP],
  'CodePagesTest.CodeRangeCorrectContents': [SKIP],

}], # third_party_heap

##############################################################################
['byteorder == big', {
  # Peephole optimization not supported on big-endian machines.
  'RegExpTest.Peephole*': [SKIP],
}],  # 'byteorder == big'

##############################################################################
['lite_mode or variant == jitless', {

  # Tests that generate code at runtime.
  'RegExpTest.MacroAssemblernativeAtStart': [SKIP],
  'RegExpTest.MacroAssemblerNativeBackReferenceLATIN1': [SKIP],
  'RegExpTest.MacroAssemblerNativeBackReferenceUC16': [SKIP],
  'RegExpTest.MacroAssemblerNativeBackRefNoCase': [SKIP],
  'RegExpTest.MacroAssemblerNativeBacktrack': [SKIP],
  'RegExpTest.MacroAssemblerNativeLotsOfRegisters': [SKIP],
  'RegExpTest.MacroAssemblerNativeRegisters': [SKIP],
  'RegExpTest.MacroAssemblerNativeSimple': [SKIP],
  'RegExpTest.MacroAssemblerNativeSimpleUC16': [SKIP],
  'RegExpTest.MacroAssemblerNativeSuccess': [SKIP],
  'RegExpTest.MacroAssemblerStackOverflow': [SKIP],
  'RegExpTest.Graph': [SKIP],

  # Tests generated irregexp code.
  'RegExpTestWithContext.RegExpInterruptReentrantExecution': [SKIP],

  # Tests that generate code at runtime.
  'CodePagesTest.*': [SKIP],
}], # lite_mode or variant == jitless

##############################################################################
['variant == no_wasm_traps', {
  'APIExceptionTest.*': [SKIP],
  'LogTest.*': [SKIP],
  'TestWithIsolate.Issue23768': [SKIP],
  'LogAllTest.LogAll': [SKIP],
  'LogInterpretedFramesNativeStackTest.LogInterpretedFramesNativeStack': [SKIP],
  'LogInterpretedFramesNativeStackWithSerializationTest.LogInterpretedFramesNativeStackWithSerialization': [SKIP],
  'LogExternalLogEventListenerTest.ExternalLogEventListener': [SKIP],
  'LogExternalLogEventListenerInnerFunctionTest.ExternalLogEventListenerInnerFunctions': [SKIP],
  'LogExternalInterpretedFramesNativeStackTest.ExternalLogEventListenerWithInterpretedFramesNativeStack': [SKIP],
  'LogMapsTest.*': [SKIP],
  'LogMapsCodeTest.LogMapsDetailsCode': [SKIP],
  'LogFunctionEventsTest.LogFunctionEvents': [SKIP],
}],  # variant == no_wasm_traps

##############################################################################
['no_i18n == True', {
  'RegExpTestWithContext.UnicodePropertyEscapeCodeSize': [SKIP],
}],  # no_i18n == True

]
