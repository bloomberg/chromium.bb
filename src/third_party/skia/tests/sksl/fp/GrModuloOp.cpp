

/**************************************************************************************************
 *** This file was autogenerated from GrModuloOp.fp; do not modify.
 **************************************************************************************************/
#include "GrModuloOp.h"

#include "src/core/SkUtils.h"
#include "src/gpu/GrTexture.h"
#include "src/gpu/glsl/GrGLSLFragmentProcessor.h"
#include "src/gpu/glsl/GrGLSLFragmentShaderBuilder.h"
#include "src/gpu/glsl/GrGLSLProgramBuilder.h"
#include "src/sksl/SkSLCPP.h"
#include "src/sksl/SkSLUtil.h"
class GrGLSLModuloOp : public GrGLSLFragmentProcessor {
public:
    GrGLSLModuloOp() {}
    void emitCode(EmitArgs& args) override {
        GrGLSLFPFragmentBuilder* fragBuilder = args.fFragBuilder;
        const GrModuloOp& _outer = args.fFp.cast<GrModuloOp>();
        (void) _outer;
        fragBuilder->codeAppendf(
R"SkSL(return half4(half(1 %% int(sqrt(2.0))));
)SkSL"
);
    }
private:
    void onSetData(const GrGLSLProgramDataManager& pdman, const GrFragmentProcessor& _proc) override {
    }
};
std::unique_ptr<GrGLSLFragmentProcessor> GrModuloOp::onMakeProgramImpl() const {
    return std::make_unique<GrGLSLModuloOp>();
}
void GrModuloOp::onGetGLSLProcessorKey(const GrShaderCaps& caps, GrProcessorKeyBuilder* b) const {
}
bool GrModuloOp::onIsEqual(const GrFragmentProcessor& other) const {
    const GrModuloOp& that = other.cast<GrModuloOp>();
    (void) that;
    return true;
}
GrModuloOp::GrModuloOp(const GrModuloOp& src)
: INHERITED(kGrModuloOp_ClassID, src.optimizationFlags()) {
        this->cloneAndRegisterAllChildProcessors(src);
}
std::unique_ptr<GrFragmentProcessor> GrModuloOp::clone() const {
    return std::make_unique<GrModuloOp>(*this);
}
#if GR_TEST_UTILS
SkString GrModuloOp::onDumpInfo() const {
    return SkString();
}
#endif
