

/**************************************************************************************************
 *** This file was autogenerated from GrUseExplicitReturn.fp; do not modify.
 **************************************************************************************************/
#include "GrUseExplicitReturn.h"

#include "src/core/SkUtils.h"
#include "src/gpu/GrTexture.h"
#include "src/gpu/glsl/GrGLSLFragmentProcessor.h"
#include "src/gpu/glsl/GrGLSLFragmentShaderBuilder.h"
#include "src/gpu/glsl/GrGLSLProgramBuilder.h"
#include "src/sksl/SkSLCPP.h"
#include "src/sksl/SkSLUtil.h"
class GrGLSLUseExplicitReturn : public GrGLSLFragmentProcessor {
public:
    GrGLSLUseExplicitReturn() {}
    void emitCode(EmitArgs& args) override {
        GrGLSLFPFragmentBuilder* fragBuilder = args.fFragBuilder;
        const GrUseExplicitReturn& _outer = args.fFp.cast<GrUseExplicitReturn>();
        (void) _outer;
        fragBuilder->codeAppendf(
R"SkSL(return half4(0.0, 1.0, 0.0, 1.0);
)SkSL"
);
    }
private:
    void onSetData(const GrGLSLProgramDataManager& pdman, const GrFragmentProcessor& _proc) override {
    }
};
GrGLSLFragmentProcessor* GrUseExplicitReturn::onCreateGLSLInstance() const {
    return new GrGLSLUseExplicitReturn();
}
void GrUseExplicitReturn::onGetGLSLProcessorKey(const GrShaderCaps& caps, GrProcessorKeyBuilder* b) const {
}
bool GrUseExplicitReturn::onIsEqual(const GrFragmentProcessor& other) const {
    const GrUseExplicitReturn& that = other.cast<GrUseExplicitReturn>();
    (void) that;
    return true;
}
bool GrUseExplicitReturn::usesExplicitReturn() const {
    return true;
}
GrUseExplicitReturn::GrUseExplicitReturn(const GrUseExplicitReturn& src)
: INHERITED(kGrUseExplicitReturn_ClassID, src.optimizationFlags()) {
        this->cloneAndRegisterAllChildProcessors(src);
}
std::unique_ptr<GrFragmentProcessor> GrUseExplicitReturn::clone() const {
    return std::make_unique<GrUseExplicitReturn>(*this);
}
#if GR_TEST_UTILS
SkString GrUseExplicitReturn::onDumpInfo() const {
    return SkString();
}
#endif
