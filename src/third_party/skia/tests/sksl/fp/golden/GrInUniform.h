

/**************************************************************************************************
 *** This file was autogenerated from GrInUniform.fp; do not modify.
 **************************************************************************************************/
#ifndef GrInUniform_DEFINED
#define GrInUniform_DEFINED

#include "include/core/SkM44.h"
#include "include/core/SkTypes.h"


#include "src/gpu/GrFragmentProcessor.h"

class GrInUniform : public GrFragmentProcessor {
public:
    static std::unique_ptr<GrFragmentProcessor> Make(SkRect color) {
        return std::unique_ptr<GrFragmentProcessor>(new GrInUniform(color));
    }
    GrInUniform(const GrInUniform& src);
    std::unique_ptr<GrFragmentProcessor> clone() const override;
    const char* name() const override { return "InUniform"; }
    bool usesExplicitReturn() const override;
    SkRect color;
private:
    GrInUniform(SkRect color)
    : INHERITED(kGrInUniform_ClassID, kNone_OptimizationFlags)
    , color(color) {
    }
    GrGLSLFragmentProcessor* onCreateGLSLInstance() const override;
    void onGetGLSLProcessorKey(const GrShaderCaps&, GrProcessorKeyBuilder*) const override;
    bool onIsEqual(const GrFragmentProcessor&) const override;
#if GR_TEST_UTILS
    SkString onDumpInfo() const override;
#endif
    GR_DECLARE_FRAGMENT_PROCESSOR_TEST
    using INHERITED = GrFragmentProcessor;
};
#endif
