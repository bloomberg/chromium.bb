/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 7 */ 'd', 'm', 'f', 'g', 'c', '0', 9, 0,
  /* 15 */ 'm', 'f', 'h', 'g', 'c', '0', 9, 0,
  /* 23 */ 'm', 't', 'h', 'g', 'c', '0', 9, 0,
  /* 31 */ 'd', 'm', 't', 'g', 'c', '0', 9, 0,
  /* 39 */ 'm', 'f', 'h', 'c', '0', 9, 0,
  /* 46 */ 'm', 't', 'h', 'c', '0', 9, 0,
  /* 53 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 60 */ 'v', 'm', 'm', '0', 9, 0,
  /* 66 */ 'm', 't', 'm', '0', 9, 0,
  /* 72 */ 'm', 't', 'p', '0', 9, 0,
  /* 78 */ 'b', 'b', 'i', 't', '0', 9, 0,
  /* 85 */ 'l', 'd', 'c', '1', 9, 0,
  /* 91 */ 's', 'd', 'c', '1', 9, 0,
  /* 97 */ 'c', 'f', 'c', '1', 9, 0,
  /* 103 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 110 */ 'm', 'f', 'h', 'c', '1', 9, 0,
  /* 117 */ 'm', 't', 'h', 'c', '1', 9, 0,
  /* 124 */ 'c', 't', 'c', '1', 9, 0,
  /* 130 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 137 */ 'l', 'w', 'c', '1', 9, 0,
  /* 143 */ 's', 'w', 'c', '1', 9, 0,
  /* 149 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 156 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 163 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 170 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 177 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 184 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 191 */ 'm', 't', 'm', '1', 9, 0,
  /* 197 */ 'm', 't', 'p', '1', 9, 0,
  /* 203 */ 'b', 'b', 'i', 't', '1', 9, 0,
  /* 210 */ 'b', 'b', 'i', 't', '0', '3', '2', 9, 0,
  /* 219 */ 'b', 'b', 'i', 't', '1', '3', '2', 9, 0,
  /* 228 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 236 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 246 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 254 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 262 */ 'l', 'w', 'm', '3', '2', 9, 0,
  /* 269 */ 's', 'w', 'm', '3', '2', 9, 0,
  /* 276 */ 'd', 'r', 'o', 't', 'r', '3', '2', 9, 0,
  /* 285 */ 'c', 'i', 'n', 's', '3', '2', 9, 0,
  /* 293 */ 'e', 'x', 't', 's', '3', '2', 9, 0,
  /* 301 */ 'l', 'd', 'c', '2', 9, 0,
  /* 307 */ 's', 'd', 'c', '2', 9, 0,
  /* 313 */ 'c', 'f', 'c', '2', 9, 0,
  /* 319 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 326 */ 'm', 'f', 'h', 'c', '2', 9, 0,
  /* 333 */ 'm', 't', 'h', 'c', '2', 9, 0,
  /* 340 */ 'c', 't', 'c', '2', 9, 0,
  /* 346 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 353 */ 'l', 'w', 'c', '2', 9, 0,
  /* 359 */ 's', 'w', 'c', '2', 9, 0,
  /* 365 */ 'm', 't', 'm', '2', 9, 0,
  /* 371 */ 'm', 't', 'p', '2', 9, 0,
  /* 377 */ 'a', 'd', 'd', 'i', 'u', 'r', '2', 9, 0,
  /* 386 */ 'l', 'd', 'c', '3', 9, 0,
  /* 392 */ 's', 'd', 'c', '3', 9, 0,
  /* 398 */ 'l', 'w', 'c', '3', 9, 0,
  /* 404 */ 's', 'w', 'c', '3', 9, 0,
  /* 410 */ 'a', 'd', 'd', 'i', 'u', 's', '5', 9, 0,
  /* 419 */ 's', 'b', '1', '6', 9, 0,
  /* 425 */ 'b', 'c', '1', '6', 9, 0,
  /* 431 */ 'j', 'r', 'c', '1', '6', 9, 0,
  /* 438 */ 'b', 'n', 'e', 'z', 'c', '1', '6', 9, 0,
  /* 447 */ 'b', 'e', 'q', 'z', 'c', '1', '6', 9, 0,
  /* 456 */ 'a', 'n', 'd', '1', '6', 9, 0,
  /* 463 */ 'm', 'o', 'v', 'e', '1', '6', 9, 0,
  /* 471 */ 's', 'h', '1', '6', 9, 0,
  /* 477 */ 'a', 'n', 'd', 'i', '1', '6', 9, 0,
  /* 485 */ 'm', 'f', 'h', 'i', '1', '6', 9, 0,
  /* 493 */ 'l', 'i', '1', '6', 9, 0,
  /* 499 */ 'b', 'r', 'e', 'a', 'k', '1', '6', 9, 0,
  /* 508 */ 's', 'l', 'l', '1', '6', 9, 0,
  /* 515 */ 's', 'r', 'l', '1', '6', 9, 0,
  /* 522 */ 'l', 'w', 'm', '1', '6', 9, 0,
  /* 529 */ 's', 'w', 'm', '1', '6', 9, 0,
  /* 536 */ 'm', 'f', 'l', 'o', '1', '6', 9, 0,
  /* 544 */ 's', 'd', 'b', 'b', 'p', '1', '6', 9, 0,
  /* 553 */ 'j', 'r', '1', '6', 9, 0,
  /* 559 */ 'x', 'o', 'r', '1', '6', 9, 0,
  /* 566 */ 'j', 'a', 'l', 'r', 's', '1', '6', 9, 0,
  /* 575 */ 'n', 'o', 't', '1', '6', 9, 0,
  /* 582 */ 'l', 'b', 'u', '1', '6', 9, 0,
  /* 589 */ 's', 'u', 'b', 'u', '1', '6', 9, 0,
  /* 597 */ 'a', 'd', 'd', 'u', '1', '6', 9, 0,
  /* 605 */ 'l', 'h', 'u', '1', '6', 9, 0,
  /* 612 */ 'l', 'w', '1', '6', 9, 0,
  /* 618 */ 's', 'w', '1', '6', 9, 0,
  /* 624 */ 'b', 'n', 'e', 'z', '1', '6', 9, 0,
  /* 632 */ 'b', 'e', 'q', 'z', '1', '6', 9, 0,
  /* 640 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 656 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 673 */ 'd', 'l', 'a', 9, 0,
  /* 678 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 694 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 711 */ 'd', 's', 'r', 'a', 9, 0,
  /* 717 */ 'd', 'l', 's', 'a', 9, 0,
  /* 723 */ 'c', 'f', 'c', 'm', 's', 'a', 9, 0,
  /* 731 */ 'c', 't', 'c', 'm', 's', 'a', 9, 0,
  /* 739 */ 'a', 'd', 'd', '_', 'a', '.', 'b', 9, 0,
  /* 748 */ 'm', 'i', 'n', '_', 'a', '.', 'b', 9, 0,
  /* 757 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'b', 9, 0,
  /* 767 */ 'm', 'a', 'x', '_', 'a', '.', 'b', 9, 0,
  /* 776 */ 's', 'r', 'a', '.', 'b', 9, 0,
  /* 783 */ 'n', 'l', 'o', 'c', '.', 'b', 9, 0,
  /* 791 */ 'n', 'l', 'z', 'c', '.', 'b', 9, 0,
  /* 799 */ 's', 'l', 'd', '.', 'b', 9, 0,
  /* 806 */ 'p', 'c', 'k', 'o', 'd', '.', 'b', 9, 0,
  /* 815 */ 'i', 'l', 'v', 'o', 'd', '.', 'b', 9, 0,
  /* 824 */ 'i', 'n', 's', 'v', 'e', '.', 'b', 9, 0,
  /* 833 */ 'v', 's', 'h', 'f', '.', 'b', 9, 0,
  /* 841 */ 'b', 'n', 'e', 'g', '.', 'b', 9, 0,
  /* 849 */ 's', 'r', 'a', 'i', '.', 'b', 9, 0,
  /* 857 */ 's', 'l', 'd', 'i', '.', 'b', 9, 0,
  /* 865 */ 'a', 'n', 'd', 'i', '.', 'b', 9, 0,
  /* 873 */ 'b', 'n', 'e', 'g', 'i', '.', 'b', 9, 0,
  /* 882 */ 'b', 's', 'e', 'l', 'i', '.', 'b', 9, 0,
  /* 891 */ 's', 'l', 'l', 'i', '.', 'b', 9, 0,
  /* 899 */ 's', 'r', 'l', 'i', '.', 'b', 9, 0,
  /* 907 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'b', 9, 0,
  /* 917 */ 'c', 'e', 'q', 'i', '.', 'b', 9, 0,
  /* 925 */ 's', 'r', 'a', 'r', 'i', '.', 'b', 9, 0,
  /* 934 */ 'b', 'c', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 943 */ 's', 'r', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 952 */ 'n', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 960 */ 'x', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 968 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'b', 9, 0,
  /* 978 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'b', 9, 0,
  /* 988 */ 'b', 's', 'e', 't', 'i', '.', 'b', 9, 0,
  /* 997 */ 's', 'u', 'b', 'v', 'i', '.', 'b', 9, 0,
  /* 1006 */ 'a', 'd', 'd', 'v', 'i', '.', 'b', 9, 0,
  /* 1015 */ 'b', 'm', 'z', 'i', '.', 'b', 9, 0,
  /* 1023 */ 'b', 'm', 'n', 'z', 'i', '.', 'b', 9, 0,
  /* 1032 */ 'f', 'i', 'l', 'l', '.', 'b', 9, 0,
  /* 1040 */ 's', 'l', 'l', '.', 'b', 9, 0,
  /* 1047 */ 's', 'r', 'l', '.', 'b', 9, 0,
  /* 1054 */ 'b', 'i', 'n', 's', 'l', '.', 'b', 9, 0,
  /* 1063 */ 'i', 'l', 'v', 'l', '.', 'b', 9, 0,
  /* 1071 */ 'c', 'e', 'q', '.', 'b', 9, 0,
  /* 1078 */ 's', 'r', 'a', 'r', '.', 'b', 9, 0,
  /* 1086 */ 'b', 'c', 'l', 'r', '.', 'b', 9, 0,
  /* 1094 */ 's', 'r', 'l', 'r', '.', 'b', 9, 0,
  /* 1102 */ 'b', 'i', 'n', 's', 'r', '.', 'b', 9, 0,
  /* 1111 */ 'i', 'l', 'v', 'r', '.', 'b', 9, 0,
  /* 1119 */ 'a', 's', 'u', 'b', '_', 's', '.', 'b', 9, 0,
  /* 1129 */ 'm', 'o', 'd', '_', 's', '.', 'b', 9, 0,
  /* 1138 */ 'c', 'l', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1147 */ 'a', 'v', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1156 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1166 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1176 */ 'c', 'l', 't', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1186 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1196 */ 'm', 'i', 'n', '_', 's', '.', 'b', 9, 0,
  /* 1205 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'b', 9, 0,
  /* 1215 */ 's', 'u', 'b', 's', '_', 's', '.', 'b', 9, 0,
  /* 1225 */ 'a', 'd', 'd', 's', '_', 's', '.', 'b', 9, 0,
  /* 1235 */ 's', 'a', 't', '_', 's', '.', 'b', 9, 0,
  /* 1244 */ 'c', 'l', 't', '_', 's', '.', 'b', 9, 0,
  /* 1253 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'b', 9, 0,
  /* 1265 */ 'd', 'i', 'v', '_', 's', '.', 'b', 9, 0,
  /* 1274 */ 'm', 'a', 'x', '_', 's', '.', 'b', 9, 0,
  /* 1283 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'b', 9, 0,
  /* 1293 */ 's', 'p', 'l', 'a', 't', '.', 'b', 9, 0,
  /* 1302 */ 'b', 's', 'e', 't', '.', 'b', 9, 0,
  /* 1310 */ 'p', 'c', 'n', 't', '.', 'b', 9, 0,
  /* 1318 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'b', 9, 0,
  /* 1328 */ 's', 't', '.', 'b', 9, 0,
  /* 1334 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'b', 9, 0,
  /* 1344 */ 'm', 'o', 'd', '_', 'u', '.', 'b', 9, 0,
  /* 1353 */ 'c', 'l', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1362 */ 'a', 'v', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1371 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1381 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1391 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1401 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1411 */ 'm', 'i', 'n', '_', 'u', '.', 'b', 9, 0,
  /* 1420 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'b', 9, 0,
  /* 1430 */ 's', 'u', 'b', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1440 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1450 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1462 */ 's', 'a', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1471 */ 'c', 'l', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1480 */ 'd', 'i', 'v', '_', 'u', '.', 'b', 9, 0,
  /* 1489 */ 'm', 'a', 'x', '_', 'u', '.', 'b', 9, 0,
  /* 1498 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'b', 9, 0,
  /* 1508 */ 'm', 's', 'u', 'b', 'v', '.', 'b', 9, 0,
  /* 1517 */ 'm', 'a', 'd', 'd', 'v', '.', 'b', 9, 0,
  /* 1526 */ 'p', 'c', 'k', 'e', 'v', '.', 'b', 9, 0,
  /* 1535 */ 'i', 'l', 'v', 'e', 'v', '.', 'b', 9, 0,
  /* 1544 */ 'm', 'u', 'l', 'v', '.', 'b', 9, 0,
  /* 1552 */ 'b', 'z', '.', 'b', 9, 0,
  /* 1558 */ 'b', 'n', 'z', '.', 'b', 9, 0,
  /* 1565 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 1573 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 1582 */ 's', 'e', 'b', 9, 0,
  /* 1587 */ 'j', 'a', 'l', 'r', 'c', '.', 'h', 'b', 9, 0,
  /* 1597 */ 'j', 'r', '.', 'h', 'b', 9, 0,
  /* 1604 */ 'j', 'a', 'l', 'r', '.', 'h', 'b', 9, 0,
  /* 1613 */ 'l', 'b', 9, 0,
  /* 1617 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 1626 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1640 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1653 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1665 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1675 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1685 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 1694 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 1703 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 1712 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 1721 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1735 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1748 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1760 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1771 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1783 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1795 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1807 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1818 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1829 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1840 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1854 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1867 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1879 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 1888 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 1897 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 1907 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1917 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1927 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1937 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 1949 */ 's', 'b', 9, 0,
  /* 1953 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 1961 */ 'm', 's', 'u', 'b', 9, 0,
  /* 1967 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 'c', 9, 0,
  /* 1978 */ 'b', 'c', 9, 0,
  /* 1982 */ 'b', 'g', 'e', 'c', 9, 0,
  /* 1988 */ 'b', 'n', 'e', 'c', 9, 0,
  /* 1994 */ 'j', 'i', 'c', 9, 0,
  /* 1999 */ 'b', 'a', 'l', 'c', 9, 0,
  /* 2005 */ 'j', 'i', 'a', 'l', 'c', 9, 0,
  /* 2012 */ 'b', 'g', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 2021 */ 'b', 'l', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 2030 */ 'b', 'n', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 2039 */ 'b', 'e', 'q', 'z', 'a', 'l', 'c', 9, 0,
  /* 2048 */ 'b', 'g', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 2057 */ 'b', 'l', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 2066 */ 's', 'y', 'n', 'c', 9, 0,
  /* 2072 */ 'l', 'd', 'p', 'c', 9, 0,
  /* 2078 */ 'a', 'u', 'i', 'p', 'c', 9, 0,
  /* 2085 */ 'a', 'l', 'u', 'i', 'p', 'c', 9, 0,
  /* 2093 */ 'a', 'd', 'd', 'i', 'u', 'p', 'c', 9, 0,
  /* 2102 */ 'l', 'w', 'u', 'p', 'c', 9, 0,
  /* 2109 */ 'l', 'w', 'p', 'c', 9, 0,
  /* 2115 */ 'b', 'e', 'q', 'c', 9, 0,
  /* 2121 */ 'j', 'r', 'c', 9, 0,
  /* 2126 */ 'j', 'a', 'l', 'r', 'c', 9, 0,
  /* 2133 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 2140 */ 'b', 'l', 't', 'c', 9, 0,
  /* 2146 */ 'b', 'g', 'e', 'u', 'c', 9, 0,
  /* 2153 */ 'b', 'l', 't', 'u', 'c', 9, 0,
  /* 2160 */ 'b', 'n', 'v', 'c', 9, 0,
  /* 2166 */ 'b', 'o', 'v', 'c', 9, 0,
  /* 2172 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 2179 */ 'b', 'g', 'e', 'z', 'c', 9, 0,
  /* 2186 */ 'b', 'l', 'e', 'z', 'c', 9, 0,
  /* 2193 */ 'b', 'c', '1', 'n', 'e', 'z', 'c', 9, 0,
  /* 2202 */ 'b', 'c', '2', 'n', 'e', 'z', 'c', 9, 0,
  /* 2211 */ 'b', 'n', 'e', 'z', 'c', 9, 0,
  /* 2218 */ 'b', 'c', '1', 'e', 'q', 'z', 'c', 9, 0,
  /* 2227 */ 'b', 'c', '2', 'e', 'q', 'z', 'c', 9, 0,
  /* 2236 */ 'b', 'e', 'q', 'z', 'c', 9, 0,
  /* 2243 */ 'b', 'g', 't', 'z', 'c', 9, 0,
  /* 2250 */ 'b', 'l', 't', 'z', 'c', 9, 0,
  /* 2257 */ 'f', 'l', 'o', 'g', '2', '.', 'd', 9, 0,
  /* 2266 */ 'f', 'e', 'x', 'p', '2', '.', 'd', 9, 0,
  /* 2275 */ 'a', 'd', 'd', '_', 'a', '.', 'd', 9, 0,
  /* 2284 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'd', 9, 0,
  /* 2294 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'd', 9, 0,
  /* 2304 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'd', 9, 0,
  /* 2314 */ 'm', 'i', 'n', 'a', '.', 'd', 9, 0,
  /* 2322 */ 's', 'r', 'a', '.', 'd', 9, 0,
  /* 2329 */ 'm', 'a', 'x', 'a', '.', 'd', 9, 0,
  /* 2337 */ 'f', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2345 */ 'f', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2354 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2363 */ 'n', 'l', 'o', 'c', '.', 'd', 9, 0,
  /* 2371 */ 'n', 'l', 'z', 'c', '.', 'd', 9, 0,
  /* 2379 */ 'f', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2387 */ 'f', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2396 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2405 */ 's', 'l', 'd', '.', 'd', 9, 0,
  /* 2412 */ 'p', 'c', 'k', 'o', 'd', '.', 'd', 9, 0,
  /* 2421 */ 'i', 'l', 'v', 'o', 'd', '.', 'd', 9, 0,
  /* 2430 */ 'c', '.', 'n', 'g', 'e', '.', 'd', 9, 0,
  /* 2439 */ 'c', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2447 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2457 */ 'f', 'c', 'l', 'e', '.', 'd', 9, 0,
  /* 2465 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 'd', 9, 0,
  /* 2475 */ 'c', '.', 'o', 'l', 'e', '.', 'd', 9, 0,
  /* 2484 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2495 */ 'f', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2503 */ 'c', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2512 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2523 */ 'f', 'c', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2532 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2544 */ 'f', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2553 */ 'f', 'c', 'n', 'e', '.', 'd', 9, 0,
  /* 2561 */ 'f', 's', 'n', 'e', '.', 'd', 9, 0,
  /* 2569 */ 'f', 'c', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2578 */ 'f', 's', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2587 */ 'i', 'n', 's', 'v', 'e', '.', 'd', 9, 0,
  /* 2596 */ 'c', '.', 'f', '.', 'd', 9, 0,
  /* 2603 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 'd', 9, 0,
  /* 2613 */ 'f', 'c', 'a', 'f', '.', 'd', 9, 0,
  /* 2621 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2632 */ 'f', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2640 */ 'm', 's', 'u', 'b', 'f', '.', 'd', 9, 0,
  /* 2649 */ 'm', 'a', 'd', 'd', 'f', '.', 'd', 9, 0,
  /* 2658 */ 'v', 's', 'h', 'f', '.', 'd', 9, 0,
  /* 2666 */ 'c', '.', 's', 'f', '.', 'd', 9, 0,
  /* 2674 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 2682 */ 'b', 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 2690 */ 's', 'r', 'a', 'i', '.', 'd', 9, 0,
  /* 2698 */ 's', 'l', 'd', 'i', '.', 'd', 9, 0,
  /* 2706 */ 'b', 'n', 'e', 'g', 'i', '.', 'd', 9, 0,
  /* 2715 */ 's', 'l', 'l', 'i', '.', 'd', 9, 0,
  /* 2723 */ 's', 'r', 'l', 'i', '.', 'd', 9, 0,
  /* 2731 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'd', 9, 0,
  /* 2741 */ 'c', 'e', 'q', 'i', '.', 'd', 9, 0,
  /* 2749 */ 's', 'r', 'a', 'r', 'i', '.', 'd', 9, 0,
  /* 2758 */ 'b', 'c', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2767 */ 's', 'r', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2776 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'd', 9, 0,
  /* 2786 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'd', 9, 0,
  /* 2796 */ 'b', 's', 'e', 't', 'i', '.', 'd', 9, 0,
  /* 2805 */ 's', 'u', 'b', 'v', 'i', '.', 'd', 9, 0,
  /* 2814 */ 'a', 'd', 'd', 'v', 'i', '.', 'd', 9, 0,
  /* 2823 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 2834 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 2845 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 2855 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 2866 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 2875 */ 's', 'e', 'l', '.', 'd', 9, 0,
  /* 2882 */ 'c', '.', 'n', 'g', 'l', '.', 'd', 9, 0,
  /* 2891 */ 'f', 'i', 'l', 'l', '.', 'd', 9, 0,
  /* 2899 */ 's', 'l', 'l', '.', 'd', 9, 0,
  /* 2906 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'd', 9, 0,
  /* 2916 */ 'f', 'f', 'q', 'l', '.', 'd', 9, 0,
  /* 2924 */ 's', 'r', 'l', '.', 'd', 9, 0,
  /* 2931 */ 'b', 'i', 'n', 's', 'l', '.', 'd', 9, 0,
  /* 2940 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2948 */ 'i', 'l', 'v', 'l', '.', 'd', 9, 0,
  /* 2956 */ 'f', 'm', 'i', 'n', '.', 'd', 9, 0,
  /* 2964 */ 'c', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2972 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2982 */ 'f', 'c', 'u', 'n', '.', 'd', 9, 0,
  /* 2990 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 3001 */ 'f', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 3009 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 3017 */ 'f', 'r', 'c', 'p', '.', 'd', 9, 0,
  /* 3025 */ 'r', 'e', 'c', 'i', 'p', '.', 'd', 9, 0,
  /* 3034 */ 'c', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 3042 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 3052 */ 'f', 'c', 'e', 'q', '.', 'd', 9, 0,
  /* 3060 */ 'c', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 3069 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 3080 */ 'f', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 3088 */ 'c', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3097 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3108 */ 'f', 'c', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3117 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3129 */ 'f', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3138 */ 's', 'r', 'a', 'r', '.', 'd', 9, 0,
  /* 3146 */ 'b', 'c', 'l', 'r', '.', 'd', 9, 0,
  /* 3154 */ 's', 'r', 'l', 'r', '.', 'd', 9, 0,
  /* 3162 */ 'f', 'c', 'o', 'r', '.', 'd', 9, 0,
  /* 3170 */ 'f', 's', 'o', 'r', '.', 'd', 9, 0,
  /* 3178 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'd', 9, 0,
  /* 3188 */ 'f', 'f', 'q', 'r', '.', 'd', 9, 0,
  /* 3196 */ 'b', 'i', 'n', 's', 'r', '.', 'd', 9, 0,
  /* 3205 */ 'i', 'l', 'v', 'r', '.', 'd', 9, 0,
  /* 3213 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 3222 */ 'a', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3232 */ 'h', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3242 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3253 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'd', 9, 0,
  /* 3265 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3275 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3286 */ 'm', 'o', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3295 */ 'c', 'l', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3304 */ 'a', 'v', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3313 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3323 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3333 */ 'c', 'l', 't', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3343 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3353 */ 'm', 'i', 'n', '_', 's', '.', 'd', 9, 0,
  /* 3362 */ 'd', 'o', 't', 'p', '_', 's', '.', 'd', 9, 0,
  /* 3372 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'd', 9, 0,
  /* 3382 */ 's', 'u', 'b', 's', '_', 's', '.', 'd', 9, 0,
  /* 3392 */ 'a', 'd', 'd', 's', '_', 's', '.', 'd', 9, 0,
  /* 3402 */ 's', 'a', 't', '_', 's', '.', 'd', 9, 0,
  /* 3411 */ 'c', 'l', 't', '_', 's', '.', 'd', 9, 0,
  /* 3420 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3431 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3442 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'd', 9, 0,
  /* 3454 */ 'd', 'i', 'v', '_', 's', '.', 'd', 9, 0,
  /* 3463 */ 'm', 'a', 'x', '_', 's', '.', 'd', 9, 0,
  /* 3472 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'd', 9, 0,
  /* 3482 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 3489 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'd', 9, 0,
  /* 3499 */ 's', 'p', 'l', 'a', 't', '.', 'd', 9, 0,
  /* 3508 */ 'b', 's', 'e', 't', '.', 'd', 9, 0,
  /* 3516 */ 'c', '.', 'n', 'g', 't', '.', 'd', 9, 0,
  /* 3525 */ 'c', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3533 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3543 */ 'f', 'c', 'l', 't', '.', 'd', 9, 0,
  /* 3551 */ 'c', '.', 'o', 'l', 't', '.', 'd', 9, 0,
  /* 3560 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3571 */ 'f', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3579 */ 'c', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3588 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3599 */ 'f', 'c', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3608 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3620 */ 'f', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3629 */ 'p', 'c', 'n', 't', '.', 'd', 9, 0,
  /* 3637 */ 'f', 'r', 'i', 'n', 't', '.', 'd', 9, 0,
  /* 3646 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'd', 9, 0,
  /* 3656 */ 'f', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3665 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3675 */ 's', 't', '.', 'd', 9, 0,
  /* 3681 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 3689 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3699 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3709 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3720 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'd', 9, 0,
  /* 3732 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3742 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3753 */ 'm', 'o', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3762 */ 'c', 'l', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3771 */ 'a', 'v', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3780 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3790 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3800 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3810 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3820 */ 'm', 'i', 'n', '_', 'u', '.', 'd', 9, 0,
  /* 3829 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'd', 9, 0,
  /* 3839 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'd', 9, 0,
  /* 3849 */ 's', 'u', 'b', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3859 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3869 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3881 */ 's', 'a', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3890 */ 'c', 'l', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3899 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3910 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3921 */ 'd', 'i', 'v', '_', 'u', '.', 'd', 9, 0,
  /* 3930 */ 'm', 'a', 'x', '_', 'u', '.', 'd', 9, 0,
  /* 3939 */ 'm', 's', 'u', 'b', 'v', '.', 'd', 9, 0,
  /* 3948 */ 'm', 'a', 'd', 'd', 'v', '.', 'd', 9, 0,
  /* 3957 */ 'p', 'c', 'k', 'e', 'v', '.', 'd', 9, 0,
  /* 3966 */ 'i', 'l', 'v', 'e', 'v', '.', 'd', 9, 0,
  /* 3975 */ 'f', 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 3983 */ 'm', 'u', 'l', 'v', '.', 'd', 9, 0,
  /* 3991 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 3998 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 4009 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 4020 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 4030 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 4041 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 4050 */ 'f', 'm', 'a', 'x', '.', 'd', 9, 0,
  /* 4058 */ 'b', 'z', '.', 'd', 9, 0,
  /* 4064 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 'd', 9, 0,
  /* 4074 */ 'b', 'n', 'z', '.', 'd', 9, 0,
  /* 4081 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 'd', 9, 0,
  /* 4091 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 4099 */ 'c', 'r', 'c', '3', '2', 'd', 9, 0,
  /* 4107 */ 'c', 'r', 'c', '3', '2', 'c', 'd', 9, 0,
  /* 4116 */ 's', 'c', 'd', 9, 0,
  /* 4121 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 4127 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 4133 */ 'd', 's', 'h', 'd', 9, 0,
  /* 4139 */ 'y', 'i', 'e', 'l', 'd', 9, 0,
  /* 4146 */ 'l', 'l', 'd', 9, 0,
  /* 4151 */ 'a', 'n', 'd', 9, 0,
  /* 4156 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 4165 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 4173 */ 'd', 'm', 'o', 'd', 9, 0,
  /* 4179 */ 's', 'd', 9, 0,
  /* 4183 */ 'l', 'b', 'e', 9, 0,
  /* 4188 */ 's', 'b', 'e', 9, 0,
  /* 4193 */ 's', 'c', 'e', 9, 0,
  /* 4198 */ 'c', 'a', 'c', 'h', 'e', 'e', 9, 0,
  /* 4206 */ 'p', 'r', 'e', 'f', 'e', 9, 0,
  /* 4213 */ 'b', 'g', 'e', 9, 0,
  /* 4218 */ 't', 'g', 'e', 9, 0,
  /* 4223 */ 'c', 'a', 'c', 'h', 'e', 9, 0,
  /* 4230 */ 'l', 'h', 'e', 9, 0,
  /* 4235 */ 's', 'h', 'e', 9, 0,
  /* 4240 */ 'b', 'l', 'e', 9, 0,
  /* 4245 */ 'l', 'l', 'e', 9, 0,
  /* 4250 */ 'l', 'w', 'l', 'e', 9, 0,
  /* 4256 */ 's', 'w', 'l', 'e', 9, 0,
  /* 4262 */ 'b', 'n', 'e', 9, 0,
  /* 4267 */ 's', 'n', 'e', 9, 0,
  /* 4272 */ 't', 'n', 'e', 9, 0,
  /* 4277 */ 'd', 'v', 'p', 'e', 9, 0,
  /* 4283 */ 'e', 'v', 'p', 'e', 9, 0,
  /* 4289 */ 'l', 'w', 'r', 'e', 9, 0,
  /* 4295 */ 's', 'w', 'r', 'e', 9, 0,
  /* 4301 */ 'l', 'b', 'u', 'e', 9, 0,
  /* 4307 */ 'l', 'h', 'u', 'e', 9, 0,
  /* 4313 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 4319 */ 'l', 'w', 'e', 9, 0,
  /* 4324 */ 's', 'w', 'e', 9, 0,
  /* 4329 */ 'b', 'c', '1', 'f', 9, 0,
  /* 4335 */ 'p', 'r', 'e', 'f', 9, 0,
  /* 4341 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 4347 */ 'n', 'e', 'g', 9, 0,
  /* 4352 */ 'a', 'd', 'd', '_', 'a', '.', 'h', 9, 0,
  /* 4361 */ 'm', 'i', 'n', '_', 'a', '.', 'h', 9, 0,
  /* 4370 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'h', 9, 0,
  /* 4380 */ 'm', 'a', 'x', '_', 'a', '.', 'h', 9, 0,
  /* 4389 */ 's', 'r', 'a', '.', 'h', 9, 0,
  /* 4396 */ 'n', 'l', 'o', 'c', '.', 'h', 9, 0,
  /* 4404 */ 'n', 'l', 'z', 'c', '.', 'h', 9, 0,
  /* 4412 */ 's', 'l', 'd', '.', 'h', 9, 0,
  /* 4419 */ 'p', 'c', 'k', 'o', 'd', '.', 'h', 9, 0,
  /* 4428 */ 'i', 'l', 'v', 'o', 'd', '.', 'h', 9, 0,
  /* 4437 */ 'i', 'n', 's', 'v', 'e', '.', 'h', 9, 0,
  /* 4446 */ 'v', 's', 'h', 'f', '.', 'h', 9, 0,
  /* 4454 */ 'b', 'n', 'e', 'g', '.', 'h', 9, 0,
  /* 4462 */ 's', 'r', 'a', 'i', '.', 'h', 9, 0,
  /* 4470 */ 's', 'l', 'd', 'i', '.', 'h', 9, 0,
  /* 4478 */ 'b', 'n', 'e', 'g', 'i', '.', 'h', 9, 0,
  /* 4487 */ 's', 'l', 'l', 'i', '.', 'h', 9, 0,
  /* 4495 */ 's', 'r', 'l', 'i', '.', 'h', 9, 0,
  /* 4503 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'h', 9, 0,
  /* 4513 */ 'c', 'e', 'q', 'i', '.', 'h', 9, 0,
  /* 4521 */ 's', 'r', 'a', 'r', 'i', '.', 'h', 9, 0,
  /* 4530 */ 'b', 'c', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4539 */ 's', 'r', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4548 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'h', 9, 0,
  /* 4558 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'h', 9, 0,
  /* 4568 */ 'b', 's', 'e', 't', 'i', '.', 'h', 9, 0,
  /* 4577 */ 's', 'u', 'b', 'v', 'i', '.', 'h', 9, 0,
  /* 4586 */ 'a', 'd', 'd', 'v', 'i', '.', 'h', 9, 0,
  /* 4595 */ 'f', 'i', 'l', 'l', '.', 'h', 9, 0,
  /* 4603 */ 's', 'l', 'l', '.', 'h', 9, 0,
  /* 4610 */ 's', 'r', 'l', '.', 'h', 9, 0,
  /* 4617 */ 'b', 'i', 'n', 's', 'l', '.', 'h', 9, 0,
  /* 4626 */ 'i', 'l', 'v', 'l', '.', 'h', 9, 0,
  /* 4634 */ 'f', 'e', 'x', 'd', 'o', '.', 'h', 9, 0,
  /* 4643 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'h', 9, 0,
  /* 4653 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'h', 9, 0,
  /* 4663 */ 'm', 'u', 'l', '_', 'q', '.', 'h', 9, 0,
  /* 4672 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4683 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4694 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4704 */ 'c', 'e', 'q', '.', 'h', 9, 0,
  /* 4711 */ 'f', 't', 'q', '.', 'h', 9, 0,
  /* 4718 */ 's', 'r', 'a', 'r', '.', 'h', 9, 0,
  /* 4726 */ 'b', 'c', 'l', 'r', '.', 'h', 9, 0,
  /* 4734 */ 's', 'r', 'l', 'r', '.', 'h', 9, 0,
  /* 4742 */ 'b', 'i', 'n', 's', 'r', '.', 'h', 9, 0,
  /* 4751 */ 'i', 'l', 'v', 'r', '.', 'h', 9, 0,
  /* 4759 */ 'a', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4769 */ 'h', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4779 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4790 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4800 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4811 */ 'm', 'o', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4820 */ 'c', 'l', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4829 */ 'a', 'v', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4838 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4848 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4858 */ 'c', 'l', 't', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4868 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4878 */ 'm', 'i', 'n', '_', 's', '.', 'h', 9, 0,
  /* 4887 */ 'd', 'o', 't', 'p', '_', 's', '.', 'h', 9, 0,
  /* 4897 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4907 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4917 */ 's', 'u', 'b', 's', '_', 's', '.', 'h', 9, 0,
  /* 4927 */ 'a', 'd', 'd', 's', '_', 's', '.', 'h', 9, 0,
  /* 4937 */ 's', 'a', 't', '_', 's', '.', 'h', 9, 0,
  /* 4946 */ 'c', 'l', 't', '_', 's', '.', 'h', 9, 0,
  /* 4955 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'h', 9, 0,
  /* 4967 */ 'd', 'i', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4976 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4987 */ 'm', 'a', 'x', '_', 's', '.', 'h', 9, 0,
  /* 4996 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'h', 9, 0,
  /* 5006 */ 's', 'p', 'l', 'a', 't', '.', 'h', 9, 0,
  /* 5015 */ 'b', 's', 'e', 't', '.', 'h', 9, 0,
  /* 5023 */ 'p', 'c', 'n', 't', '.', 'h', 9, 0,
  /* 5031 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'h', 9, 0,
  /* 5041 */ 's', 't', '.', 'h', 9, 0,
  /* 5047 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 5057 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 5067 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 5078 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 5088 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 5099 */ 'm', 'o', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 5108 */ 'c', 'l', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 5117 */ 'a', 'v', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 5126 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5136 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5146 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5156 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5166 */ 'm', 'i', 'n', '_', 'u', '.', 'h', 9, 0,
  /* 5175 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'h', 9, 0,
  /* 5185 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'h', 9, 0,
  /* 5195 */ 's', 'u', 'b', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5205 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5215 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5227 */ 's', 'a', 't', '_', 'u', '.', 'h', 9, 0,
  /* 5236 */ 'c', 'l', 't', '_', 'u', '.', 'h', 9, 0,
  /* 5245 */ 'd', 'i', 'v', '_', 'u', '.', 'h', 9, 0,
  /* 5254 */ 'm', 'a', 'x', '_', 'u', '.', 'h', 9, 0,
  /* 5263 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'h', 9, 0,
  /* 5273 */ 'm', 's', 'u', 'b', 'v', '.', 'h', 9, 0,
  /* 5282 */ 'm', 'a', 'd', 'd', 'v', '.', 'h', 9, 0,
  /* 5291 */ 'p', 'c', 'k', 'e', 'v', '.', 'h', 9, 0,
  /* 5300 */ 'i', 'l', 'v', 'e', 'v', '.', 'h', 9, 0,
  /* 5309 */ 'm', 'u', 'l', 'v', '.', 'h', 9, 0,
  /* 5317 */ 'b', 'z', '.', 'h', 9, 0,
  /* 5323 */ 'b', 'n', 'z', '.', 'h', 9, 0,
  /* 5330 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 5338 */ 'd', 's', 'b', 'h', 9, 0,
  /* 5344 */ 'w', 's', 'b', 'h', 9, 0,
  /* 5350 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 5359 */ 's', 'e', 'h', 9, 0,
  /* 5364 */ 'u', 'l', 'h', 9, 0,
  /* 5369 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 5378 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5392 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5405 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5422 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 5433 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5443 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5453 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 5462 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 5471 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 5480 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5489 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5500 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 5508 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 5517 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 5526 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 5537 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5548 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5560 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5572 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5584 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5595 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5605 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5616 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5627 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5638 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5649 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5660 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5671 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5683 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 5695 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 5706 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 5715 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 5724 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 5734 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5744 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5754 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5764 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5774 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5789 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5804 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5816 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5829 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5844 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5857 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5871 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5885 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5895 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5906 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5917 */ 'u', 's', 'h', 9, 0,
  /* 5922 */ 'd', 'm', 'u', 'h', 9, 0,
  /* 5928 */ 's', 'y', 'n', 'c', 'i', 9, 0,
  /* 5935 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 5942 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 5948 */ 't', 'g', 'e', 'i', 9, 0,
  /* 5954 */ 's', 'n', 'e', 'i', 9, 0,
  /* 5960 */ 't', 'n', 'e', 'i', 9, 0,
  /* 5966 */ 'd', 'a', 'h', 'i', 9, 0,
  /* 5972 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 5978 */ 'm', 't', 'h', 'i', 9, 0,
  /* 5984 */ '.', 'a', 'l', 'i', 'g', 'n', 32, '2', 10, 9, 'l', 'i', 9, 0,
  /* 5998 */ 'd', 'l', 'i', 9, 0,
  /* 6003 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 6009 */ 's', 'e', 'q', 'i', 9, 0,
  /* 6015 */ 't', 'e', 'q', 'i', 9, 0,
  /* 6021 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 6027 */ 'd', 'a', 't', 'i', 9, 0,
  /* 6033 */ 's', 'l', 't', 'i', 9, 0,
  /* 6039 */ 't', 'l', 't', 'i', 9, 0,
  /* 6045 */ 'd', 'a', 'u', 'i', 9, 0,
  /* 6051 */ 'l', 'u', 'i', 9, 0,
  /* 6056 */ 'g', 'i', 'n', 'v', 'i', 9, 0,
  /* 6063 */ 'j', 9, 0,
  /* 6066 */ 'b', 'r', 'e', 'a', 'k', 9, 0,
  /* 6073 */ 'f', 'o', 'r', 'k', 9, 0,
  /* 6079 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 6088 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 6097 */ 'b', 'a', 'l', 9, 0,
  /* 6102 */ 'j', 'a', 'l', 9, 0,
  /* 6107 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 6115 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 6123 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6135 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6147 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6163 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6178 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6194 */ 'l', 'd', 'l', 9, 0,
  /* 6199 */ 's', 'd', 'l', 9, 0,
  /* 6204 */ 'b', 'g', 'e', 'l', 9, 0,
  /* 6210 */ 'b', 'l', 'e', 'l', 9, 0,
  /* 6216 */ 'b', 'n', 'e', 'l', 9, 0,
  /* 6222 */ 'b', 'c', '1', 'f', 'l', 9, 0,
  /* 6229 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6243 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6257 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6270 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6285 */ 'h', 'y', 'p', 'c', 'a', 'l', 'l', 9, 0,
  /* 6294 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 9, 0,
  /* 6303 */ 'b', 'g', 'e', 'z', 'a', 'l', 'l', 9, 0,
  /* 6312 */ 'b', 'l', 't', 'z', 'a', 'l', 'l', 9, 0,
  /* 6321 */ 'd', 's', 'l', 'l', 9, 0,
  /* 6327 */ 'd', 'r', 'o', 'l', 9, 0,
  /* 6333 */ 'b', 'e', 'q', 'l', 9, 0,
  /* 6339 */ 'd', 's', 'r', 'l', 9, 0,
  /* 6345 */ 'b', 'c', '1', 't', 'l', 9, 0,
  /* 6352 */ 'b', 'g', 't', 'l', 9, 0,
  /* 6358 */ 'b', 'l', 't', 'l', 9, 0,
  /* 6364 */ 'b', 'g', 'e', 'u', 'l', 9, 0,
  /* 6371 */ 'b', 'l', 'e', 'u', 'l', 9, 0,
  /* 6378 */ 'd', 'm', 'u', 'l', 9, 0,
  /* 6384 */ 'b', 'g', 't', 'u', 'l', 9, 0,
  /* 6391 */ 'b', 'l', 't', 'u', 'l', 9, 0,
  /* 6398 */ 'l', 'w', 'l', 9, 0,
  /* 6403 */ 's', 'w', 'l', 9, 0,
  /* 6408 */ 'b', 'g', 'e', 'z', 'l', 9, 0,
  /* 6415 */ 'b', 'l', 'e', 'z', 'l', 9, 0,
  /* 6422 */ 'b', 'g', 't', 'z', 'l', 9, 0,
  /* 6429 */ 'b', 'l', 't', 'z', 'l', 9, 0,
  /* 6436 */ 'd', 'r', 'e', 'm', 9, 0,
  /* 6442 */ 'd', 'i', 'n', 's', 'm', 9, 0,
  /* 6449 */ 'd', 'e', 'x', 't', 'm', 9, 0,
  /* 6456 */ 'l', 'w', 'm', 9, 0,
  /* 6461 */ 's', 'w', 'm', 9, 0,
  /* 6466 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6474 */ 'd', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6482 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 6488 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 6494 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 6500 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 6507 */ 'm', 't', 'l', 'o', 9, 0,
  /* 6513 */ 'd', 'm', 'u', 'l', 'o', 9, 0,
  /* 6520 */ 'd', 'b', 'i', 't', 's', 'w', 'a', 'p', 9, 0,
  /* 6530 */ 's', 'd', 'b', 'b', 'p', 9, 0,
  /* 6537 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 6545 */ 'm', 'o', 'v', 'e', 'p', 9, 0,
  /* 6552 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 6560 */ 'c', 'm', 'p', 9, 0,
  /* 6565 */ 'd', 'p', 'o', 'p', 9, 0,
  /* 6571 */ 'a', 'd', 'd', 'i', 'u', 'r', '1', 's', 'p', 9, 0,
  /* 6582 */ 'l', 'o', 'a', 'd', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6598 */ 's', 't', 'o', 'r', 'e', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6615 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 6622 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 6629 */ 'j', 'r', 'c', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6641 */ 'j', 'r', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6652 */ 'e', 'x', 't', 'p', 9, 0,
  /* 6658 */ 'd', 'v', 'p', 9, 0,
  /* 6663 */ 'e', 'v', 'p', 9, 0,
  /* 6668 */ 'l', 'w', 'p', 9, 0,
  /* 6673 */ 's', 'w', 'p', 9, 0,
  /* 6678 */ 'b', 'e', 'q', 9, 0,
  /* 6683 */ 's', 'e', 'q', 9, 0,
  /* 6688 */ 't', 'e', 'q', 9, 0,
  /* 6693 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6705 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6717 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6733 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6748 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6764 */ 'l', 'd', 'r', 9, 0,
  /* 6769 */ 's', 'd', 'r', 9, 0,
  /* 6774 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6788 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6802 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6815 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6830 */ 'j', 'r', 9, 0,
  /* 6834 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 6840 */ 'n', 'o', 'r', 9, 0,
  /* 6845 */ 'd', 'r', 'o', 'r', 9, 0,
  /* 6851 */ 'x', 'o', 'r', 9, 0,
  /* 6856 */ 'r', 'd', 'p', 'g', 'p', 'r', 9, 0,
  /* 6864 */ 'w', 'r', 'p', 'g', 'p', 'r', 9, 0,
  /* 6872 */ 'm', 'f', 't', 'r', 9, 0,
  /* 6878 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 6885 */ 'm', 't', 't', 'r', 9, 0,
  /* 6891 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 6898 */ 'l', 'w', 'r', 9, 0,
  /* 6903 */ 's', 'w', 'r', 9, 0,
  /* 6908 */ 'm', 'i', 'n', 'a', '.', 's', 9, 0,
  /* 6916 */ 'm', 'a', 'x', 'a', '.', 's', 9, 0,
  /* 6924 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 6933 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 6942 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 6951 */ 'c', '.', 'n', 'g', 'e', '.', 's', 9, 0,
  /* 6960 */ 'c', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6968 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6978 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 's', 9, 0,
  /* 6988 */ 'c', '.', 'o', 'l', 'e', '.', 's', 9, 0,
  /* 6997 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 's', 9, 0,
  /* 7008 */ 'c', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 7017 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 7028 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 7040 */ 'c', '.', 'f', '.', 's', 9, 0,
  /* 7047 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 's', 9, 0,
  /* 7057 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 's', 9, 0,
  /* 7068 */ 'm', 's', 'u', 'b', 'f', '.', 's', 9, 0,
  /* 7077 */ 'm', 'a', 'd', 'd', 'f', '.', 's', 9, 0,
  /* 7086 */ 'c', '.', 's', 'f', '.', 's', 9, 0,
  /* 7094 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 7102 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 7109 */ 'l', 'i', '.', 's', 9, 0,
  /* 7115 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 7126 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 7137 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 7147 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 7158 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 7167 */ 's', 'e', 'l', '.', 's', 9, 0,
  /* 7174 */ 'c', '.', 'n', 'g', 'l', '.', 's', 9, 0,
  /* 7183 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 7190 */ 'm', 'i', 'n', '.', 's', 9, 0,
  /* 7197 */ 'c', '.', 'u', 'n', '.', 's', 9, 0,
  /* 7205 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 's', 9, 0,
  /* 7215 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 's', 9, 0,
  /* 7226 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 7234 */ 'r', 'e', 'c', 'i', 'p', '.', 's', 9, 0,
  /* 7243 */ 'c', '.', 'e', 'q', '.', 's', 9, 0,
  /* 7251 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 's', 9, 0,
  /* 7261 */ 'c', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 7270 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 7281 */ 'c', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7290 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7301 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7313 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 7320 */ 'c', 'l', 'a', 's', 's', '.', 's', 9, 0,
  /* 7329 */ 'c', '.', 'n', 'g', 't', '.', 's', 9, 0,
  /* 7338 */ 'c', '.', 'l', 't', '.', 's', 9, 0,
  /* 7346 */ 'c', 'm', 'p', '.', 'l', 't', '.', 's', 9, 0,
  /* 7356 */ 'c', '.', 'o', 'l', 't', '.', 's', 9, 0,
  /* 7365 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 's', 9, 0,
  /* 7376 */ 'c', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7385 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7396 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7408 */ 'r', 'i', 'n', 't', '.', 's', 9, 0,
  /* 7416 */ 'r', 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 7425 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 7433 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 7440 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 7447 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 7458 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 7469 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 7479 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 7490 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 7499 */ 'm', 'a', 'x', '.', 's', 9, 0,
  /* 7506 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 's', 9, 0,
  /* 7516 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 's', 9, 0,
  /* 7526 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 7534 */ 'a', 'b', 's', 9, 0,
  /* 7539 */ 'j', 'a', 'l', 's', 9, 0,
  /* 7545 */ 'b', 'g', 'e', 'z', 'a', 'l', 's', 9, 0,
  /* 7554 */ 'b', 'l', 't', 'z', 'a', 'l', 's', 9, 0,
  /* 7563 */ 'c', 'i', 'n', 's', 9, 0,
  /* 7569 */ 'd', 'i', 'n', 's', 9, 0,
  /* 7575 */ 'j', 'a', 'l', 'r', 's', 9, 0,
  /* 7582 */ 'e', 'x', 't', 's', 9, 0,
  /* 7588 */ 'l', 'w', 'x', 's', 9, 0,
  /* 7594 */ 'b', 'c', '1', 't', 9, 0,
  /* 7600 */ 'b', 'g', 't', 9, 0,
  /* 7605 */ 'w', 'a', 'i', 't', 9, 0,
  /* 7611 */ 'b', 'l', 't', 9, 0,
  /* 7616 */ 's', 'l', 't', 9, 0,
  /* 7621 */ 't', 'l', 't', 9, 0,
  /* 7626 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 7633 */ 'd', 'm', 't', 9, 0,
  /* 7638 */ 'e', 'm', 't', 9, 0,
  /* 7643 */ 'n', 'o', 't', 9, 0,
  /* 7648 */ 'g', 'i', 'n', 'v', 't', 9, 0,
  /* 7655 */ 'm', 'o', 'v', 't', 9, 0,
  /* 7661 */ 'd', 'e', 'x', 't', 9, 0,
  /* 7667 */ 'l', 'b', 'u', 9, 0,
  /* 7672 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 7679 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 7686 */ 'b', 'a', 'd', 'd', 'u', 9, 0,
  /* 7693 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 7700 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 7707 */ 'd', 'm', 'o', 'd', 'u', 9, 0,
  /* 7714 */ 'b', 'g', 'e', 'u', 9, 0,
  /* 7720 */ 't', 'g', 'e', 'u', 9, 0,
  /* 7726 */ 'b', 'l', 'e', 'u', 9, 0,
  /* 7732 */ 'u', 'l', 'h', 'u', 9, 0,
  /* 7738 */ 'd', 'm', 'u', 'h', 'u', 9, 0,
  /* 7745 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 7753 */ 't', 'g', 'e', 'i', 'u', 9, 0,
  /* 7760 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 7767 */ 't', 'l', 't', 'i', 'u', 9, 0,
  /* 7774 */ 'v', '3', 'm', 'u', 'l', 'u', 9, 0,
  /* 7782 */ 'd', 'm', 'u', 'l', 'u', 9, 0,
  /* 7789 */ 'v', 'm', 'u', 'l', 'u', 9, 0,
  /* 7796 */ 'd', 'r', 'e', 'm', 'u', 9, 0,
  /* 7803 */ 'd', 'm', 'u', 'l', 'o', 'u', 9, 0,
  /* 7811 */ 'd', 'i', 'n', 's', 'u', 9, 0,
  /* 7818 */ 'b', 'g', 't', 'u', 9, 0,
  /* 7824 */ 'b', 'l', 't', 'u', 9, 0,
  /* 7830 */ 's', 'l', 't', 'u', 9, 0,
  /* 7836 */ 't', 'l', 't', 'u', 9, 0,
  /* 7842 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 7850 */ 'd', 'e', 'x', 't', 'u', 9, 0,
  /* 7857 */ 'd', 'd', 'i', 'v', 'u', 9, 0,
  /* 7864 */ 'l', 'w', 'u', 9, 0,
  /* 7869 */ 'a', 'n', 'd', '.', 'v', 9, 0,
  /* 7876 */ 'm', 'o', 'v', 'e', '.', 'v', 9, 0,
  /* 7884 */ 'b', 's', 'e', 'l', '.', 'v', 9, 0,
  /* 7892 */ 'n', 'o', 'r', '.', 'v', 9, 0,
  /* 7899 */ 'x', 'o', 'r', '.', 'v', 9, 0,
  /* 7906 */ 'b', 'z', '.', 'v', 9, 0,
  /* 7912 */ 'b', 'm', 'z', '.', 'v', 9, 0,
  /* 7919 */ 'b', 'n', 'z', '.', 'v', 9, 0,
  /* 7926 */ 'b', 'm', 'n', 'z', '.', 'v', 9, 0,
  /* 7934 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 7941 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 7949 */ 'd', 'd', 'i', 'v', 9, 0,
  /* 7955 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 7962 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 7969 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 7977 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 7986 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 7993 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 8001 */ 'i', 'n', 's', 'v', 9, 0,
  /* 8007 */ 'f', 'l', 'o', 'g', '2', '.', 'w', 9, 0,
  /* 8016 */ 'f', 'e', 'x', 'p', '2', '.', 'w', 9, 0,
  /* 8025 */ 'a', 'd', 'd', '_', 'a', '.', 'w', 9, 0,
  /* 8034 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'w', 9, 0,
  /* 8044 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'w', 9, 0,
  /* 8054 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'w', 9, 0,
  /* 8064 */ 's', 'r', 'a', '.', 'w', 9, 0,
  /* 8071 */ 'f', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 8079 */ 'f', 'm', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 8088 */ 'n', 'l', 'o', 'c', '.', 'w', 9, 0,
  /* 8096 */ 'n', 'l', 'z', 'c', '.', 'w', 9, 0,
  /* 8104 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 8113 */ 'f', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 8121 */ 'f', 'm', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 8130 */ 's', 'l', 'd', '.', 'w', 9, 0,
  /* 8137 */ 'p', 'c', 'k', 'o', 'd', '.', 'w', 9, 0,
  /* 8146 */ 'i', 'l', 'v', 'o', 'd', '.', 'w', 9, 0,
  /* 8155 */ 'f', 'c', 'l', 'e', '.', 'w', 9, 0,
  /* 8163 */ 'f', 's', 'l', 'e', '.', 'w', 9, 0,
  /* 8171 */ 'f', 'c', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 8180 */ 'f', 's', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 8189 */ 'f', 'c', 'n', 'e', '.', 'w', 9, 0,
  /* 8197 */ 'f', 's', 'n', 'e', '.', 'w', 9, 0,
  /* 8205 */ 'f', 'c', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 8214 */ 'f', 's', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 8223 */ 'i', 'n', 's', 'v', 'e', '.', 'w', 9, 0,
  /* 8232 */ 'f', 'c', 'a', 'f', '.', 'w', 9, 0,
  /* 8240 */ 'f', 's', 'a', 'f', '.', 'w', 9, 0,
  /* 8248 */ 'v', 's', 'h', 'f', '.', 'w', 9, 0,
  /* 8256 */ 'b', 'n', 'e', 'g', '.', 'w', 9, 0,
  /* 8264 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8280 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8293 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8311 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8327 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 8336 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 8345 */ 's', 'r', 'a', 'i', '.', 'w', 9, 0,
  /* 8353 */ 's', 'l', 'd', 'i', '.', 'w', 9, 0,
  /* 8361 */ 'b', 'n', 'e', 'g', 'i', '.', 'w', 9, 0,
  /* 8370 */ 's', 'l', 'l', 'i', '.', 'w', 9, 0,
  /* 8378 */ 's', 'r', 'l', 'i', '.', 'w', 9, 0,
  /* 8386 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'w', 9, 0,
  /* 8396 */ 'c', 'e', 'q', 'i', '.', 'w', 9, 0,
  /* 8404 */ 's', 'r', 'a', 'r', 'i', '.', 'w', 9, 0,
  /* 8413 */ 'b', 'c', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 8422 */ 's', 'r', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 8431 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'w', 9, 0,
  /* 8441 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'w', 9, 0,
  /* 8451 */ 'b', 's', 'e', 't', 'i', '.', 'w', 9, 0,
  /* 8460 */ 's', 'u', 'b', 'v', 'i', '.', 'w', 9, 0,
  /* 8469 */ 'a', 'd', 'd', 'v', 'i', '.', 'w', 9, 0,
  /* 8478 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 8491 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 8504 */ 'f', 'i', 'l', 'l', '.', 'w', 9, 0,
  /* 8512 */ 's', 'l', 'l', '.', 'w', 9, 0,
  /* 8519 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'w', 9, 0,
  /* 8529 */ 'f', 'f', 'q', 'l', '.', 'w', 9, 0,
  /* 8537 */ 's', 'r', 'l', '.', 'w', 9, 0,
  /* 8544 */ 'b', 'i', 'n', 's', 'l', '.', 'w', 9, 0,
  /* 8553 */ 'f', 'm', 'u', 'l', '.', 'w', 9, 0,
  /* 8561 */ 'i', 'l', 'v', 'l', '.', 'w', 9, 0,
  /* 8569 */ 'f', 'm', 'i', 'n', '.', 'w', 9, 0,
  /* 8577 */ 'f', 'c', 'u', 'n', '.', 'w', 9, 0,
  /* 8585 */ 'f', 's', 'u', 'n', '.', 'w', 9, 0,
  /* 8593 */ 'f', 'e', 'x', 'd', 'o', '.', 'w', 9, 0,
  /* 8602 */ 'f', 'r', 'c', 'p', '.', 'w', 9, 0,
  /* 8610 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'w', 9, 0,
  /* 8620 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'w', 9, 0,
  /* 8630 */ 'm', 'u', 'l', '_', 'q', '.', 'w', 9, 0,
  /* 8639 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8650 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8661 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8671 */ 'f', 'c', 'e', 'q', '.', 'w', 9, 0,
  /* 8679 */ 'f', 's', 'e', 'q', '.', 'w', 9, 0,
  /* 8687 */ 'f', 'c', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8696 */ 'f', 's', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8705 */ 'f', 't', 'q', '.', 'w', 9, 0,
  /* 8712 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 8722 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8733 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8744 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 8754 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8765 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8776 */ 's', 'r', 'a', 'r', '.', 'w', 9, 0,
  /* 8784 */ 'b', 'c', 'l', 'r', '.', 'w', 9, 0,
  /* 8792 */ 's', 'r', 'l', 'r', '.', 'w', 9, 0,
  /* 8800 */ 'f', 'c', 'o', 'r', '.', 'w', 9, 0,
  /* 8808 */ 'f', 's', 'o', 'r', '.', 'w', 9, 0,
  /* 8816 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'w', 9, 0,
  /* 8826 */ 'f', 'f', 'q', 'r', '.', 'w', 9, 0,
  /* 8834 */ 'b', 'i', 'n', 's', 'r', '.', 'w', 9, 0,
  /* 8843 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 8851 */ 'i', 'l', 'v', 'r', '.', 'w', 9, 0,
  /* 8859 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 8868 */ 'a', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8878 */ 'h', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8888 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8899 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'w', 9, 0,
  /* 8911 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8921 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8932 */ 'm', 'o', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8941 */ 'c', 'l', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8950 */ 'a', 'v', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8959 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8969 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8979 */ 'c', 'l', 't', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8989 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8999 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 9009 */ 'm', 'i', 'n', '_', 's', '.', 'w', 9, 0,
  /* 9018 */ 'd', 'o', 't', 'p', '_', 's', '.', 'w', 9, 0,
  /* 9028 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 9038 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 9048 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 9058 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 9068 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'w', 9, 0,
  /* 9078 */ 's', 'u', 'b', 's', '_', 's', '.', 'w', 9, 0,
  /* 9088 */ 'a', 'd', 'd', 's', '_', 's', '.', 'w', 9, 0,
  /* 9098 */ 's', 'a', 't', '_', 's', '.', 'w', 9, 0,
  /* 9107 */ 'c', 'l', 't', '_', 's', '.', 'w', 9, 0,
  /* 9116 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 9127 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 9138 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'w', 9, 0,
  /* 9150 */ 'd', 'i', 'v', '_', 's', '.', 'w', 9, 0,
  /* 9159 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 9170 */ 'm', 'a', 'x', '_', 's', '.', 'w', 9, 0,
  /* 9179 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'w', 9, 0,
  /* 9189 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 9200 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 9211 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 9223 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'w', 9, 0,
  /* 9233 */ 's', 'p', 'l', 'a', 't', '.', 'w', 9, 0,
  /* 9242 */ 'b', 's', 'e', 't', '.', 'w', 9, 0,
  /* 9250 */ 'f', 'c', 'l', 't', '.', 'w', 9, 0,
  /* 9258 */ 'f', 's', 'l', 't', '.', 'w', 9, 0,
  /* 9266 */ 'f', 'c', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 9275 */ 'f', 's', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 9284 */ 'p', 'c', 'n', 't', '.', 'w', 9, 0,
  /* 9292 */ 'f', 'r', 'i', 'n', 't', '.', 'w', 9, 0,
  /* 9301 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'w', 9, 0,
  /* 9311 */ 'f', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 9320 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 9330 */ 's', 't', '.', 'w', 9, 0,
  /* 9336 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9346 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9356 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9367 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'w', 9, 0,
  /* 9379 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9389 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9400 */ 'm', 'o', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9409 */ 'c', 'l', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 9418 */ 'a', 'v', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 9427 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9437 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9447 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9457 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9467 */ 'm', 'i', 'n', '_', 'u', '.', 'w', 9, 0,
  /* 9476 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'w', 9, 0,
  /* 9486 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'w', 9, 0,
  /* 9496 */ 's', 'u', 'b', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9506 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9516 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9528 */ 's', 'a', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9537 */ 'c', 'l', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9546 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9557 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9568 */ 'd', 'i', 'v', '_', 'u', '.', 'w', 9, 0,
  /* 9577 */ 'm', 'a', 'x', '_', 'u', '.', 'w', 9, 0,
  /* 9586 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'w', 9, 0,
  /* 9596 */ 'm', 's', 'u', 'b', 'v', '.', 'w', 9, 0,
  /* 9605 */ 'm', 'a', 'd', 'd', 'v', '.', 'w', 9, 0,
  /* 9614 */ 'p', 'c', 'k', 'e', 'v', '.', 'w', 9, 0,
  /* 9623 */ 'i', 'l', 'v', 'e', 'v', '.', 'w', 9, 0,
  /* 9632 */ 'f', 'd', 'i', 'v', '.', 'w', 9, 0,
  /* 9640 */ 'm', 'u', 'l', 'v', '.', 'w', 9, 0,
  /* 9648 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 9657 */ 'f', 'm', 'a', 'x', '.', 'w', 9, 0,
  /* 9665 */ 'b', 'z', '.', 'w', 9, 0,
  /* 9671 */ 'b', 'n', 'z', '.', 'w', 9, 0,
  /* 9678 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 9686 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 9695 */ 'u', 'l', 'w', 9, 0,
  /* 9700 */ 'u', 's', 'w', 9, 0,
  /* 9705 */ 'p', 'r', 'e', 'f', 'x', 9, 0,
  /* 9712 */ 'l', 'h', 'x', 9, 0,
  /* 9717 */ 'j', 'a', 'l', 'x', 9, 0,
  /* 9723 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 9729 */ 'l', 'w', 'x', 9, 0,
  /* 9734 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 9740 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 9746 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 9752 */ 's', 'e', 'l', 'n', 'e', 'z', 9, 0,
  /* 9760 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 9767 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 9773 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 9779 */ 's', 'e', 'l', 'e', 'q', 'z', 9, 0,
  /* 9787 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 9794 */ 'b', 'g', 't', 'z', 9, 0,
  /* 9800 */ 'b', 'l', 't', 'z', 9, 0,
  /* 9806 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 9812 */ 's', 'e', 'b', 9, 32, 0,
  /* 9818 */ 's', 'e', 'h', 9, 32, 0,
  /* 9824 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9838 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9851 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 9863 */ 'm', 'f', 't', 'c', '0', 32, 0,
  /* 9870 */ 'm', 't', 't', 'c', '0', 32, 0,
  /* 9877 */ 'm', 'f', 't', 'h', 'c', '1', 32, 0,
  /* 9885 */ 'm', 't', 't', 'h', 'c', '1', 32, 0,
  /* 9893 */ 'c', 'f', 't', 'c', '1', 32, 0,
  /* 9900 */ 'm', 'f', 't', 'c', '1', 32, 0,
  /* 9907 */ 'c', 't', 't', 'c', '1', 32, 0,
  /* 9914 */ 'm', 't', 't', 'c', '1', 32, 0,
  /* 9921 */ 's', 'y', 'n', 'c', 32, 0,
  /* 9927 */ 'l', 'd', 32, 0,
  /* 9931 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 9939 */ 's', 'd', 32, 0,
  /* 9943 */ 'm', 'f', 't', 'h', 'i', 32, 0,
  /* 9950 */ 'm', 't', 't', 'h', 'i', 32, 0,
  /* 9957 */ 'm', 'f', 't', 'l', 'o', 32, 0,
  /* 9964 */ 'm', 't', 't', 'l', 'o', 32, 0,
  /* 9971 */ 'm', 'f', 't', 'd', 's', 'p', 32, 0,
  /* 9979 */ 'm', 't', 't', 'd', 's', 'p', 32, 0,
  /* 9987 */ 's', 'e', 'q', 32, 0,
  /* 9992 */ 'm', 'f', 't', 'g', 'p', 'r', 32, 0,
  /* 10000 */ 'm', 't', 't', 'g', 'p', 'r', 32, 0,
  /* 10008 */ 'd', 'e', 'x', 't', 32, 0,
  /* 10014 */ 'm', 'f', 't', 'a', 'c', 'x', 32, 0,
  /* 10022 */ 'm', 't', 't', 'a', 'c', 'x', 32, 0,
  /* 10030 */ 'b', 'c', '1', 'n', 'e', 'z', 32, 0,
  /* 10038 */ 'b', 'c', '2', 'n', 'e', 'z', 32, 0,
  /* 10046 */ 'b', 'c', '1', 'e', 'q', 'z', 32, 0,
  /* 10054 */ 'b', 'c', '2', 'e', 'q', 'z', 32, 0,
  /* 10062 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 10093 */ 'c', '.', 0,
  /* 10096 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'y', 'p', 'e', 'd', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 10120 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 10145 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 10168 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 10191 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 10213 */ 'b', 'r', 'e', 'a', 'k', 32, '0', 0,
  /* 10221 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 10234 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 10241 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 10251 */ 'D', 'B', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 10261 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 10276 */ 'j', 'r', 'c', 9, '$', 'r', 'a', 0,
  /* 10284 */ 'j', 'r', 9, '$', 'r', 'a', 0,
  /* 10291 */ 'e', 'h', 'b', 0,
  /* 10295 */ 'e', 'r', 'e', 't', 'n', 'c', 0,
  /* 10302 */ 'p', 'a', 'u', 's', 'e', 0,
  /* 10308 */ 't', 'l', 'b', 'i', 'n', 'v', 'f', 0,
  /* 10316 */ 't', 'l', 'b', 'g', 'i', 'n', 'v', 'f', 0,
  /* 10325 */ 't', 'l', 'b', 'w', 'i', 0,
  /* 10331 */ 't', 'l', 'b', 'g', 'w', 'i', 0,
  /* 10338 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 10352 */ 'f', 'o', 'o', 0,
  /* 10356 */ 't', 'l', 'b', 'p', 0,
  /* 10361 */ 't', 'l', 'b', 'g', 'p', 0,
  /* 10367 */ 's', 's', 'n', 'o', 'p', 0,
  /* 10373 */ 't', 'l', 'b', 'r', 0,
  /* 10378 */ 't', 'l', 'b', 'g', 'r', 0,
  /* 10384 */ 't', 'l', 'b', 'w', 'r', 0,
  /* 10390 */ 't', 'l', 'b', 'g', 'w', 'r', 0,
  /* 10397 */ 'd', 'e', 'r', 'e', 't', 0,
  /* 10403 */ 'w', 'a', 'i', 't', 0,
  /* 10408 */ 't', 'l', 'b', 'i', 'n', 'v', 0,
  /* 10415 */ 't', 'l', 'b', 'g', 'i', 'n', 'v', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    10242U,	// DBG_VALUE
    10252U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    10235U,	// BUNDLE
    10262U,	// LIFETIME_START
    10222U,	// LIFETIME_END
    0U,	// STACKMAP
    10339U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    10146U,	// PATCHABLE_FUNCTION_ENTER
    10063U,	// PATCHABLE_RET
    10192U,	// PATCHABLE_FUNCTION_EXIT
    10169U,	// PATCHABLE_TAIL_CALL
    10121U,	// PATCHABLE_EVENT_CALL
    10097U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    23919U,	// ABSMacro
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I16_POSTRA
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I32_POSTRA
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I64_POSTRA
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_CMP_SWAP_I8_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I16_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I32_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I64_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_ADD_I8_POSTRA
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I16_POSTRA
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I32_POSTRA
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I64_POSTRA
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_AND_I8_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I16_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I32_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I64_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_NAND_I8_POSTRA
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I16_POSTRA
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I32_POSTRA
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I64_POSTRA
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_OR_I8_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I16_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I32_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I64_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_SUB_I8_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I16_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I32_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I64_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_LOAD_XOR_I8_POSTRA
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I16_POSTRA
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I32_POSTRA
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I64_POSTRA
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATOMIC_SWAP_I8_POSTRA
    0U,	// B
    0U,	// BAL_BR
    0U,	// BAL_BR_MM
    268458174U,	// BEQLImmMacro
    268456054U,	// BGE
    268456054U,	// BGEImmMacro
    268458045U,	// BGEL
    268458045U,	// BGELImmMacro
    268459555U,	// BGEU
    268459555U,	// BGEUImmMacro
    268458205U,	// BGEUL
    268458205U,	// BGEULImmMacro
    268459441U,	// BGT
    268459441U,	// BGTImmMacro
    268458193U,	// BGTL
    268458193U,	// BGTLImmMacro
    268459659U,	// BGTU
    268459659U,	// BGTUImmMacro
    268458225U,	// BGTUL
    268458225U,	// BGTULImmMacro
    268456081U,	// BLE
    268456081U,	// BLEImmMacro
    268458051U,	// BLEL
    268458051U,	// BLELImmMacro
    268459567U,	// BLEU
    268459567U,	// BLEUImmMacro
    268458212U,	// BLEUL
    268458212U,	// BLEULImmMacro
    268459452U,	// BLT
    268459452U,	// BLTImmMacro
    268458199U,	// BLTL
    268458199U,	// BLTLImmMacro
    268459665U,	// BLTU
    268459665U,	// BLTUImmMacro
    268458232U,	// BLTUL
    268458232U,	// BLTULImmMacro
    268458057U,	// BNELImmMacro
    0U,	// BPOSGE32_PSEUDO
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    0U,	// BSEL_W_PSEUDO
    0U,	// B_MM
    279274U,	// B_MMR6_Pseudo
    279274U,	// B_MM_Pseudo
    268458519U,	// BeqImm
    268456103U,	// BneImm
    536893857U,	// BteqzT8CmpX16
    536893300U,	// BteqzT8CmpiX16
    536894913U,	// BteqzT8SltX16
    536893330U,	// BteqzT8SltiX16
    536895057U,	// BteqzT8SltiuX16
    536895127U,	// BteqzT8SltuX16
    805329313U,	// BtnezT8CmpX16
    805328756U,	// BtnezT8CmpiX16
    805330369U,	// BtnezT8SltX16
    805328786U,	// BtnezT8SltiX16
    805330513U,	// BtnezT8SltiuX16
    805330583U,	// BtnezT8SltuX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    26278U,	// CFTC1
    10353U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    8955572U,	// CTTC1
    288460U,	// Constant32
    268458219U,	// DMULImmMacro
    268458219U,	// DMULMacro
    268458354U,	// DMULOMacro
    268459644U,	// DMULOUMacro
    268458168U,	// DROL
    268458168U,	// DROLImm
    268458686U,	// DROR
    268458686U,	// DRORImm
    268459790U,	// DSDivIMacro
    268459790U,	// DSDivMacro
    268458277U,	// DSRemIMacro
    268458277U,	// DSRemMacro
    268459698U,	// DUDivIMacro
    268459698U,	// DUDivMacro
    268459637U,	// DURemIMacro
    268459637U,	// DURemMacro
    0U,	// ERet
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    0U,	// FABS_W
    0U,	// FEXP2_D_1_PSEUDO
    0U,	// FEXP2_W_1_PSEUDO
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    1090541419U,	// GotPrologue16
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    0U,	// JALR64Pseudo
    0U,	// JALRHB64Pseudo
    0U,	// JALRHBPseudo
    0U,	// JALRPseudo
    284631U,	// JalOneReg
    22487U,	// JalTwoReg
    25192136U,	// LDMacro
    0U,	// LD_F16
    25182214U,	// LOAD_ACC128
    25182214U,	// LOAD_ACC64
    25182214U,	// LOAD_ACC64DSP
    25188791U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    842041U,	// LWM_MM
    17037U,	// LoadAddrImm32
    17058U,	// LoadAddrImm64
    25182861U,	// LoadAddrReg32
    25182882U,	// LoadAddrReg64
    22379U,	// LoadImm32
    22383U,	// LoadImm64
    19102U,	// LoadImmDoubleFGR
    19102U,	// LoadImmDoubleFGR_32
    19102U,	// LoadImmDoubleGPR
    23494U,	// LoadImmSingleFGR
    23494U,	// LoadImmSingleGPR
    1074657U,	// LwConstant32
    26399U,	// MFTACX
    268461704U,	// MFTC0
    26285U,	// MFTC1
    288500U,	// MFTDSP
    26377U,	// MFTGPR
    26262U,	// MFTHC1
    26328U,	// MFTHI
    26342U,	// MFTLO
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    0U,	// MSA_FP_EXTEND_D_PSEUDO
    0U,	// MSA_FP_EXTEND_W_PSEUDO
    0U,	// MSA_FP_ROUND_D_PSEUDO
    0U,	// MSA_FP_ROUND_W_PSEUDO
    8955687U,	// MTTACX
    1376298639U,	// MTTC0
    8955579U,	// MTTC1
    288508U,	// MTTDSP
    8955665U,	// MTTGPR
    8955550U,	// MTTHC1
    8955615U,	// MTTHI
    8955629U,	// MTTLO
    268458220U,	// MULImmMacro
    268458355U,	// MULOMacro
    268459645U,	// MULOUMacro
    24012U,	// MultRxRy16
    43294156U,	// MultRxRyRz16
    24228U,	// MultuRxRy16
    43294372U,	// MultuRxRyRz16
    0U,	// NOP
    268458681U,	// NORImm
    268458681U,	// NORImm64
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    16390U,	// PseudoCVT_D32_W
    16390U,	// PseudoCVT_D64_L
    16390U,	// PseudoCVT_D64_W
    16390U,	// PseudoCVT_S_L
    16390U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoIndirectBranch64R6
    0U,	// PseudoIndirectBranchR6
    0U,	// PseudoIndirectBranch_MM
    0U,	// PseudoIndirectBranch_MMR6
    0U,	// PseudoIndirectHazardBranch
    0U,	// PseudoIndirectHazardBranch64
    0U,	// PseudoIndrectHazardBranch64R6
    0U,	// PseudoIndrectHazardBranchR6
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    268455839U,	// PseudoTRUNC_W_D
    268455839U,	// PseudoTRUNC_W_D32
    268459288U,	// PseudoTRUNC_W_S
    0U,	// PseudoUDIV
    268458169U,	// ROL
    268458169U,	// ROLImm
    268458687U,	// ROR
    268458687U,	// RORImm
    0U,	// RetRA
    0U,	// RetRA16
    0U,	// SDIV_MM_Pseudo
    25192148U,	// SDMacro
    268459791U,	// SDivIMacro
    268459791U,	// SDivMacro
    268461828U,	// SEQIMacro
    268461828U,	// SEQMacro
    268459457U,	// SLTImm64
    268459671U,	// SLTUImm64
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    268458278U,	// SRemIMacro
    268458278U,	// SRemMacro
    25182214U,	// STORE_ACC128
    25182214U,	// STORE_ACC64
    25182214U,	// STORE_ACC64DSP
    25188807U,	// STORE_CCOND_DSP
    0U,	// ST_F16
    842046U,	// SWM_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    1648174U,	// SelBeqZ
    1648147U,	// SelBneZ
    1661016481U,	// SelTBteqZCmp
    1661015924U,	// SelTBteqZCmpi
    1661017537U,	// SelTBteqZSlt
    1661015954U,	// SelTBteqZSlti
    1661017681U,	// SelTBteqZSltiu
    1661017751U,	// SelTBteqZSltu
    1929451937U,	// SelTBtneZCmp
    1929451380U,	// SelTBtneZCmpi
    1929452993U,	// SelTBtneZSlt
    1929451410U,	// SelTBtneZSlti
    1929453137U,	// SelTBtneZSltiu
    1929453207U,	// SelTBtneZSltu
    60071361U,	// SltCCRxRy16
    60069778U,	// SltiCCRxImmX16
    60071505U,	// SltiuCCRxImmX16
    60071575U,	// SltuCCRxRy16
    60071575U,	// SltuRxRyRz16
    0U,	// TAILCALL
    0U,	// TAILCALL64R6REG
    0U,	// TAILCALLHB64R6REG
    0U,	// TAILCALLHBR6REG
    0U,	// TAILCALLR6REG
    0U,	// TAILCALLREG
    0U,	// TAILCALLREG64
    0U,	// TAILCALLREGHB
    0U,	// TAILCALLREGHB64
    0U,	// TAILCALLREG_MM
    0U,	// TAILCALLREG_MMR6
    0U,	// TAILCALL_MM
    0U,	// TAILCALL_MMR6
    0U,	// TRAP
    0U,	// TRAP_MM
    0U,	// UDIV_MM_Pseudo
    268459699U,	// UDivIMacro
    268459699U,	// UDivMacro
    268459638U,	// URemIMacro
    268459638U,	// URemMacro
    25187573U,	// Ulh
    25189941U,	// Ulhu
    25191904U,	// Ulw
    25188126U,	// Ush
    25191909U,	// Usw
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    22023U,	// ABSQ_S_PH
    22023U,	// ABSQ_S_PH_MM
    18192U,	// ABSQ_S_QB
    18192U,	// ABSQ_S_QB_MMR2
    25443U,	// ABSQ_S_W
    25443U,	// ABSQ_S_W_MM
    268455963U,	// ADD
    18478U,	// ADDIUPC
    18478U,	// ADDIUPC_MM
    18478U,	// ADDIUPC_MMR6
    22956U,	// ADDIUR1SP_MM
    268452218U,	// ADDIUR2_MM
    9732507U,	// ADDIUS5_MM
    285161U,	// ADDIUSP_MM
    268459587U,	// ADDIU_MMR6
    268457284U,	// ADDQH_PH
    268457284U,	// ADDQH_PH_MMR2
    268457401U,	// ADDQH_R_PH
    268457401U,	// ADDQH_R_PH_MMR2
    268460574U,	// ADDQH_R_W
    268460574U,	// ADDQH_R_W_MMR2
    268460177U,	// ADDQH_W
    268460177U,	// ADDQH_W_MMR2
    268457358U,	// ADDQ_PH
    268457358U,	// ADDQ_PH_MM
    268457457U,	// ADDQ_S_PH
    268457457U,	// ADDQ_S_PH_MM
    268460879U,	// ADDQ_S_W
    268460879U,	// ADDQ_S_W_MM
    268453974U,	// ADDSC
    268453974U,	// ADDSC_MM
    268452598U,	// ADDS_A_B
    268454135U,	// ADDS_A_D
    268456211U,	// ADDS_A_H
    268459885U,	// ADDS_A_W
    268453066U,	// ADDS_S_B
    268455233U,	// ADDS_S_D
    268456768U,	// ADDS_S_H
    268460929U,	// ADDS_S_W
    268453281U,	// ADDS_U_B
    268455700U,	// ADDS_U_D
    268457046U,	// ADDS_U_H
    268461347U,	// ADDS_U_W
    268452438U,	// ADDU16_MM
    268452438U,	// ADDU16_MMR6
    268453516U,	// ADDUH_QB
    268453516U,	// ADDUH_QB_MMR2
    268453624U,	// ADDUH_R_QB
    268453624U,	// ADDUH_R_QB_MMR2
    268459528U,	// ADDU_MMR6
    268457556U,	// ADDU_PH
    268457556U,	// ADDU_PH_MMR2
    268453729U,	// ADDU_QB
    268453729U,	// ADDU_QB_MM
    268457501U,	// ADDU_S_PH
    268457501U,	// ADDU_S_PH_MMR2
    268453670U,	// ADDU_S_QB
    268453670U,	// ADDU_S_QB_MM
    268452847U,	// ADDVI_B
    268454655U,	// ADDVI_D
    268456427U,	// ADDVI_H
    268460310U,	// ADDVI_W
    268453359U,	// ADDV_B
    268455790U,	// ADDV_D
    268457124U,	// ADDV_H
    268461447U,	// ADDV_W
    268454013U,	// ADDWC
    268454013U,	// ADDWC_MM
    268452580U,	// ADD_A_B
    268454116U,	// ADD_A_D
    268456193U,	// ADD_A_H
    268459866U,	// ADD_A_W
    268455963U,	// ADD_MM
    268455963U,	// ADD_MMR6
    268457777U,	// ADDi
    268457777U,	// ADDi_MM
    268459587U,	// ADDiu
    268459587U,	// ADDiu_MM
    268459528U,	// ADDu
    268459528U,	// ADDu_MM
    268458308U,	// ALIGN
    268458308U,	// ALIGN_MMR6
    18470U,	// ALUIPC
    18470U,	// ALUIPC_MMR6
    268455992U,	// AND
    10305993U,	// AND16_MM
    10305993U,	// AND16_MMR6
    268455992U,	// AND64
    268452318U,	// ANDI16_MM
    268452318U,	// ANDI16_MMR6
    268452706U,	// ANDI_B
    268457783U,	// ANDI_MMR6
    268455992U,	// AND_MM
    268455992U,	// AND_MMR6
    268459710U,	// AND_V
    268457783U,	// ANDi
    268457783U,	// ANDi64
    268457783U,	// ANDi_MM
    268456006U,	// APPEND
    268456006U,	// APPEND_MMR2
    268452960U,	// ASUB_S_B
    268455063U,	// ASUB_S_D
    268456600U,	// ASUB_S_H
    268460709U,	// ASUB_S_W
    268453175U,	// ASUB_U_B
    268455530U,	// ASUB_U_D
    268456888U,	// ASUB_U_H
    268461177U,	// ASUB_U_W
    268457887U,	// AUI
    18463U,	// AUIPC
    18463U,	// AUIPC_MMR6
    268457887U,	// AUI_MMR6
    268453046U,	// AVER_S_B
    268455213U,	// AVER_S_D
    268456738U,	// AVER_S_H
    268460909U,	// AVER_S_W
    268453261U,	// AVER_U_B
    268455680U,	// AVER_U_D
    268457026U,	// AVER_U_H
    268461327U,	// AVER_U_W
    268452988U,	// AVE_S_B
    268455145U,	// AVE_S_D
    268456670U,	// AVE_S_H
    268460791U,	// AVE_S_W
    268453203U,	// AVE_U_B
    268455612U,	// AVE_U_D
    268456958U,	// AVE_U_H
    268461259U,	// AVE_U_W
    24131U,	// AddiuRxImmX16
    2121283U,	// AddiuRxPcImmX16
    2164284995U,	// AddiuRxRxImm16
    16801347U,	// AddiuRxRxImmX16
    67132995U,	// AddiuRxRyOffMemX16
    2385532U,	// AddiuSpImm16
    288380U,	// AddiuSpImmX16
    268459528U,	// AdduRxRyRz16
    16797752U,	// AndRxRxRy16
    278949U,	// B16_MM
    268459527U,	// BADDu
    284626U,	// BAL
    280528U,	// BALC
    280528U,	// BALC_MMR6
    268458307U,	// BALIGN
    268458307U,	// BALIGN_MMR2
    75513935U,	// BBIT0
    75514067U,	// BBIT032
    75514060U,	// BBIT1
    75514076U,	// BBIT132
    280507U,	// BC
    278954U,	// BC16_MMR6
    26431U,	// BC1EQZ
    18603U,	// BC1EQZC_MMR6
    20714U,	// BC1F
    22607U,	// BC1FL
    20714U,	// BC1F_MM
    26415U,	// BC1NEZ
    18578U,	// BC1NEZC_MMR6
    23979U,	// BC1T
    22730U,	// BC1TL
    23979U,	// BC1T_MM
    26439U,	// BC2EQZ
    18612U,	// BC2EQZC_MMR6
    26423U,	// BC2NEZ
    18587U,	// BC2NEZC_MMR6
    268452775U,	// BCLRI_B
    268454599U,	// BCLRI_D
    268456371U,	// BCLRI_H
    268460254U,	// BCLRI_W
    268452927U,	// BCLR_B
    268454987U,	// BCLR_D
    268456567U,	// BCLR_H
    268460625U,	// BCLR_W
    280507U,	// BC_MMR6
    268458519U,	// BEQ
    268458519U,	// BEQ64
    268453956U,	// BEQC
    268453956U,	// BEQC64
    268453956U,	// BEQC_MMR6
    268458174U,	// BEQL
    17017U,	// BEQZ16_MM
    18424U,	// BEQZALC
    18424U,	// BEQZALC_MMR6
    18621U,	// BEQZC
    16832U,	// BEQZC16_MMR6
    18621U,	// BEQZC64
    18621U,	// BEQZC_MM
    18621U,	// BEQZC_MMR6
    268458519U,	// BEQ_MM
    268453823U,	// BGEC
    268453823U,	// BGEC64
    268453823U,	// BGEC_MMR6
    268453987U,	// BGEUC
    268453987U,	// BGEUC64
    268453987U,	// BGEUC_MMR6
    26119U,	// BGEZ
    26119U,	// BGEZ64
    22492U,	// BGEZAL
    18397U,	// BGEZALC
    18397U,	// BGEZALC_MMR6
    22688U,	// BGEZALL
    23930U,	// BGEZALS_MM
    22492U,	// BGEZAL_MM
    18564U,	// BGEZC
    18564U,	// BGEZC64
    18564U,	// BGEZC_MMR6
    22793U,	// BGEZL
    26119U,	// BGEZ_MM
    26179U,	// BGTZ
    26179U,	// BGTZ64
    18433U,	// BGTZALC
    18433U,	// BGTZALC_MMR6
    18628U,	// BGTZC
    18628U,	// BGTZC64
    18628U,	// BGTZC_MMR6
    22807U,	// BGTZL
    26179U,	// BGTZ_MM
    285229964U,	// BINSLI_B
    285231788U,	// BINSLI_D
    285233560U,	// BINSLI_H
    285237443U,	// BINSLI_W
    285230111U,	// BINSL_B
    285231988U,	// BINSL_D
    285233674U,	// BINSL_H
    285237601U,	// BINSL_W
    285230025U,	// BINSRI_B
    285231833U,	// BINSRI_D
    285233605U,	// BINSRI_H
    285237488U,	// BINSRI_W
    285230159U,	// BINSR_B
    285232253U,	// BINSR_D
    285233799U,	// BINSR_H
    285237891U,	// BINSR_W
    24326U,	// BITREV
    24326U,	// BITREV_MM
    22906U,	// BITSWAP
    22906U,	// BITSWAP_MMR6
    26125U,	// BLEZ
    26125U,	// BLEZ64
    18406U,	// BLEZALC
    18406U,	// BLEZALC_MMR6
    18571U,	// BLEZC
    18571U,	// BLEZC64
    18571U,	// BLEZC_MMR6
    22800U,	// BLEZL
    26125U,	// BLEZ_MM
    268453981U,	// BLTC
    268453981U,	// BLTC64
    268453981U,	// BLTC_MMR6
    268453994U,	// BLTUC
    268453994U,	// BLTUC64
    268453994U,	// BLTUC_MMR6
    26185U,	// BLTZ
    26185U,	// BLTZ64
    22500U,	// BLTZAL
    18442U,	// BLTZALC
    18442U,	// BLTZALC_MMR6
    22697U,	// BLTZALL
    23939U,	// BLTZALS_MM
    22500U,	// BLTZAL_MM
    18635U,	// BLTZC
    18635U,	// BLTZC64
    18635U,	// BLTZC_MMR6
    22814U,	// BLTZL
    26185U,	// BLTZ_MM
    285230080U,	// BMNZI_B
    285236983U,	// BMNZ_V
    285230072U,	// BMZI_B
    285236969U,	// BMZ_V
    268456103U,	// BNE
    268456103U,	// BNE64
    268453829U,	// BNEC
    268453829U,	// BNEC64
    268453829U,	// BNEC_MMR6
    268452714U,	// BNEGI_B
    268454547U,	// BNEGI_D
    268456319U,	// BNEGI_H
    268460202U,	// BNEGI_W
    268452682U,	// BNEG_B
    268454523U,	// BNEG_D
    268456295U,	// BNEG_H
    268460097U,	// BNEG_W
    268458057U,	// BNEL
    17009U,	// BNEZ16_MM
    18415U,	// BNEZALC
    18415U,	// BNEZALC_MMR6
    18596U,	// BNEZC
    16823U,	// BNEZC16_MMR6
    18596U,	// BNEZC64
    18596U,	// BNEZC_MM
    18596U,	// BNEZC_MMR6
    268456103U,	// BNE_MM
    268454001U,	// BNVC
    268454001U,	// BNVC_MMR6
    17943U,	// BNZ_B
    20459U,	// BNZ_D
    21708U,	// BNZ_H
    24304U,	// BNZ_V
    26056U,	// BNZ_W
    268454007U,	// BOVC
    268454007U,	// BOVC_MMR6
    278765U,	// BPOSGE32
    280496U,	// BPOSGE32C_MMR3
    278765U,	// BPOSGE32_MM
    83990451U,	// BREAK
    115188U,	// BREAK16_MM
    115188U,	// BREAK16_MMR6
    83990451U,	// BREAK_MM
    83990451U,	// BREAK_MMR6
    285229939U,	// BSELI_B
    285236941U,	// BSEL_V
    268452829U,	// BSETI_B
    268454637U,	// BSETI_D
    268456409U,	// BSETI_H
    268460292U,	// BSETI_W
    268453143U,	// BSET_B
    268455349U,	// BSET_D
    268456856U,	// BSET_H
    268461083U,	// BSET_W
    17937U,	// BZ_B
    20443U,	// BZ_D
    21702U,	// BZ_H
    24291U,	// BZ_V
    26050U,	// BZ_W
    2415945262U,	// BeqzRxImm16
    26158U,	// BeqzRxImmX16
    2376426U,	// Bimm16
    279274U,	// BimmX16
    2415945235U,	// BnezRxImm16
    26131U,	// BnezRxImmX16
    10214U,	// Break16
    2647612U,	// Bteqz16
    288316U,	// BteqzX16
    2647585U,	// Btnez16
    288289U,	// BtnezX16
    3018880U,	// CACHE
    3018855U,	// CACHEE
    3018855U,	// CACHEE_MM
    3018880U,	// CACHE_MM
    3018880U,	// CACHE_MMR6
    3018880U,	// CACHE_R6
    19230U,	// CEIL_L_D64
    19230U,	// CEIL_L_D_MMR6
    23522U,	// CEIL_L_S
    23522U,	// CEIL_L_S_MMR6
    20405U,	// CEIL_W_D32
    20405U,	// CEIL_W_D64
    20405U,	// CEIL_W_D_MMR6
    20405U,	// CEIL_W_MM
    23854U,	// CEIL_W_S
    23854U,	// CEIL_W_S_MM
    23854U,	// CEIL_W_S_MMR6
    268452758U,	// CEQI_B
    268454582U,	// CEQI_D
    268456354U,	// CEQI_H
    268460237U,	// CEQI_W
    268452912U,	// CEQ_B
    268454894U,	// CEQ_D
    268456545U,	// CEQ_H
    268460513U,	// CEQ_W
    16482U,	// CFC1
    16482U,	// CFC1_MM
    16698U,	// CFC2_MM
    17108U,	// CFCMSA
    268459404U,	// CINS
    268452126U,	// CINS32
    268459404U,	// CINS64_32
    268459404U,	// CINS_i32
    19875U,	// CLASS_D
    19875U,	// CLASS_D_MMR6
    23705U,	// CLASS_S
    23705U,	// CLASS_S_MMR6
    268452997U,	// CLEI_S_B
    268455154U,	// CLEI_S_D
    268456679U,	// CLEI_S_H
    268460800U,	// CLEI_S_W
    268453212U,	// CLEI_U_B
    268455621U,	// CLEI_U_D
    268456967U,	// CLEI_U_H
    268461268U,	// CLEI_U_W
    268452979U,	// CLE_S_B
    268455136U,	// CLE_S_D
    268456661U,	// CLE_S_H
    268460782U,	// CLE_S_W
    268453194U,	// CLE_U_B
    268455603U,	// CLE_U_D
    268456949U,	// CLE_U_H
    268461250U,	// CLE_U_W
    22874U,	// CLO
    22874U,	// CLO_MM
    22874U,	// CLO_MMR6
    22874U,	// CLO_R6
    268453017U,	// CLTI_S_B
    268455174U,	// CLTI_S_D
    268456699U,	// CLTI_S_H
    268460820U,	// CLTI_S_W
    268453232U,	// CLTI_U_B
    268455641U,	// CLTI_U_D
    268456987U,	// CLTI_U_H
    268461288U,	// CLTI_U_W
    268453085U,	// CLT_S_B
    268455252U,	// CLT_S_D
    268456787U,	// CLT_S_H
    268460948U,	// CLT_S_W
    268453312U,	// CLT_U_B
    268455731U,	// CLT_U_D
    268457077U,	// CLT_U_H
    268461378U,	// CLT_U_W
    26153U,	// CLZ
    26153U,	// CLZ_MM
    26153U,	// CLZ_MMR6
    26153U,	// CLZ_R6
    268453562U,	// CMPGDU_EQ_QB
    268453562U,	// CMPGDU_EQ_QB_MMR2
    268453467U,	// CMPGDU_LE_QB
    268453467U,	// CMPGDU_LE_QB_MMR2
    268453681U,	// CMPGDU_LT_QB
    268453681U,	// CMPGDU_LT_QB_MMR2
    268453576U,	// CMPGU_EQ_QB
    268453576U,	// CMPGU_EQ_QB_MM
    268453481U,	// CMPGU_LE_QB
    268453481U,	// CMPGU_LE_QB_MM
    268453695U,	// CMPGU_LT_QB
    268453695U,	// CMPGU_LT_QB_MM
    18133U,	// CMPU_EQ_QB
    18133U,	// CMPU_EQ_QB_MM
    18038U,	// CMPU_LE_QB
    18038U,	// CMPU_LE_QB_MM
    18252U,	// CMPU_LT_QB
    18252U,	// CMPU_LT_QB_MM
    268454444U,	// CMP_AF_D_MMR6
    268458888U,	// CMP_AF_S_MMR6
    268454883U,	// CMP_EQ_D
    268454883U,	// CMP_EQ_D_MMR6
    21911U,	// CMP_EQ_PH
    21911U,	// CMP_EQ_PH_MM
    268459092U,	// CMP_EQ_S
    268459092U,	// CMP_EQ_S_MMR6
    268454444U,	// CMP_F_D
    268458888U,	// CMP_F_S
    268454288U,	// CMP_LE_D
    268454288U,	// CMP_LE_D_MMR6
    21807U,	// CMP_LE_PH
    21807U,	// CMP_LE_PH_MM
    268458809U,	// CMP_LE_S
    268458809U,	// CMP_LE_S_MMR6
    268455374U,	// CMP_LT_D
    268455374U,	// CMP_LT_D_MMR6
    22080U,	// CMP_LT_PH
    22080U,	// CMP_LT_PH_MM
    268459187U,	// CMP_LT_S
    268459187U,	// CMP_LT_S_MMR6
    268454462U,	// CMP_SAF_D
    268454462U,	// CMP_SAF_D_MMR6
    268458898U,	// CMP_SAF_S
    268458898U,	// CMP_SAF_S_MMR6
    268454910U,	// CMP_SEQ_D
    268454910U,	// CMP_SEQ_D_MMR6
    268459111U,	// CMP_SEQ_S
    268459111U,	// CMP_SEQ_S_MMR6
    268454325U,	// CMP_SLE_D
    268454325U,	// CMP_SLE_D_MMR6
    268458838U,	// CMP_SLE_S
    268458838U,	// CMP_SLE_S_MMR6
    268455401U,	// CMP_SLT_D
    268455401U,	// CMP_SLT_D_MMR6
    268459206U,	// CMP_SLT_S
    268459206U,	// CMP_SLT_S_MMR6
    268454958U,	// CMP_SUEQ_D
    268454958U,	// CMP_SUEQ_D_MMR6
    268459142U,	// CMP_SUEQ_S
    268459142U,	// CMP_SUEQ_S_MMR6
    268454373U,	// CMP_SULE_D
    268454373U,	// CMP_SULE_D_MMR6
    268458869U,	// CMP_SULE_S
    268458869U,	// CMP_SULE_S_MMR6
    268455449U,	// CMP_SULT_D
    268455449U,	// CMP_SULT_D_MMR6
    268459237U,	// CMP_SULT_S
    268459237U,	// CMP_SULT_S_MMR6
    268454831U,	// CMP_SUN_D
    268454831U,	// CMP_SUN_D_MMR6
    268459056U,	// CMP_SUN_S
    268459056U,	// CMP_SUN_S_MMR6
    268454938U,	// CMP_UEQ_D
    268454938U,	// CMP_UEQ_D_MMR6
    268459131U,	// CMP_UEQ_S
    268459131U,	// CMP_UEQ_S_MMR6
    268454353U,	// CMP_ULE_D
    268454353U,	// CMP_ULE_D_MMR6
    268458858U,	// CMP_ULE_S
    268458858U,	// CMP_ULE_S_MMR6
    268455429U,	// CMP_ULT_D
    268455429U,	// CMP_ULT_D_MMR6
    268459226U,	// CMP_ULT_S
    268459226U,	// CMP_ULT_S_MMR6
    268454813U,	// CMP_UN_D
    268454813U,	// CMP_UN_D_MMR6
    268459046U,	// CMP_UN_S
    268459046U,	// CMP_UN_S_MMR6
    2684372228U,	// COPY_S_B
    2684374417U,	// COPY_S_D
    2684375941U,	// COPY_S_H
    2684380124U,	// COPY_S_W
    2684372443U,	// COPY_U_B
    2684376208U,	// COPY_U_H
    2684380531U,	// COPY_U_W
    268453406U,	// CRC32B
    268453414U,	// CRC32CB
    268455948U,	// CRC32CD
    268457191U,	// CRC32CH
    268461527U,	// CRC32CW
    268455940U,	// CRC32D
    268457171U,	// CRC32H
    268461519U,	// CRC32W
    8945789U,	// CTC1
    8945789U,	// CTC1_MM
    8946005U,	// CTC2_MM
    17116U,	// CTCMSA
    23318U,	// CVT_D32_S
    23318U,	// CVT_D32_S_MM
    24489U,	// CVT_D32_W
    24489U,	// CVT_D32_W_MM
    22464U,	// CVT_D64_L
    23318U,	// CVT_D64_S
    23318U,	// CVT_D64_S_MM
    24489U,	// CVT_D64_W
    24489U,	// CVT_D64_W_MM
    22464U,	// CVT_D_L_MMR6
    19251U,	// CVT_L_D64
    19251U,	// CVT_L_D64_MM
    19251U,	// CVT_L_D_MMR6
    23543U,	// CVT_L_S
    23543U,	// CVT_L_S_MM
    23543U,	// CVT_L_S_MMR6
    19598U,	// CVT_S_D32
    19598U,	// CVT_S_D32_MM
    19598U,	// CVT_S_D64
    19598U,	// CVT_S_D64_MM
    22473U,	// CVT_S_L
    22473U,	// CVT_S_L_MMR6
    25244U,	// CVT_S_W
    25244U,	// CVT_S_W_MM
    25244U,	// CVT_S_W_MMR6
    20426U,	// CVT_W_D32
    20426U,	// CVT_W_D32_MM
    20426U,	// CVT_W_D64
    20426U,	// CVT_W_D64_MM
    23875U,	// CVT_W_S
    23875U,	// CVT_W_S_MM
    23875U,	// CVT_W_S_MMR6
    268454875U,	// C_EQ_D32
    268454875U,	// C_EQ_D32_MM
    268454875U,	// C_EQ_D64
    268454875U,	// C_EQ_D64_MM
    268459084U,	// C_EQ_S
    268459084U,	// C_EQ_S_MM
    268454437U,	// C_F_D32
    268454437U,	// C_F_D32_MM
    268454437U,	// C_F_D64
    268454437U,	// C_F_D64_MM
    268458881U,	// C_F_S
    268458881U,	// C_F_S_MM
    268454280U,	// C_LE_D32
    268454280U,	// C_LE_D32_MM
    268454280U,	// C_LE_D64
    268454280U,	// C_LE_D64_MM
    268458801U,	// C_LE_S
    268458801U,	// C_LE_S_MM
    268455366U,	// C_LT_D32
    268455366U,	// C_LT_D32_MM
    268455366U,	// C_LT_D64
    268455366U,	// C_LT_D64_MM
    268459179U,	// C_LT_S
    268459179U,	// C_LT_S_MM
    268454271U,	// C_NGE_D32
    268454271U,	// C_NGE_D32_MM
    268454271U,	// C_NGE_D64
    268454271U,	// C_NGE_D64_MM
    268458792U,	// C_NGE_S
    268458792U,	// C_NGE_S_MM
    268454306U,	// C_NGLE_D32
    268454306U,	// C_NGLE_D32_MM
    268454306U,	// C_NGLE_D64
    268454306U,	// C_NGLE_D64_MM
    268458819U,	// C_NGLE_S
    268458819U,	// C_NGLE_S_MM
    268454723U,	// C_NGL_D32
    268454723U,	// C_NGL_D32_MM
    268454723U,	// C_NGL_D64
    268454723U,	// C_NGL_D64_MM
    268459015U,	// C_NGL_S
    268459015U,	// C_NGL_S_MM
    268455357U,	// C_NGT_D32
    268455357U,	// C_NGT_D32_MM
    268455357U,	// C_NGT_D64
    268455357U,	// C_NGT_D64_MM
    268459170U,	// C_NGT_S
    268459170U,	// C_NGT_S_MM
    268454316U,	// C_OLE_D32
    268454316U,	// C_OLE_D32_MM
    268454316U,	// C_OLE_D64
    268454316U,	// C_OLE_D64_MM
    268458829U,	// C_OLE_S
    268458829U,	// C_OLE_S_MM
    268455392U,	// C_OLT_D32
    268455392U,	// C_OLT_D32_MM
    268455392U,	// C_OLT_D64
    268455392U,	// C_OLT_D64_MM
    268459197U,	// C_OLT_S
    268459197U,	// C_OLT_S_MM
    268454901U,	// C_SEQ_D32
    268454901U,	// C_SEQ_D32_MM
    268454901U,	// C_SEQ_D64
    268454901U,	// C_SEQ_D64_MM
    268459102U,	// C_SEQ_S
    268459102U,	// C_SEQ_S_MM
    268454507U,	// C_SF_D32
    268454507U,	// C_SF_D32_MM
    268454507U,	// C_SF_D64
    268454507U,	// C_SF_D64_MM
    268458927U,	// C_SF_S
    268458927U,	// C_SF_S_MM
    268454929U,	// C_UEQ_D32
    268454929U,	// C_UEQ_D32_MM
    268454929U,	// C_UEQ_D64
    268454929U,	// C_UEQ_D64_MM
    268459122U,	// C_UEQ_S
    268459122U,	// C_UEQ_S_MM
    268454344U,	// C_ULE_D32
    268454344U,	// C_ULE_D32_MM
    268454344U,	// C_ULE_D64
    268454344U,	// C_ULE_D64_MM
    268458849U,	// C_ULE_S
    268458849U,	// C_ULE_S_MM
    268455420U,	// C_ULT_D32
    268455420U,	// C_ULT_D32_MM
    268455420U,	// C_ULT_D64
    268455420U,	// C_ULT_D64_MM
    268459217U,	// C_ULT_S
    268459217U,	// C_ULT_S_MM
    268454805U,	// C_UN_D32
    268454805U,	// C_UN_D32_MM
    268454805U,	// C_UN_D64
    268454805U,	// C_UN_D64_MM
    268459038U,	// C_UN_S
    268459038U,	// C_UN_S_MM
    22945U,	// CmpRxRy16
    2952812404U,	// CmpiRxImm16
    22388U,	// CmpiRxImmX16
    268455962U,	// DADD
    268457776U,	// DADDi
    268459586U,	// DADDiu
    268459534U,	// DADDu
    268457807U,	// DAHI
    268458315U,	// DALIGN
    268457868U,	// DATI
    268457886U,	// DAUI
    22905U,	// DBITSWAP
    22873U,	// DCLO
    22873U,	// DCLO_R6
    26152U,	// DCLZ
    26152U,	// DCLZ_R6
    268459790U,	// DDIV
    268459698U,	// DDIVU
    10398U,	// DERET
    10398U,	// DERET_MM
    10398U,	// DERET_MMR6
    268459502U,	// DEXT
    268461849U,	// DEXT64_32
    268458290U,	// DEXTM
    268459691U,	// DEXTU
    284467U,	// DI
    268459410U,	// DINS
    268458283U,	// DINSM
    268459652U,	// DINSU
    268459791U,	// DIV
    268459699U,	// DIVU
    268459699U,	// DIVU_MMR6
    268459791U,	// DIV_MMR6
    268453106U,	// DIV_S_B
    268455295U,	// DIV_S_D
    268456808U,	// DIV_S_H
    268460991U,	// DIV_S_W
    268453321U,	// DIV_U_B
    268455762U,	// DIV_U_D
    268457086U,	// DIV_U_H
    268461409U,	// DIV_U_W
    284467U,	// DI_MM
    284467U,	// DI_MMR6
    268452558U,	// DLSA
    268452558U,	// DLSA_R6
    268451841U,	// DMFC0
    16488U,	// DMFC1
    268452160U,	// DMFC2
    92291392U,	// DMFC2_OCTEON
    268451848U,	// DMFGC0
    268456014U,	// DMOD
    268459548U,	// DMODU
    286162U,	// DMT
    1376288822U,	// DMTC0
    8945795U,	// DMTC1
    1376289115U,	// DMTC2
    92291419U,	// DMTC2_OCTEON
    1376288800U,	// DMTGC0
    268457763U,	// DMUH
    268459579U,	// DMUHU
    268458219U,	// DMUL
    24011U,	// DMULT
    24227U,	// DMULTu
    268459623U,	// DMULU
    268458219U,	// DMUL_R6
    268455203U,	// DOTP_S_D
    268456728U,	// DOTP_S_H
    268460859U,	// DOTP_S_W
    268455670U,	// DOTP_U_D
    268457016U,	// DOTP_U_H
    268461317U,	// DOTP_U_W
    285232332U,	// DPADD_S_D
    285233857U,	// DPADD_S_H
    285237978U,	// DPADD_S_W
    285232799U,	// DPADD_U_D
    285234145U,	// DPADD_U_H
    285238446U,	// DPADD_U_W
    268457615U,	// DPAQX_SA_W_PH
    268457615U,	// DPAQX_SA_W_PH_MMR2
    268457698U,	// DPAQX_S_W_PH
    268457698U,	// DPAQX_S_W_PH_MMR2
    268460319U,	// DPAQ_SA_L_W
    268460319U,	// DPAQ_SA_L_W_MM
    268457657U,	// DPAQ_S_W_PH
    268457657U,	// DPAQ_S_W_PH_MM
    268457964U,	// DPAU_H_QBL
    268457964U,	// DPAU_H_QBL_MM
    268458534U,	// DPAU_H_QBR
    268458534U,	// DPAU_H_QBR_MM
    268457736U,	// DPAX_W_PH
    268457736U,	// DPAX_W_PH_MMR2
    268457605U,	// DPA_W_PH
    268457605U,	// DPA_W_PH_MMR2
    22950U,	// DPOP
    268457630U,	// DPSQX_SA_W_PH
    268457630U,	// DPSQX_SA_W_PH_MMR2
    268457712U,	// DPSQX_S_W_PH
    268457712U,	// DPSQX_S_W_PH_MMR2
    268460332U,	// DPSQ_SA_L_W
    268460332U,	// DPSQ_SA_L_W_MM
    268457685U,	// DPSQ_S_W_PH
    268457685U,	// DPSQ_S_W_PH_MM
    285232299U,	// DPSUB_S_D
    285233836U,	// DPSUB_S_H
    285237945U,	// DPSUB_S_W
    285232766U,	// DPSUB_U_D
    285234124U,	// DPSUB_U_H
    285238413U,	// DPSUB_U_W
    268457976U,	// DPSU_H_QBL
    268457976U,	// DPSU_H_QBL_MM
    268458546U,	// DPSU_H_QBR
    268458546U,	// DPSU_H_QBR_MM
    268457747U,	// DPSX_W_PH
    268457747U,	// DPSX_W_PH_MMR2
    268457726U,	// DPS_W_PH
    268457726U,	// DPS_W_PH_MMR2
    268458719U,	// DROTR
    268452117U,	// DROTR32
    268459834U,	// DROTRV
    21723U,	// DSBH
    26223U,	// DSDIV
    20518U,	// DSHD
    268458162U,	// DSLL
    268452087U,	// DSLL32
    3221248178U,	// DSLL64_32
    268459796U,	// DSLLV
    268452552U,	// DSRA
    268452069U,	// DSRA32
    268459775U,	// DSRAV
    268458180U,	// DSRL
    268452095U,	// DSRL32
    268459803U,	// DSRLV
    268453796U,	// DSUB
    268459513U,	// DSUBu
    26209U,	// DUDIV
    285187U,	// DVP
    282806U,	// DVPE
    285187U,	// DVP_MMR6
    26224U,	// DivRxRy16
    26210U,	// DivuRxRy16
    10292U,	// EHB
    10292U,	// EHB_MM
    10292U,	// EHB_MMR6
    284479U,	// EI
    284479U,	// EI_MM
    284479U,	// EI_MMR6
    286167U,	// EMT
    10399U,	// ERET
    10296U,	// ERETNC
    10296U,	// ERETNC_MMR6
    10399U,	// ERET_MM
    10399U,	// ERET_MMR6
    285192U,	// EVP
    282812U,	// EVPE
    285192U,	// EVP_MMR6
    268459503U,	// EXT
    268458493U,	// EXTP
    268458378U,	// EXTPDP
    268459818U,	// EXTPDPV
    268459818U,	// EXTPDPV_MM
    268458378U,	// EXTPDP_MM
    268459827U,	// EXTPV
    268459827U,	// EXTPV_MM
    268458493U,	// EXTP_MM
    268461052U,	// EXTRV_RS_W
    268461052U,	// EXTRV_RS_W_MM
    268460606U,	// EXTRV_R_W
    268460606U,	// EXTRV_R_W_MM
    268456817U,	// EXTRV_S_H
    268456817U,	// EXTRV_S_H_MM
    268461489U,	// EXTRV_W
    268461489U,	// EXTRV_W_MM
    268461041U,	// EXTR_RS_W
    268461041U,	// EXTR_RS_W_MM
    268460585U,	// EXTR_R_W
    268460585U,	// EXTR_R_W_MM
    268456748U,	// EXTR_S_H
    268456748U,	// EXTR_S_H_MM
    268460684U,	// EXTR_W
    268460684U,	// EXTR_W_MM
    268459423U,	// EXTS
    268452134U,	// EXTS32
    268459503U,	// EXT_MM
    268459503U,	// EXT_MMR6
    19867U,	// FABS_D32
    19867U,	// FABS_D32_MM
    19867U,	// FABS_D64
    19867U,	// FABS_D64_MM
    23698U,	// FABS_S
    23698U,	// FABS_S_MM
    268454220U,	// FADD_D
    268454221U,	// FADD_D32
    268454221U,	// FADD_D32_MM
    268454221U,	// FADD_D64
    268454221U,	// FADD_D64_MM
    268458785U,	// FADD_S
    268458785U,	// FADD_S_MM
    285236001U,	// FADD_S_MMR6
    268459954U,	// FADD_W
    268454454U,	// FCAF_D
    268460073U,	// FCAF_W
    268454893U,	// FCEQ_D
    268460512U,	// FCEQ_W
    19874U,	// FCLASS_D
    25608U,	// FCLASS_W
    268454298U,	// FCLE_D
    268459996U,	// FCLE_W
    268455384U,	// FCLT_D
    268461091U,	// FCLT_W
    3303278U,	// FCMP_D32
    3303278U,	// FCMP_D32_MM
    3303278U,	// FCMP_D64
    3565422U,	// FCMP_S32
    3565422U,	// FCMP_S32_MM
    268454394U,	// FCNE_D
    268460030U,	// FCNE_W
    268455003U,	// FCOR_D
    268460641U,	// FCOR_W
    268454949U,	// FCUEQ_D
    268460528U,	// FCUEQ_W
    268454364U,	// FCULE_D
    268460012U,	// FCULE_W
    268455440U,	// FCULT_D
    268461107U,	// FCULT_W
    268454410U,	// FCUNE_D
    268460046U,	// FCUNE_W
    268454823U,	// FCUN_D
    268460418U,	// FCUN_W
    268455816U,	// FDIV_D
    268455817U,	// FDIV_D32
    268455817U,	// FDIV_D32_MM
    268455817U,	// FDIV_D64
    268455817U,	// FDIV_D64_MM
    268459274U,	// FDIV_S
    268459274U,	// FDIV_S_MM
    285236490U,	// FDIV_S_MMR6
    268461473U,	// FDIV_W
    268456475U,	// FEXDO_H
    268460434U,	// FEXDO_W
    268454107U,	// FEXP2_D
    268459857U,	// FEXP2_W
    19291U,	// FEXUPL_D
    24904U,	// FEXUPL_W
    19563U,	// FEXUPR_D
    25201U,	// FEXUPR_W
    19805U,	// FFINT_S_D
    25501U,	// FFINT_S_W
    20284U,	// FFINT_U_D
    25931U,	// FFINT_U_W
    19301U,	// FFQL_D
    24914U,	// FFQL_W
    19573U,	// FFQR_D
    25211U,	// FFQR_W
    17417U,	// FILL_B
    19276U,	// FILL_D
    20980U,	// FILL_H
    24889U,	// FILL_W
    18642U,	// FLOG2_D
    24392U,	// FLOG2_W
    19240U,	// FLOOR_L_D64
    19240U,	// FLOOR_L_D_MMR6
    23532U,	// FLOOR_L_S
    23532U,	// FLOOR_L_S_MMR6
    20415U,	// FLOOR_W_D32
    20415U,	// FLOOR_W_D64
    20415U,	// FLOOR_W_D_MMR6
    20415U,	// FLOOR_W_MM
    23864U,	// FLOOR_W_S
    23864U,	// FLOOR_W_S_MM
    23864U,	// FLOOR_W_S_MMR6
    285231444U,	// FMADD_D
    285237178U,	// FMADD_W
    268454145U,	// FMAX_A_D
    268459895U,	// FMAX_A_W
    268455891U,	// FMAX_D
    268461498U,	// FMAX_W
    268454125U,	// FMIN_A_D
    268459875U,	// FMIN_A_W
    268454797U,	// FMIN_D
    268460410U,	// FMIN_W
    20376U,	// FMOV_D32
    20376U,	// FMOV_D32_MM
    20376U,	// FMOV_D64
    20376U,	// FMOV_D64_MM
    23825U,	// FMOV_S
    23825U,	// FMOV_S_MM
    23825U,	// FMOV_S_MMR6
    285231402U,	// FMSUB_D
    285237136U,	// FMSUB_W
    268454781U,	// FMUL_D
    268454782U,	// FMUL_D32
    268454782U,	// FMUL_D32_MM
    268454782U,	// FMUL_D64
    268454782U,	// FMUL_D64_MM
    268459024U,	// FMUL_S
    268459024U,	// FMUL_S_MM
    285236240U,	// FMUL_S_MMR6
    268460394U,	// FMUL_W
    19068U,	// FNEG_D32
    19068U,	// FNEG_D32_MM
    19068U,	// FNEG_D64
    19068U,	// FNEG_D64_MM
    23487U,	// FNEG_S
    23487U,	// FNEG_S_MM
    23487U,	// FNEG_S_MMR6
    3523778490U,	// FORK
    19402U,	// FRCP_D
    24987U,	// FRCP_W
    20022U,	// FRINT_D
    25677U,	// FRINT_W
    20050U,	// FRSQRT_D
    25705U,	// FRSQRT_W
    268454473U,	// FSAF_D
    268460081U,	// FSAF_W
    268454921U,	// FSEQ_D
    268460520U,	// FSEQ_W
    268454336U,	// FSLE_D
    268460004U,	// FSLE_W
    268455412U,	// FSLT_D
    268461099U,	// FSLT_W
    268454402U,	// FSNE_D
    268460038U,	// FSNE_W
    268455011U,	// FSOR_D
    268460649U,	// FSOR_W
    20041U,	// FSQRT_D
    20042U,	// FSQRT_D32
    20042U,	// FSQRT_D32_MM
    20042U,	// FSQRT_D64
    20042U,	// FSQRT_D64_MM
    23802U,	// FSQRT_S
    23802U,	// FSQRT_S_MM
    25696U,	// FSQRT_W
    268454178U,	// FSUB_D
    268454179U,	// FSUB_D32
    268454179U,	// FSUB_D32_MM
    268454179U,	// FSUB_D64
    268454179U,	// FSUB_D64_MM
    268458767U,	// FSUB_S
    268458767U,	// FSUB_S_MM
    285235983U,	// FSUB_S_MMR6
    268459912U,	// FSUB_W
    268454970U,	// FSUEQ_D
    268460537U,	// FSUEQ_W
    268454385U,	// FSULE_D
    268460021U,	// FSULE_W
    268455461U,	// FSULT_D
    268461116U,	// FSULT_W
    268454419U,	// FSUNE_D
    268460055U,	// FSUNE_W
    268454842U,	// FSUN_D
    268460426U,	// FSUN_W
    19816U,	// FTINT_S_D
    25512U,	// FTINT_S_W
    20295U,	// FTINT_U_D
    25942U,	// FTINT_U_W
    268456552U,	// FTQ_H
    268460546U,	// FTQ_W
    19638U,	// FTRUNC_S_D
    25284U,	// FTRUNC_S_W
    20105U,	// FTRUNC_U_D
    25752U,	// FTRUNC_U_W
    284585U,	// GINVI
    284585U,	// GINVI_MMR6
    100687329U,	// GINVT
    100687329U,	// GINVT_MMR6
    268455106U,	// HADD_S_D
    268456631U,	// HADD_S_H
    268460752U,	// HADD_S_W
    268455573U,	// HADD_U_D
    268456919U,	// HADD_U_H
    268461220U,	// HADD_U_W
    268455073U,	// HSUB_S_D
    268456610U,	// HSUB_S_H
    268460719U,	// HSUB_S_W
    268455540U,	// HSUB_U_D
    268456898U,	// HSUB_U_H
    268461187U,	// HSUB_U_W
    366734U,	// HYPCALL
    366734U,	// HYPCALL_MM
    268453376U,	// ILVEV_B
    268455807U,	// ILVEV_D
    268457141U,	// ILVEV_H
    268461464U,	// ILVEV_W
    268452904U,	// ILVL_B
    268454789U,	// ILVL_D
    268456467U,	// ILVL_H
    268460402U,	// ILVL_W
    268452656U,	// ILVOD_B
    268454262U,	// ILVOD_D
    268456269U,	// ILVOD_H
    268459987U,	// ILVOD_W
    268452952U,	// ILVR_B
    268455046U,	// ILVR_D
    268456592U,	// ILVR_H
    268460692U,	// ILVR_W
    268459405U,	// INS
    112739623U,	// INSERT_B
    121130559U,	// INSERT_D
    129520552U,	// INSERT_H
    137913430U,	// INSERT_W
    16801602U,	// INSV
    146293561U,	// INSVE_B
    154683932U,	// INSVE_D
    163074390U,	// INSVE_H
    171466784U,	// INSVE_W
    16801602U,	// INSV_MM
    268459405U,	// INS_MM
    268459405U,	// INS_MMR6
    284592U,	// J
    284631U,	// JAL
    23219U,	// JALR
    285363U,	// JALR16_MM
    23219U,	// JALR64
    285363U,	// JALRC16_MMR6
    17972U,	// JALRC_HB_MMR6
    18511U,	// JALRC_MMR6
    279095U,	// JALRS16_MM
    23960U,	// JALRS_MM
    17989U,	// JALR_HB
    17989U,	// JALR_HB64
    23219U,	// JALR_MM
    286068U,	// JALS_MM
    288246U,	// JALX
    288246U,	// JALX_MM
    284631U,	// JAL_MM
    18390U,	// JIALC
    18390U,	// JIALC64
    18390U,	// JIALC_MMR6
    18379U,	// JIC
    18379U,	// JIC64
    18379U,	// JIC_MMR6
    285359U,	// JR
    279082U,	// JR16_MM
    285359U,	// JR64
    285170U,	// JRADDIUSP
    280650U,	// JRC16_MM
    278960U,	// JRC16_MMR6
    285158U,	// JRCADDIUSP_MMR6
    280126U,	// JR_HB
    280126U,	// JR_HB64
    280126U,	// JR_HB64_R6
    280126U,	// JR_HB_R6
    285359U,	// JR_MM
    284592U,	// J_MM
    4102103U,	// Jal16
    4364247U,	// JalB16
    10285U,	// JrRa16
    10277U,	// JrcRa16
    280650U,	// JrcRx16
    280655U,	// JumpLinkReg16
    25183822U,	// LB
    25183822U,	// LB64
    25186392U,	// LBE
    25186392U,	// LBE_MM
    25182791U,	// LBU16_MM
    3774899708U,	// LBUX
    3774899708U,	// LBUX_MM
    25189876U,	// LBU_MMR6
    25183822U,	// LB_MM
    25183822U,	// LB_MMR6
    25189876U,	// LBu
    25189876U,	// LBu64
    25186510U,	// LBuE
    25186510U,	// LBuE_MM
    25189876U,	// LBu_MM
    25186351U,	// LD
    25182294U,	// LDC1
    25182294U,	// LDC164
    25182294U,	// LDC1_D64_MMR6
    25182294U,	// LDC1_MM
    25182510U,	// LDC2
    25182510U,	// LDC2_MMR6
    25182510U,	// LDC2_R6
    25182595U,	// LDC3
    17243U,	// LDI_B
    19084U,	// LDI_D
    20856U,	// LDI_H
    24739U,	// LDI_W
    25188403U,	// LDL
    18457U,	// LDPC
    25188973U,	// LDR
    3774890134U,	// LDXC1
    3774890134U,	// LDXC164
    25183009U,	// LD_B
    25184615U,	// LD_D
    25186622U,	// LD_H
    25190340U,	// LD_W
    67132995U,	// LEA_ADDiu
    67132994U,	// LEA_ADDiu64
    67132995U,	// LEA_ADDiu_MM
    25187574U,	// LH
    25187574U,	// LH64
    25186439U,	// LHE
    25186439U,	// LHE_MM
    25182814U,	// LHU16_MM
    3774899697U,	// LHX
    3774899697U,	// LHX_MM
    25187574U,	// LH_MM
    25189942U,	// LHu
    25189942U,	// LHu64
    25186516U,	// LHuE
    25186516U,	// LHuE_MM
    25189942U,	// LHu_MM
    16878U,	// LI16_MM
    16878U,	// LI16_MMR6
    25188499U,	// LL
    25188499U,	// LL64
    25188499U,	// LL64_R6
    25186355U,	// LLD
    25186355U,	// LLD_R6
    25186454U,	// LLE
    25186454U,	// LLE_MM
    25188499U,	// LL_MM
    25188499U,	// LL_MMR6
    25188499U,	// LL_R6
    268452559U,	// LSA
    4062003919U,	// LSA_MMR6
    268452559U,	// LSA_R6
    92297124U,	// LUI_MMR6
    3774890148U,	// LUXC1
    3774890148U,	// LUXC164
    3774890148U,	// LUXC1_MM
    92297124U,	// LUi
    92297124U,	// LUi64
    92297124U,	// LUi_MM
    25191905U,	// LW
    25182821U,	// LW16_MM
    25191905U,	// LW64
    25182346U,	// LWC1
    25182346U,	// LWC1_MM
    25182562U,	// LWC2
    25182562U,	// LWC2_MMR6
    25182562U,	// LWC2_R6
    25182607U,	// LWC3
    25191905U,	// LWDSP
    25191905U,	// LWDSP_MM
    25186528U,	// LWE
    25186528U,	// LWE_MM
    25191905U,	// LWGP_MM
    25188607U,	// LWL
    25188607U,	// LWL64
    25186459U,	// LWLE
    25186459U,	// LWLE_MM
    25188607U,	// LWL_MM
    836107U,	// LWM16_MM
    836107U,	// LWM16_MMR6
    835847U,	// LWM32_MM
    18494U,	// LWPC
    18494U,	// LWPC_MMR6
    176183821U,	// LWP_MM
    25189107U,	// LWR
    25189107U,	// LWR64
    25186498U,	// LWRE
    25186498U,	// LWRE_MM
    25189107U,	// LWR_MM
    25191905U,	// LWSP_MM
    18487U,	// LWUPC
    25190073U,	// LWU_MM
    3774899714U,	// LWX
    3774890162U,	// LWXC1
    3774890162U,	// LWXC1_MM
    3774897573U,	// LWXS_MM
    3774899714U,	// LWX_MM
    25191905U,	// LW_MM
    25191905U,	// LW_MMR6
    25190073U,	// LWu
    25183822U,	// LbRxRyOffMemX16
    25189876U,	// LbuRxRyOffMemX16
    25187574U,	// LhRxRyOffMemX16
    25189942U,	// LhuRxRyOffMemX16
    2952812395U,	// LiRxImm16
    22369U,	// LiRxImmAlignX16
    22379U,	// LiRxImmX16
    2147509729U,	// LwRxPcTcp16
    26081U,	// LwRxPcTcpX16
    25191905U,	// LwRxRyOffMemX16
    25191905U,	// LwRxSpImmX16
    20512U,	// MADD
    285231706U,	// MADDF_D
    285231706U,	// MADDF_D_MMR6
    285236134U,	// MADDF_S
    285236134U,	// MADDF_S_MMR6
    285233740U,	// MADDR_Q_H
    285237707U,	// MADDR_Q_W
    24085U,	// MADDU
    268459541U,	// MADDU_DSP
    268459541U,	// MADDU_DSP_MM
    24085U,	// MADDU_MM
    285230574U,	// MADDV_B
    285233005U,	// MADDV_D
    285234339U,	// MADDV_H
    285238662U,	// MADDV_W
    268454229U,	// MADD_D32
    268454229U,	// MADD_D32_MM
    268454229U,	// MADD_D64
    268455968U,	// MADD_DSP
    268455968U,	// MADD_DSP_MM
    20512U,	// MADD_MM
    285233710U,	// MADD_Q_H
    285237677U,	// MADD_Q_W
    268458784U,	// MADD_S
    268458784U,	// MADD_S_MM
    268458070U,	// MAQ_SA_W_PHL
    268458070U,	// MAQ_SA_W_PHL_MM
    268458615U,	// MAQ_SA_W_PHR
    268458615U,	// MAQ_SA_W_PHR_MM
    268458098U,	// MAQ_S_W_PHL
    268458098U,	// MAQ_S_W_PHL_MM
    268458643U,	// MAQ_S_W_PHR
    268458643U,	// MAQ_S_W_PHR_MM
    268454170U,	// MAXA_D
    268454170U,	// MAXA_D_MMR6
    268458757U,	// MAXA_S
    268458757U,	// MAXA_S_MMR6
    268453027U,	// MAXI_S_B
    268455184U,	// MAXI_S_D
    268456709U,	// MAXI_S_H
    268460830U,	// MAXI_S_W
    268453242U,	// MAXI_U_B
    268455651U,	// MAXI_U_D
    268456997U,	// MAXI_U_H
    268461298U,	// MAXI_U_W
    268452608U,	// MAX_A_B
    268454146U,	// MAX_A_D
    268456221U,	// MAX_A_H
    268459896U,	// MAX_A_W
    268455892U,	// MAX_D
    268455892U,	// MAX_D_MMR6
    268459340U,	// MAX_S
    268453115U,	// MAX_S_B
    268455304U,	// MAX_S_D
    268456828U,	// MAX_S_H
    268459340U,	// MAX_S_MMR6
    268461011U,	// MAX_S_W
    268453330U,	// MAX_U_B
    268455771U,	// MAX_U_D
    268457095U,	// MAX_U_H
    268461418U,	// MAX_U_W
    268451842U,	// MFC0
    268451842U,	// MFC0_MMR6
    16489U,	// MFC1
    16489U,	// MFC1_D64
    16489U,	// MFC1_MM
    16489U,	// MFC1_MMR6
    268452161U,	// MFC2
    16705U,	// MFC2_MMR6
    268451849U,	// MFGC0
    268451849U,	// MFGC0_MM
    268451880U,	// MFHC0_MMR6
    16495U,	// MFHC1_D32
    16495U,	// MFHC1_D32_MM
    16495U,	// MFHC1_D64
    16495U,	// MFHC1_D64_MM
    16711U,	// MFHC2_MMR6
    268451856U,	// MFHGC0
    268451856U,	// MFHGC0_MM
    284501U,	// MFHI
    279014U,	// MFHI16_MM
    284501U,	// MFHI64
    22357U,	// MFHI_DSP
    22357U,	// MFHI_DSP_MM
    284501U,	// MFHI_MM
    285023U,	// MFLO
    279065U,	// MFLO16_MM
    285023U,	// MFLO64
    22879U,	// MFLO_DSP
    22879U,	// MFLO_DSP_MM
    285023U,	// MFLO_MM
    268458713U,	// MFTR
    268454155U,	// MINA_D
    268454155U,	// MINA_D_MMR6
    268458749U,	// MINA_S
    268458749U,	// MINA_S_MMR6
    268453007U,	// MINI_S_B
    268455164U,	// MINI_S_D
    268456689U,	// MINI_S_H
    268460810U,	// MINI_S_W
    268453222U,	// MINI_U_B
    268455631U,	// MINI_U_D
    268456977U,	// MINI_U_H
    268461278U,	// MINI_U_W
    268452589U,	// MIN_A_B
    268454126U,	// MIN_A_D
    268456202U,	// MIN_A_H
    268459876U,	// MIN_A_W
    268454798U,	// MIN_D
    268454798U,	// MIN_D_MMR6
    268459031U,	// MIN_S
    268453037U,	// MIN_S_B
    268455194U,	// MIN_S_D
    268456719U,	// MIN_S_H
    268459031U,	// MIN_S_MMR6
    268460850U,	// MIN_S_W
    268453252U,	// MIN_U_B
    268455661U,	// MIN_U_D
    268457007U,	// MIN_U_H
    268461308U,	// MIN_U_W
    268456015U,	// MOD
    268453794U,	// MODSUB
    268453794U,	// MODSUB_MM
    268459549U,	// MODU
    268459549U,	// MODU_MMR6
    268456015U,	// MOD_MMR6
    268452970U,	// MOD_S_B
    268455127U,	// MOD_S_D
    268456652U,	// MOD_S_H
    268460773U,	// MOD_S_W
    268453185U,	// MOD_U_B
    268455594U,	// MOD_U_D
    268456940U,	// MOD_U_H
    268461241U,	// MOD_U_W
    20698U,	// MOVE16_MM
    16848U,	// MOVE16_MMR6
    34920850U,	// MOVEP_MM
    34920850U,	// MOVEP_MMR6
    24261U,	// MOVE_V
    268454515U,	// MOVF_D32
    268454515U,	// MOVF_D32_MM
    268454515U,	// MOVF_D64
    268456182U,	// MOVF_I
    268456182U,	// MOVF_I64
    268456182U,	// MOVF_I_MM
    268458935U,	// MOVF_S
    268458935U,	// MOVF_S_MM
    268454850U,	// MOVN_I64_D64
    268458323U,	// MOVN_I64_I
    268458323U,	// MOVN_I64_I64
    268459067U,	// MOVN_I64_S
    268454850U,	// MOVN_I_D32
    268454850U,	// MOVN_I_D32_MM
    268454850U,	// MOVN_I_D64
    268458323U,	// MOVN_I_I
    268458323U,	// MOVN_I_I64
    268458323U,	// MOVN_I_MM
    268459067U,	// MOVN_I_S
    268459067U,	// MOVN_I_S_MM
    268455522U,	// MOVT_D32
    268455522U,	// MOVT_D32_MM
    268455522U,	// MOVT_D64
    268459496U,	// MOVT_I
    268459496U,	// MOVT_I64
    268459496U,	// MOVT_I_MM
    268459266U,	// MOVT_S
    268459266U,	// MOVT_S_MM
    268455932U,	// MOVZ_I64_D64
    268461647U,	// MOVZ_I64_I
    268461647U,	// MOVZ_I64_I64
    268459367U,	// MOVZ_I64_S
    268455932U,	// MOVZ_I_D32
    268455932U,	// MOVZ_I_D32_MM
    268455932U,	// MOVZ_I_D64
    268461647U,	// MOVZ_I_I
    268461647U,	// MOVZ_I_I64
    268461647U,	// MOVZ_I_MM
    268459367U,	// MOVZ_I_S
    268459367U,	// MOVZ_I_S_MM
    18346U,	// MSUB
    285231697U,	// MSUBF_D
    285231697U,	// MSUBF_D_MMR6
    285236125U,	// MSUBF_S
    285236125U,	// MSUBF_S_MMR6
    285233729U,	// MSUBR_Q_H
    285237696U,	// MSUBR_Q_W
    24064U,	// MSUBU
    268459520U,	// MSUBU_DSP
    268459520U,	// MSUBU_DSP_MM
    24064U,	// MSUBU_MM
    285230565U,	// MSUBV_B
    285232996U,	// MSUBV_D
    285234330U,	// MSUBV_H
    285238653U,	// MSUBV_W
    268454187U,	// MSUB_D32
    268454187U,	// MSUB_D32_MM
    268454187U,	// MSUB_D64
    268453802U,	// MSUB_DSP
    268453802U,	// MSUB_DSP_MM
    18346U,	// MSUB_MM
    285233700U,	// MSUB_Q_H
    285237667U,	// MSUB_Q_W
    268458766U,	// MSUB_S
    268458766U,	// MSUB_S_MM
    1376288823U,	// MTC0
    1376288823U,	// MTC0_MMR6
    8945796U,	// MTC1
    8945796U,	// MTC1_D64
    8945796U,	// MTC1_MM
    8945796U,	// MTC1_MMR6
    1376289116U,	// MTC2
    8946012U,	// MTC2_MMR6
    1376288801U,	// MTGC0
    1376288801U,	// MTGC0_MM
    1376288815U,	// MTHC0_MMR6
    8994934U,	// MTHC1_D32
    8994934U,	// MTHC1_D32_MM
    8994934U,	// MTHC1_D64
    8994934U,	// MTHC1_D64_MM
    8945998U,	// MTHC2_MMR6
    1376288792U,	// MTHGC0
    1376288792U,	// MTHGC0_MM
    284507U,	// MTHI
    284507U,	// MTHI64
    8951643U,	// MTHI_DSP
    8951643U,	// MTHI_DSP_MM
    284507U,	// MTHI_MM
    8952217U,	// MTHLIP
    8952217U,	// MTHLIP_MM
    285036U,	// MTLO
    285036U,	// MTLO64
    8952172U,	// MTLO_DSP
    8952172U,	// MTLO_DSP_MM
    285036U,	// MTLO_MM
    278595U,	// MTM0
    278720U,	// MTM1
    278894U,	// MTM2
    278601U,	// MTP0
    278726U,	// MTP1
    278900U,	// MTP2
    302553830U,	// MTTR
    268457764U,	// MUH
    268459580U,	// MUHU
    268459580U,	// MUHU_MMR6
    268457764U,	// MUH_MMR6
    268458220U,	// MUL
    268458111U,	// MULEQ_S_W_PHL
    268458111U,	// MULEQ_S_W_PHL_MM
    268458656U,	// MULEQ_S_W_PHR
    268458656U,	// MULEQ_S_W_PHR_MM
    268457988U,	// MULEU_S_PH_QBL
    268457988U,	// MULEU_S_PH_QBL_MM
    268458558U,	// MULEU_S_PH_QBR
    268458558U,	// MULEU_S_PH_QBR_MM
    268457524U,	// MULQ_RS_PH
    268457524U,	// MULQ_RS_PH_MM
    268461030U,	// MULQ_RS_W
    268461030U,	// MULQ_RS_W_MMR2
    268457468U,	// MULQ_S_PH
    268457468U,	// MULQ_S_PH_MMR2
    268460889U,	// MULQ_S_W
    268460889U,	// MULQ_S_W_MMR2
    268456535U,	// MULR_Q_H
    268460502U,	// MULR_Q_W
    268457670U,	// MULSAQ_S_W_PH
    268457670U,	// MULSAQ_S_W_PH_MM
    268457645U,	// MULSA_W_PH
    268457645U,	// MULSA_W_PH_MMR2
    24012U,	// MULT
    268459684U,	// MULTU_DSP
    268459684U,	// MULTU_DSP_MM
    268459468U,	// MULT_DSP
    268459468U,	// MULT_DSP_MM
    24012U,	// MULT_MM
    24228U,	// MULTu
    24228U,	// MULTu_MM
    268459617U,	// MULU
    268459617U,	// MULU_MMR6
    268453385U,	// MULV_B
    268455824U,	// MULV_D
    268457150U,	// MULV_H
    268461481U,	// MULV_W
    268458220U,	// MUL_MM
    268458220U,	// MUL_MMR6
    268457341U,	// MUL_PH
    268457341U,	// MUL_PH_MMR2
    268456504U,	// MUL_Q_H
    268460471U,	// MUL_Q_W
    268458220U,	// MUL_R6
    268457436U,	// MUL_S_PH
    268457436U,	// MUL_S_PH_MMR2
    284501U,	// Mfhi16
    285023U,	// Mflo16
    20698U,	// Move32R16
    20698U,	// MoveR3216
    17168U,	// NLOC_B
    18748U,	// NLOC_D
    20781U,	// NLOC_H
    24473U,	// NLOC_W
    17176U,	// NLZC_B
    18756U,	// NLZC_D
    20789U,	// NLZC_H
    24481U,	// NLZC_W
    268454237U,	// NMADD_D32
    268454237U,	// NMADD_D32_MM
    268454237U,	// NMADD_D64
    268458783U,	// NMADD_S
    268458783U,	// NMADD_S_MM
    268454195U,	// NMSUB_D32
    268454195U,	// NMSUB_D32_MM
    268454195U,	// NMSUB_D64
    268458765U,	// NMSUB_S
    268458765U,	// NMSUB_S_MM
    268458681U,	// NOR
    268458681U,	// NOR64
    268452793U,	// NORI_B
    268458681U,	// NOR_MM
    268458681U,	// NOR_MMR6
    268459733U,	// NOR_V
    16960U,	// NOT16_MM
    16960U,	// NOT16_MMR6
    20732U,	// NegRxRy16
    24028U,	// NotRxRy16
    268458682U,	// OR
    10306097U,	// OR16_MM
    10306097U,	// OR16_MMR6
    268458682U,	// OR64
    268452794U,	// ORI_B
    268457863U,	// ORI_MMR6
    268458682U,	// OR_MM
    268458682U,	// OR_MMR6
    268459734U,	// OR_V
    268457863U,	// ORi
    268457863U,	// ORi64
    268457863U,	// ORi_MM
    16800442U,	// OrRxRxRy16
    268457330U,	// PACKRL_PH
    268457330U,	// PACKRL_PH_MM
    10303U,	// PAUSE
    10303U,	// PAUSE_MM
    10303U,	// PAUSE_MMR6
    268453367U,	// PCKEV_B
    268455798U,	// PCKEV_D
    268457132U,	// PCKEV_H
    268461455U,	// PCKEV_W
    268452647U,	// PCKOD_B
    268454253U,	// PCKOD_D
    268456260U,	// PCKOD_H
    268459978U,	// PCKOD_W
    17695U,	// PCNT_B
    20014U,	// PCNT_D
    21408U,	// PCNT_H
    25669U,	// PCNT_W
    268457294U,	// PICK_PH
    268457294U,	// PICK_PH_MM
    268453526U,	// PICK_QB
    268453526U,	// PICK_QB_MM
    22951U,	// POP
    22563U,	// PRECEQU_PH_QBL
    17041U,	// PRECEQU_PH_QBLA
    17041U,	// PRECEQU_PH_QBLA_MM
    22563U,	// PRECEQU_PH_QBL_MM
    23133U,	// PRECEQU_PH_QBR
    17079U,	// PRECEQU_PH_QBRA
    17079U,	// PRECEQU_PH_QBRA_MM
    23133U,	// PRECEQU_PH_QBR_MM
    22628U,	// PRECEQ_W_PHL
    22628U,	// PRECEQ_W_PHL_MM
    23173U,	// PRECEQ_W_PHR
    23173U,	// PRECEQ_W_PHR_MM
    22548U,	// PRECEU_PH_QBL
    17025U,	// PRECEU_PH_QBLA
    17025U,	// PRECEU_PH_QBLA_MM
    22548U,	// PRECEU_PH_QBL_MM
    23118U,	// PRECEU_PH_QBR
    17063U,	// PRECEU_PH_QBRA
    17063U,	// PRECEU_PH_QBRA_MM
    23118U,	// PRECEU_PH_QBR_MM
    268457246U,	// PRECRQU_S_QB_PH
    268457246U,	// PRECRQU_S_QB_PH_MM
    268460121U,	// PRECRQ_PH_W
    268460121U,	// PRECRQ_PH_W_MM
    268457219U,	// PRECRQ_QB_PH
    268457219U,	// PRECRQ_QB_PH_MM
    268460152U,	// PRECRQ_RS_PH_W
    268460152U,	// PRECRQ_RS_PH_W_MM
    268457233U,	// PRECR_QB_PH
    268457233U,	// PRECR_QB_PH_MMR2
    268460105U,	// PRECR_SRA_PH_W
    268460105U,	// PRECR_SRA_PH_W_MMR2
    268460134U,	// PRECR_SRA_R_PH_W
    268460134U,	// PRECR_SRA_R_PH_W_MMR2
    3018992U,	// PREF
    3018863U,	// PREFE
    3018863U,	// PREFE_MM
    186525162U,	// PREFX_MM
    3018992U,	// PREF_MM
    3018992U,	// PREF_MMR6
    3018992U,	// PREF_R6
    268455997U,	// PREPEND
    268455997U,	// PREPEND_MMR2
    18322U,	// RADDU_W_QB
    18322U,	// RADDU_W_QB_MM
    83909080U,	// RDDSP
    192960984U,	// RDDSP_MM
    268458732U,	// RDHWR
    268458732U,	// RDHWR64
    268458732U,	// RDHWR_MM
    268458732U,	// RDHWR_MMR6
    23241U,	// RDPGPR_MMR6
    19410U,	// RECIP_D32
    19410U,	// RECIP_D32_MM
    19410U,	// RECIP_D64
    19410U,	// RECIP_D64_MM
    23619U,	// RECIP_S
    23619U,	// RECIP_S_MM
    22129U,	// REPLV_PH
    22129U,	// REPLV_PH_MM
    18302U,	// REPLV_QB
    18302U,	// REPLV_QB_MM
    21856U,	// REPL_PH
    21856U,	// REPL_PH_MM
    201344680U,	// REPL_QB
    201344680U,	// REPL_QB_MM
    20023U,	// RINT_D
    20023U,	// RINT_D_MMR6
    23793U,	// RINT_S
    23793U,	// RINT_S_MMR6
    268458720U,	// ROTR
    268459835U,	// ROTRV
    268459835U,	// ROTRV_MM
    268458720U,	// ROTR_MM
    19219U,	// ROUND_L_D64
    19219U,	// ROUND_L_D_MMR6
    23511U,	// ROUND_L_S
    23511U,	// ROUND_L_S_MMR6
    20394U,	// ROUND_W_D32
    20394U,	// ROUND_W_D64
    20394U,	// ROUND_W_D_MMR6
    20394U,	// ROUND_W_MM
    23843U,	// ROUND_W_S
    23843U,	// ROUND_W_S_MM
    23843U,	// ROUND_W_S_MMR6
    20051U,	// RSQRT_D32
    20051U,	// RSQRT_D32_MM
    20051U,	// RSQRT_D64
    20051U,	// RSQRT_D64_MM
    23801U,	// RSQRT_S
    23801U,	// RSQRT_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    268453076U,	// SAT_S_B
    268455243U,	// SAT_S_D
    268456778U,	// SAT_S_H
    268460939U,	// SAT_S_W
    268453303U,	// SAT_U_B
    268455722U,	// SAT_U_D
    268457068U,	// SAT_U_H
    268461369U,	// SAT_U_W
    25184158U,	// SB
    25182628U,	// SB16_MM
    25182628U,	// SB16_MMR6
    25184158U,	// SB64
    25186397U,	// SBE
    25186397U,	// SBE_MM
    25184158U,	// SB_MM
    25184158U,	// SB_MMR6
    4491353U,	// SC
    4491353U,	// SC64
    4491353U,	// SC64_R6
    4493333U,	// SCD
    4493333U,	// SCD_R6
    4493410U,	// SCE
    4493410U,	// SCE_MM
    4491353U,	// SC_MM
    4491353U,	// SC_MMR6
    4491353U,	// SC_R6
    25186388U,	// SD
    186755U,	// SDBBP
    115233U,	// SDBBP16_MM
    115233U,	// SDBBP16_MMR6
    366979U,	// SDBBP_MM
    186755U,	// SDBBP_MMR6
    186755U,	// SDBBP_R6
    25182300U,	// SDC1
    25182300U,	// SDC164
    25182300U,	// SDC1_D64_MMR6
    25182300U,	// SDC1_MM
    25182516U,	// SDC2
    25182516U,	// SDC2_MMR6
    25182516U,	// SDC2_R6
    25182601U,	// SDC3
    26224U,	// SDIV
    26224U,	// SDIV_MM
    25188408U,	// SDL
    25188978U,	// SDR
    3774890141U,	// SDXC1
    3774890141U,	// SDXC164
    17967U,	// SEB
    17967U,	// SEB64
    17967U,	// SEB_MM
    21744U,	// SEH
    21744U,	// SEH64
    21744U,	// SEH_MM
    268461620U,	// SELEQZ
    268461620U,	// SELEQZ64
    268455922U,	// SELEQZ_D
    268455922U,	// SELEQZ_D_MMR6
    268461620U,	// SELEQZ_MMR6
    268459357U,	// SELEQZ_S
    268459357U,	// SELEQZ_S_MMR6
    268461593U,	// SELNEZ
    268461593U,	// SELNEZ64
    268455905U,	// SELNEZ_D
    268455905U,	// SELNEZ_D_MMR6
    268461593U,	// SELNEZ_MMR6
    268459347U,	// SELNEZ_S
    268459347U,	// SELNEZ_S_MMR6
    285231932U,	// SEL_D
    285231932U,	// SEL_D_MMR6
    285236224U,	// SEL_S
    285236224U,	// SEL_S_MMR6
    268458524U,	// SEQ
    268457850U,	// SEQi
    25188127U,	// SH
    25182680U,	// SH16_MM
    25182680U,	// SH16_MMR6
    25188127U,	// SH64
    25186444U,	// SHE
    25186444U,	// SHE_MM
    268452675U,	// SHF_B
    268456288U,	// SHF_H
    268460090U,	// SHF_W
    22885U,	// SHILO
    24354U,	// SHILOV
    24354U,	// SHILOV_MM
    22885U,	// SHILO_MM
    268457575U,	// SHLLV_PH
    268457575U,	// SHLLV_PH_MM
    268453748U,	// SHLLV_QB
    268453748U,	// SHLLV_QB_MM
    268457512U,	// SHLLV_S_PH
    268457512U,	// SHLLV_S_PH_MM
    268461000U,	// SHLLV_S_W
    268461000U,	// SHLLV_S_W_MM
    268457303U,	// SHLL_PH
    268457303U,	// SHLL_PH_MM
    268453535U,	// SHLL_QB
    268453535U,	// SHLL_QB_MM
    268457425U,	// SHLL_S_PH
    268457425U,	// SHLL_S_PH_MM
    268460840U,	// SHLL_S_W
    268460840U,	// SHLL_S_W_MM
    268457565U,	// SHRAV_PH
    268457565U,	// SHRAV_PH_MM
    268453738U,	// SHRAV_QB
    268453738U,	// SHRAV_QB_MMR2
    268457413U,	// SHRAV_R_PH
    268457413U,	// SHRAV_R_PH_MM
    268453636U,	// SHRAV_R_QB
    268453636U,	// SHRAV_R_QB_MMR2
    268460595U,	// SHRAV_R_W
    268460595U,	// SHRAV_R_W_MM
    268457210U,	// SHRA_PH
    268457210U,	// SHRA_PH_MM
    268453458U,	// SHRA_QB
    268453458U,	// SHRA_QB_MMR2
    268457378U,	// SHRA_R_PH
    268457378U,	// SHRA_R_PH_MM
    268453601U,	// SHRA_R_QB
    268453601U,	// SHRA_R_QB_MMR2
    268460553U,	// SHRA_R_W
    268460553U,	// SHRA_R_W_MM
    268457595U,	// SHRLV_PH
    268457595U,	// SHRLV_PH_MMR2
    268453768U,	// SHRLV_QB
    268453768U,	// SHRLV_QB_MM
    268457321U,	// SHRL_PH
    268457321U,	// SHRL_PH_MMR2
    268453553U,	// SHRL_QB
    268453553U,	// SHRL_QB_MM
    25188127U,	// SH_MM
    25188127U,	// SH_MMR6
    2701149018U,	// SLDI_B
    2701150859U,	// SLDI_D
    2701152631U,	// SLDI_H
    2701156514U,	// SLDI_W
    2701148960U,	// SLD_B
    2701150566U,	// SLD_D
    2701152573U,	// SLD_H
    2701156291U,	// SLD_W
    268458163U,	// SLL
    268452349U,	// SLL16_MM
    268452349U,	// SLL16_MMR6
    536893619U,	// SLL64_32
    536893619U,	// SLL64_64
    268452732U,	// SLLI_B
    268454556U,	// SLLI_D
    268456328U,	// SLLI_H
    268460211U,	// SLLI_W
    268459797U,	// SLLV
    268459797U,	// SLLV_MM
    268452881U,	// SLL_B
    268454740U,	// SLL_D
    268456444U,	// SLL_H
    268458163U,	// SLL_MM
    268458163U,	// SLL_MMR6
    268460353U,	// SLL_W
    268459457U,	// SLT
    268459457U,	// SLT64
    268459457U,	// SLT_MM
    268457874U,	// SLTi
    268457874U,	// SLTi64
    268457874U,	// SLTi_MM
    268459601U,	// SLTiu
    268459601U,	// SLTiu64
    268459601U,	// SLTiu_MM
    268459671U,	// SLTu
    268459671U,	// SLTu64
    268459671U,	// SLTu_MM
    268456108U,	// SNE
    268457795U,	// SNEi
    2684371923U,	// SPLATI_B
    2684373731U,	// SPLATI_D
    2684375503U,	// SPLATI_H
    2684379386U,	// SPLATI_W
    2684372238U,	// SPLAT_B
    2684374444U,	// SPLAT_D
    2684375951U,	// SPLAT_H
    2684380178U,	// SPLAT_W
    268452553U,	// SRA
    268452690U,	// SRAI_B
    268454531U,	// SRAI_D
    268456303U,	// SRAI_H
    268460186U,	// SRAI_W
    268452766U,	// SRARI_B
    268454590U,	// SRARI_D
    268456362U,	// SRARI_H
    268460245U,	// SRARI_W
    268452919U,	// SRAR_B
    268454979U,	// SRAR_D
    268456559U,	// SRAR_H
    268460617U,	// SRAR_W
    268459776U,	// SRAV
    268459776U,	// SRAV_MM
    268452617U,	// SRA_B
    268454163U,	// SRA_D
    268456230U,	// SRA_H
    268452553U,	// SRA_MM
    268459905U,	// SRA_W
    268458181U,	// SRL
    268452356U,	// SRL16_MM
    268452356U,	// SRL16_MMR6
    268452740U,	// SRLI_B
    268454564U,	// SRLI_D
    268456336U,	// SRLI_H
    268460219U,	// SRLI_W
    268452784U,	// SRLRI_B
    268454608U,	// SRLRI_D
    268456380U,	// SRLRI_H
    268460263U,	// SRLRI_W
    268452935U,	// SRLR_B
    268454995U,	// SRLR_D
    268456575U,	// SRLR_H
    268460633U,	// SRLR_W
    268459804U,	// SRLV
    268459804U,	// SRLV_MM
    268452888U,	// SRL_B
    268454765U,	// SRL_D
    268456451U,	// SRL_H
    268458181U,	// SRL_MM
    268460378U,	// SRL_W
    10368U,	// SSNOP
    10368U,	// SSNOP_MM
    10368U,	// SSNOP_MMR6
    25183537U,	// ST_B
    25185884U,	// ST_D
    25187250U,	// ST_H
    25191539U,	// ST_W
    268453797U,	// SUB
    268457274U,	// SUBQH_PH
    268457274U,	// SUBQH_PH_MMR2
    268457389U,	// SUBQH_R_PH
    268457389U,	// SUBQH_R_PH_MMR2
    268460563U,	// SUBQH_R_W
    268460563U,	// SUBQH_R_W_MMR2
    268460168U,	// SUBQH_W
    268460168U,	// SUBQH_W_MMR2
    268457349U,	// SUBQ_PH
    268457349U,	// SUBQ_PH_MM
    268457446U,	// SUBQ_S_PH
    268457446U,	// SUBQ_S_PH_MM
    268460869U,	// SUBQ_S_W
    268460869U,	// SUBQ_S_W_MM
    268453291U,	// SUBSUS_U_B
    268455710U,	// SUBSUS_U_D
    268457056U,	// SUBSUS_U_H
    268461357U,	// SUBSUS_U_W
    268453094U,	// SUBSUU_S_B
    268455283U,	// SUBSUU_S_D
    268456796U,	// SUBSUU_S_H
    268460979U,	// SUBSUU_S_W
    268453056U,	// SUBS_S_B
    268455223U,	// SUBS_S_D
    268456758U,	// SUBS_S_H
    268460919U,	// SUBS_S_W
    268453271U,	// SUBS_U_B
    268455690U,	// SUBS_U_D
    268457036U,	// SUBS_U_H
    268461337U,	// SUBS_U_W
    268452430U,	// SUBU16_MM
    268452430U,	// SUBU16_MMR6
    268453506U,	// SUBUH_QB
    268453506U,	// SUBUH_QB_MMR2
    268453612U,	// SUBUH_R_QB
    268453612U,	// SUBUH_R_QB_MMR2
    268459514U,	// SUBU_MMR6
    268457547U,	// SUBU_PH
    268457547U,	// SUBU_PH_MMR2
    268453720U,	// SUBU_QB
    268453720U,	// SUBU_QB_MM
    268457490U,	// SUBU_S_PH
    268457490U,	// SUBU_S_PH_MMR2
    268453659U,	// SUBU_S_QB
    268453659U,	// SUBU_S_QB_MM
    268452838U,	// SUBVI_B
    268454646U,	// SUBVI_D
    268456418U,	// SUBVI_H
    268460301U,	// SUBVI_W
    268453350U,	// SUBV_B
    268455781U,	// SUBV_D
    268457115U,	// SUBV_H
    268461438U,	// SUBV_W
    268453797U,	// SUB_MM
    268453797U,	// SUB_MMR6
    268459514U,	// SUBu
    268459514U,	// SUBu_MM
    3774890155U,	// SUXC1
    3774890155U,	// SUXC164
    3774890155U,	// SUXC1_MM
    25191910U,	// SW
    25182827U,	// SW16_MM
    25182827U,	// SW16_MMR6
    25191910U,	// SW64
    25182352U,	// SWC1
    25182352U,	// SWC1_MM
    25182568U,	// SWC2
    25182568U,	// SWC2_MMR6
    25182568U,	// SWC2_R6
    25182613U,	// SWC3
    25191910U,	// SWDSP
    25191910U,	// SWDSP_MM
    25186533U,	// SWE
    25186533U,	// SWE_MM
    25188612U,	// SWL
    25188612U,	// SWL64
    25186465U,	// SWLE
    25186465U,	// SWLE_MM
    25188612U,	// SWL_MM
    836114U,	// SWM16_MM
    836114U,	// SWM16_MMR6
    835854U,	// SWM32_MM
    176183826U,	// SWP_MM
    25189112U,	// SWR
    25189112U,	// SWR64
    25186504U,	// SWRE
    25186504U,	// SWRE_MM
    25189112U,	// SWR_MM
    25191910U,	// SWSP_MM
    25191910U,	// SWSP_MMR6
    3774890169U,	// SWXC1
    3774890169U,	// SWXC1_MM
    25191910U,	// SW_MM
    25191910U,	// SW_MMR6
    206530U,	// SYNC
    218921U,	// SYNCI
    218921U,	// SYNCI_MM
    218921U,	// SYNCI_MMR6
    206530U,	// SYNC_MM
    198675U,	// SYNC_MMR6
    186519U,	// SYSCALL
    366743U,	// SYSCALL_MM
    0U,	// Save16
    0U,	// SaveX16
    25184158U,	// SbRxRyOffMemX16
    288341U,	// SebRx16
    288347U,	// SehRx16
    25188127U,	// ShRxRyOffMemX16
    268458163U,	// SllX16
    16801557U,	// SllvRxRy16
    24001U,	// SltRxRy16
    2952812434U,	// SltiRxImm16
    22418U,	// SltiRxImmX16
    2952814161U,	// SltiuRxImm16
    24145U,	// SltiuRxImmX16
    24215U,	// SltuRxRy16
    268452553U,	// SraX16
    16801536U,	// SravRxRy16
    268458181U,	// SrlX16
    16801564U,	// SrlvRxRy16
    268459514U,	// SubuRxRyRz16
    25191910U,	// SwRxRyOffMemX16
    25191910U,	// SwRxSpImmX16
    268458529U,	// TEQ
    22400U,	// TEQI
    22400U,	// TEQI_MM
    268458529U,	// TEQ_MM
    268456059U,	// TGE
    22333U,	// TGEI
    24138U,	// TGEIU
    24138U,	// TGEIU_MM
    22333U,	// TGEI_MM
    268459561U,	// TGEU
    268459561U,	// TGEU_MM
    268456059U,	// TGE_MM
    10416U,	// TLBGINV
    10317U,	// TLBGINVF
    10317U,	// TLBGINVF_MM
    10416U,	// TLBGINV_MM
    10362U,	// TLBGP
    10362U,	// TLBGP_MM
    10379U,	// TLBGR
    10379U,	// TLBGR_MM
    10332U,	// TLBGWI
    10332U,	// TLBGWI_MM
    10391U,	// TLBGWR
    10391U,	// TLBGWR_MM
    10409U,	// TLBINV
    10309U,	// TLBINVF
    10309U,	// TLBINVF_MMR6
    10409U,	// TLBINV_MMR6
    10357U,	// TLBP
    10357U,	// TLBP_MM
    10374U,	// TLBR
    10374U,	// TLBR_MM
    10326U,	// TLBWI
    10326U,	// TLBWI_MM
    10385U,	// TLBWR
    10385U,	// TLBWR_MM
    268459462U,	// TLT
    22424U,	// TLTI
    24152U,	// TLTIU_MM
    22424U,	// TLTI_MM
    268459677U,	// TLTU
    268459677U,	// TLTU_MM
    268459462U,	// TLT_MM
    268456113U,	// TNE
    22345U,	// TNEI
    22345U,	// TNEI_MM
    268456113U,	// TNE_MM
    19208U,	// TRUNC_L_D64
    19208U,	// TRUNC_L_D_MMR6
    23500U,	// TRUNC_L_S
    23500U,	// TRUNC_L_S_MMR6
    20383U,	// TRUNC_W_D32
    20383U,	// TRUNC_W_D64
    20383U,	// TRUNC_W_D_MMR6
    20383U,	// TRUNC_W_MM
    23832U,	// TRUNC_W_S
    23832U,	// TRUNC_W_S_MM
    23832U,	// TRUNC_W_S_MMR6
    24152U,	// TTLTIU
    26210U,	// UDIV
    26210U,	// UDIV_MM
    268459615U,	// V3MULU
    268451901U,	// VMM0
    268459630U,	// VMULU
    285229890U,	// VSHF_B
    285231715U,	// VSHF_D
    285233503U,	// VSHF_H
    285237305U,	// VSHF_W
    10404U,	// WAIT
    368054U,	// WAIT_MM
    368054U,	// WAIT_MMR6
    83909087U,	// WRDSP
    192960991U,	// WRDSP_MM
    23249U,	// WRPGPR_MMR6
    21729U,	// WSBH
    21729U,	// WSBH_MM
    21729U,	// WSBH_MMR6
    268458692U,	// XOR
    10306096U,	// XOR16_MM
    10306096U,	// XOR16_MMR6
    268458692U,	// XOR64
    268452801U,	// XORI_B
    268457862U,	// XORI_MMR6
    268458692U,	// XOR_MM
    268458692U,	// XOR_MMR6
    268459740U,	// XOR_V
    268457862U,	// XORi
    268457862U,	// XORi64
    268457862U,	// XORi_MM
    16800452U,	// XorRxRxRy16
    20524U,	// YIELD
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// ABSMacro
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I16_POSTRA
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I32_POSTRA
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I64_POSTRA
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_CMP_SWAP_I8_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I16_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I32_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I64_POSTRA
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_ADD_I8_POSTRA
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I16_POSTRA
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I32_POSTRA
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I64_POSTRA
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_AND_I8_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I16_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I32_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I64_POSTRA
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_NAND_I8_POSTRA
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I16_POSTRA
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I32_POSTRA
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I64_POSTRA
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_OR_I8_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I16_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I32_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I64_POSTRA
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_SUB_I8_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I16_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I32_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I64_POSTRA
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_LOAD_XOR_I8_POSTRA
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I16_POSTRA
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I32_POSTRA
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I64_POSTRA
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATOMIC_SWAP_I8_POSTRA
    0U,	// B
    0U,	// BAL_BR
    0U,	// BAL_BR_MM
    0U,	// BEQLImmMacro
    0U,	// BGE
    0U,	// BGEImmMacro
    0U,	// BGEL
    0U,	// BGELImmMacro
    0U,	// BGEU
    0U,	// BGEUImmMacro
    0U,	// BGEUL
    0U,	// BGEULImmMacro
    0U,	// BGT
    0U,	// BGTImmMacro
    0U,	// BGTL
    0U,	// BGTLImmMacro
    0U,	// BGTU
    0U,	// BGTUImmMacro
    0U,	// BGTUL
    0U,	// BGTULImmMacro
    0U,	// BLE
    0U,	// BLEImmMacro
    0U,	// BLEL
    0U,	// BLELImmMacro
    0U,	// BLEU
    0U,	// BLEUImmMacro
    0U,	// BLEUL
    0U,	// BLEULImmMacro
    0U,	// BLT
    0U,	// BLTImmMacro
    0U,	// BLTL
    0U,	// BLTLImmMacro
    0U,	// BLTU
    0U,	// BLTUImmMacro
    0U,	// BLTUL
    0U,	// BLTULImmMacro
    0U,	// BNELImmMacro
    0U,	// BPOSGE32_PSEUDO
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    0U,	// BSEL_W_PSEUDO
    0U,	// B_MM
    0U,	// B_MMR6_Pseudo
    0U,	// B_MM_Pseudo
    0U,	// BeqImm
    0U,	// BneImm
    0U,	// BteqzT8CmpX16
    0U,	// BteqzT8CmpiX16
    0U,	// BteqzT8SltX16
    0U,	// BteqzT8SltiX16
    0U,	// BteqzT8SltiuX16
    0U,	// BteqzT8SltuX16
    0U,	// BtnezT8CmpX16
    0U,	// BtnezT8CmpiX16
    0U,	// BtnezT8SltX16
    0U,	// BtnezT8SltiX16
    0U,	// BtnezT8SltiuX16
    0U,	// BtnezT8SltuX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    0U,	// CFTC1
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    0U,	// CTTC1
    0U,	// Constant32
    0U,	// DMULImmMacro
    0U,	// DMULMacro
    0U,	// DMULOMacro
    0U,	// DMULOUMacro
    0U,	// DROL
    0U,	// DROLImm
    0U,	// DROR
    0U,	// DRORImm
    0U,	// DSDivIMacro
    0U,	// DSDivMacro
    0U,	// DSRemIMacro
    0U,	// DSRemMacro
    0U,	// DUDivIMacro
    0U,	// DUDivMacro
    0U,	// DURemIMacro
    0U,	// DURemMacro
    0U,	// ERet
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    0U,	// FABS_W
    0U,	// FEXP2_D_1_PSEUDO
    0U,	// FEXP2_W_1_PSEUDO
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    0U,	// GotPrologue16
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    0U,	// JALR64Pseudo
    0U,	// JALRHB64Pseudo
    0U,	// JALRHBPseudo
    0U,	// JALRPseudo
    0U,	// JalOneReg
    0U,	// JalTwoReg
    0U,	// LDMacro
    0U,	// LD_F16
    0U,	// LOAD_ACC128
    0U,	// LOAD_ACC64
    0U,	// LOAD_ACC64DSP
    0U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    0U,	// LWM_MM
    0U,	// LoadAddrImm32
    0U,	// LoadAddrImm64
    0U,	// LoadAddrReg32
    0U,	// LoadAddrReg64
    0U,	// LoadImm32
    0U,	// LoadImm64
    0U,	// LoadImmDoubleFGR
    0U,	// LoadImmDoubleFGR_32
    0U,	// LoadImmDoubleGPR
    0U,	// LoadImmSingleFGR
    0U,	// LoadImmSingleGPR
    0U,	// LwConstant32
    0U,	// MFTACX
    2U,	// MFTC0
    0U,	// MFTC1
    0U,	// MFTDSP
    0U,	// MFTGPR
    0U,	// MFTHC1
    0U,	// MFTHI
    0U,	// MFTLO
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    0U,	// MSA_FP_EXTEND_D_PSEUDO
    0U,	// MSA_FP_EXTEND_W_PSEUDO
    0U,	// MSA_FP_ROUND_D_PSEUDO
    0U,	// MSA_FP_ROUND_W_PSEUDO
    0U,	// MTTACX
    0U,	// MTTC0
    0U,	// MTTC1
    0U,	// MTTDSP
    0U,	// MTTGPR
    0U,	// MTTHC1
    0U,	// MTTHI
    0U,	// MTTLO
    0U,	// MULImmMacro
    0U,	// MULOMacro
    0U,	// MULOUMacro
    0U,	// MultRxRy16
    0U,	// MultRxRyRz16
    0U,	// MultuRxRy16
    0U,	// MultuRxRyRz16
    0U,	// NOP
    0U,	// NORImm
    0U,	// NORImm64
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    0U,	// PseudoCVT_D32_W
    0U,	// PseudoCVT_D64_L
    0U,	// PseudoCVT_D64_W
    0U,	// PseudoCVT_S_L
    0U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoIndirectBranch64R6
    0U,	// PseudoIndirectBranchR6
    0U,	// PseudoIndirectBranch_MM
    0U,	// PseudoIndirectBranch_MMR6
    0U,	// PseudoIndirectHazardBranch
    0U,	// PseudoIndirectHazardBranch64
    0U,	// PseudoIndrectHazardBranch64R6
    0U,	// PseudoIndrectHazardBranchR6
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    0U,	// PseudoTRUNC_W_D
    0U,	// PseudoTRUNC_W_D32
    0U,	// PseudoTRUNC_W_S
    0U,	// PseudoUDIV
    0U,	// ROL
    0U,	// ROLImm
    0U,	// ROR
    0U,	// RORImm
    0U,	// RetRA
    0U,	// RetRA16
    0U,	// SDIV_MM_Pseudo
    0U,	// SDMacro
    0U,	// SDivIMacro
    0U,	// SDivMacro
    0U,	// SEQIMacro
    0U,	// SEQMacro
    0U,	// SLTImm64
    0U,	// SLTUImm64
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    0U,	// SRemIMacro
    0U,	// SRemMacro
    0U,	// STORE_ACC128
    0U,	// STORE_ACC64
    0U,	// STORE_ACC64DSP
    0U,	// STORE_CCOND_DSP
    0U,	// ST_F16
    0U,	// SWM_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// SelBeqZ
    0U,	// SelBneZ
    0U,	// SelTBteqZCmp
    0U,	// SelTBteqZCmpi
    0U,	// SelTBteqZSlt
    0U,	// SelTBteqZSlti
    0U,	// SelTBteqZSltiu
    0U,	// SelTBteqZSltu
    0U,	// SelTBtneZCmp
    0U,	// SelTBtneZCmpi
    0U,	// SelTBtneZSlt
    0U,	// SelTBtneZSlti
    0U,	// SelTBtneZSltiu
    0U,	// SelTBtneZSltu
    0U,	// SltCCRxRy16
    0U,	// SltiCCRxImmX16
    0U,	// SltiuCCRxImmX16
    0U,	// SltuCCRxRy16
    0U,	// SltuRxRyRz16
    0U,	// TAILCALL
    0U,	// TAILCALL64R6REG
    0U,	// TAILCALLHB64R6REG
    0U,	// TAILCALLHBR6REG
    0U,	// TAILCALLR6REG
    0U,	// TAILCALLREG
    0U,	// TAILCALLREG64
    0U,	// TAILCALLREGHB
    0U,	// TAILCALLREGHB64
    0U,	// TAILCALLREG_MM
    0U,	// TAILCALLREG_MMR6
    0U,	// TAILCALL_MM
    0U,	// TAILCALL_MMR6
    0U,	// TRAP
    0U,	// TRAP_MM
    0U,	// UDIV_MM_Pseudo
    0U,	// UDivIMacro
    0U,	// UDivMacro
    0U,	// URemIMacro
    0U,	// URemMacro
    0U,	// Ulh
    0U,	// Ulhu
    0U,	// Ulw
    0U,	// Ush
    0U,	// Usw
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    0U,	// ABSQ_S_PH
    0U,	// ABSQ_S_PH_MM
    0U,	// ABSQ_S_QB
    0U,	// ABSQ_S_QB_MMR2
    0U,	// ABSQ_S_W
    0U,	// ABSQ_S_W_MM
    0U,	// ADD
    0U,	// ADDIUPC
    0U,	// ADDIUPC_MM
    0U,	// ADDIUPC_MMR6
    0U,	// ADDIUR1SP_MM
    0U,	// ADDIUR2_MM
    0U,	// ADDIUS5_MM
    0U,	// ADDIUSP_MM
    0U,	// ADDIU_MMR6
    0U,	// ADDQH_PH
    0U,	// ADDQH_PH_MMR2
    0U,	// ADDQH_R_PH
    0U,	// ADDQH_R_PH_MMR2
    0U,	// ADDQH_R_W
    0U,	// ADDQH_R_W_MMR2
    0U,	// ADDQH_W
    0U,	// ADDQH_W_MMR2
    0U,	// ADDQ_PH
    0U,	// ADDQ_PH_MM
    0U,	// ADDQ_S_PH
    0U,	// ADDQ_S_PH_MM
    0U,	// ADDQ_S_W
    0U,	// ADDQ_S_W_MM
    0U,	// ADDSC
    0U,	// ADDSC_MM
    0U,	// ADDS_A_B
    0U,	// ADDS_A_D
    0U,	// ADDS_A_H
    0U,	// ADDS_A_W
    0U,	// ADDS_S_B
    0U,	// ADDS_S_D
    0U,	// ADDS_S_H
    0U,	// ADDS_S_W
    0U,	// ADDS_U_B
    0U,	// ADDS_U_D
    0U,	// ADDS_U_H
    0U,	// ADDS_U_W
    0U,	// ADDU16_MM
    0U,	// ADDU16_MMR6
    0U,	// ADDUH_QB
    0U,	// ADDUH_QB_MMR2
    0U,	// ADDUH_R_QB
    0U,	// ADDUH_R_QB_MMR2
    0U,	// ADDU_MMR6
    0U,	// ADDU_PH
    0U,	// ADDU_PH_MMR2
    0U,	// ADDU_QB
    0U,	// ADDU_QB_MM
    0U,	// ADDU_S_PH
    0U,	// ADDU_S_PH_MMR2
    0U,	// ADDU_S_QB
    0U,	// ADDU_S_QB_MM
    4U,	// ADDVI_B
    4U,	// ADDVI_D
    4U,	// ADDVI_H
    4U,	// ADDVI_W
    0U,	// ADDV_B
    0U,	// ADDV_D
    0U,	// ADDV_H
    0U,	// ADDV_W
    0U,	// ADDWC
    0U,	// ADDWC_MM
    0U,	// ADD_A_B
    0U,	// ADD_A_D
    0U,	// ADD_A_H
    0U,	// ADD_A_W
    0U,	// ADD_MM
    0U,	// ADD_MMR6
    0U,	// ADDi
    0U,	// ADDi_MM
    0U,	// ADDiu
    0U,	// ADDiu_MM
    0U,	// ADDu
    0U,	// ADDu_MM
    64U,	// ALIGN
    64U,	// ALIGN_MMR6
    0U,	// ALUIPC
    0U,	// ALUIPC_MMR6
    0U,	// AND
    0U,	// AND16_MM
    0U,	// AND16_MMR6
    0U,	// AND64
    0U,	// ANDI16_MM
    0U,	// ANDI16_MMR6
    6U,	// ANDI_B
    8U,	// ANDI_MMR6
    0U,	// AND_MM
    0U,	// AND_MMR6
    0U,	// AND_V
    8U,	// ANDi
    8U,	// ANDi64
    8U,	// ANDi_MM
    4U,	// APPEND
    4U,	// APPEND_MMR2
    0U,	// ASUB_S_B
    0U,	// ASUB_S_D
    0U,	// ASUB_S_H
    0U,	// ASUB_S_W
    0U,	// ASUB_U_B
    0U,	// ASUB_U_D
    0U,	// ASUB_U_H
    0U,	// ASUB_U_W
    8U,	// AUI
    0U,	// AUIPC
    0U,	// AUIPC_MMR6
    8U,	// AUI_MMR6
    0U,	// AVER_S_B
    0U,	// AVER_S_D
    0U,	// AVER_S_H
    0U,	// AVER_S_W
    0U,	// AVER_U_B
    0U,	// AVER_U_D
    0U,	// AVER_U_H
    0U,	// AVER_U_W
    0U,	// AVE_S_B
    0U,	// AVE_S_D
    0U,	// AVE_S_H
    0U,	// AVE_S_W
    0U,	// AVE_U_B
    0U,	// AVE_U_D
    0U,	// AVE_U_H
    0U,	// AVE_U_W
    0U,	// AddiuRxImmX16
    0U,	// AddiuRxPcImmX16
    0U,	// AddiuRxRxImm16
    0U,	// AddiuRxRxImmX16
    0U,	// AddiuRxRyOffMemX16
    0U,	// AddiuSpImm16
    0U,	// AddiuSpImmX16
    0U,	// AdduRxRyRz16
    0U,	// AndRxRxRy16
    0U,	// B16_MM
    0U,	// BADDu
    0U,	// BAL
    0U,	// BALC
    0U,	// BALC_MMR6
    10U,	// BALIGN
    10U,	// BALIGN_MMR2
    0U,	// BBIT0
    0U,	// BBIT032
    0U,	// BBIT1
    0U,	// BBIT132
    0U,	// BC
    0U,	// BC16_MMR6
    0U,	// BC1EQZ
    0U,	// BC1EQZC_MMR6
    0U,	// BC1F
    0U,	// BC1FL
    0U,	// BC1F_MM
    0U,	// BC1NEZ
    0U,	// BC1NEZC_MMR6
    0U,	// BC1T
    0U,	// BC1TL
    0U,	// BC1T_MM
    0U,	// BC2EQZ
    0U,	// BC2EQZC_MMR6
    0U,	// BC2NEZ
    0U,	// BC2NEZC_MMR6
    2U,	// BCLRI_B
    12U,	// BCLRI_D
    14U,	// BCLRI_H
    4U,	// BCLRI_W
    0U,	// BCLR_B
    0U,	// BCLR_D
    0U,	// BCLR_H
    0U,	// BCLR_W
    0U,	// BC_MMR6
    0U,	// BEQ
    0U,	// BEQ64
    0U,	// BEQC
    0U,	// BEQC64
    0U,	// BEQC_MMR6
    0U,	// BEQL
    0U,	// BEQZ16_MM
    0U,	// BEQZALC
    0U,	// BEQZALC_MMR6
    0U,	// BEQZC
    0U,	// BEQZC16_MMR6
    0U,	// BEQZC64
    0U,	// BEQZC_MM
    0U,	// BEQZC_MMR6
    0U,	// BEQ_MM
    0U,	// BGEC
    0U,	// BGEC64
    0U,	// BGEC_MMR6
    0U,	// BGEUC
    0U,	// BGEUC64
    0U,	// BGEUC_MMR6
    0U,	// BGEZ
    0U,	// BGEZ64
    0U,	// BGEZAL
    0U,	// BGEZALC
    0U,	// BGEZALC_MMR6
    0U,	// BGEZALL
    0U,	// BGEZALS_MM
    0U,	// BGEZAL_MM
    0U,	// BGEZC
    0U,	// BGEZC64
    0U,	// BGEZC_MMR6
    0U,	// BGEZL
    0U,	// BGEZ_MM
    0U,	// BGTZ
    0U,	// BGTZ64
    0U,	// BGTZALC
    0U,	// BGTZALC_MMR6
    0U,	// BGTZC
    0U,	// BGTZC64
    0U,	// BGTZC_MMR6
    0U,	// BGTZL
    0U,	// BGTZ_MM
    16U,	// BINSLI_B
    18U,	// BINSLI_D
    20U,	// BINSLI_H
    22U,	// BINSLI_W
    24U,	// BINSL_B
    24U,	// BINSL_D
    24U,	// BINSL_H
    24U,	// BINSL_W
    16U,	// BINSRI_B
    18U,	// BINSRI_D
    20U,	// BINSRI_H
    22U,	// BINSRI_W
    24U,	// BINSR_B
    24U,	// BINSR_D
    24U,	// BINSR_H
    24U,	// BINSR_W
    0U,	// BITREV
    0U,	// BITREV_MM
    0U,	// BITSWAP
    0U,	// BITSWAP_MMR6
    0U,	// BLEZ
    0U,	// BLEZ64
    0U,	// BLEZALC
    0U,	// BLEZALC_MMR6
    0U,	// BLEZC
    0U,	// BLEZC64
    0U,	// BLEZC_MMR6
    0U,	// BLEZL
    0U,	// BLEZ_MM
    0U,	// BLTC
    0U,	// BLTC64
    0U,	// BLTC_MMR6
    0U,	// BLTUC
    0U,	// BLTUC64
    0U,	// BLTUC_MMR6
    0U,	// BLTZ
    0U,	// BLTZ64
    0U,	// BLTZAL
    0U,	// BLTZALC
    0U,	// BLTZALC_MMR6
    0U,	// BLTZALL
    0U,	// BLTZALS_MM
    0U,	// BLTZAL_MM
    0U,	// BLTZC
    0U,	// BLTZC64
    0U,	// BLTZC_MMR6
    0U,	// BLTZL
    0U,	// BLTZ_MM
    26U,	// BMNZI_B
    24U,	// BMNZ_V
    26U,	// BMZI_B
    24U,	// BMZ_V
    0U,	// BNE
    0U,	// BNE64
    0U,	// BNEC
    0U,	// BNEC64
    0U,	// BNEC_MMR6
    2U,	// BNEGI_B
    12U,	// BNEGI_D
    14U,	// BNEGI_H
    4U,	// BNEGI_W
    0U,	// BNEG_B
    0U,	// BNEG_D
    0U,	// BNEG_H
    0U,	// BNEG_W
    0U,	// BNEL
    0U,	// BNEZ16_MM
    0U,	// BNEZALC
    0U,	// BNEZALC_MMR6
    0U,	// BNEZC
    0U,	// BNEZC16_MMR6
    0U,	// BNEZC64
    0U,	// BNEZC_MM
    0U,	// BNEZC_MMR6
    0U,	// BNE_MM
    0U,	// BNVC
    0U,	// BNVC_MMR6
    0U,	// BNZ_B
    0U,	// BNZ_D
    0U,	// BNZ_H
    0U,	// BNZ_V
    0U,	// BNZ_W
    0U,	// BOVC
    0U,	// BOVC_MMR6
    0U,	// BPOSGE32
    0U,	// BPOSGE32C_MMR3
    0U,	// BPOSGE32_MM
    0U,	// BREAK
    0U,	// BREAK16_MM
    0U,	// BREAK16_MMR6
    0U,	// BREAK_MM
    0U,	// BREAK_MMR6
    26U,	// BSELI_B
    24U,	// BSEL_V
    2U,	// BSETI_B
    12U,	// BSETI_D
    14U,	// BSETI_H
    4U,	// BSETI_W
    0U,	// BSET_B
    0U,	// BSET_D
    0U,	// BSET_H
    0U,	// BSET_W
    0U,	// BZ_B
    0U,	// BZ_D
    0U,	// BZ_H
    0U,	// BZ_V
    0U,	// BZ_W
    0U,	// BeqzRxImm16
    0U,	// BeqzRxImmX16
    0U,	// Bimm16
    0U,	// BimmX16
    0U,	// BnezRxImm16
    0U,	// BnezRxImmX16
    0U,	// Break16
    0U,	// Bteqz16
    0U,	// BteqzX16
    0U,	// Btnez16
    0U,	// BtnezX16
    0U,	// CACHE
    0U,	// CACHEE
    0U,	// CACHEE_MM
    0U,	// CACHE_MM
    0U,	// CACHE_MMR6
    0U,	// CACHE_R6
    0U,	// CEIL_L_D64
    0U,	// CEIL_L_D_MMR6
    0U,	// CEIL_L_S
    0U,	// CEIL_L_S_MMR6
    0U,	// CEIL_W_D32
    0U,	// CEIL_W_D64
    0U,	// CEIL_W_D_MMR6
    0U,	// CEIL_W_MM
    0U,	// CEIL_W_S
    0U,	// CEIL_W_S_MM
    0U,	// CEIL_W_S_MMR6
    0U,	// CEQI_B
    0U,	// CEQI_D
    0U,	// CEQI_H
    0U,	// CEQI_W
    0U,	// CEQ_B
    0U,	// CEQ_D
    0U,	// CEQ_H
    0U,	// CEQ_W
    0U,	// CFC1
    0U,	// CFC1_MM
    0U,	// CFC2_MM
    0U,	// CFCMSA
    580U,	// CINS
    580U,	// CINS32
    580U,	// CINS64_32
    580U,	// CINS_i32
    0U,	// CLASS_D
    0U,	// CLASS_D_MMR6
    0U,	// CLASS_S
    0U,	// CLASS_S_MMR6
    0U,	// CLEI_S_B
    0U,	// CLEI_S_D
    0U,	// CLEI_S_H
    0U,	// CLEI_S_W
    4U,	// CLEI_U_B
    4U,	// CLEI_U_D
    4U,	// CLEI_U_H
    4U,	// CLEI_U_W
    0U,	// CLE_S_B
    0U,	// CLE_S_D
    0U,	// CLE_S_H
    0U,	// CLE_S_W
    0U,	// CLE_U_B
    0U,	// CLE_U_D
    0U,	// CLE_U_H
    0U,	// CLE_U_W
    0U,	// CLO
    0U,	// CLO_MM
    0U,	// CLO_MMR6
    0U,	// CLO_R6
    0U,	// CLTI_S_B
    0U,	// CLTI_S_D
    0U,	// CLTI_S_H
    0U,	// CLTI_S_W
    4U,	// CLTI_U_B
    4U,	// CLTI_U_D
    4U,	// CLTI_U_H
    4U,	// CLTI_U_W
    0U,	// CLT_S_B
    0U,	// CLT_S_D
    0U,	// CLT_S_H
    0U,	// CLT_S_W
    0U,	// CLT_U_B
    0U,	// CLT_U_D
    0U,	// CLT_U_H
    0U,	// CLT_U_W
    0U,	// CLZ
    0U,	// CLZ_MM
    0U,	// CLZ_MMR6
    0U,	// CLZ_R6
    0U,	// CMPGDU_EQ_QB
    0U,	// CMPGDU_EQ_QB_MMR2
    0U,	// CMPGDU_LE_QB
    0U,	// CMPGDU_LE_QB_MMR2
    0U,	// CMPGDU_LT_QB
    0U,	// CMPGDU_LT_QB_MMR2
    0U,	// CMPGU_EQ_QB
    0U,	// CMPGU_EQ_QB_MM
    0U,	// CMPGU_LE_QB
    0U,	// CMPGU_LE_QB_MM
    0U,	// CMPGU_LT_QB
    0U,	// CMPGU_LT_QB_MM
    0U,	// CMPU_EQ_QB
    0U,	// CMPU_EQ_QB_MM
    0U,	// CMPU_LE_QB
    0U,	// CMPU_LE_QB_MM
    0U,	// CMPU_LT_QB
    0U,	// CMPU_LT_QB_MM
    0U,	// CMP_AF_D_MMR6
    0U,	// CMP_AF_S_MMR6
    0U,	// CMP_EQ_D
    0U,	// CMP_EQ_D_MMR6
    0U,	// CMP_EQ_PH
    0U,	// CMP_EQ_PH_MM
    0U,	// CMP_EQ_S
    0U,	// CMP_EQ_S_MMR6
    0U,	// CMP_F_D
    0U,	// CMP_F_S
    0U,	// CMP_LE_D
    0U,	// CMP_LE_D_MMR6
    0U,	// CMP_LE_PH
    0U,	// CMP_LE_PH_MM
    0U,	// CMP_LE_S
    0U,	// CMP_LE_S_MMR6
    0U,	// CMP_LT_D
    0U,	// CMP_LT_D_MMR6
    0U,	// CMP_LT_PH
    0U,	// CMP_LT_PH_MM
    0U,	// CMP_LT_S
    0U,	// CMP_LT_S_MMR6
    0U,	// CMP_SAF_D
    0U,	// CMP_SAF_D_MMR6
    0U,	// CMP_SAF_S
    0U,	// CMP_SAF_S_MMR6
    0U,	// CMP_SEQ_D
    0U,	// CMP_SEQ_D_MMR6
    0U,	// CMP_SEQ_S
    0U,	// CMP_SEQ_S_MMR6
    0U,	// CMP_SLE_D
    0U,	// CMP_SLE_D_MMR6
    0U,	// CMP_SLE_S
    0U,	// CMP_SLE_S_MMR6
    0U,	// CMP_SLT_D
    0U,	// CMP_SLT_D_MMR6
    0U,	// CMP_SLT_S
    0U,	// CMP_SLT_S_MMR6
    0U,	// CMP_SUEQ_D
    0U,	// CMP_SUEQ_D_MMR6
    0U,	// CMP_SUEQ_S
    0U,	// CMP_SUEQ_S_MMR6
    0U,	// CMP_SULE_D
    0U,	// CMP_SULE_D_MMR6
    0U,	// CMP_SULE_S
    0U,	// CMP_SULE_S_MMR6
    0U,	// CMP_SULT_D
    0U,	// CMP_SULT_D_MMR6
    0U,	// CMP_SULT_S
    0U,	// CMP_SULT_S_MMR6
    0U,	// CMP_SUN_D
    0U,	// CMP_SUN_D_MMR6
    0U,	// CMP_SUN_S
    0U,	// CMP_SUN_S_MMR6
    0U,	// CMP_UEQ_D
    0U,	// CMP_UEQ_D_MMR6
    0U,	// CMP_UEQ_S
    0U,	// CMP_UEQ_S_MMR6
    0U,	// CMP_ULE_D
    0U,	// CMP_ULE_D_MMR6
    0U,	// CMP_ULE_S
    0U,	// CMP_ULE_S_MMR6
    0U,	// CMP_ULT_D
    0U,	// CMP_ULT_D_MMR6
    0U,	// CMP_ULT_S
    0U,	// CMP_ULT_S_MMR6
    0U,	// CMP_UN_D
    0U,	// CMP_UN_D_MMR6
    0U,	// CMP_UN_S
    0U,	// CMP_UN_S_MMR6
    142U,	// COPY_S_B
    156U,	// COPY_S_D
    130U,	// COPY_S_H
    138U,	// COPY_S_W
    142U,	// COPY_U_B
    130U,	// COPY_U_H
    138U,	// COPY_U_W
    0U,	// CRC32B
    0U,	// CRC32CB
    0U,	// CRC32CD
    0U,	// CRC32CH
    0U,	// CRC32CW
    0U,	// CRC32D
    0U,	// CRC32H
    0U,	// CRC32W
    0U,	// CTC1
    0U,	// CTC1_MM
    0U,	// CTC2_MM
    0U,	// CTCMSA
    0U,	// CVT_D32_S
    0U,	// CVT_D32_S_MM
    0U,	// CVT_D32_W
    0U,	// CVT_D32_W_MM
    0U,	// CVT_D64_L
    0U,	// CVT_D64_S
    0U,	// CVT_D64_S_MM
    0U,	// CVT_D64_W
    0U,	// CVT_D64_W_MM
    0U,	// CVT_D_L_MMR6
    0U,	// CVT_L_D64
    0U,	// CVT_L_D64_MM
    0U,	// CVT_L_D_MMR6
    0U,	// CVT_L_S
    0U,	// CVT_L_S_MM
    0U,	// CVT_L_S_MMR6
    0U,	// CVT_S_D32
    0U,	// CVT_S_D32_MM
    0U,	// CVT_S_D64
    0U,	// CVT_S_D64_MM
    0U,	// CVT_S_L
    0U,	// CVT_S_L_MMR6
    0U,	// CVT_S_W
    0U,	// CVT_S_W_MM
    0U,	// CVT_S_W_MMR6
    0U,	// CVT_W_D32
    0U,	// CVT_W_D32_MM
    0U,	// CVT_W_D64
    0U,	// CVT_W_D64_MM
    0U,	// CVT_W_S
    0U,	// CVT_W_S_MM
    0U,	// CVT_W_S_MMR6
    0U,	// C_EQ_D32
    0U,	// C_EQ_D32_MM
    0U,	// C_EQ_D64
    0U,	// C_EQ_D64_MM
    0U,	// C_EQ_S
    0U,	// C_EQ_S_MM
    0U,	// C_F_D32
    0U,	// C_F_D32_MM
    0U,	// C_F_D64
    0U,	// C_F_D64_MM
    0U,	// C_F_S
    0U,	// C_F_S_MM
    0U,	// C_LE_D32
    0U,	// C_LE_D32_MM
    0U,	// C_LE_D64
    0U,	// C_LE_D64_MM
    0U,	// C_LE_S
    0U,	// C_LE_S_MM
    0U,	// C_LT_D32
    0U,	// C_LT_D32_MM
    0U,	// C_LT_D64
    0U,	// C_LT_D64_MM
    0U,	// C_LT_S
    0U,	// C_LT_S_MM
    0U,	// C_NGE_D32
    0U,	// C_NGE_D32_MM
    0U,	// C_NGE_D64
    0U,	// C_NGE_D64_MM
    0U,	// C_NGE_S
    0U,	// C_NGE_S_MM
    0U,	// C_NGLE_D32
    0U,	// C_NGLE_D32_MM
    0U,	// C_NGLE_D64
    0U,	// C_NGLE_D64_MM
    0U,	// C_NGLE_S
    0U,	// C_NGLE_S_MM
    0U,	// C_NGL_D32
    0U,	// C_NGL_D32_MM
    0U,	// C_NGL_D64
    0U,	// C_NGL_D64_MM
    0U,	// C_NGL_S
    0U,	// C_NGL_S_MM
    0U,	// C_NGT_D32
    0U,	// C_NGT_D32_MM
    0U,	// C_NGT_D64
    0U,	// C_NGT_D64_MM
    0U,	// C_NGT_S
    0U,	// C_NGT_S_MM
    0U,	// C_OLE_D32
    0U,	// C_OLE_D32_MM
    0U,	// C_OLE_D64
    0U,	// C_OLE_D64_MM
    0U,	// C_OLE_S
    0U,	// C_OLE_S_MM
    0U,	// C_OLT_D32
    0U,	// C_OLT_D32_MM
    0U,	// C_OLT_D64
    0U,	// C_OLT_D64_MM
    0U,	// C_OLT_S
    0U,	// C_OLT_S_MM
    0U,	// C_SEQ_D32
    0U,	// C_SEQ_D32_MM
    0U,	// C_SEQ_D64
    0U,	// C_SEQ_D64_MM
    0U,	// C_SEQ_S
    0U,	// C_SEQ_S_MM
    0U,	// C_SF_D32
    0U,	// C_SF_D32_MM
    0U,	// C_SF_D64
    0U,	// C_SF_D64_MM
    0U,	// C_SF_S
    0U,	// C_SF_S_MM
    0U,	// C_UEQ_D32
    0U,	// C_UEQ_D32_MM
    0U,	// C_UEQ_D64
    0U,	// C_UEQ_D64_MM
    0U,	// C_UEQ_S
    0U,	// C_UEQ_S_MM
    0U,	// C_ULE_D32
    0U,	// C_ULE_D32_MM
    0U,	// C_ULE_D64
    0U,	// C_ULE_D64_MM
    0U,	// C_ULE_S
    0U,	// C_ULE_S_MM
    0U,	// C_ULT_D32
    0U,	// C_ULT_D32_MM
    0U,	// C_ULT_D64
    0U,	// C_ULT_D64_MM
    0U,	// C_ULT_S
    0U,	// C_ULT_S_MM
    0U,	// C_UN_D32
    0U,	// C_UN_D32_MM
    0U,	// C_UN_D64
    0U,	// C_UN_D64_MM
    0U,	// C_UN_S
    0U,	// C_UN_S_MM
    0U,	// CmpRxRy16
    0U,	// CmpiRxImm16
    0U,	// CmpiRxImmX16
    0U,	// DADD
    0U,	// DADDi
    0U,	// DADDiu
    0U,	// DADDu
    8U,	// DAHI
    1088U,	// DALIGN
    8U,	// DATI
    8U,	// DAUI
    0U,	// DBITSWAP
    0U,	// DCLO
    0U,	// DCLO_R6
    0U,	// DCLZ
    0U,	// DCLZ_R6
    0U,	// DDIV
    0U,	// DDIVU
    0U,	// DERET
    0U,	// DERET_MM
    0U,	// DERET_MMR6
    1612U,	// DEXT
    2124U,	// DEXT64_32
    2628U,	// DEXTM
    222U,	// DEXTU
    0U,	// DI
    3148U,	// DINS
    3652U,	// DINSM
    286U,	// DINSU
    0U,	// DIV
    0U,	// DIVU
    0U,	// DIVU_MMR6
    0U,	// DIV_MMR6
    0U,	// DIV_S_B
    0U,	// DIV_S_D
    0U,	// DIV_S_H
    0U,	// DIV_S_W
    0U,	// DIV_U_B
    0U,	// DIV_U_D
    0U,	// DIV_U_H
    0U,	// DIV_U_W
    0U,	// DI_MM
    0U,	// DI_MMR6
    4160U,	// DLSA
    4160U,	// DLSA_R6
    2U,	// DMFC0
    0U,	// DMFC1
    2U,	// DMFC2
    0U,	// DMFC2_OCTEON
    2U,	// DMFGC0
    0U,	// DMOD
    0U,	// DMODU
    0U,	// DMT
    0U,	// DMTC0
    0U,	// DMTC1
    0U,	// DMTC2
    0U,	// DMTC2_OCTEON
    0U,	// DMTGC0
    0U,	// DMUH
    0U,	// DMUHU
    0U,	// DMUL
    0U,	// DMULT
    0U,	// DMULTu
    0U,	// DMULU
    0U,	// DMUL_R6
    0U,	// DOTP_S_D
    0U,	// DOTP_S_H
    0U,	// DOTP_S_W
    0U,	// DOTP_U_D
    0U,	// DOTP_U_H
    0U,	// DOTP_U_W
    24U,	// DPADD_S_D
    24U,	// DPADD_S_H
    24U,	// DPADD_S_W
    24U,	// DPADD_U_D
    24U,	// DPADD_U_H
    24U,	// DPADD_U_W
    0U,	// DPAQX_SA_W_PH
    0U,	// DPAQX_SA_W_PH_MMR2
    0U,	// DPAQX_S_W_PH
    0U,	// DPAQX_S_W_PH_MMR2
    0U,	// DPAQ_SA_L_W
    0U,	// DPAQ_SA_L_W_MM
    0U,	// DPAQ_S_W_PH
    0U,	// DPAQ_S_W_PH_MM
    0U,	// DPAU_H_QBL
    0U,	// DPAU_H_QBL_MM
    0U,	// DPAU_H_QBR
    0U,	// DPAU_H_QBR_MM
    0U,	// DPAX_W_PH
    0U,	// DPAX_W_PH_MMR2
    0U,	// DPA_W_PH
    0U,	// DPA_W_PH_MMR2
    0U,	// DPOP
    0U,	// DPSQX_SA_W_PH
    0U,	// DPSQX_SA_W_PH_MMR2
    0U,	// DPSQX_S_W_PH
    0U,	// DPSQX_S_W_PH_MMR2
    0U,	// DPSQ_SA_L_W
    0U,	// DPSQ_SA_L_W_MM
    0U,	// DPSQ_S_W_PH
    0U,	// DPSQ_S_W_PH_MM
    24U,	// DPSUB_S_D
    24U,	// DPSUB_S_H
    24U,	// DPSUB_S_W
    24U,	// DPSUB_U_D
    24U,	// DPSUB_U_H
    24U,	// DPSUB_U_W
    0U,	// DPSU_H_QBL
    0U,	// DPSU_H_QBL_MM
    0U,	// DPSU_H_QBR
    0U,	// DPSU_H_QBR_MM
    0U,	// DPSX_W_PH
    0U,	// DPSX_W_PH_MMR2
    0U,	// DPS_W_PH
    0U,	// DPS_W_PH_MMR2
    12U,	// DROTR
    4U,	// DROTR32
    0U,	// DROTRV
    0U,	// DSBH
    0U,	// DSDIV
    0U,	// DSHD
    12U,	// DSLL
    4U,	// DSLL32
    0U,	// DSLL64_32
    0U,	// DSLLV
    12U,	// DSRA
    4U,	// DSRA32
    0U,	// DSRAV
    12U,	// DSRL
    4U,	// DSRL32
    0U,	// DSRLV
    0U,	// DSUB
    0U,	// DSUBu
    0U,	// DUDIV
    0U,	// DVP
    0U,	// DVPE
    0U,	// DVP_MMR6
    0U,	// DivRxRy16
    0U,	// DivuRxRy16
    0U,	// EHB
    0U,	// EHB_MM
    0U,	// EHB_MMR6
    0U,	// EI
    0U,	// EI_MM
    0U,	// EI_MMR6
    0U,	// EMT
    0U,	// ERET
    0U,	// ERETNC
    0U,	// ERETNC_MMR6
    0U,	// ERET_MM
    0U,	// ERET_MMR6
    0U,	// EVP
    0U,	// EVPE
    0U,	// EVP_MMR6
    2116U,	// EXT
    4U,	// EXTP
    4U,	// EXTPDP
    0U,	// EXTPDPV
    0U,	// EXTPDPV_MM
    4U,	// EXTPDP_MM
    0U,	// EXTPV
    0U,	// EXTPV_MM
    4U,	// EXTP_MM
    0U,	// EXTRV_RS_W
    0U,	// EXTRV_RS_W_MM
    0U,	// EXTRV_R_W
    0U,	// EXTRV_R_W_MM
    0U,	// EXTRV_S_H
    0U,	// EXTRV_S_H_MM
    0U,	// EXTRV_W
    0U,	// EXTRV_W_MM
    4U,	// EXTR_RS_W
    4U,	// EXTR_RS_W_MM
    4U,	// EXTR_R_W
    4U,	// EXTR_R_W_MM
    4U,	// EXTR_S_H
    4U,	// EXTR_S_H_MM
    4U,	// EXTR_W
    4U,	// EXTR_W_MM
    580U,	// EXTS
    580U,	// EXTS32
    2116U,	// EXT_MM
    2116U,	// EXT_MMR6
    0U,	// FABS_D32
    0U,	// FABS_D32_MM
    0U,	// FABS_D64
    0U,	// FABS_D64_MM
    0U,	// FABS_S
    0U,	// FABS_S_MM
    0U,	// FADD_D
    0U,	// FADD_D32
    0U,	// FADD_D32_MM
    0U,	// FADD_D64
    0U,	// FADD_D64_MM
    0U,	// FADD_S
    0U,	// FADD_S_MM
    32U,	// FADD_S_MMR6
    0U,	// FADD_W
    0U,	// FCAF_D
    0U,	// FCAF_W
    0U,	// FCEQ_D
    0U,	// FCEQ_W
    0U,	// FCLASS_D
    0U,	// FCLASS_W
    0U,	// FCLE_D
    0U,	// FCLE_W
    0U,	// FCLT_D
    0U,	// FCLT_W
    0U,	// FCMP_D32
    0U,	// FCMP_D32_MM
    0U,	// FCMP_D64
    0U,	// FCMP_S32
    0U,	// FCMP_S32_MM
    0U,	// FCNE_D
    0U,	// FCNE_W
    0U,	// FCOR_D
    0U,	// FCOR_W
    0U,	// FCUEQ_D
    0U,	// FCUEQ_W
    0U,	// FCULE_D
    0U,	// FCULE_W
    0U,	// FCULT_D
    0U,	// FCULT_W
    0U,	// FCUNE_D
    0U,	// FCUNE_W
    0U,	// FCUN_D
    0U,	// FCUN_W
    0U,	// FDIV_D
    0U,	// FDIV_D32
    0U,	// FDIV_D32_MM
    0U,	// FDIV_D64
    0U,	// FDIV_D64_MM
    0U,	// FDIV_S
    0U,	// FDIV_S_MM
    32U,	// FDIV_S_MMR6
    0U,	// FDIV_W
    0U,	// FEXDO_H
    0U,	// FEXDO_W
    0U,	// FEXP2_D
    0U,	// FEXP2_W
    0U,	// FEXUPL_D
    0U,	// FEXUPL_W
    0U,	// FEXUPR_D
    0U,	// FEXUPR_W
    0U,	// FFINT_S_D
    0U,	// FFINT_S_W
    0U,	// FFINT_U_D
    0U,	// FFINT_U_W
    0U,	// FFQL_D
    0U,	// FFQL_W
    0U,	// FFQR_D
    0U,	// FFQR_W
    0U,	// FILL_B
    0U,	// FILL_D
    0U,	// FILL_H
    0U,	// FILL_W
    0U,	// FLOG2_D
    0U,	// FLOG2_W
    0U,	// FLOOR_L_D64
    0U,	// FLOOR_L_D_MMR6
    0U,	// FLOOR_L_S
    0U,	// FLOOR_L_S_MMR6
    0U,	// FLOOR_W_D32
    0U,	// FLOOR_W_D64
    0U,	// FLOOR_W_D_MMR6
    0U,	// FLOOR_W_MM
    0U,	// FLOOR_W_S
    0U,	// FLOOR_W_S_MM
    0U,	// FLOOR_W_S_MMR6
    24U,	// FMADD_D
    24U,	// FMADD_W
    0U,	// FMAX_A_D
    0U,	// FMAX_A_W
    0U,	// FMAX_D
    0U,	// FMAX_W
    0U,	// FMIN_A_D
    0U,	// FMIN_A_W
    0U,	// FMIN_D
    0U,	// FMIN_W
    0U,	// FMOV_D32
    0U,	// FMOV_D32_MM
    0U,	// FMOV_D64
    0U,	// FMOV_D64_MM
    0U,	// FMOV_S
    0U,	// FMOV_S_MM
    0U,	// FMOV_S_MMR6
    24U,	// FMSUB_D
    24U,	// FMSUB_W
    0U,	// FMUL_D
    0U,	// FMUL_D32
    0U,	// FMUL_D32_MM
    0U,	// FMUL_D64
    0U,	// FMUL_D64_MM
    0U,	// FMUL_S
    0U,	// FMUL_S_MM
    32U,	// FMUL_S_MMR6
    0U,	// FMUL_W
    0U,	// FNEG_D32
    0U,	// FNEG_D32_MM
    0U,	// FNEG_D64
    0U,	// FNEG_D64_MM
    0U,	// FNEG_S
    0U,	// FNEG_S_MM
    0U,	// FNEG_S_MMR6
    0U,	// FORK
    0U,	// FRCP_D
    0U,	// FRCP_W
    0U,	// FRINT_D
    0U,	// FRINT_W
    0U,	// FRSQRT_D
    0U,	// FRSQRT_W
    0U,	// FSAF_D
    0U,	// FSAF_W
    0U,	// FSEQ_D
    0U,	// FSEQ_W
    0U,	// FSLE_D
    0U,	// FSLE_W
    0U,	// FSLT_D
    0U,	// FSLT_W
    0U,	// FSNE_D
    0U,	// FSNE_W
    0U,	// FSOR_D
    0U,	// FSOR_W
    0U,	// FSQRT_D
    0U,	// FSQRT_D32
    0U,	// FSQRT_D32_MM
    0U,	// FSQRT_D64
    0U,	// FSQRT_D64_MM
    0U,	// FSQRT_S
    0U,	// FSQRT_S_MM
    0U,	// FSQRT_W
    0U,	// FSUB_D
    0U,	// FSUB_D32
    0U,	// FSUB_D32_MM
    0U,	// FSUB_D64
    0U,	// FSUB_D64_MM
    0U,	// FSUB_S
    0U,	// FSUB_S_MM
    32U,	// FSUB_S_MMR6
    0U,	// FSUB_W
    0U,	// FSUEQ_D
    0U,	// FSUEQ_W
    0U,	// FSULE_D
    0U,	// FSULE_W
    0U,	// FSULT_D
    0U,	// FSULT_W
    0U,	// FSUNE_D
    0U,	// FSUNE_W
    0U,	// FSUN_D
    0U,	// FSUN_W
    0U,	// FTINT_S_D
    0U,	// FTINT_S_W
    0U,	// FTINT_U_D
    0U,	// FTINT_U_W
    0U,	// FTQ_H
    0U,	// FTQ_W
    0U,	// FTRUNC_S_D
    0U,	// FTRUNC_S_W
    0U,	// FTRUNC_U_D
    0U,	// FTRUNC_U_W
    0U,	// GINVI
    0U,	// GINVI_MMR6
    0U,	// GINVT
    0U,	// GINVT_MMR6
    0U,	// HADD_S_D
    0U,	// HADD_S_H
    0U,	// HADD_S_W
    0U,	// HADD_U_D
    0U,	// HADD_U_H
    0U,	// HADD_U_W
    0U,	// HSUB_S_D
    0U,	// HSUB_S_H
    0U,	// HSUB_S_W
    0U,	// HSUB_U_D
    0U,	// HSUB_U_H
    0U,	// HSUB_U_W
    0U,	// HYPCALL
    0U,	// HYPCALL_MM
    0U,	// ILVEV_B
    0U,	// ILVEV_D
    0U,	// ILVEV_H
    0U,	// ILVEV_W
    0U,	// ILVL_B
    0U,	// ILVL_D
    0U,	// ILVL_H
    0U,	// ILVL_W
    0U,	// ILVOD_B
    0U,	// ILVOD_D
    0U,	// ILVOD_H
    0U,	// ILVOD_W
    0U,	// ILVR_B
    0U,	// ILVR_D
    0U,	// ILVR_H
    0U,	// ILVR_W
    3140U,	// INS
    0U,	// INSERT_B
    0U,	// INSERT_D
    0U,	// INSERT_H
    0U,	// INSERT_W
    0U,	// INSV
    0U,	// INSVE_B
    0U,	// INSVE_D
    0U,	// INSVE_H
    0U,	// INSVE_W
    0U,	// INSV_MM
    3140U,	// INS_MM
    3140U,	// INS_MMR6
    0U,	// J
    0U,	// JAL
    0U,	// JALR
    0U,	// JALR16_MM
    0U,	// JALR64
    0U,	// JALRC16_MMR6
    0U,	// JALRC_HB_MMR6
    0U,	// JALRC_MMR6
    0U,	// JALRS16_MM
    0U,	// JALRS_MM
    0U,	// JALR_HB
    0U,	// JALR_HB64
    0U,	// JALR_MM
    0U,	// JALS_MM
    0U,	// JALX
    0U,	// JALX_MM
    0U,	// JAL_MM
    0U,	// JIALC
    0U,	// JIALC64
    0U,	// JIALC_MMR6
    0U,	// JIC
    0U,	// JIC64
    0U,	// JIC_MMR6
    0U,	// JR
    0U,	// JR16_MM
    0U,	// JR64
    0U,	// JRADDIUSP
    0U,	// JRC16_MM
    0U,	// JRC16_MMR6
    0U,	// JRCADDIUSP_MMR6
    0U,	// JR_HB
    0U,	// JR_HB64
    0U,	// JR_HB64_R6
    0U,	// JR_HB_R6
    0U,	// JR_MM
    0U,	// J_MM
    0U,	// Jal16
    0U,	// JalB16
    0U,	// JrRa16
    0U,	// JrcRa16
    0U,	// JrcRx16
    0U,	// JumpLinkReg16
    0U,	// LB
    0U,	// LB64
    0U,	// LBE
    0U,	// LBE_MM
    0U,	// LBU16_MM
    0U,	// LBUX
    0U,	// LBUX_MM
    0U,	// LBU_MMR6
    0U,	// LB_MM
    0U,	// LB_MMR6
    0U,	// LBu
    0U,	// LBu64
    0U,	// LBuE
    0U,	// LBuE_MM
    0U,	// LBu_MM
    0U,	// LD
    0U,	// LDC1
    0U,	// LDC164
    0U,	// LDC1_D64_MMR6
    0U,	// LDC1_MM
    0U,	// LDC2
    0U,	// LDC2_MMR6
    0U,	// LDC2_R6
    0U,	// LDC3
    0U,	// LDI_B
    0U,	// LDI_D
    0U,	// LDI_H
    0U,	// LDI_W
    0U,	// LDL
    0U,	// LDPC
    0U,	// LDR
    0U,	// LDXC1
    0U,	// LDXC164
    0U,	// LD_B
    0U,	// LD_D
    0U,	// LD_H
    0U,	// LD_W
    0U,	// LEA_ADDiu
    0U,	// LEA_ADDiu64
    0U,	// LEA_ADDiu_MM
    0U,	// LH
    0U,	// LH64
    0U,	// LHE
    0U,	// LHE_MM
    0U,	// LHU16_MM
    0U,	// LHX
    0U,	// LHX_MM
    0U,	// LH_MM
    0U,	// LHu
    0U,	// LHu64
    0U,	// LHuE
    0U,	// LHuE_MM
    0U,	// LHu_MM
    0U,	// LI16_MM
    0U,	// LI16_MMR6
    0U,	// LL
    0U,	// LL64
    0U,	// LL64_R6
    0U,	// LLD
    0U,	// LLD_R6
    0U,	// LLE
    0U,	// LLE_MM
    0U,	// LL_MM
    0U,	// LL_MMR6
    0U,	// LL_R6
    4160U,	// LSA
    0U,	// LSA_MMR6
    4160U,	// LSA_R6
    0U,	// LUI_MMR6
    0U,	// LUXC1
    0U,	// LUXC164
    0U,	// LUXC1_MM
    0U,	// LUi
    0U,	// LUi64
    0U,	// LUi_MM
    0U,	// LW
    0U,	// LW16_MM
    0U,	// LW64
    0U,	// LWC1
    0U,	// LWC1_MM
    0U,	// LWC2
    0U,	// LWC2_MMR6
    0U,	// LWC2_R6
    0U,	// LWC3
    0U,	// LWDSP
    0U,	// LWDSP_MM
    0U,	// LWE
    0U,	// LWE_MM
    0U,	// LWGP_MM
    0U,	// LWL
    0U,	// LWL64
    0U,	// LWLE
    0U,	// LWLE_MM
    0U,	// LWL_MM
    0U,	// LWM16_MM
    0U,	// LWM16_MMR6
    0U,	// LWM32_MM
    0U,	// LWPC
    0U,	// LWPC_MMR6
    0U,	// LWP_MM
    0U,	// LWR
    0U,	// LWR64
    0U,	// LWRE
    0U,	// LWRE_MM
    0U,	// LWR_MM
    0U,	// LWSP_MM
    0U,	// LWUPC
    0U,	// LWU_MM
    0U,	// LWX
    0U,	// LWXC1
    0U,	// LWXC1_MM
    0U,	// LWXS_MM
    0U,	// LWX_MM
    0U,	// LW_MM
    0U,	// LW_MMR6
    0U,	// LWu
    0U,	// LbRxRyOffMemX16
    0U,	// LbuRxRyOffMemX16
    0U,	// LhRxRyOffMemX16
    0U,	// LhuRxRyOffMemX16
    0U,	// LiRxImm16
    0U,	// LiRxImmAlignX16
    0U,	// LiRxImmX16
    0U,	// LwRxPcTcp16
    0U,	// LwRxPcTcpX16
    0U,	// LwRxRyOffMemX16
    0U,	// LwRxSpImmX16
    0U,	// MADD
    24U,	// MADDF_D
    24U,	// MADDF_D_MMR6
    24U,	// MADDF_S
    24U,	// MADDF_S_MMR6
    24U,	// MADDR_Q_H
    24U,	// MADDR_Q_W
    0U,	// MADDU
    0U,	// MADDU_DSP
    0U,	// MADDU_DSP_MM
    0U,	// MADDU_MM
    24U,	// MADDV_B
    24U,	// MADDV_D
    24U,	// MADDV_H
    24U,	// MADDV_W
    4672U,	// MADD_D32
    4672U,	// MADD_D32_MM
    4672U,	// MADD_D64
    0U,	// MADD_DSP
    0U,	// MADD_DSP_MM
    0U,	// MADD_MM
    24U,	// MADD_Q_H
    24U,	// MADD_Q_W
    4672U,	// MADD_S
    4672U,	// MADD_S_MM
    0U,	// MAQ_SA_W_PHL
    0U,	// MAQ_SA_W_PHL_MM
    0U,	// MAQ_SA_W_PHR
    0U,	// MAQ_SA_W_PHR_MM
    0U,	// MAQ_S_W_PHL
    0U,	// MAQ_S_W_PHL_MM
    0U,	// MAQ_S_W_PHR
    0U,	// MAQ_S_W_PHR_MM
    0U,	// MAXA_D
    0U,	// MAXA_D_MMR6
    0U,	// MAXA_S
    0U,	// MAXA_S_MMR6
    0U,	// MAXI_S_B
    0U,	// MAXI_S_D
    0U,	// MAXI_S_H
    0U,	// MAXI_S_W
    4U,	// MAXI_U_B
    4U,	// MAXI_U_D
    4U,	// MAXI_U_H
    4U,	// MAXI_U_W
    0U,	// MAX_A_B
    0U,	// MAX_A_D
    0U,	// MAX_A_H
    0U,	// MAX_A_W
    0U,	// MAX_D
    0U,	// MAX_D_MMR6
    0U,	// MAX_S
    0U,	// MAX_S_B
    0U,	// MAX_S_D
    0U,	// MAX_S_H
    0U,	// MAX_S_MMR6
    0U,	// MAX_S_W
    0U,	// MAX_U_B
    0U,	// MAX_U_D
    0U,	// MAX_U_H
    0U,	// MAX_U_W
    2U,	// MFC0
    2U,	// MFC0_MMR6
    0U,	// MFC1
    0U,	// MFC1_D64
    0U,	// MFC1_MM
    0U,	// MFC1_MMR6
    2U,	// MFC2
    0U,	// MFC2_MMR6
    2U,	// MFGC0
    2U,	// MFGC0_MM
    2U,	// MFHC0_MMR6
    0U,	// MFHC1_D32
    0U,	// MFHC1_D32_MM
    0U,	// MFHC1_D64
    0U,	// MFHC1_D64_MM
    0U,	// MFHC2_MMR6
    2U,	// MFHGC0
    2U,	// MFHGC0_MM
    0U,	// MFHI
    0U,	// MFHI16_MM
    0U,	// MFHI64
    0U,	// MFHI_DSP
    0U,	// MFHI_DSP_MM
    0U,	// MFHI_MM
    0U,	// MFLO
    0U,	// MFLO16_MM
    0U,	// MFLO64
    0U,	// MFLO_DSP
    0U,	// MFLO_DSP_MM
    0U,	// MFLO_MM
    9308U,	// MFTR
    0U,	// MINA_D
    0U,	// MINA_D_MMR6
    0U,	// MINA_S
    0U,	// MINA_S_MMR6
    0U,	// MINI_S_B
    0U,	// MINI_S_D
    0U,	// MINI_S_H
    0U,	// MINI_S_W
    4U,	// MINI_U_B
    4U,	// MINI_U_D
    4U,	// MINI_U_H
    4U,	// MINI_U_W
    0U,	// MIN_A_B
    0U,	// MIN_A_D
    0U,	// MIN_A_H
    0U,	// MIN_A_W
    0U,	// MIN_D
    0U,	// MIN_D_MMR6
    0U,	// MIN_S
    0U,	// MIN_S_B
    0U,	// MIN_S_D
    0U,	// MIN_S_H
    0U,	// MIN_S_MMR6
    0U,	// MIN_S_W
    0U,	// MIN_U_B
    0U,	// MIN_U_D
    0U,	// MIN_U_H
    0U,	// MIN_U_W
    0U,	// MOD
    0U,	// MODSUB
    0U,	// MODSUB_MM
    0U,	// MODU
    0U,	// MODU_MMR6
    0U,	// MOD_MMR6
    0U,	// MOD_S_B
    0U,	// MOD_S_D
    0U,	// MOD_S_H
    0U,	// MOD_S_W
    0U,	// MOD_U_B
    0U,	// MOD_U_D
    0U,	// MOD_U_H
    0U,	// MOD_U_W
    0U,	// MOVE16_MM
    0U,	// MOVE16_MMR6
    1U,	// MOVEP_MM
    1U,	// MOVEP_MMR6
    0U,	// MOVE_V
    0U,	// MOVF_D32
    0U,	// MOVF_D32_MM
    0U,	// MOVF_D64
    0U,	// MOVF_I
    0U,	// MOVF_I64
    0U,	// MOVF_I_MM
    0U,	// MOVF_S
    0U,	// MOVF_S_MM
    0U,	// MOVN_I64_D64
    0U,	// MOVN_I64_I
    0U,	// MOVN_I64_I64
    0U,	// MOVN_I64_S
    0U,	// MOVN_I_D32
    0U,	// MOVN_I_D32_MM
    0U,	// MOVN_I_D64
    0U,	// MOVN_I_I
    0U,	// MOVN_I_I64
    0U,	// MOVN_I_MM
    0U,	// MOVN_I_S
    0U,	// MOVN_I_S_MM
    0U,	// MOVT_D32
    0U,	// MOVT_D32_MM
    0U,	// MOVT_D64
    0U,	// MOVT_I
    0U,	// MOVT_I64
    0U,	// MOVT_I_MM
    0U,	// MOVT_S
    0U,	// MOVT_S_MM
    0U,	// MOVZ_I64_D64
    0U,	// MOVZ_I64_I
    0U,	// MOVZ_I64_I64
    0U,	// MOVZ_I64_S
    0U,	// MOVZ_I_D32
    0U,	// MOVZ_I_D32_MM
    0U,	// MOVZ_I_D64
    0U,	// MOVZ_I_I
    0U,	// MOVZ_I_I64
    0U,	// MOVZ_I_MM
    0U,	// MOVZ_I_S
    0U,	// MOVZ_I_S_MM
    0U,	// MSUB
    24U,	// MSUBF_D
    24U,	// MSUBF_D_MMR6
    24U,	// MSUBF_S
    24U,	// MSUBF_S_MMR6
    24U,	// MSUBR_Q_H
    24U,	// MSUBR_Q_W
    0U,	// MSUBU
    0U,	// MSUBU_DSP
    0U,	// MSUBU_DSP_MM
    0U,	// MSUBU_MM
    24U,	// MSUBV_B
    24U,	// MSUBV_D
    24U,	// MSUBV_H
    24U,	// MSUBV_W
    4672U,	// MSUB_D32
    4672U,	// MSUB_D32_MM
    4672U,	// MSUB_D64
    0U,	// MSUB_DSP
    0U,	// MSUB_DSP_MM
    0U,	// MSUB_MM
    24U,	// MSUB_Q_H
    24U,	// MSUB_Q_W
    4672U,	// MSUB_S
    4672U,	// MSUB_S_MM
    0U,	// MTC0
    0U,	// MTC0_MMR6
    0U,	// MTC1
    0U,	// MTC1_D64
    0U,	// MTC1_MM
    0U,	// MTC1_MMR6
    0U,	// MTC2
    0U,	// MTC2_MMR6
    0U,	// MTGC0
    0U,	// MTGC0_MM
    0U,	// MTHC0_MMR6
    0U,	// MTHC1_D32
    0U,	// MTHC1_D32_MM
    0U,	// MTHC1_D64
    0U,	// MTHC1_D64_MM
    0U,	// MTHC2_MMR6
    0U,	// MTHGC0
    0U,	// MTHGC0_MM
    0U,	// MTHI
    0U,	// MTHI64
    0U,	// MTHI_DSP
    0U,	// MTHI_DSP_MM
    0U,	// MTHI_MM
    0U,	// MTHLIP
    0U,	// MTHLIP_MM
    0U,	// MTLO
    0U,	// MTLO64
    0U,	// MTLO_DSP
    0U,	// MTLO_DSP_MM
    0U,	// MTLO_MM
    0U,	// MTM0
    0U,	// MTM1
    0U,	// MTM2
    0U,	// MTP0
    0U,	// MTP1
    0U,	// MTP2
    1U,	// MTTR
    0U,	// MUH
    0U,	// MUHU
    0U,	// MUHU_MMR6
    0U,	// MUH_MMR6
    0U,	// MUL
    0U,	// MULEQ_S_W_PHL
    0U,	// MULEQ_S_W_PHL_MM
    0U,	// MULEQ_S_W_PHR
    0U,	// MULEQ_S_W_PHR_MM
    0U,	// MULEU_S_PH_QBL
    0U,	// MULEU_S_PH_QBL_MM
    0U,	// MULEU_S_PH_QBR
    0U,	// MULEU_S_PH_QBR_MM
    0U,	// MULQ_RS_PH
    0U,	// MULQ_RS_PH_MM
    0U,	// MULQ_RS_W
    0U,	// MULQ_RS_W_MMR2
    0U,	// MULQ_S_PH
    0U,	// MULQ_S_PH_MMR2
    0U,	// MULQ_S_W
    0U,	// MULQ_S_W_MMR2
    0U,	// MULR_Q_H
    0U,	// MULR_Q_W
    0U,	// MULSAQ_S_W_PH
    0U,	// MULSAQ_S_W_PH_MM
    0U,	// MULSA_W_PH
    0U,	// MULSA_W_PH_MMR2
    0U,	// MULT
    0U,	// MULTU_DSP
    0U,	// MULTU_DSP_MM
    0U,	// MULT_DSP
    0U,	// MULT_DSP_MM
    0U,	// MULT_MM
    0U,	// MULTu
    0U,	// MULTu_MM
    0U,	// MULU
    0U,	// MULU_MMR6
    0U,	// MULV_B
    0U,	// MULV_D
    0U,	// MULV_H
    0U,	// MULV_W
    0U,	// MUL_MM
    0U,	// MUL_MMR6
    0U,	// MUL_PH
    0U,	// MUL_PH_MMR2
    0U,	// MUL_Q_H
    0U,	// MUL_Q_W
    0U,	// MUL_R6
    0U,	// MUL_S_PH
    0U,	// MUL_S_PH_MMR2
    0U,	// Mfhi16
    0U,	// Mflo16
    0U,	// Move32R16
    0U,	// MoveR3216
    0U,	// NLOC_B
    0U,	// NLOC_D
    0U,	// NLOC_H
    0U,	// NLOC_W
    0U,	// NLZC_B
    0U,	// NLZC_D
    0U,	// NLZC_H
    0U,	// NLZC_W
    4672U,	// NMADD_D32
    4672U,	// NMADD_D32_MM
    4672U,	// NMADD_D64
    4672U,	// NMADD_S
    4672U,	// NMADD_S_MM
    4672U,	// NMSUB_D32
    4672U,	// NMSUB_D32_MM
    4672U,	// NMSUB_D64
    4672U,	// NMSUB_S
    4672U,	// NMSUB_S_MM
    0U,	// NOR
    0U,	// NOR64
    6U,	// NORI_B
    0U,	// NOR_MM
    0U,	// NOR_MMR6
    0U,	// NOR_V
    0U,	// NOT16_MM
    0U,	// NOT16_MMR6
    0U,	// NegRxRy16
    0U,	// NotRxRy16
    0U,	// OR
    0U,	// OR16_MM
    0U,	// OR16_MMR6
    0U,	// OR64
    6U,	// ORI_B
    8U,	// ORI_MMR6
    0U,	// OR_MM
    0U,	// OR_MMR6
    0U,	// OR_V
    8U,	// ORi
    8U,	// ORi64
    8U,	// ORi_MM
    0U,	// OrRxRxRy16
    0U,	// PACKRL_PH
    0U,	// PACKRL_PH_MM
    0U,	// PAUSE
    0U,	// PAUSE_MM
    0U,	// PAUSE_MMR6
    0U,	// PCKEV_B
    0U,	// PCKEV_D
    0U,	// PCKEV_H
    0U,	// PCKEV_W
    0U,	// PCKOD_B
    0U,	// PCKOD_D
    0U,	// PCKOD_H
    0U,	// PCKOD_W
    0U,	// PCNT_B
    0U,	// PCNT_D
    0U,	// PCNT_H
    0U,	// PCNT_W
    0U,	// PICK_PH
    0U,	// PICK_PH_MM
    0U,	// PICK_QB
    0U,	// PICK_QB_MM
    0U,	// POP
    0U,	// PRECEQU_PH_QBL
    0U,	// PRECEQU_PH_QBLA
    0U,	// PRECEQU_PH_QBLA_MM
    0U,	// PRECEQU_PH_QBL_MM
    0U,	// PRECEQU_PH_QBR
    0U,	// PRECEQU_PH_QBRA
    0U,	// PRECEQU_PH_QBRA_MM
    0U,	// PRECEQU_PH_QBR_MM
    0U,	// PRECEQ_W_PHL
    0U,	// PRECEQ_W_PHL_MM
    0U,	// PRECEQ_W_PHR
    0U,	// PRECEQ_W_PHR_MM
    0U,	// PRECEU_PH_QBL
    0U,	// PRECEU_PH_QBLA
    0U,	// PRECEU_PH_QBLA_MM
    0U,	// PRECEU_PH_QBL_MM
    0U,	// PRECEU_PH_QBR
    0U,	// PRECEU_PH_QBRA
    0U,	// PRECEU_PH_QBRA_MM
    0U,	// PRECEU_PH_QBR_MM
    0U,	// PRECRQU_S_QB_PH
    0U,	// PRECRQU_S_QB_PH_MM
    0U,	// PRECRQ_PH_W
    0U,	// PRECRQ_PH_W_MM
    0U,	// PRECRQ_QB_PH
    0U,	// PRECRQ_QB_PH_MM
    0U,	// PRECRQ_RS_PH_W
    0U,	// PRECRQ_RS_PH_W_MM
    0U,	// PRECR_QB_PH
    0U,	// PRECR_QB_PH_MMR2
    4U,	// PRECR_SRA_PH_W
    4U,	// PRECR_SRA_PH_W_MMR2
    4U,	// PRECR_SRA_R_PH_W
    4U,	// PRECR_SRA_R_PH_W_MMR2
    0U,	// PREF
    0U,	// PREFE
    0U,	// PREFE_MM
    0U,	// PREFX_MM
    0U,	// PREF_MM
    0U,	// PREF_MMR6
    0U,	// PREF_R6
    4U,	// PREPEND
    4U,	// PREPEND_MMR2
    0U,	// RADDU_W_QB
    0U,	// RADDU_W_QB_MM
    0U,	// RDDSP
    0U,	// RDDSP_MM
    6U,	// RDHWR
    6U,	// RDHWR64
    6U,	// RDHWR_MM
    2U,	// RDHWR_MMR6
    0U,	// RDPGPR_MMR6
    0U,	// RECIP_D32
    0U,	// RECIP_D32_MM
    0U,	// RECIP_D64
    0U,	// RECIP_D64_MM
    0U,	// RECIP_S
    0U,	// RECIP_S_MM
    0U,	// REPLV_PH
    0U,	// REPLV_PH_MM
    0U,	// REPLV_QB
    0U,	// REPLV_QB_MM
    0U,	// REPL_PH
    0U,	// REPL_PH_MM
    0U,	// REPL_QB
    0U,	// REPL_QB_MM
    0U,	// RINT_D
    0U,	// RINT_D_MMR6
    0U,	// RINT_S
    0U,	// RINT_S_MMR6
    4U,	// ROTR
    0U,	// ROTRV
    0U,	// ROTRV_MM
    4U,	// ROTR_MM
    0U,	// ROUND_L_D64
    0U,	// ROUND_L_D_MMR6
    0U,	// ROUND_L_S
    0U,	// ROUND_L_S_MMR6
    0U,	// ROUND_W_D32
    0U,	// ROUND_W_D64
    0U,	// ROUND_W_D_MMR6
    0U,	// ROUND_W_MM
    0U,	// ROUND_W_S
    0U,	// ROUND_W_S_MM
    0U,	// ROUND_W_S_MMR6
    0U,	// RSQRT_D32
    0U,	// RSQRT_D32_MM
    0U,	// RSQRT_D64
    0U,	// RSQRT_D64_MM
    0U,	// RSQRT_S
    0U,	// RSQRT_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    2U,	// SAT_S_B
    12U,	// SAT_S_D
    14U,	// SAT_S_H
    4U,	// SAT_S_W
    2U,	// SAT_U_B
    12U,	// SAT_U_D
    14U,	// SAT_U_H
    4U,	// SAT_U_W
    0U,	// SB
    0U,	// SB16_MM
    0U,	// SB16_MMR6
    0U,	// SB64
    0U,	// SBE
    0U,	// SBE_MM
    0U,	// SB_MM
    0U,	// SB_MMR6
    0U,	// SC
    0U,	// SC64
    0U,	// SC64_R6
    0U,	// SCD
    0U,	// SCD_R6
    0U,	// SCE
    0U,	// SCE_MM
    0U,	// SC_MM
    0U,	// SC_MMR6
    0U,	// SC_R6
    0U,	// SD
    0U,	// SDBBP
    0U,	// SDBBP16_MM
    0U,	// SDBBP16_MMR6
    0U,	// SDBBP_MM
    0U,	// SDBBP_MMR6
    0U,	// SDBBP_R6
    0U,	// SDC1
    0U,	// SDC164
    0U,	// SDC1_D64_MMR6
    0U,	// SDC1_MM
    0U,	// SDC2
    0U,	// SDC2_MMR6
    0U,	// SDC2_R6
    0U,	// SDC3
    0U,	// SDIV
    0U,	// SDIV_MM
    0U,	// SDL
    0U,	// SDR
    0U,	// SDXC1
    0U,	// SDXC164
    0U,	// SEB
    0U,	// SEB64
    0U,	// SEB_MM
    0U,	// SEH
    0U,	// SEH64
    0U,	// SEH_MM
    0U,	// SELEQZ
    0U,	// SELEQZ64
    0U,	// SELEQZ_D
    0U,	// SELEQZ_D_MMR6
    0U,	// SELEQZ_MMR6
    0U,	// SELEQZ_S
    0U,	// SELEQZ_S_MMR6
    0U,	// SELNEZ
    0U,	// SELNEZ64
    0U,	// SELNEZ_D
    0U,	// SELNEZ_D_MMR6
    0U,	// SELNEZ_MMR6
    0U,	// SELNEZ_S
    0U,	// SELNEZ_S_MMR6
    24U,	// SEL_D
    24U,	// SEL_D_MMR6
    24U,	// SEL_S
    24U,	// SEL_S_MMR6
    0U,	// SEQ
    0U,	// SEQi
    0U,	// SH
    0U,	// SH16_MM
    0U,	// SH16_MMR6
    0U,	// SH64
    0U,	// SHE
    0U,	// SHE_MM
    6U,	// SHF_B
    6U,	// SHF_H
    6U,	// SHF_W
    0U,	// SHILO
    0U,	// SHILOV
    0U,	// SHILOV_MM
    0U,	// SHILO_MM
    0U,	// SHLLV_PH
    0U,	// SHLLV_PH_MM
    0U,	// SHLLV_QB
    0U,	// SHLLV_QB_MM
    0U,	// SHLLV_S_PH
    0U,	// SHLLV_S_PH_MM
    0U,	// SHLLV_S_W
    0U,	// SHLLV_S_W_MM
    14U,	// SHLL_PH
    14U,	// SHLL_PH_MM
    2U,	// SHLL_QB
    2U,	// SHLL_QB_MM
    14U,	// SHLL_S_PH
    14U,	// SHLL_S_PH_MM
    4U,	// SHLL_S_W
    4U,	// SHLL_S_W_MM
    0U,	// SHRAV_PH
    0U,	// SHRAV_PH_MM
    0U,	// SHRAV_QB
    0U,	// SHRAV_QB_MMR2
    0U,	// SHRAV_R_PH
    0U,	// SHRAV_R_PH_MM
    0U,	// SHRAV_R_QB
    0U,	// SHRAV_R_QB_MMR2
    0U,	// SHRAV_R_W
    0U,	// SHRAV_R_W_MM
    14U,	// SHRA_PH
    14U,	// SHRA_PH_MM
    2U,	// SHRA_QB
    2U,	// SHRA_QB_MMR2
    14U,	// SHRA_R_PH
    14U,	// SHRA_R_PH_MM
    2U,	// SHRA_R_QB
    2U,	// SHRA_R_QB_MMR2
    4U,	// SHRA_R_W
    4U,	// SHRA_R_W_MM
    0U,	// SHRLV_PH
    0U,	// SHRLV_PH_MMR2
    0U,	// SHRLV_QB
    0U,	// SHRLV_QB_MM
    14U,	// SHRL_PH
    14U,	// SHRL_PH_MMR2
    2U,	// SHRL_QB
    2U,	// SHRL_QB_MM
    0U,	// SH_MM
    0U,	// SH_MMR6
    148U,	// SLDI_B
    34U,	// SLDI_D
    144U,	// SLDI_H
    36U,	// SLDI_W
    152U,	// SLD_B
    152U,	// SLD_D
    152U,	// SLD_H
    152U,	// SLD_W
    4U,	// SLL
    0U,	// SLL16_MM
    0U,	// SLL16_MMR6
    1U,	// SLL64_32
    1U,	// SLL64_64
    2U,	// SLLI_B
    12U,	// SLLI_D
    14U,	// SLLI_H
    4U,	// SLLI_W
    0U,	// SLLV
    0U,	// SLLV_MM
    0U,	// SLL_B
    0U,	// SLL_D
    0U,	// SLL_H
    4U,	// SLL_MM
    4U,	// SLL_MMR6
    0U,	// SLL_W
    0U,	// SLT
    0U,	// SLT64
    0U,	// SLT_MM
    0U,	// SLTi
    0U,	// SLTi64
    0U,	// SLTi_MM
    0U,	// SLTiu
    0U,	// SLTiu64
    0U,	// SLTiu_MM
    0U,	// SLTu
    0U,	// SLTu64
    0U,	// SLTu_MM
    0U,	// SNE
    0U,	// SNEi
    142U,	// SPLATI_B
    156U,	// SPLATI_D
    130U,	// SPLATI_H
    138U,	// SPLATI_W
    128U,	// SPLAT_B
    128U,	// SPLAT_D
    128U,	// SPLAT_H
    128U,	// SPLAT_W
    4U,	// SRA
    2U,	// SRAI_B
    12U,	// SRAI_D
    14U,	// SRAI_H
    4U,	// SRAI_W
    2U,	// SRARI_B
    12U,	// SRARI_D
    14U,	// SRARI_H
    4U,	// SRARI_W
    0U,	// SRAR_B
    0U,	// SRAR_D
    0U,	// SRAR_H
    0U,	// SRAR_W
    0U,	// SRAV
    0U,	// SRAV_MM
    0U,	// SRA_B
    0U,	// SRA_D
    0U,	// SRA_H
    4U,	// SRA_MM
    0U,	// SRA_W
    4U,	// SRL
    0U,	// SRL16_MM
    0U,	// SRL16_MMR6
    2U,	// SRLI_B
    12U,	// SRLI_D
    14U,	// SRLI_H
    4U,	// SRLI_W
    2U,	// SRLRI_B
    12U,	// SRLRI_D
    14U,	// SRLRI_H
    4U,	// SRLRI_W
    0U,	// SRLR_B
    0U,	// SRLR_D
    0U,	// SRLR_H
    0U,	// SRLR_W
    0U,	// SRLV
    0U,	// SRLV_MM
    0U,	// SRL_B
    0U,	// SRL_D
    0U,	// SRL_H
    4U,	// SRL_MM
    0U,	// SRL_W
    0U,	// SSNOP
    0U,	// SSNOP_MM
    0U,	// SSNOP_MMR6
    0U,	// ST_B
    0U,	// ST_D
    0U,	// ST_H
    0U,	// ST_W
    0U,	// SUB
    0U,	// SUBQH_PH
    0U,	// SUBQH_PH_MMR2
    0U,	// SUBQH_R_PH
    0U,	// SUBQH_R_PH_MMR2
    0U,	// SUBQH_R_W
    0U,	// SUBQH_R_W_MMR2
    0U,	// SUBQH_W
    0U,	// SUBQH_W_MMR2
    0U,	// SUBQ_PH
    0U,	// SUBQ_PH_MM
    0U,	// SUBQ_S_PH
    0U,	// SUBQ_S_PH_MM
    0U,	// SUBQ_S_W
    0U,	// SUBQ_S_W_MM
    0U,	// SUBSUS_U_B
    0U,	// SUBSUS_U_D
    0U,	// SUBSUS_U_H
    0U,	// SUBSUS_U_W
    0U,	// SUBSUU_S_B
    0U,	// SUBSUU_S_D
    0U,	// SUBSUU_S_H
    0U,	// SUBSUU_S_W
    0U,	// SUBS_S_B
    0U,	// SUBS_S_D
    0U,	// SUBS_S_H
    0U,	// SUBS_S_W
    0U,	// SUBS_U_B
    0U,	// SUBS_U_D
    0U,	// SUBS_U_H
    0U,	// SUBS_U_W
    0U,	// SUBU16_MM
    0U,	// SUBU16_MMR6
    0U,	// SUBUH_QB
    0U,	// SUBUH_QB_MMR2
    0U,	// SUBUH_R_QB
    0U,	// SUBUH_R_QB_MMR2
    0U,	// SUBU_MMR6
    0U,	// SUBU_PH
    0U,	// SUBU_PH_MMR2
    0U,	// SUBU_QB
    0U,	// SUBU_QB_MM
    0U,	// SUBU_S_PH
    0U,	// SUBU_S_PH_MMR2
    0U,	// SUBU_S_QB
    0U,	// SUBU_S_QB_MM
    4U,	// SUBVI_B
    4U,	// SUBVI_D
    4U,	// SUBVI_H
    4U,	// SUBVI_W
    0U,	// SUBV_B
    0U,	// SUBV_D
    0U,	// SUBV_H
    0U,	// SUBV_W
    0U,	// SUB_MM
    0U,	// SUB_MMR6
    0U,	// SUBu
    0U,	// SUBu_MM
    0U,	// SUXC1
    0U,	// SUXC164
    0U,	// SUXC1_MM
    0U,	// SW
    0U,	// SW16_MM
    0U,	// SW16_MMR6
    0U,	// SW64
    0U,	// SWC1
    0U,	// SWC1_MM
    0U,	// SWC2
    0U,	// SWC2_MMR6
    0U,	// SWC2_R6
    0U,	// SWC3
    0U,	// SWDSP
    0U,	// SWDSP_MM
    0U,	// SWE
    0U,	// SWE_MM
    0U,	// SWL
    0U,	// SWL64
    0U,	// SWLE
    0U,	// SWLE_MM
    0U,	// SWL_MM
    0U,	// SWM16_MM
    0U,	// SWM16_MMR6
    0U,	// SWM32_MM
    0U,	// SWP_MM
    0U,	// SWR
    0U,	// SWR64
    0U,	// SWRE
    0U,	// SWRE_MM
    0U,	// SWR_MM
    0U,	// SWSP_MM
    0U,	// SWSP_MMR6
    0U,	// SWXC1
    0U,	// SWXC1_MM
    0U,	// SW_MM
    0U,	// SW_MMR6
    0U,	// SYNC
    0U,	// SYNCI
    0U,	// SYNCI_MM
    0U,	// SYNCI_MMR6
    0U,	// SYNC_MM
    0U,	// SYNC_MMR6
    0U,	// SYSCALL
    0U,	// SYSCALL_MM
    0U,	// Save16
    0U,	// SaveX16
    0U,	// SbRxRyOffMemX16
    0U,	// SebRx16
    0U,	// SehRx16
    0U,	// ShRxRyOffMemX16
    4U,	// SllX16
    0U,	// SllvRxRy16
    0U,	// SltRxRy16
    0U,	// SltiRxImm16
    0U,	// SltiRxImmX16
    0U,	// SltiuRxImm16
    0U,	// SltiuRxImmX16
    0U,	// SltuRxRy16
    4U,	// SraX16
    0U,	// SravRxRy16
    4U,	// SrlX16
    0U,	// SrlvRxRy16
    0U,	// SubuRxRyRz16
    0U,	// SwRxRyOffMemX16
    0U,	// SwRxSpImmX16
    38U,	// TEQ
    0U,	// TEQI
    0U,	// TEQI_MM
    14U,	// TEQ_MM
    38U,	// TGE
    0U,	// TGEI
    0U,	// TGEIU
    0U,	// TGEIU_MM
    0U,	// TGEI_MM
    38U,	// TGEU
    14U,	// TGEU_MM
    14U,	// TGE_MM
    0U,	// TLBGINV
    0U,	// TLBGINVF
    0U,	// TLBGINVF_MM
    0U,	// TLBGINV_MM
    0U,	// TLBGP
    0U,	// TLBGP_MM
    0U,	// TLBGR
    0U,	// TLBGR_MM
    0U,	// TLBGWI
    0U,	// TLBGWI_MM
    0U,	// TLBGWR
    0U,	// TLBGWR_MM
    0U,	// TLBINV
    0U,	// TLBINVF
    0U,	// TLBINVF_MMR6
    0U,	// TLBINV_MMR6
    0U,	// TLBP
    0U,	// TLBP_MM
    0U,	// TLBR
    0U,	// TLBR_MM
    0U,	// TLBWI
    0U,	// TLBWI_MM
    0U,	// TLBWR
    0U,	// TLBWR_MM
    38U,	// TLT
    0U,	// TLTI
    0U,	// TLTIU_MM
    0U,	// TLTI_MM
    38U,	// TLTU
    14U,	// TLTU_MM
    14U,	// TLT_MM
    38U,	// TNE
    0U,	// TNEI
    0U,	// TNEI_MM
    14U,	// TNE_MM
    0U,	// TRUNC_L_D64
    0U,	// TRUNC_L_D_MMR6
    0U,	// TRUNC_L_S
    0U,	// TRUNC_L_S_MMR6
    0U,	// TRUNC_W_D32
    0U,	// TRUNC_W_D64
    0U,	// TRUNC_W_D_MMR6
    0U,	// TRUNC_W_MM
    0U,	// TRUNC_W_S
    0U,	// TRUNC_W_S_MM
    0U,	// TRUNC_W_S_MMR6
    0U,	// TTLTIU
    0U,	// UDIV
    0U,	// UDIV_MM
    0U,	// V3MULU
    0U,	// VMM0
    0U,	// VMULU
    24U,	// VSHF_B
    24U,	// VSHF_D
    24U,	// VSHF_H
    24U,	// VSHF_W
    0U,	// WAIT
    0U,	// WAIT_MM
    0U,	// WAIT_MMR6
    0U,	// WRDSP
    0U,	// WRDSP_MM
    0U,	// WRPGPR_MMR6
    0U,	// WSBH
    0U,	// WSBH_MM
    0U,	// WSBH_MMR6
    0U,	// XOR
    0U,	// XOR16_MM
    0U,	// XOR16_MMR6
    0U,	// XOR64
    6U,	// XORI_B
    8U,	// XORI_MMR6
    0U,	// XOR_MM
    0U,	// XOR_MMR6
    0U,	// XOR_V
    8U,	// XORi
    8U,	// XORi64
    8U,	// XORi_MM
    0U,	// XorRxRxRy16
    0U,	// YIELD
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 14) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_LABEL, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CAL...
    return;
    break;
  case 1:
    // ABSMacro, BEQLImmMacro, BGE, BGEImmMacro, BGEL, BGELImmMacro, BGEU, BG...
    printOperand(MI, 0, O);
    break;
  case 2:
    // CTTC1, MTTACX, MTTC0, MTTC1, MTTGPR, MTTHC1, MTTHI, MTTLO, MultRxRyRz1...
    printOperand(MI, 1, O);
    O << ", ";
    break;
  case 3:
    // LWM_MM, SWM_MM, LWM16_MM, LWM16_MMR6, LWM32_MM, MOVEP_MM, MOVEP_MMR6, ...
    printRegisterList(MI, 0, O);
    O << ", ";
    break;
  case 4:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O);
    break;
  case 5:
    // AND16_MM, AND16_MMR6, LSA_MMR6, MTHC1_D32, MTHC1_D32_MM, MTHC1_D64, MT...
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 6:
    // BREAK, BREAK_MM, BREAK_MMR6, HYPCALL, HYPCALL_MM, SDBBP_MM, SYSCALL_MM...
    printUImm<10>(MI, 0, O);
    break;
  case 7:
    // BREAK16_MM, BREAK16_MMR6, SDBBP16_MM, SDBBP16_MMR6
    printUImm<4>(MI, 0, O);
    return;
    break;
  case 8:
    // CACHE, CACHEE, CACHEE_MM, CACHE_MM, CACHE_MMR6, CACHE_R6, PREF, PREFE,...
    printUImm<5>(MI, 2, O);
    O << ", ";
    break;
  case 9:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64, FCMP_S32, FCMP_S32_MM
    printFCCOperand(MI, 2, O);
    break;
  case 10:
    // Jal16, JalB16
    printUImm<26>(MI, 0, O);
    break;
  case 11:
    // SDBBP, SDBBP_MMR6, SDBBP_R6, SYSCALL
    printUImm<20>(MI, 0, O);
    return;
    break;
  case 12:
    // SYNC, SYNC_MM, SYNC_MMR6
    printUImm<5>(MI, 0, O);
    return;
    break;
  case 13:
    // SYNCI, SYNCI_MM, SYNCI_MMR6
    printMemOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 18) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, BEQLImmMacro, BGE, BGEImmMacro, BGEL, BGELImmMacro, BGEU, BG...
    O << ", ";
    break;
  case 1:
    // B_MMR6_Pseudo, B_MM_Pseudo, Constant32, JalOneReg, MFTDSP, MTTDSP, ADD...
    return;
    break;
  case 2:
    // CTTC1, MTTACX, MTTC0, MTTC1, MTTGPR, MTTHC1, MTTHI, MTTLO, CTC1, CTC1_...
    printOperand(MI, 0, O);
    break;
  case 3:
    // LWM_MM, SWM_MM, LWM16_MM, LWM16_MMR6, LWM32_MM, SWM16_MM, SWM16_MMR6, ...
    printMemOperand(MI, 1, O);
    return;
    break;
  case 4:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t";
    printOperand(MI, 1, O);
    O << "\n2:";
    return;
    break;
  case 5:
    // MultRxRyRz16, MultuRxRyRz16, SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImm...
    printOperand(MI, 2, O);
    break;
  case 6:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 7:
    // AND16_MM, AND16_MMR6, LSA_MMR6, OR16_MM, OR16_MMR6, PREFX_MM, XOR16_MM...
    printOperand(MI, 1, O);
    break;
  case 8:
    // AddiuRxPcImmX16
    O << ", $pc, ";
    printOperand(MI, 1, O);
    return;
    break;
  case 9:
    // AddiuSpImm16, Bimm16
    O << " # 16 bit inst";
    return;
    break;
  case 10:
    // Bteqz16, Btnez16
    O << "  # 16 bit inst";
    return;
    break;
  case 11:
    // CACHE, CACHEE, CACHEE_MM, CACHE_MM, CACHE_MMR6, CACHE_R6, PREF, PREFE,...
    printMemOperand(MI, 0, O);
    return;
    break;
  case 12:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64
    O << ".d\t";
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 13:
    // FCMP_S32, FCMP_S32_MM
    O << ".s\t";
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 14:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W, INSVE_B, INSVE_D, INSVE_H, INS...
    O << '[';
    break;
  case 15:
    // Jal16
    O << "\n\tnop";
    return;
    break;
  case 16:
    // JalB16
    O << "\t# branch\n\tnop";
    return;
    break;
  case 17:
    // SC, SC64, SC64_R6, SCD, SCD_R6, SCE, SCE_MM, SC_MM, SC_MMR6, SC_R6
    printMemOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 25 unique commands.
  switch ((Bits >> 23) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, BEQLImmMacro, BGE, BGEImmMacro, BGEL, BGELImmMacro, BGEU, BG...
    printOperand(MI, 1, O);
    break;
  case 1:
    // CTTC1, MTTACX, MTTC1, MTTGPR, MTTHC1, MTTHI, MTTLO, ADDIUS5_MM, AND16_...
    return;
    break;
  case 2:
    // GotPrologue16, AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, BINSLI_B,...
    printOperand(MI, 2, O);
    break;
  case 3:
    // LDMacro, LOAD_ACC128, LOAD_ACC64, LOAD_ACC64DSP, LOAD_CCOND_DSP, LoadA...
    printMemOperand(MI, 1, O);
    return;
    break;
  case 4:
    // MTTC0, DMTC0, DMTC2, DMTGC0, FORK, LSA_MMR6, MOVEP_MM, MOVEP_MMR6, MTC...
    O << ", ";
    break;
  case 5:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t";
    printOperand(MI, 0, O);
    return;
    break;
  case 6:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O);
    break;
  case 7:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t";
    printOperand(MI, 0, O);
    O << ", $t8";
    return;
    break;
  case 8:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64, LEA_ADDiu_MM
    printMemOperandEA(MI, 1, O);
    return;
    break;
  case 9:
    // BBIT0, BBIT032, BBIT1, BBIT132
    printUImm<5>(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 10:
    // BREAK, BREAK_MM, BREAK_MMR6, RDDSP, WRDSP
    printUImm<10>(MI, 1, O);
    return;
    break;
  case 11:
    // DMFC2_OCTEON, DMTC2_OCTEON, LUI_MMR6, LUi, LUi64, LUi_MM
    printUImm<16>(MI, 1, O);
    return;
    break;
  case 12:
    // GINVT, GINVT_MMR6
    printUImm<2>(MI, 1, O);
    return;
    break;
  case 13:
    // INSERT_B
    printUImm<4>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 14:
    // INSERT_D
    printUImm<1>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 15:
    // INSERT_H
    printUImm<3>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 16:
    // INSERT_W
    printUImm<2>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 17:
    // INSVE_B
    printUImm<4>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 18:
    // INSVE_D
    printUImm<1>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 19:
    // INSVE_H
    printUImm<3>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 20:
    // INSVE_W
    printUImm<2>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 21:
    // LWP_MM, SWP_MM
    printMemOperand(MI, 2, O);
    return;
    break;
  case 22:
    // PREFX_MM
    O << '(';
    printOperand(MI, 0, O);
    O << ')';
    return;
    break;
  case 23:
    // RDDSP_MM, WRDSP_MM
    printUImm<7>(MI, 1, O);
    return;
    break;
  case 24:
    // REPL_QB, REPL_QB_MM
    printUImm<8>(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 28) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, CFTC1, JalTwoReg, LoadAddrImm32, LoadAddrImm64, LoadImm32, L...
    return;
    break;
  case 1:
    // BEQLImmMacro, BGE, BGEImmMacro, BGEL, BGELImmMacro, BGEU, BGEUImmMacro...
    O << ", ";
    break;
  case 2:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t";
    printOperand(MI, 2, O);
    return;
    break;
  case 3:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t";
    printOperand(MI, 2, O);
    return;
    break;
  case 4:
    // GotPrologue16
    O << "\n\taddiu\t";
    printOperand(MI, 1, O);
    O << ", $pc, ";
    printOperand(MI, 3, O);
    O << "\n ";
    return;
    break;
  case 5:
    // MTTC0, DMTC0, DMTC2, DMTGC0, MTC0, MTC0_MMR6, MTC2, MTGC0, MTGC0_MM, M...
    printUImm<3>(MI, 2, O);
    return;
    break;
  case 6:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 7:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 8:
    // AddiuRxRxImm16, LwRxPcTcp16
    O << "\t# 16 bit inst";
    return;
    break;
  case 9:
    // BeqzRxImm16, BnezRxImm16
    O << "  # 16 bit inst";
    return;
    break;
  case 10:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W, ...
    O << '[';
    break;
  case 11:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    O << " \t# 16 bit inst";
    return;
    break;
  case 12:
    // DSLL64_32
    O << ", 32";
    return;
    break;
  case 13:
    // FORK
    printOperand(MI, 2, O);
    return;
    break;
  case 14:
    // LBUX, LBUX_MM, LDXC1, LDXC164, LHX, LHX_MM, LUXC1, LUXC164, LUXC1_MM, ...
    O << '(';
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 15:
    // LSA_MMR6
    printOperand(MI, 0, O);
    O << ", ";
    printUImm<2, 1>(MI, 3, O);
    return;
    break;
  case 16:
    // MOVEP_MM, MOVEP_MMR6
    printOperand(MI, 3, O);
    return;
    break;
  case 17:
    // MTTR
    printUImm<1>(MI, 2, O);
    O << ", ";
    printUImm<3>(MI, 3, O);
    O << ", ";
    printUImm<1>(MI, 4, O);
    return;
    break;
  case 18:
    // SLL64_32, SLL64_64
    O << ", 0";
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 20 unique commands.
  switch ((Bits >> 33) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BEQLImmMacro, BGE, BGEImmMacro, BGEL, BGELImmMacro, BGEU, BGEUImmMacro...
    printOperand(MI, 2, O);
    break;
  case 1:
    // MFTC0, BCLRI_B, BNEGI_B, BSETI_B, COPY_S_H, COPY_U_H, DMFC0, DMFC2, DM...
    printUImm<3>(MI, 2, O);
    break;
  case 2:
    // ADDVI_B, ADDVI_D, ADDVI_H, ADDVI_W, APPEND, APPEND_MMR2, BCLRI_W, BNEG...
    printUImm<5>(MI, 2, O);
    break;
  case 3:
    // ANDI_B, NORI_B, ORI_B, RDHWR, RDHWR64, RDHWR_MM, SHF_B, SHF_H, SHF_W, ...
    printUImm<8>(MI, 2, O);
    return;
    break;
  case 4:
    // ANDI_MMR6, ANDi, ANDi64, ANDi_MM, AUI, AUI_MMR6, DAHI, DATI, DAUI, ORI...
    printUImm<16>(MI, 2, O);
    return;
    break;
  case 5:
    // BALIGN, BALIGN_MMR2, COPY_S_W, COPY_U_W, SPLATI_W
    printUImm<2>(MI, 2, O);
    break;
  case 6:
    // BCLRI_D, BNEGI_D, BSETI_D, DEXT, DEXT64_32, DINS, DROTR, DSLL, DSRA, D...
    printUImm<6>(MI, 2, O);
    break;
  case 7:
    // BCLRI_H, BNEGI_H, BSETI_H, COPY_S_B, COPY_U_B, SAT_S_H, SAT_U_H, SHLL_...
    printUImm<4>(MI, 2, O);
    break;
  case 8:
    // BINSLI_B, BINSRI_B, SLDI_H
    printUImm<3>(MI, 3, O);
    break;
  case 9:
    // BINSLI_D, BINSRI_D
    printUImm<6>(MI, 3, O);
    return;
    break;
  case 10:
    // BINSLI_H, BINSRI_H, SLDI_B
    printUImm<4>(MI, 3, O);
    break;
  case 11:
    // BINSLI_W, BINSRI_W
    printUImm<5>(MI, 3, O);
    return;
    break;
  case 12:
    // BINSL_B, BINSL_D, BINSL_H, BINSL_W, BINSR_B, BINSR_D, BINSR_H, BINSR_W...
    printOperand(MI, 3, O);
    break;
  case 13:
    // BMNZI_B, BMZI_B, BSELI_B
    printUImm<8>(MI, 3, O);
    return;
    break;
  case 14:
    // COPY_S_D, MFTR, SPLATI_D
    printUImm<1>(MI, 2, O);
    break;
  case 15:
    // DEXTU, DINSU
    printUImm<5, 32>(MI, 2, O);
    O << ", ";
    break;
  case 16:
    // FADD_S_MMR6, FDIV_S_MMR6, FMUL_S_MMR6, FSUB_S_MMR6
    printOperand(MI, 1, O);
    return;
    break;
  case 17:
    // SLDI_D
    printUImm<1>(MI, 3, O);
    O << ']';
    return;
    break;
  case 18:
    // SLDI_W
    printUImm<2>(MI, 3, O);
    O << ']';
    return;
    break;
  case 19:
    // TEQ, TGE, TGEU, TLT, TLTU, TNE
    printUImm<10>(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 38) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BEQLImmMacro, BGE, BGEImmMacro, BGEL, BGELImmMacro, BGEU, BGEUImmMacro...
    return;
    break;
  case 1:
    // ALIGN, ALIGN_MMR6, CINS, CINS32, CINS64_32, CINS_i32, DALIGN, DEXT, DE...
    O << ", ";
    break;
  case 2:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W, ...
    O << ']';
    return;
    break;
  case 3:
    // DEXTU
    printUImm<5, 1>(MI, 3, O);
    return;
    break;
  case 4:
    // DINSU
    printUImm<6>(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 41) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ALIGN, ALIGN_MMR6
    printUImm<2>(MI, 3, O);
    return;
    break;
  case 1:
    // CINS, CINS32, CINS64_32, CINS_i32, EXTS, EXTS32
    printUImm<5>(MI, 3, O);
    return;
    break;
  case 2:
    // DALIGN, MFTR
    printUImm<3>(MI, 3, O);
    break;
  case 3:
    // DEXT
    printUImm<6, 1>(MI, 3, O);
    return;
    break;
  case 4:
    // DEXT64_32, EXT, EXT_MM, EXT_MMR6
    printUImm<5, 1>(MI, 3, O);
    return;
    break;
  case 5:
    // DEXTM
    printUImm<5, 33>(MI, 3, O);
    return;
    break;
  case 6:
    // DINS, INS, INS_MM, INS_MMR6
    printUImm<6>(MI, 3, O);
    return;
    break;
  case 7:
    // DINSM
    printUImm<6, 2>(MI, 3, O);
    return;
    break;
  case 8:
    // DLSA, DLSA_R6, LSA, LSA_R6
    printUImm<2, 1>(MI, 3, O);
    return;
    break;
  case 9:
    // MADD_D32, MADD_D32_MM, MADD_D64, MADD_S, MADD_S_MM, MSUB_D32, MSUB_D32...
    printOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 45) & 1) {
    // MFTR
    O << ", ";
    printUImm<1>(MI, 4, O);
    return;
  } else {
    // DALIGN
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 418 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'w', '1', '0', 0,
  /* 8 */ 'f', '2', '0', 0,
  /* 12 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 25 */ 'w', '2', '0', 0,
  /* 29 */ 'f', '3', '0', 0,
  /* 33 */ 'w', '3', '0', 0,
  /* 37 */ 'a', 'c', '0', 0,
  /* 41 */ 'f', 'c', 'c', '0', 0,
  /* 46 */ 'f', '0', 0,
  /* 49 */ 'm', 'p', 'l', '0', 0,
  /* 54 */ 'p', '0', 0,
  /* 57 */ 'w', '0', 0,
  /* 60 */ 'f', '1', '1', 0,
  /* 64 */ 'w', '1', '1', 0,
  /* 68 */ 'f', '2', '1', 0,
  /* 72 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 85 */ 'w', '2', '1', 0,
  /* 89 */ 'f', '3', '1', 0,
  /* 93 */ 'w', '3', '1', 0,
  /* 97 */ 'a', 'c', '1', 0,
  /* 101 */ 'f', 'c', 'c', '1', 0,
  /* 106 */ 'f', '1', 0,
  /* 109 */ 'm', 'p', 'l', '1', 0,
  /* 114 */ 'p', '1', 0,
  /* 117 */ 'w', '1', 0,
  /* 120 */ 'f', '1', '2', 0,
  /* 124 */ 'w', '1', '2', 0,
  /* 128 */ 'f', '2', '2', 0,
  /* 132 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 145 */ 'w', '2', '2', 0,
  /* 149 */ 'a', 'c', '2', 0,
  /* 153 */ 'f', 'c', 'c', '2', 0,
  /* 158 */ 'f', '2', 0,
  /* 161 */ 'm', 'p', 'l', '2', 0,
  /* 166 */ 'p', '2', 0,
  /* 169 */ 'w', '2', 0,
  /* 172 */ 'f', '1', '3', 0,
  /* 176 */ 'w', '1', '3', 0,
  /* 180 */ 'f', '2', '3', 0,
  /* 184 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 197 */ 'w', '2', '3', 0,
  /* 201 */ 'a', 'c', '3', 0,
  /* 205 */ 'f', 'c', 'c', '3', 0,
  /* 210 */ 'f', '3', 0,
  /* 213 */ 'w', '3', 0,
  /* 216 */ 'f', '1', '4', 0,
  /* 220 */ 'w', '1', '4', 0,
  /* 224 */ 'f', '2', '4', 0,
  /* 228 */ 'w', '2', '4', 0,
  /* 232 */ 'f', 'c', 'c', '4', 0,
  /* 237 */ 'f', '4', 0,
  /* 240 */ 'w', '4', 0,
  /* 243 */ 'f', '1', '5', 0,
  /* 247 */ 'w', '1', '5', 0,
  /* 251 */ 'f', '2', '5', 0,
  /* 255 */ 'w', '2', '5', 0,
  /* 259 */ 'f', 'c', 'c', '5', 0,
  /* 264 */ 'f', '5', 0,
  /* 267 */ 'w', '5', 0,
  /* 270 */ 'f', '1', '6', 0,
  /* 274 */ 'w', '1', '6', 0,
  /* 278 */ 'f', '2', '6', 0,
  /* 282 */ 'w', '2', '6', 0,
  /* 286 */ 'f', 'c', 'c', '6', 0,
  /* 291 */ 'f', '6', 0,
  /* 294 */ 'w', '6', 0,
  /* 297 */ 'f', '1', '7', 0,
  /* 301 */ 'w', '1', '7', 0,
  /* 305 */ 'f', '2', '7', 0,
  /* 309 */ 'w', '2', '7', 0,
  /* 313 */ 'f', 'c', 'c', '7', 0,
  /* 318 */ 'f', '7', 0,
  /* 321 */ 'w', '7', 0,
  /* 324 */ 'f', '1', '8', 0,
  /* 328 */ 'w', '1', '8', 0,
  /* 332 */ 'f', '2', '8', 0,
  /* 336 */ 'w', '2', '8', 0,
  /* 340 */ 'f', '8', 0,
  /* 343 */ 'w', '8', 0,
  /* 346 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 362 */ 'f', '1', '9', 0,
  /* 366 */ 'w', '1', '9', 0,
  /* 370 */ 'f', '2', '9', 0,
  /* 374 */ 'w', '2', '9', 0,
  /* 378 */ 'f', '9', 0,
  /* 381 */ 'w', '9', 0,
  /* 384 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 391 */ 'r', 'a', 0,
  /* 394 */ 'h', 'w', 'r', '_', 'c', 'c', 0,
  /* 401 */ 'p', 'c', 0,
  /* 404 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 413 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 424 */ 'h', 'i', 0,
  /* 427 */ 'h', 'w', 'r', '_', 'c', 'p', 'u', 'n', 'u', 'm', 0,
  /* 438 */ 'l', 'o', 0,
  /* 441 */ 'z', 'e', 'r', 'o', 0,
  /* 446 */ 'h', 'w', 'r', '_', 's', 'y', 'n', 'c', 'i', '_', 's', 't', 'e', 'p', 0,
  /* 461 */ 'f', 'p', 0,
  /* 464 */ 'g', 'p', 0,
  /* 467 */ 's', 'p', 0,
  /* 470 */ 'h', 'w', 'r', '_', 'c', 'c', 'r', 'e', 's', 0,
  /* 480 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 487 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 497 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    62, 404, 497, 384, 413, 480, 487, 461, 464, 122, 62, 2, 272, 218, 
    245, 174, 299, 401, 391, 467, 441, 218, 245, 272, 299, 37, 97, 149, 
    201, 62, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 
    122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 122, 174, 218, 245, 
    272, 299, 326, 360, 1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 
    9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 1, 61, 
    121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 
    279, 306, 333, 371, 30, 90, 1, 61, 121, 173, 217, 244, 271, 298, 
    325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 
    46, 158, 237, 291, 340, 0, 120, 216, 270, 324, 8, 128, 224, 278, 
    332, 29, 12, 72, 132, 184, 46, 106, 158, 210, 237, 264, 291, 318, 
    340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 
    128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 41, 101, 153, 205, 
    232, 259, 286, 313, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 461, 46, 106, 158, 210, 237, 
    264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 
    362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 464, 
    37, 97, 149, 201, 427, 446, 394, 470, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 279, 306, 37, 97, 149, 201, 
    49, 109, 161, 54, 114, 166, 391, 271, 298, 325, 359, 9, 69, 129, 
    181, 467, 326, 360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
    57, 117, 169, 213, 240, 267, 294, 321, 343, 381, 4, 64, 124, 176, 
    220, 247, 274, 301, 328, 366, 25, 85, 145, 197, 228, 255, 282, 309, 
    336, 374, 33, 93, 441, 218, 245, 272, 299, 37, 46, 106, 158, 210, 
    237, 264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 
    324, 362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 
    346, 424, 279, 306, 438, 271, 298, 325, 359, 9, 69, 129, 181, 326, 
    360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDIUPC:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg())) {
      // (ADDIUPC GPR32Opnd:$rd, simm19_lsl2:$imm)
      AsmString = "lapc $\x01, $\x02";
      break;
    }
    return false;
  case Mips::ADDIUPC_MMR6:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg())) {
      // (ADDIUPC_MMR6 GPR32Opnd:$rd, simm19_lsl2:$imm)
      AsmString = "lapc $\x01, $\x02";
      break;
    }
    return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::BC1F:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1F FCC0, brtarget:$offset)
      AsmString = "bc1f $\x02";
      break;
    }
    return false;
  case Mips::BC1FL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1FL FCC0, brtarget:$offset)
      AsmString = "bc1fl $\x02";
      break;
    }
    return false;
  case Mips::BC1F_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1F_MM FCC0, brtarget:$offset)
      AsmString = "bc1f $\x02";
      break;
    }
    return false;
  case Mips::BC1T:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1T FCC0, brtarget:$offset)
      AsmString = "bc1t $\x02";
      break;
    }
    return false;
  case Mips::BC1TL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1TL FCC0, brtarget:$offset)
      AsmString = "bc1tl $\x02";
      break;
    }
    return false;
  case Mips::BC1T_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1T_MM FCC0, brtarget:$offset)
      AsmString = "bc1t $\x02";
      break;
    }
    return false;
  case Mips::BGEZAL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (BGEZAL ZERO, brtarget:$offset)
      AsmString = "bal $\x02";
      break;
    }
    return false;
  case Mips::BGEZAL_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (BGEZAL_MM ZERO, brtarget_mm:$offset)
      AsmString = "bal $\x02";
      break;
    }
    return false;
  case Mips::BREAK:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK 0, 0)
      AsmString = "break";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK uimm10:$imm, 0)
      AsmString = "break $\xFF\x01\x01";
      break;
    }
    return false;
  case Mips::BREAK_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK_MM 0, 0)
      AsmString = "break";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK_MM uimm10:$imm, 0)
      AsmString = "break $\xFF\x01\x01";
      break;
    }
    return false;
  case Mips::C_EQ_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.eq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.eq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.f.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.f.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.le.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.le.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.lt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.lt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.nge.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.nge.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngle.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngle.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngl.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngl.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ole.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ole.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.olt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.olt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.seq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.seq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.sf.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.sf.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ueq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ueq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ule.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ule.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ult.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ult.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.un.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.un.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::DI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DIV:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DIV GPR32Opnd:$rs, GPR32Opnd:$rs, GPR32Opnd:$rt)
      AsmString = "div $\x01, $\x03";
      break;
    }
    return false;
  case Mips::DIVU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DIVU GPR32Opnd:$rs, GPR32Opnd:$rs, GPR32Opnd:$rt)
      AsmString = "divu $\x01, $\x03";
      break;
    }
    return false;
  case Mips::DI_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI_MM ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DI_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI_MMR6 ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DMT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DMT ZERO)
      AsmString = "dmt";
      break;
    }
    return false;
  case Mips::DSUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUB GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dneg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (DSUB GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rt)
      AsmString = "dneg $\x01";
      break;
    }
    return false;
  case Mips::DSUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUBu GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dnegu $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (DSUBu GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rt)
      AsmString = "dnegu $\x01";
      break;
    }
    return false;
  case Mips::DVPE:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DVPE ZERO)
      AsmString = "dvpe";
      break;
    }
    return false;
  case Mips::EI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MM ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MMR6 ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EMT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EMT ZERO)
      AsmString = "emt";
      break;
    }
    return false;
  case Mips::EVPE:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EVPE ZERO)
      AsmString = "evpe";
      break;
    }
    return false;
  case Mips::HYPCALL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HYPCALL 0)
      AsmString = "hypcall";
      break;
    }
    return false;
  case Mips::HYPCALL_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HYPCALL_MM 0)
      AsmString = "hypcall";
      break;
    }
    return false;
  case Mips::JALR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR ZERO, GPR32Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO_64 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR64 ZERO_64, GPR64Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALRC_HB_MMR6:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALRC_HB_MMR6 RA, GPR32Opnd:$rs)
      AsmString = "jalrc.hb $\x02";
      break;
    }
    return false;
  case Mips::JALRC_MMR6:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALRC_MMR6 RA, GPR32Opnd:$rs)
      AsmString = "jalrc $\x02";
      break;
    }
    return false;
  case Mips::JALR_HB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR_HB RA, GPR32Opnd:$rs)
      AsmString = "jalr.hb $\x02";
      break;
    }
    return false;
  case Mips::JALR_HB64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA_64 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR_HB64 RA_64, GPR64Opnd:$rs)
      AsmString = "jalr.hb $\x02";
      break;
    }
    return false;
  case Mips::JIALC:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIALC GPR32Opnd:$rs, 0)
      AsmString = "jalrc $\x01";
      break;
    }
    return false;
  case Mips::JIALC64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIALC64 GPR64Opnd:$rs, 0)
      AsmString = "jalrc $\x01";
      break;
    }
    return false;
  case Mips::JIC:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIC GPR32Opnd:$rs, 0)
      AsmString = "jrc $\x01";
      break;
    }
    return false;
  case Mips::JIC64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIC64 GPR64Opnd:$rs, 0)
      AsmString = "jrc $\x01";
      break;
    }
    return false;
  case Mips::MFTACX:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::AC0) {
      // (MFTACX GPR32Opnd:$rt, AC0)
      AsmString = "mftacx $\x01";
      break;
    }
    return false;
  case Mips::MFTC0:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::COP0RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MFTC0 GPR32Opnd:$rd, COP0Opnd:$rt, 0)
      AsmString = "mftc0 $\x01, $\x02";
      break;
    }
    return false;
  case Mips::MFTHI:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::AC0) {
      // (MFTHI GPR32Opnd:$rt, AC0)
      AsmString = "mfthi $\x01";
      break;
    }
    return false;
  case Mips::MFTLO:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::AC0) {
      // (MFTLO GPR32Opnd:$rt, AC0)
      AsmString = "mftlo $\x01";
      break;
    }
    return false;
  case Mips::MOVE16_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO) {
      // (MOVE16_MM ZERO, ZERO)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::MTTACX:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::AC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTTACX AC0, GPR32Opnd:$rt)
      AsmString = "mttacx $\x02";
      break;
    }
    return false;
  case Mips::MTTC0:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::COP0RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTTC0 COP0Opnd:$rt, GPR32Opnd:$rd, 0)
      AsmString = "mttc0 $\x02, $\x01";
      break;
    }
    return false;
  case Mips::MTTHI:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::AC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTTHI AC0, GPR32Opnd:$rt)
      AsmString = "mtthi $\x02";
      break;
    }
    return false;
  case Mips::MTTLO:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::AC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTTLO AC0, GPR32Opnd:$rt)
      AsmString = "mttlo $\x02";
      break;
    }
    return false;
  case Mips::Move32R16:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::S0) {
      // (Move32R16 ZERO, S0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::NORImm:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (NORImm GPR32Opnd:$rs, GPR32Opnd:$rs, simm32_relaxed:$imm)
      AsmString = "nor	$\x01, $\x03";
      break;
    }
    return false;
  case Mips::NORImm64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (NORImm64 GPR64Opnd:$rs, GPR64Opnd:$rs, imm64:$imm)
      AsmString = "nor	$\x01, $\x03";
      break;
    }
    return false;
  case Mips::OR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (OR GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::OR64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (OR64 GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::RDHWR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::HWRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RDHWR GPR32Opnd:$rt, HWRegsOpnd:$rs, 0)
      AsmString = "rdhwr $\x01, $\x02";
      break;
    }
    return false;
  case Mips::RDHWR64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::HWRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RDHWR64 GPR64Opnd:$rt, HWRegsOpnd:$rs, 0)
      AsmString = "rdhwr $\x01, $\x02";
      break;
    }
    return false;
  case Mips::RDHWR_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::HWRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RDHWR_MM GPR32Opnd:$rt, HWRegsOpnd:$rs, 0)
      AsmString = "rdhwr $\x01, $\x02";
      break;
    }
    return false;
  case Mips::RDHWR_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::HWRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RDHWR_MMR6 GPR32Opnd:$rt, HWRegsOpnd:$rs, 0)
      AsmString = "rdhwr $\x01, $\x02";
      break;
    }
    return false;
  case Mips::SDBBP:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_MMR6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_R6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_R6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MM ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MMR6 ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLTImm64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (SLTImm64 GPR64Opnd:$rs, GPR64Opnd:$rs, imm64:$imm)
      AsmString = "slt	$\x01, $\x03";
      break;
    }
    return false;
  case Mips::SLTUImm64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (SLTUImm64 GPR64Opnd:$rs, GPR64Opnd:$rs, imm64:$imm)
      AsmString = "sltu	$\x01, $\x03";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt)
      AsmString = "neg $\x01";
      break;
    }
    return false;
  case Mips::SUBU_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBU_MMR6 GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (SUBU_MMR6 GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt)
      AsmString = "negu $\x01";
      break;
    }
    return false;
  case Mips::SUB_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB_MM GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (SUB_MM GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt)
      AsmString = "neg $\x01";
      break;
    }
    return false;
  case Mips::SUB_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB_MMR6 GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (SUB_MMR6 GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt)
      AsmString = "neg $\x01";
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt)
      AsmString = "negu $\x01";
      break;
    }
    return false;
  case Mips::SUBu_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu_MM GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (SUBu_MM GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt)
      AsmString = "negu $\x01";
      break;
    }
    return false;
  case Mips::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYNC_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC_MM 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYNC_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC_MMR6 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYSCALL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::SYSCALL_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL_MM 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::TEQ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TEQ_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::WAIT_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT_MM 0)
      AsmString = "wait";
      break;
    }
    return false;
  case Mips::WRDSP:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31) {
      // (WRDSP GPR32Opnd:$rt, 31)
      AsmString = "wrdsp $\x01";
      break;
    }
    return false;
  case Mips::WRDSP_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31) {
      // (WRDSP_MM GPR32Opnd:$rt, 31)
      AsmString = "wrdsp $\x01";
      break;
    }
    return false;
  case Mips::YIELD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (YIELD ZERO, GPR32Opnd:$rs)
      AsmString = "yield $\x02";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void MipsInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printUImm<10>(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
