From d4667e60fd70c1f3dd51d8df9917007b8ffd05c4 Mon Sep 17 00:00:00 2001
From: Robert Ogden <robertogden@chromium.org>
Date: Mon, 7 Feb 2022 12:14:12 -0800
Subject: [PATCH 11/12] remove unbuilt files and change exec bit where needed

---
 .../cc/port/benchmark.h                       |  21 ---
 .../cc/port/default/status_matchers.h         |  55 -------
 .../tensorflow_lite_support/cc/port/gmock.h   |  21 ---
 .../tensorflow_lite_support/cc/port/gtest.h   |  21 ---
 .../tensorflow_lite_support/cc/port/proto2.h  |  32 ----
 .../examples/task/audio/desktop/python/BUILD  |   0
 .../task/audio/desktop/python/README.md       |   0
 .../desktop/python/audio_classifier_demo.py   |   0
 .../examples/task/vision/desktop/python/BUILD |   0
 .../desktop/python/image_classifier_demo.py   |   0
 .../desktop/python/image_segmenter_demo.py    |   0
 .../desktop/python/object_detector_demo.py    |   0
 .../ios/utils/Sources/TFLStringUtil.mm        |  23 ---
 .../metadata/cc/metadata_populator.cc         | 150 ------------------
 .../metadata/cc/utils/zip_mem_file.cc         | 124 ---------------
 .../metadata/cc/utils/zip_mem_file.h          |  71 ---------
 .../odml/ios/image/resources/grace_hopper.jpg | Bin
 .../task/vision/core/pybinds/image_utils.cc   |  68 --------
 .../task/vision/pybinds/image_embedder.cc     |  68 --------
 .../tools/ci_build/build_all.sh               |   0
 .../ci_build/builds/build_ios_framework.sh    |   0
 .../tools/ci_build/builds/pip_smoke_test.sh   |   0
 .../tools/ci_build/common.sh                  |   0
 .../tools/ci_build/common_win.bat             |   0
 .../pip_package/rpi/build_arm_pip_package.sh  |   0
 .../tools/pip_package/rpi/install_bazel.sh    |   0
 26 files changed, 654 deletions(-)
 delete mode 100644 third_party/tflite_support/src/tensorflow_lite_support/cc/port/benchmark.h
 delete mode 100644 third_party/tflite_support/src/tensorflow_lite_support/cc/port/default/status_matchers.h
 delete mode 100644 third_party/tflite_support/src/tensorflow_lite_support/cc/port/gmock.h
 delete mode 100644 third_party/tflite_support/src/tensorflow_lite_support/cc/port/gtest.h
 delete mode 100644 third_party/tflite_support/src/tensorflow_lite_support/cc/port/proto2.h
 mode change 100755 => 100644 third_party/tflite_support/src/tensorflow_lite_support/examples/task/audio/desktop/python/BUILD
 mode change 100755 => 100644 third_party/tflite_support/src/tensorflow_lite_support/examples/task/audio/desktop/python/README.md
 mode change 100755 => 100644 third_party/tflite_support/src/tensorflow_lite_support/examples/task/audio/desktop/python/audio_classifier_demo.py
 mode change 100755 => 100644 third_party/tflite_support/src/tensorflow_lite_support/examples/task/vision/desktop/python/BUILD
 mode change 100755 => 100644 third_party/tflite_support/src/tensorflow_lite_support/examples/task/vision/desktop/python/image_classifier_demo.py
 mode change 100755 => 100644 third_party/tflite_support/src/tensorflow_lite_support/examples/task/vision/desktop/python/image_segmenter_demo.py
 mode change 100755 => 100644 third_party/tflite_support/src/tensorflow_lite_support/examples/task/vision/desktop/python/object_detector_demo.py
 delete mode 100644 third_party/tflite_support/src/tensorflow_lite_support/ios/utils/Sources/TFLStringUtil.mm
 delete mode 100644 third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/metadata_populator.cc
 delete mode 100644 third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_mem_file.cc
 delete mode 100644 third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_mem_file.h
 mode change 100755 => 100644 third_party/tflite_support/src/tensorflow_lite_support/odml/ios/image/resources/grace_hopper.jpg
 delete mode 100644 third_party/tflite_support/src/tensorflow_lite_support/python/task/vision/core/pybinds/image_utils.cc
 delete mode 100644 third_party/tflite_support/src/tensorflow_lite_support/python/task/vision/pybinds/image_embedder.cc
 mode change 100644 => 100755 third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/build_all.sh
 mode change 100644 => 100755 third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/builds/build_ios_framework.sh
 mode change 100644 => 100755 third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/builds/pip_smoke_test.sh
 mode change 100644 => 100755 third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/common.sh
 mode change 100644 => 100755 third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/common_win.bat
 mode change 100644 => 100755 third_party/tflite_support/src/tensorflow_lite_support/tools/pip_package/rpi/build_arm_pip_package.sh
 mode change 100644 => 100755 third_party/tflite_support/src/tensorflow_lite_support/tools/pip_package/rpi/install_bazel.sh

diff --git a/third_party/tflite_support/src/tensorflow_lite_support/cc/port/benchmark.h b/third_party/tflite_support/src/tensorflow_lite_support/cc/port/benchmark.h
deleted file mode 100644
index 74bc1a6857664..0000000000000
--- a/third_party/tflite_support/src/tensorflow_lite_support/cc/port/benchmark.h
+++ /dev/null
@@ -1,21 +0,0 @@
-/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-==============================================================================*/
-
-#ifndef TENSORFLOW_LITE_SUPPORT_CC_PORT_BENCHMARK_H_
-#define TENSORFLOW_LITE_SUPPORT_CC_PORT_BENCHMARK_H_
-
-#include "gtest/benchmark.h"
-
-#endif  // TENSORFLOW_LITE_SUPPORT_CC_PORT_BENCHMARK_H_
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/cc/port/default/status_matchers.h b/third_party/tflite_support/src/tensorflow_lite_support/cc/port/default/status_matchers.h
deleted file mode 100644
index 6d9668043c183..0000000000000
--- a/third_party/tflite_support/src/tensorflow_lite_support/cc/port/default/status_matchers.h
+++ /dev/null
@@ -1,55 +0,0 @@
-/* Copyright 2021 The TensorFlow Authors. All Rights Reserved.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-==============================================================================*/
-
-#ifndef TENSORFLOW_LITE_SUPPORT_CC_PORT_DEFAULT_STATUS_MATCHERS_H_
-#define TENSORFLOW_LITE_SUPPORT_CC_PORT_DEFAULT_STATUS_MATCHERS_H_
-
-#include "gmock/gmock.h"
-#include "gtest/gtest.h"
-
-#define SUPPORT_STATUS_MACROS_IMPL_CONCAT_INNER_(x, y) x##y
-#define SUPPORT_STATUS_MACROS_IMPL_CONCAT_(x, y) \
-  SUPPORT_STATUS_MACROS_IMPL_CONCAT_INNER_(x, y)
-
-#undef SUPPORT_ASSERT_OK
-#define SUPPORT_ASSERT_OK(expr) \
-  SUPPORT_ASSERT_OK_IMPL_(      \
-      SUPPORT_STATUS_MACROS_IMPL_CONCAT_(_status, __LINE__), expr)
-
-#define SUPPORT_ASSERT_OK_IMPL_(status, expr) \
-  auto status = (expr);                       \
-  ASSERT_TRUE(status.ok());
-
-#undef SUPPORT_EXPECT_OK
-#define SUPPORT_EXPECT_OK(expr) \
-  SUPPORT_EXPECT_OK_IMPL_(      \
-      SUPPORT_STATUS_MACROS_IMPL_CONCAT_(_status, __LINE__), expr)
-
-#define SUPPORT_EXPECT_OK_IMPL_(status, expr) \
-  auto status = (expr);                       \
-  EXPECT_TRUE(status.ok());
-
-#undef SUPPORT_ASSERT_OK_AND_ASSIGN
-#define SUPPORT_ASSERT_OK_AND_ASSIGN(lhs, rexpr)                           \
-  SUPPORT_ASSERT_OK_AND_ASSIGN_IMPL_(                                      \
-      SUPPORT_STATUS_MACROS_IMPL_CONCAT_(_status_or_value, __LINE__), lhs, \
-      rexpr)
-
-#define SUPPORT_ASSERT_OK_AND_ASSIGN_IMPL_(statusor, lhs, rexpr) \
-  auto statusor = (rexpr);                                       \
-  ASSERT_TRUE(statusor.ok());                                    \
-  lhs = std::move(statusor.value())
-
-#endif  // TENSORFLOW_LITE_SUPPORT_CC_PORT_DEFAULT_STATUS_MATCHERS_H_
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/cc/port/gmock.h b/third_party/tflite_support/src/tensorflow_lite_support/cc/port/gmock.h
deleted file mode 100644
index 5e4334db323d6..0000000000000
--- a/third_party/tflite_support/src/tensorflow_lite_support/cc/port/gmock.h
+++ /dev/null
@@ -1,21 +0,0 @@
-/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-==============================================================================*/
-
-#ifndef TENSORFLOW_LITE_SUPPORT_CC_PORT_GMOCK_H_
-#define TENSORFLOW_LITE_SUPPORT_CC_PORT_GMOCK_H_
-
-#include "gmock/gmock.h"
-
-#endif  // TENSORFLOW_LITE_SUPPORT_CC_PORT_GMOCK_H_
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/cc/port/gtest.h b/third_party/tflite_support/src/tensorflow_lite_support/cc/port/gtest.h
deleted file mode 100644
index dbe2e5e6f9d7c..0000000000000
--- a/third_party/tflite_support/src/tensorflow_lite_support/cc/port/gtest.h
+++ /dev/null
@@ -1,21 +0,0 @@
-/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-==============================================================================*/
-
-#ifndef TENSORFLOW_LITE_SUPPORT_CC_PORT_GTEST_H_
-#define TENSORFLOW_LITE_SUPPORT_CC_PORT_GTEST_H_
-
-#include "gtest/gtest.h"
-
-#endif  // TENSORFLOW_LITE_SUPPORT_CC_PORT_GTEST_H_
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/cc/port/proto2.h b/third_party/tflite_support/src/tensorflow_lite_support/cc/port/proto2.h
deleted file mode 100644
index 3cde2ab81d6ee..0000000000000
--- a/third_party/tflite_support/src/tensorflow_lite_support/cc/port/proto2.h
+++ /dev/null
@@ -1,32 +0,0 @@
-/* Copyright 2021 The TensorFlow Authors. All Rights Reserved.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-==============================================================================*/
-#ifndef TENSORFLOW_LITE_SUPPORT_CC_PORT_PROTO_NS_H_
-#define TENSORFLOW_LITE_SUPPORT_CC_PORT_PROTO_NS_H_
-
-#include "google/protobuf/message_lite.h"
-#include "google/protobuf/text_format.h"
-
-namespace tflite {
-namespace support {
-namespace proto {
-
-using TextFormat = ::google::protobuf::TextFormat;
-using MessageLite = ::google::protobuf::MessageLite;
-
-}  // namespace proto
-}  // namespace support
-}  // namespace tflite
-
-#endif  // TENSORFLOW_LITE_SUPPORT_CC_PORT_PROTO_NS_H_
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/examples/task/audio/desktop/python/BUILD b/third_party/tflite_support/src/tensorflow_lite_support/examples/task/audio/desktop/python/BUILD
old mode 100755
new mode 100644
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/examples/task/audio/desktop/python/README.md b/third_party/tflite_support/src/tensorflow_lite_support/examples/task/audio/desktop/python/README.md
old mode 100755
new mode 100644
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/examples/task/audio/desktop/python/audio_classifier_demo.py b/third_party/tflite_support/src/tensorflow_lite_support/examples/task/audio/desktop/python/audio_classifier_demo.py
old mode 100755
new mode 100644
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/examples/task/vision/desktop/python/BUILD b/third_party/tflite_support/src/tensorflow_lite_support/examples/task/vision/desktop/python/BUILD
old mode 100755
new mode 100644
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/examples/task/vision/desktop/python/image_classifier_demo.py b/third_party/tflite_support/src/tensorflow_lite_support/examples/task/vision/desktop/python/image_classifier_demo.py
old mode 100755
new mode 100644
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/examples/task/vision/desktop/python/image_segmenter_demo.py b/third_party/tflite_support/src/tensorflow_lite_support/examples/task/vision/desktop/python/image_segmenter_demo.py
old mode 100755
new mode 100644
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/examples/task/vision/desktop/python/object_detector_demo.py b/third_party/tflite_support/src/tensorflow_lite_support/examples/task/vision/desktop/python/object_detector_demo.py
old mode 100755
new mode 100644
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/ios/utils/Sources/TFLStringUtil.mm b/third_party/tflite_support/src/tensorflow_lite_support/ios/utils/Sources/TFLStringUtil.mm
deleted file mode 100644
index 6e9cf23802427..0000000000000
--- a/third_party/tflite_support/src/tensorflow_lite_support/ios/utils/Sources/TFLStringUtil.mm
+++ /dev/null
@@ -1,23 +0,0 @@
-/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-==============================================================================*/
-#import "third_party/tensorflow_lite_support/ios/utils/Sources/TFLStringUtil.h"
-
-std::string MakeString(NSString* str) { return std::string([str UTF8String]); }
-
-NSString* MakeNSString(const std::string& str) {
-  return [[NSString alloc] initWithBytes:const_cast<void*>(static_cast<const void*>(str.data()))
-                                  length:str.length()
-                                encoding:NSUTF8StringEncoding];
-}
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/metadata_populator.cc b/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/metadata_populator.cc
deleted file mode 100644
index e21d426369e2e..0000000000000
--- a/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/metadata_populator.cc
+++ /dev/null
@@ -1,150 +0,0 @@
-/* Copyright 2021 The TensorFlow Authors. All Rights Reserved.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-==============================================================================*/
-
-#include "tensorflow_lite_support/metadata/cc/metadata_populator.h"
-
-#include <cstdlib>
-#include <cstring>
-#include <functional>
-
-#include "flatbuffers/flatbuffers.h"  // from @flatbuffers
-#include "contrib/minizip/ioapi.h"
-#include "contrib/minizip/zip.h"
-#include "tensorflow/lite/schema/schema_generated.h"
-#include "tensorflow_lite_support/cc/common.h"
-#include "tensorflow_lite_support/cc/port/status_macros.h"
-#include "tensorflow_lite_support/cc/port/statusor.h"
-#include "tensorflow_lite_support/metadata/cc/utils/zip_mem_file.h"
-#include "tensorflow_lite_support/metadata/metadata_schema_generated.h"
-
-namespace tflite {
-namespace metadata {
-
-namespace {
-constexpr char kMetadataBufferName[] = "TFLITE_METADATA";
-
-using ::absl::StatusCode;
-using ::tflite::support::CreateStatusWithPayload;
-using ::tflite::support::TfLiteSupportStatus;
-
-}  // namespace
-
-ModelMetadataPopulator::ModelMetadataPopulator(const tflite::Model& model) {
-  model.UnPackTo(&model_t_);
-}
-
-/* static */
-tflite::support::StatusOr<std::unique_ptr<ModelMetadataPopulator>>
-ModelMetadataPopulator::CreateFromModelBuffer(const char* buffer_data,
-                                              size_t buffer_size) {
-  // Rely on the simplest, base flatbuffers verifier. Here is not the place to
-  // e.g. use an OpResolver: we just want to make sure the buffer is valid to
-  // access the metadata.
-  flatbuffers::Verifier verifier = flatbuffers::Verifier(
-      reinterpret_cast<const uint8_t*>(buffer_data), buffer_size);
-  if (!tflite::VerifyModelBuffer(verifier)) {
-    return CreateStatusWithPayload(
-        StatusCode::kInvalidArgument,
-        "The model is not a valid FlatBuffer buffer.",
-        TfLiteSupportStatus::kInvalidFlatBufferError);
-  }
-  // Use absl::WrapUnique() to call private constructor:
-  // https://abseil.io/tips/126.
-  return absl::WrapUnique(
-      new ModelMetadataPopulator(*tflite::GetModel(buffer_data)));
-}
-
-void ModelMetadataPopulator::LoadMetadata(const char* metadata_buffer_data,
-                                          size_t metadata_buffer_size) {
-  // Pack the model metadata in a buffer.
-  auto model_metadata_buffer = std::make_unique<tflite::BufferT>();
-  model_metadata_buffer->data = {metadata_buffer_data,
-                                 metadata_buffer_data + metadata_buffer_size};
-  // Check if the model already has metadata. If so, just override the buffer
-  // and exit.
-  for (const auto& metadata_t : model_t_.metadata) {
-    if (metadata_t->name == kMetadataBufferName) {
-      model_t_.buffers[metadata_t->buffer] = std::move(model_metadata_buffer);
-      return;
-    }
-  }
-  // Model doesn't already have metadata: add metadata buffer and pointer to the
-  // buffer in the model metadata section.
-  model_t_.buffers.push_back(std::move(model_metadata_buffer));
-  auto metadata_t = std::make_unique<tflite::MetadataT>();
-  metadata_t->name = kMetadataBufferName;
-  metadata_t->buffer = model_t_.buffers.size() - 1;
-  model_t_.metadata.push_back(std::move(metadata_t));
-}
-
-void ModelMetadataPopulator::LoadAssociatedFiles(
-    const absl::flat_hash_map<std::string, std::string>& associated_files) {
-  associated_files_ = associated_files;
-}
-
-tflite::support::StatusOr<std::string>
-ModelMetadataPopulator::AppendAssociatedFiles(const char* model_buffer_data,
-                                              size_t model_buffer_size) {
-  // Create in-memory zip file.
-  ZipMemFile mem_file = ZipMemFile(model_buffer_data, model_buffer_size);
-  // Open zip.
-  zipFile zf = zipOpen2(/*pathname=*/nullptr, APPEND_STATUS_CREATEAFTER,
-                        /*globalcomment=*/nullptr, &mem_file.GetFileFuncDef());
-  if (zf == nullptr) {
-    return CreateStatusWithPayload(
-        StatusCode::kUnknown, "Unable to open zip archive",
-        TfLiteSupportStatus::kMetadataAssociatedFileZipError);
-  }
-  // Write associated files.
-  for (const auto& [name, contents] : associated_files_) {
-    if ((zipOpenNewFileInZip(zf, name.c_str(),
-                             /*zipfi=*/nullptr,
-                             /*extrafield_local=*/nullptr,
-                             /*size_extrafield_local=*/0,
-                             /*extrafield_global=*/nullptr,
-                             /*size_extrafield_global=*/0,
-                             /*comment=*/nullptr,
-                             /*method=*/0,
-                             /*level=*/Z_DEFAULT_COMPRESSION) != ZIP_OK) ||
-        (zipWriteInFileInZip(zf, contents.data(), contents.length()) !=
-         ZIP_OK) ||
-        (zipCloseFileInZip(zf) != ZIP_OK)) {
-      return CreateStatusWithPayload(
-          StatusCode::kUnknown, "Unable to write file to zip archive",
-          TfLiteSupportStatus::kMetadataAssociatedFileZipError);
-    }
-  }
-  // Close zip.
-  if (zipClose(zf, /*global_comment=*/nullptr) != ZIP_OK) {
-    return CreateStatusWithPayload(
-        StatusCode::kUnknown, "Unable to close zip archive",
-        TfLiteSupportStatus::kMetadataAssociatedFileZipError);
-  }
-  // Return as a string.
-  return std::string(mem_file.GetFileContent());
-}
-
-tflite::support::StatusOr<std::string> ModelMetadataPopulator::Populate() {
-  // Build model.
-  flatbuffers::FlatBufferBuilder model_fbb;
-  model_fbb.Finish(tflite::Model::Pack(model_fbb, &model_t_),
-                   tflite::ModelIdentifier());
-  return AppendAssociatedFiles(
-      reinterpret_cast<char*>(model_fbb.GetBufferPointer()),
-      model_fbb.GetSize());
-}
-
-}  // namespace metadata
-}  // namespace tflite
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_mem_file.cc b/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_mem_file.cc
deleted file mode 100644
index 2e4d9107c8c31..0000000000000
--- a/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_mem_file.cc
+++ /dev/null
@@ -1,124 +0,0 @@
-/* Copyright 2021 The TensorFlow Authors. All Rights Reserved.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-==============================================================================*/
-
-#include "tensorflow_lite_support/metadata/cc/utils/zip_mem_file.h"
-
-#include <algorithm>
-#include <cstdio>
-
-#include "absl/strings/string_view.h"  // from @com_google_absl
-#include "contrib/minizip/ioapi.h"
-
-namespace tflite {
-namespace metadata {
-
-ZipMemFile::ZipMemFile(const char* buffer, size_t size)
-    : data_(buffer, size), offset_(0) {
-  zlib_filefunc_def_.zopen_file = OpenFile;
-  zlib_filefunc_def_.zread_file = ReadFile;
-  zlib_filefunc_def_.zwrite_file = WriteFile;
-  zlib_filefunc_def_.ztell_file = TellFile;
-  zlib_filefunc_def_.zseek_file = SeekFile;
-  zlib_filefunc_def_.zclose_file = CloseFile;
-  zlib_filefunc_def_.zerror_file = ErrorFile;
-  zlib_filefunc_def_.opaque = this;
-}
-
-zlib_filefunc_def& ZipMemFile::GetFileFuncDef() { return zlib_filefunc_def_; }
-
-absl::string_view ZipMemFile::GetFileContent() const { return data_; }
-
-/* static */
-voidpf ZipMemFile::OpenFile(voidpf opaque, const char* filename, int mode) {
-  // Result is never used, but needs to be non-null for `zipOpen2` not to fail.
-  return opaque;
-}
-
-/* static */
-size_t ZipMemFile::ReadFile(voidpf opaque, voidpf stream, void* buf,
-                            size_t size) {
-  auto* mem_file = static_cast<ZipMemFile*>(opaque);
-  if (mem_file->offset_ < 0 || mem_file->Size() < mem_file->offset_) {
-    return 0;
-  }
-  if (mem_file->offset_ + size > mem_file->Size()) {
-    size = mem_file->Size() - mem_file->offset_;
-  }
-  memcpy(buf,
-         static_cast<const char*>(mem_file->data_.c_str()) + mem_file->offset_,
-         size);
-  mem_file->offset_ += size;
-  return size;
-}
-
-/* static */
-size_t ZipMemFile::WriteFile(voidpf opaque, voidpf stream, const void* buf,
-                             size_t size) {
-  auto* mem_file = static_cast<ZipMemFile*>(opaque);
-  if (mem_file->offset_ + size > mem_file->Size()) {
-    mem_file->data_.resize(mem_file->offset_ + size);
-  }
-  mem_file->data_.replace(mem_file->offset_, size,
-                          static_cast<const char*>(buf), size);
-  mem_file->offset_ += size;
-  return size;
-}
-
-/* static */
-ptrdiff_t ZipMemFile::TellFile(voidpf opaque, voidpf stream) {
-  return static_cast<ZipMemFile*>(opaque)->offset_;
-}
-
-/* static */
-ptrdiff_t ZipMemFile::SeekFile(voidpf opaque, voidpf stream, size_t offset,
-                               int origin) {
-  auto* mem_file = static_cast<ZipMemFile*>(opaque);
-  switch (origin) {
-    case SEEK_SET:
-      mem_file->offset_ = offset;
-      return 0;
-    case SEEK_CUR:
-      if (mem_file->offset_ + offset < 0 ||
-          mem_file->offset_ + offset > mem_file->Size()) {
-        return -1;
-      }
-      mem_file->offset_ += offset;
-      return 0;
-    case SEEK_END:
-      if (mem_file->Size() - offset < 0 ||
-          mem_file->Size() - offset > mem_file->Size()) {
-        return -1;
-      }
-      mem_file->offset_ = offset + mem_file->Size();
-      return 0;
-    default:
-      return -1;
-  }
-}
-
-/* static */
-int ZipMemFile::CloseFile(voidpf opaque, voidpf stream) {
-  // Nothing to do.
-  return 0;
-}
-
-/* static */
-int ZipMemFile::ErrorFile(voidpf opaque, voidpf stream) {
-  // Unused.
-  return 0;
-}
-
-}  // namespace metadata
-}  // namespace tflite
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_mem_file.h b/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_mem_file.h
deleted file mode 100644
index ef7843d70cff6..0000000000000
--- a/third_party/tflite_support/src/tensorflow_lite_support/metadata/cc/utils/zip_mem_file.h
+++ /dev/null
@@ -1,71 +0,0 @@
-/* Copyright 2021 The TensorFlow Authors. All Rights Reserved.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-==============================================================================*/
-
-#ifndef TENSORFLOW_LITE_SUPPORT_METADATA_CC_UTILS_ZIP_MEM_FILE_H_
-#define TENSORFLOW_LITE_SUPPORT_METADATA_CC_UTILS_ZIP_MEM_FILE_H_
-
-#include <cstdlib>
-
-#include "absl/strings/string_view.h"  // from @com_google_absl
-#include "contrib/minizip/ioapi.h"
-
-namespace tflite {
-namespace metadata {
-
-// In-memory zip file implementation.
-//
-// Adapted from [1], with a few key differences:
-// * backed by an `std::string` instead of malloc-ed C buffers,
-// * supports opening the file for writing through `zipOpen2`.
-//
-// [1]:
-// https://github.com/google/libkml/blob/master/third_party/zlib-1.2.3/contrib/minizip/iomem_simple.c
-class ZipMemFile {
- public:
-  // Constructs an in-memory zip file from a buffer.
-  ZipMemFile(const char* buffer, size_t size);
-  // Provides access to the `zlib_filefunc_def` implementation for the in-memory
-  // zip file.
-  zlib_filefunc_def& GetFileFuncDef();
-  // Provides access to the file contents.
-  absl::string_view GetFileContent() const;
-
- private:
-  // The string backing the in-memory file.
-  std::string data_;
-  // The current offset in the file.
-  size_t offset_;
-  // The `zlib_filefunc_def` implementation for this in-memory zip file.
-  zlib_filefunc_def zlib_filefunc_def_;
-
-  // Convenience function to access the current data size.
-  size_t Size() const { return data_.size(); }
-
-  // The file function implementations used in the `zlib_filefunc_def`.
-  static voidpf OpenFile(voidpf opaque, const char* filename, int mode);
-  static size_t ReadFile(voidpf opaque, voidpf stream, void* buf, size_t size);
-  static size_t WriteFile(voidpf opaque, voidpf stream, const void* buf,
-                          size_t size);
-  static ptrdiff_t TellFile(voidpf opaque, voidpf stream);
-  static ptrdiff_t SeekFile(voidpf opaque, voidpf stream, size_t offset,
-                            int origin);
-  static int CloseFile(voidpf opaque, voidpf stream);
-  static int ErrorFile(voidpf opaque, voidpf stream);
-};
-
-}  // namespace metadata
-}  // namespace tflite
-
-#endif  // TENSORFLOW_LITE_SUPPORT_METADATA_CC_UTILS_ZIP_MEM_FILE_H_
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/odml/ios/image/resources/grace_hopper.jpg b/third_party/tflite_support/src/tensorflow_lite_support/odml/ios/image/resources/grace_hopper.jpg
old mode 100755
new mode 100644
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/python/task/vision/core/pybinds/image_utils.cc b/third_party/tflite_support/src/tensorflow_lite_support/python/task/vision/core/pybinds/image_utils.cc
deleted file mode 100644
index 8834d0e36816d..0000000000000
--- a/third_party/tflite_support/src/tensorflow_lite_support/python/task/vision/core/pybinds/image_utils.cc
+++ /dev/null
@@ -1,68 +0,0 @@
-/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-==============================================================================*/
-#include "tensorflow_lite_support/examples/task/vision/desktop/utils/image_utils.h"
-
-#include "pybind11/pybind11.h"
-#include "pybind11_abseil/status_casters.h"  // from @pybind11_abseil
-
-namespace tflite {
-namespace task {
-namespace vision {
-
-namespace {
-namespace py = ::pybind11;
-
-}  //  namespace
-
-PYBIND11_MODULE(image_utils, m) {
-  // python wrapper for ImageData class which shouldn't be directly used by
-  // the users.
-  pybind11::google::ImportStatusModule();
-
-  py::class_<ImageData>(m, "ImageData", py::buffer_protocol())
-      .def(py::init([](py::buffer buffer) {
-        py::buffer_info info = buffer.request();
-
-        if (info.ndim != 2 && info.ndim != 3) {
-          throw py::value_error("Incompatible buffer dimension!");
-        }
-
-        int height = info.shape[0];
-        int width = info.shape[1];
-        int channels = info.ndim == 3 ? info.shape[2] : 1;
-
-        return ImageData{static_cast<uint8 *>(info.ptr), width, height,
-                         channels};
-      }))
-      .def_readonly("width", &ImageData::width)
-      .def_readonly("height", &ImageData::height)
-      .def_readonly("channels", &ImageData::channels)
-      .def_buffer([](ImageData &data) -> py::buffer_info {
-        return py::buffer_info(
-            data.pixel_data, sizeof(uint8),
-            py::format_descriptor<uint8>::format(), 3,
-            {data.height, data.width, data.channels},
-            {sizeof(uint8) * size_t(data.width) * size_t(data.channels),
-             sizeof(uint8) * size_t(data.channels), sizeof(uint8)});
-      });
-
-  m.def("DecodeImageFromFile", &DecodeImageFromFile);
-  m.def("EncodeImageToPngFile", &EncodeImageToPngFile);
-  m.def("ImageDataFree", &ImageDataFree);
-}
-
-}  // namespace vision
-}  // namespace task
-}  // namespace tflite
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/python/task/vision/pybinds/image_embedder.cc b/third_party/tflite_support/src/tensorflow_lite_support/python/task/vision/pybinds/image_embedder.cc
deleted file mode 100644
index 073a688780ca0..0000000000000
--- a/third_party/tflite_support/src/tensorflow_lite_support/python/task/vision/pybinds/image_embedder.cc
+++ /dev/null
@@ -1,68 +0,0 @@
-/* Copyright 2021 The TensorFlow Authors. All Rights Reserved.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-==============================================================================*/
-
-#include "tensorflow_lite_support/cc/task/vision/image_embedder.h"
-
-#include "pybind11/pybind11.h"
-#include "pybind11_abseil/status_casters.h"  // from @pybind11_abseil
-#include "pybind11_protobuf/native_proto_caster.h"  // from @pybind11_protobuf
-#include "tensorflow_lite_support/cc/port/statusor.h"
-#include "tensorflow_lite_support/examples/task/vision/desktop/utils/image_utils.h"
-
-namespace tflite {
-namespace task {
-namespace vision {
-
-namespace {
-namespace py = ::pybind11;
-}  // namespace
-
-PYBIND11_MODULE(_pywrap_image_embedder, m) {
-  // python wrapper for C++ ImageEmbeder class which shouldn't be directly used
-  // by the users.
-  pybind11::google::ImportStatusModule();
-  pybind11_protobuf::ImportNativeProtoCasters();
-
-  py::class_<ImageEmbedder>(m, "ImageEmbedder")
-      .def_static(
-          "create_from_options",
-          [](const ImageEmbedderOptions& options) {
-            return ImageEmbedder::CreateFromOptions(options);
-          })
-      .def("embed",
-           [](ImageEmbedder& self, const ImageData& image_data)
-               -> tflite::support::StatusOr<EmbeddingResult> {
-             ASSIGN_OR_RETURN(std::unique_ptr<FrameBuffer> frame_buffer,
-                              CreateFrameBufferFromImageData(image_data));
-             return self.Embed(*frame_buffer);
-           })
-      .def("embed",
-           [](ImageEmbedder& self, const ImageData& image_data,
-              const BoundingBox& bounding_box)
-               -> tflite::support::StatusOr<EmbeddingResult> {
-             ASSIGN_OR_RETURN(std::unique_ptr<FrameBuffer> frame_buffer,
-                              CreateFrameBufferFromImageData(image_data));
-             return self.Embed(*frame_buffer, bounding_box);
-           })
-      .def("get_embedding_by_index", &ImageEmbedder::GetEmbeddingByIndex)
-      .def("get_number_of_output_layers",
-           &ImageEmbedder::GetNumberOfOutputLayers)
-      .def("get_embedding_dimension", &ImageEmbedder::GetEmbeddingDimension)
-      .def_static("cosine_similarity", &ImageEmbedder::CosineSimilarity);
-}
-
-}  // namespace vision
-}  // namespace task
-}  // namespace tflite
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/build_all.sh b/third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/build_all.sh
old mode 100644
new mode 100755
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/builds/build_ios_framework.sh b/third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/builds/build_ios_framework.sh
old mode 100644
new mode 100755
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/builds/pip_smoke_test.sh b/third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/builds/pip_smoke_test.sh
old mode 100644
new mode 100755
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/common.sh b/third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/common.sh
old mode 100644
new mode 100755
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/common_win.bat b/third_party/tflite_support/src/tensorflow_lite_support/tools/ci_build/common_win.bat
old mode 100644
new mode 100755
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/tools/pip_package/rpi/build_arm_pip_package.sh b/third_party/tflite_support/src/tensorflow_lite_support/tools/pip_package/rpi/build_arm_pip_package.sh
old mode 100644
new mode 100755
diff --git a/third_party/tflite_support/src/tensorflow_lite_support/tools/pip_package/rpi/install_bazel.sh b/third_party/tflite_support/src/tensorflow_lite_support/tools/pip_package/rpi/install_bazel.sh
old mode 100644
new mode 100755
-- 
2.35.0.263.gb82422642f-goog

