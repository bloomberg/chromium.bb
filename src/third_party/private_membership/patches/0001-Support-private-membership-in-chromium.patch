diff --git a/internal/crypto_utils.cc b/internal/crypto_utils.cc
index 8143052..9efa0c0 100644
--- a/internal/crypto_utils.cc
+++ b/internal/crypto_utils.cc
@@ -14,6 +14,7 @@
 
 #include "third_party/private_membership/src/internal/crypto_utils.h"
 
+#include "absl/strings/str_cat.h"
 #include "third_party/private_membership/src/internal/aes_ctr_256_with_fixed_iv.h"
 #include "third_party/private_membership/src/internal/id_utils.h"
 #include "third_party/shell-encryption/src/status_macros.h"
diff --git a/internal/encrypted_bucket_id.cc b/internal/encrypted_bucket_id.cc
index f5f0ed9..3b46e50 100644
--- a/internal/encrypted_bucket_id.cc
+++ b/internal/encrypted_bucket_id.cc
@@ -38,7 +38,11 @@ namespace rlwe {
         "ECCipher and Context must both be non-null.");
   }
   std::string full_id = HashRlwePlaintextId(id);
-  RLWE_ASSIGN_OR_RETURN(std::string encrypted_id, ec_cipher->Encrypt(full_id));
+  auto status_or_encrypted_id = ec_cipher->Encrypt(full_id);
+  if(!status_or_encrypted_id.ok()){
+      return absl::InvalidArgumentError(status_or_encrypted_id.status().message());
+  }
+  std::string encrypted_id = std::move(status_or_encrypted_id).ValueOrDie();
   return EncryptedBucketId::Create(encrypted_id, params, ctx);
 }
 
diff --git a/internal/oprf_utils.cc b/internal/oprf_utils.cc
index 3f7346a..181383b 100644
--- a/internal/oprf_utils.cc
+++ b/internal/oprf_utils.cc
@@ -23,11 +23,16 @@ namespace private_membership {
     const private_join_and_compute::ECCommutativeCipher& ec_cipher) {
   DoublyEncryptedId doubly_encrypted_id;
 
-  doubly_encrypted_id.set_queried_encrypted_id(encrypted_id);
-
-  RLWE_ASSIGN_OR_RETURN(auto reencrypted_id,
-                        ec_cipher.ReEncrypt(std::string(encrypted_id)));
-  doubly_encrypted_id.set_doubly_encrypted_id(reencrypted_id);
+  doubly_encrypted_id.set_queried_encrypted_id(std::string(encrypted_id));
+
+  auto status_or_reencrypted_id =
+      ec_cipher.ReEncrypt(std::string(encrypted_id));
+  if (!status_or_reencrypted_id.ok()) {
+    return absl::InvalidArgumentError(
+        status_or_reencrypted_id.status().message());
+  }
+  auto reencrypted_id = std::move(status_or_reencrypted_id).ValueOrDie();
+  doubly_encrypted_id.set_doubly_encrypted_id(std::string(reencrypted_id));
 
   return doubly_encrypted_id;
 }
diff --git a/internal/rlwe_id_utils.cc b/internal/rlwe_id_utils.cc
index a910774..126a981 100644
--- a/internal/rlwe_id_utils.cc
+++ b/internal/rlwe_id_utils.cc
@@ -32,7 +32,11 @@ namespace rlwe {
         "ECCipher and Context should both be non-null.");
   }
   std::string full_id = rlwe::HashRlwePlaintextId(id);
-  RLWE_ASSIGN_OR_RETURN(std::string encrypted_id, ec_cipher->Encrypt(full_id));
+  auto status_or_encrypted_id = ec_cipher->Encrypt(full_id);
+  if(!status_or_encrypted_id.ok()){
+      return absl::InvalidArgumentError(status_or_encrypted_id.status().message());
+  }
+  std::string encrypted_id = std::move(status_or_encrypted_id).ValueOrDie();
   return ComputeBucketStoredEncryptedId(encrypted_id, params, ctx);
 }
 
diff --git a/internal/utils.cc b/internal/utils.cc
index d7d4004..27f1983 100644
--- a/internal/utils.cc
+++ b/internal/utils.cc
@@ -28,7 +28,8 @@ namespace rlwe {
   }
   int ceiled_byte_length = (bit_length - 1) / 8 + 1;
   std::string res(in.begin(), in.begin() + ceiled_byte_length);
-  if (int remainder_bit_count = bit_length % 8; remainder_bit_count > 0) {
+  int remainder_bit_count = bit_length % 8;
+  if (remainder_bit_count > 0) {
     int mask = (1 << remainder_bit_count) - 1;
     res[res.size() - 1] &= (mask << (8 - remainder_bit_count));
   }
diff --git a/private_membership_rlwe_client.cc b/private_membership_rlwe_client.cc
index 9f0d0ec..2b480cb 100644
--- a/private_membership_rlwe_client.cc
+++ b/private_membership_rlwe_client.cc
@@ -42,10 +42,15 @@ PrivateMembershipRlweClient::Create(
   if (plaintext_ids.empty()) {
     return absl::InvalidArgumentError("Plaintext ids must not be empty.");
   }
-  RLWE_ASSIGN_OR_RETURN(
-      auto ec_cipher,
+  auto status_or_ec_cipher =
       private_join_and_compute::ECCommutativeCipher::CreateWithNewKey(
-          kCurveId, private_join_and_compute::ECCommutativeCipher::HashType::SHA256));
+          kCurveId,
+          private_join_and_compute::ECCommutativeCipher::HashType::SHA256);
+
+  if (!status_or_ec_cipher.ok()) {
+    return absl::InvalidArgumentError(status_or_ec_cipher.status().message());
+  }
+  auto ec_cipher = std::move(status_or_ec_cipher).ValueOrDie();
   return absl::WrapUnique<PrivateMembershipRlweClient>(
       new PrivateMembershipRlweClient(use_case, plaintext_ids,
                                       std::move(ec_cipher)));
@@ -68,7 +73,7 @@ PrivateMembershipRlweClient::CreateOprfRequest() {
     std::string whole_id = HashRlwePlaintextId(plaintext_id);
     auto status_or_client_encrypted_id = ec_cipher_->Encrypt(whole_id);
     if (!status_or_client_encrypted_id.ok()) {
-      return status_or_client_encrypted_id.status();
+    return absl::InternalError(status_or_client_encrypted_id.status().message());
     }
     std::string client_encrypted_id =
         status_or_client_encrypted_id.ValueOrDie();
@@ -126,7 +131,7 @@ PrivateMembershipRlweClient::CreateQueryRequest(
     auto status_or_server_encrypted_id =
         ec_cipher_->Decrypt(doubly_encrypted_id.doubly_encrypted_id());
     if (!status_or_server_encrypted_id.ok()) {
-      return status_or_server_encrypted_id.status();
+        return absl::InternalError(status_or_server_encrypted_id.status().message());
     }
     auto server_encrypted_id = status_or_server_encrypted_id.ValueOrDie();
 
