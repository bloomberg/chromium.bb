diff --git a/internal/encrypted_bucket_id_test.cc b/internal/encrypted_bucket_id_test.cc
index 5e658de..25fd8a4 100644
--- a/internal/encrypted_bucket_id_test.cc
+++ b/internal/encrypted_bucket_id_test.cc
@@ -113,7 +113,7 @@ TEST(EncryptedBucketIdTest, ToUint32Success) {
   ASSERT_OK_AND_ASSIGN(auto encrypted_bucket_id,
                        EncryptedBucketId::Create("\xFF\xFF\xFF\xFF", 32));
   ASSERT_OK_AND_ASSIGN(auto x, encrypted_bucket_id.ToUint32());
-  EXPECT_EQ(x, (int64{1} << 32) - 1);
+  EXPECT_EQ(x, (int64_t{1} << 32) - 1);
 }
 
 TEST(EncryptedBucketIdTest, EqualsFalse) {
diff --git a/internal/hashed_bucket_id_test.cc b/internal/hashed_bucket_id_test.cc
index 7a2b6bb..e29d739 100644
--- a/internal/hashed_bucket_id_test.cc
+++ b/internal/hashed_bucket_id_test.cc
@@ -36,7 +36,7 @@ private_membership::rlwe::PrivateMembershipRlweQuery::HashedBucketId
 ApiHashedBucketId(absl::string_view hashed_bucket_id, int bit_length) {
   private_membership::rlwe::PrivateMembershipRlweQuery::HashedBucketId
       api_hashed_bucket_id;
-  api_hashed_bucket_id.set_hashed_bucket_id(hashed_bucket_id);
+  api_hashed_bucket_id.set_hashed_bucket_id(std::string(hashed_bucket_id));
   api_hashed_bucket_id.set_bit_length(bit_length);
   return api_hashed_bucket_id;
 }
@@ -128,7 +128,7 @@ TEST(HashedBucketId, ToApiProto) {
       api_proto = ApiHashedBucketId("abcd", 32);
   ASSERT_OK_AND_ASSIGN(HashedBucketId id,
                        HashedBucketId::CreateFromApiProto(api_proto));
-  EXPECT_THAT(id.ToApiProto(), EqualsProto(api_proto));
+  EXPECT_EQ(id.ToApiProto().SerializeAsString(), api_proto.SerializeAsString());
 }
 
 TEST(HashedBucketIdTest, EqualsFalse) {
diff --git a/internal/utils.cc b/internal/utils.cc
index 27f1983..60844ef 100644
--- a/internal/utils.cc
+++ b/internal/utils.cc
@@ -46,8 +46,11 @@ namespace rlwe {
   }
   std::string bytes = std::string(in);
   bytes.resize(4);
-  uint32_t res =
-      (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3];
+  uint32_t res = (static_cast<unsigned char>(bytes[0]) << 24) |
+                 (static_cast<unsigned char>(bytes[1]) << 16) |
+                 (static_cast<unsigned char>(bytes[2]) << 8) |
+                 static_cast<unsigned char>(bytes[3]);
+
   return res >> (32 - bit_length);
 }
 
diff --git a/internal/utils_test.cc b/internal/utils_test.cc
index 08ac973..ad125e3 100644
--- a/internal/utils_test.cc
+++ b/internal/utils_test.cc
@@ -65,8 +65,11 @@ TEST(UtilsTest, TruncateAsUint32BitLengthExceed32) {
 }
 
 TEST(UtilsTest, TruncateAsUint32BitLengthExactly32) {
-  ASSERT_OK_AND_ASSIGN(auto x, TruncateAsUint32("\x01\x01\x01\xFF", 32));
-  EXPECT_EQ(x, 16843263);
+  ASSERT_OK_AND_ASSIGN(auto x1, TruncateAsUint32("\x01\x01\x01\xFF", 32));
+  EXPECT_EQ(x1, 16843263);
+        
+  ASSERT_OK_AND_ASSIGN(auto x2, TruncateAsUint32("\xFF\xFFx\xFF\xFF", 32));
+  EXPECT_EQ(x2, 4294932735LL);
 }
 
 TEST(UtilsTest, TruncateAsUint32BitLengthLessThan32) {
diff --git a/membership_response_map_test.cc b/membership_response_map_test.cc
index b58eaeb..210915f 100644
--- a/membership_response_map_test.cc
+++ b/membership_response_map_test.cc
@@ -28,8 +28,8 @@ using ::rlwe::testing::EqualsProto;
 RlwePlaintextId CreateRlwePlaintextId(absl::string_view non_sensitive_id,
                                       absl::string_view sensitive_id) {
   RlwePlaintextId id;
-  id.set_non_sensitive_id(non_sensitive_id);
-  id.set_sensitive_id(sensitive_id);
+  id.set_non_sensitive_id(std::string(non_sensitive_id));
+  id.set_sensitive_id(std::string(sensitive_id));
   return id;
 }
 
diff --git a/private_membership.proto b/private_membership.proto
index fe9e7b1..decbed4 100644
--- a/private_membership.proto
+++ b/private_membership.proto
@@ -14,6 +14,8 @@
 
 syntax = "proto3";
 
+option optimize_for = LITE_RUNTIME;
+
 package private_membership;
 
 // An enum describing different types of available hash functions.
diff --git a/private_membership_rlwe.proto b/private_membership_rlwe.proto
index 993c9cd..5c4abe7 100644
--- a/private_membership_rlwe.proto
+++ b/private_membership_rlwe.proto
@@ -14,6 +14,8 @@
 
 syntax = "proto3";
 
+option optimize_for = LITE_RUNTIME;
+
 package private_membership.rlwe;
 
 import "private_membership.proto";
