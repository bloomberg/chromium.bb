#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ float el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[2];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_float_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_8, thread float4* const tint_symbol_3) {
  float a = 0.0f;
  float b = 0.0f;
  float c = 0.0f;
  a = -1.0f;
  b = 1.700000048f;
  float const x_27 = a;
  float const x_28 = b;
  c = pow(x_27, x_28);
  float const x_30 = c;
  *(tint_symbol_3) = float4(x_30, x_30, x_30, x_30);
  float const x_32 = a;
  float const x_34 = b;
  if (((x_32 == -1.0f) && (x_34 == 1.700000048f))) {
    float const x_41 = x_8.x_GLF_uniform_float_values.arr[0].el;
    float const x_43 = x_8.x_GLF_uniform_float_values.arr[1].el;
    float const x_45 = x_8.x_GLF_uniform_float_values.arr[1].el;
    float const x_47 = x_8.x_GLF_uniform_float_values.arr[0].el;
    *(tint_symbol_3) = float4(x_41, x_43, x_45, x_47);
  } else {
    float const x_50 = x_8.x_GLF_uniform_float_values.arr[0].el;
    *(tint_symbol_3) = float4(x_50, x_50, x_50, x_50);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_8, thread float4* const tint_symbol_4) {
  main_1(x_8, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_8 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_8, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

