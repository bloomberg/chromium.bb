#include <metal_stdlib>

using namespace metal;
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(thread float4* const tint_symbol_3) {
  int j = 0;
  float a = 0.0f;
  j = 0;
  while (true) {
    int const x_6 = j;
    if ((x_6 < 2)) {
    } else {
      break;
    }
    int const x_7 = j;
    if ((x_7 < 1)) {
      *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
    }
    int const x_8 = j;
    if ((x_8 != 3)) {
      int const x_9 = j;
      if ((x_9 != 4)) {
        int const x_10 = j;
        if ((x_10 == 5)) {
          (*(tint_symbol_3)).x = ldexp(1.0f, 2);
        } else {
          a = ldexp(1.0f, 2);
          *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
        }
      }
    }
    {
      int const x_11 = j;
      j = as_type<int>((as_type<uint>(x_11) + as_type<uint>(1)));
    }
  }
  return;
}

main_out tint_symbol_inner(thread float4* const tint_symbol_4) {
  main_1(tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol() {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(&(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

