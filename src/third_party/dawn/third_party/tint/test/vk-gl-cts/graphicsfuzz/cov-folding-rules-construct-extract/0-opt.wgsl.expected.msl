#include <metal_stdlib>

using namespace metal;
struct buf0 {
  /* 0x0000 */ float2 twoandthree;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_6, thread float4* const tint_symbol_3) {
  float2 a = 0.0f;
  float2 b = 0.0f;
  bool x_46 = false;
  bool x_47_phi = false;
  float2 const x_32 = x_6.twoandthree;
  a = x_32;
  float const x_34 = a.x;
  float2 const x_35 = a;
  b = float2(x_34, clamp(x_35, float2(1.0f, 1.0f), float2(1.0f, 1.0f)).y);
  float const x_40 = b.x;
  bool const x_41 = (x_40 == 2.0f);
  x_47_phi = x_41;
  if (x_41) {
    float const x_45 = b.y;
    x_46 = (x_45 == 1.0f);
    x_47_phi = x_46;
  }
  bool const x_47 = x_47_phi;
  if (x_47) {
    *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  } else {
    *(tint_symbol_3) = float4(0.0f, 0.0f, 0.0f, 0.0f);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_6, thread float4* const tint_symbol_4) {
  main_1(x_6, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_6 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

