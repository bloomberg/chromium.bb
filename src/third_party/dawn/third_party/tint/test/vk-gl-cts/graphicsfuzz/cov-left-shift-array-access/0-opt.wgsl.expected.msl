#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[2];
};
struct buf1 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_int_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf1& x_6, thread float4* const tint_symbol_4) {
  int idx = 0;
  int a = 0;
  tint_array_wrapper indexable = {};
  int const x_27 = x_6.x_GLF_uniform_int_values.arr[1].el;
  idx = as_type<int>((as_type<uint>(1) << as_type<uint>(x_27)));
  int const x_30 = x_6.x_GLF_uniform_int_values.arr[1].el;
  int const x_32 = x_6.x_GLF_uniform_int_values.arr[0].el;
  int const x_34 = idx;
  tint_array_wrapper const tint_symbol_2 = {.arr={{.el=x_30}, {.el=x_32}}};
  indexable = tint_symbol_2;
  int const x_36 = indexable.arr[x_34].el;
  a = x_36;
  int const x_37 = a;
  int const x_39 = x_6.x_GLF_uniform_int_values.arr[0].el;
  if ((x_37 == x_39)) {
    int const x_45 = x_6.x_GLF_uniform_int_values.arr[0].el;
    int const x_48 = x_6.x_GLF_uniform_int_values.arr[1].el;
    int const x_51 = x_6.x_GLF_uniform_int_values.arr[1].el;
    int const x_54 = x_6.x_GLF_uniform_int_values.arr[0].el;
    *(tint_symbol_4) = float4(float(x_45), float(x_48), float(x_51), float(x_54));
  } else {
    int const x_58 = x_6.x_GLF_uniform_int_values.arr[1].el;
    float const x_59 = float(x_58);
    *(tint_symbol_4) = float4(x_59, x_59, x_59, x_59);
  }
  return;
}

main_out tint_symbol_inner(constant buf1& x_6, thread float4* const tint_symbol_5) {
  main_1(x_6, tint_symbol_5);
  main_out const tint_symbol_3 = {.x_GLF_color_1=*(tint_symbol_5)};
  return tint_symbol_3;
}

fragment tint_symbol_1 tint_symbol(constant buf1& x_6 [[buffer(0)]]) {
  thread float4 tint_symbol_6 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, &(tint_symbol_6));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

