#include <metal_stdlib>

using namespace metal;
struct buf0 {
  /* 0x0000 */ float one;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_5, thread float4* const tint_symbol_3) {
  bool x_30 = false;
  bool x_31_phi = false;
  *(tint_symbol_3) = float4(0.0f, 0.0f, 0.0f, 0.0f);
  float const x_23 = x_5.one;
  bool const x_24 = (x_23 < 0.0f);
  x_31_phi = x_24;
  if (!(x_24)) {
    float const x_29 = x_5.one;
    x_30 = (x_29 < 1.0f);
    x_31_phi = x_30;
  }
  bool const x_31 = x_31_phi;
  if (x_31) {
    return;
  }
  float const x_35 = x_5.one;
  if ((x_35 < 0.0f)) {
    while (true) {
      float const x_45 = x_5.one;
      if ((x_45 < 0.0f)) {
      } else {
        break;
      }
      *(tint_symbol_3) = float4(1.0f, 1.0f, 1.0f, 1.0f);
      break;
    }
  } else {
    *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_5, thread float4* const tint_symbol_4) {
  main_1(x_5, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_5 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_5, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

