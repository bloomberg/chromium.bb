#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[2];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_int_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_6, thread int* const tint_symbol_3, thread float4* const tint_symbol_4) {
  *(tint_symbol_3) = 0;
  int const x_27 = x_6.x_GLF_uniform_int_values.arr[0].el;
  switch(x_27) {
    case 0: {
      if (true) {
        int const x_34 = x_6.x_GLF_uniform_int_values.arr[1].el;
        float const x_35 = float(x_34);
        *(tint_symbol_4) = float4(x_35, x_35, x_35, x_35);
        return;
      }
      /* fallthrough */
    }
    case 1: {
      if (true) {
        int const x_40 = x_6.x_GLF_uniform_int_values.arr[0].el;
        int const x_43 = x_6.x_GLF_uniform_int_values.arr[1].el;
        int const x_46 = x_6.x_GLF_uniform_int_values.arr[1].el;
        int const x_49 = x_6.x_GLF_uniform_int_values.arr[0].el;
        *(tint_symbol_4) = float4(float(x_40), float(x_43), float(x_46), float(x_49));
        if (false) {
          int const x_55 = x_6.x_GLF_uniform_int_values.arr[0].el;
          float const x_56 = float(x_55);
          *(tint_symbol_4) = float4(x_56, x_56, x_56, x_56);
          while (true) {
            int const x_62 = *(tint_symbol_3);
            *(tint_symbol_3) = as_type<int>((as_type<uint>(x_62) + as_type<uint>(1)));
            if (false) {
              return;
            }
            if (true) {
              return;
            }
            {
              int const x_68 = *(tint_symbol_3);
              if ((x_68 < 100)) {
              } else {
                break;
              }
            }
          }
        }
      }
      break;
    }
    default: {
      break;
    }
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_6, thread int* const tint_symbol_5, thread float4* const tint_symbol_6) {
  main_1(x_6, tint_symbol_5, tint_symbol_6);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_6)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_6 [[buffer(0)]]) {
  thread int tint_symbol_7 = 0;
  thread float4 tint_symbol_8 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, &(tint_symbol_7), &(tint_symbol_8));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

