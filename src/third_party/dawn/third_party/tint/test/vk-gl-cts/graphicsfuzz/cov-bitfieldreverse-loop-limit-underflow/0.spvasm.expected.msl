#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[4];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_int_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_5, thread float4* const tint_symbol_3) {
  int x_28 = 0;
  int x_29 = 0;
  int x_28_phi = 0;
  int x_31_phi = 0;
  int x_42_phi = 0;
  int const x_24 = min(1, reverse_bits(1));
  int const x_26 = x_5.x_GLF_uniform_int_values.arr[3].el;
  x_28_phi = x_26;
  x_31_phi = 1;
  while (true) {
    int x_32 = 0;
    x_28 = x_28_phi;
    int const x_31 = x_31_phi;
    x_42_phi = x_28;
    if ((x_31 <= as_type<int>((as_type<uint>(x_24) - as_type<uint>(1))))) {
    } else {
      break;
    }
    x_29 = as_type<int>(as_type<int>((as_type<uint>(x_28) + as_type<uint>(as_type<int>(x_31)))));
    int const x_38 = x_5.x_GLF_uniform_int_values.arr[0].el;
    if ((x_38 == 1)) {
      x_42_phi = x_29;
      break;
    }
    {
      x_32 = as_type<int>((as_type<uint>(x_31) + as_type<uint>(1)));
      x_28_phi = x_29;
      x_31_phi = x_32;
    }
  }
  int const x_42 = x_42_phi;
  int const x_44 = x_5.x_GLF_uniform_int_values.arr[2].el;
  if ((x_42 == x_44)) {
    int const x_50 = x_5.x_GLF_uniform_int_values.arr[0].el;
    float const x_51 = float(x_50);
    int const x_53 = x_5.x_GLF_uniform_int_values.arr[1].el;
    float const x_54 = float(x_53);
    *(tint_symbol_3) = float4(x_51, x_54, x_54, x_51);
  } else {
    int const x_57 = x_5.x_GLF_uniform_int_values.arr[1].el;
    float const x_58 = float(x_57);
    *(tint_symbol_3) = float4(x_58, x_58, x_58, x_58);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_5, thread float4* const tint_symbol_4) {
  main_1(x_5, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_5 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_5, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

