#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[6];
};
struct buf1 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_int_values;
};
struct tint_padded_array_element_1 {
  /* 0x0000 */ float el;
  /* 0x0004 */ int8_t tint_pad_1[12];
};
struct tint_array_wrapper_1 {
  /* 0x0000 */ tint_padded_array_element_1 arr[1];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper_1 x_GLF_uniform_float_values;
};
struct tint_array_wrapper_2 {
  int arr[5];
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf1& x_6, constant buf0& x_12, thread float4* const tint_symbol_4, thread float4* const tint_symbol_5) {
  tint_array_wrapper_2 data = {};
  int a = 0;
  int i = 0;
  int j = 0;
  int i_1 = 0;
  int const x_45 = x_6.x_GLF_uniform_int_values.arr[0].el;
  int const x_48 = x_6.x_GLF_uniform_int_values.arr[5].el;
  int const x_51 = x_6.x_GLF_uniform_int_values.arr[5].el;
  int const x_54 = x_6.x_GLF_uniform_int_values.arr[0].el;
  *(tint_symbol_4) = float4(float(x_45), float(x_48), float(x_51), float(x_54));
  int const x_58 = x_6.x_GLF_uniform_int_values.arr[1].el;
  int const x_60 = x_6.x_GLF_uniform_int_values.arr[2].el;
  int const x_62 = x_6.x_GLF_uniform_int_values.arr[3].el;
  int const x_64 = x_6.x_GLF_uniform_int_values.arr[4].el;
  int const x_66 = x_6.x_GLF_uniform_int_values.arr[0].el;
  tint_array_wrapper_2 const tint_symbol_2 = {.arr={x_58, x_60, x_62, x_64, x_66}};
  data = tint_symbol_2;
  int const x_69 = x_6.x_GLF_uniform_int_values.arr[5].el;
  a = x_69;
  while (true) {
    int const x_74 = a;
    int const x_76 = x_6.x_GLF_uniform_int_values.arr[0].el;
    if ((x_74 < x_76)) {
    } else {
      break;
    }
    int const x_80 = x_6.x_GLF_uniform_int_values.arr[5].el;
    i = x_80;
    while (true) {
      int const x_85 = i;
      int const x_87 = x_6.x_GLF_uniform_int_values.arr[1].el;
      if ((x_85 < x_87)) {
      } else {
        break;
      }
      int const x_90 = i;
      j = x_90;
      while (true) {
        int const x_95 = j;
        int const x_97 = x_6.x_GLF_uniform_int_values.arr[1].el;
        if ((x_95 < x_97)) {
        } else {
          break;
        }
        int const x_100 = i;
        int const x_102 = data.arr[x_100];
        int const x_103 = j;
        int const x_105 = data.arr[x_103];
        if ((x_102 < x_105)) {
          int const x_110 = x_6.x_GLF_uniform_int_values.arr[5].el;
          float const x_111 = float(x_110);
          *(tint_symbol_4) = float4(x_111, x_111, x_111, x_111);
        }
        {
          int const x_113 = j;
          j = as_type<int>((as_type<uint>(x_113) + as_type<uint>(1)));
        }
      }
      {
        int const x_115 = i;
        i = as_type<int>((as_type<uint>(x_115) + as_type<uint>(1)));
      }
    }
    {
      int const x_117 = a;
      a = as_type<int>((as_type<uint>(x_117) + as_type<uint>(1)));
    }
  }
  while (true) {
    float const x_124 = (*(tint_symbol_5)).x;
    float const x_126 = x_12.x_GLF_uniform_float_values.arr[0].el;
    if ((x_124 < x_126)) {
    } else {
      break;
    }
    int const x_130 = x_6.x_GLF_uniform_int_values.arr[5].el;
    i_1 = x_130;
    while (true) {
      int const x_135 = i_1;
      int const x_137 = x_6.x_GLF_uniform_int_values.arr[0].el;
      if ((x_135 < x_137)) {
      } else {
        break;
      }
      int const x_141 = x_6.x_GLF_uniform_int_values.arr[5].el;
      float const x_142 = float(x_141);
      *(tint_symbol_4) = float4(x_142, x_142, x_142, x_142);
      {
        int const x_144 = i_1;
        i_1 = as_type<int>((as_type<uint>(x_144) + as_type<uint>(1)));
      }
    }
  }
  return;
}

main_out tint_symbol_inner(constant buf1& x_6, constant buf0& x_12, float4 gl_FragCoord_param, thread float4* const tint_symbol_6, thread float4* const tint_symbol_7) {
  *(tint_symbol_6) = gl_FragCoord_param;
  main_1(x_6, x_12, tint_symbol_7, tint_symbol_6);
  main_out const tint_symbol_3 = {.x_GLF_color_1=*(tint_symbol_7)};
  return tint_symbol_3;
}

fragment tint_symbol_1 tint_symbol(float4 gl_FragCoord_param [[position]], constant buf1& x_6 [[buffer(0)]], constant buf0& x_12 [[buffer(1)]]) {
  thread float4 tint_symbol_8 = 0.0f;
  thread float4 tint_symbol_9 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, x_12, gl_FragCoord_param, &(tint_symbol_8), &(tint_symbol_9));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

