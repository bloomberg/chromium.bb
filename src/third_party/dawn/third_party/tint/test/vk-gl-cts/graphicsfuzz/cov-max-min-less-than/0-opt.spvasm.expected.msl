#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[2];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_int_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_7, thread float4* const tint_symbol_3, thread float4* const tint_symbol_4) {
  int a = 0;
  float const x_30 = (*(tint_symbol_3)).x;
  a = max(1, min(1, int(x_30)));
  int const x_34 = a;
  if ((x_34 < 2)) {
    int const x_40 = x_7.x_GLF_uniform_int_values.arr[0].el;
    int const x_43 = x_7.x_GLF_uniform_int_values.arr[0].el;
    int const x_46 = x_7.x_GLF_uniform_int_values.arr[1].el;
    *(tint_symbol_4) = float4(1.0f, float(x_40), float(x_43), float(x_46));
  } else {
    int const x_50 = x_7.x_GLF_uniform_int_values.arr[1].el;
    float const x_51 = float(x_50);
    *(tint_symbol_4) = float4(x_51, x_51, x_51, x_51);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_7, float4 gl_FragCoord_param, thread float4* const tint_symbol_5, thread float4* const tint_symbol_6) {
  *(tint_symbol_5) = gl_FragCoord_param;
  main_1(x_7, tint_symbol_5, tint_symbol_6);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_6)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(float4 gl_FragCoord_param [[position]], constant buf0& x_7 [[buffer(0)]]) {
  thread float4 tint_symbol_7 = 0.0f;
  thread float4 tint_symbol_8 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_7, gl_FragCoord_param, &(tint_symbol_7), &(tint_symbol_8));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

