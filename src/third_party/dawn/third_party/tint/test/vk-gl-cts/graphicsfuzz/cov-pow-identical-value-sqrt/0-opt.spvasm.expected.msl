#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ float el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[2];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_float_values;
};
struct buf2 {
  /* 0x0000 */ float one;
};
struct tint_padded_array_element_1 {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad_1[12];
};
struct tint_array_wrapper_1 {
  /* 0x0000 */ tint_padded_array_element_1 arr[2];
};
struct buf1 {
  /* 0x0000 */ tint_array_wrapper_1 x_GLF_uniform_int_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_6, constant buf2& x_11, constant buf1& x_13, thread float4* const tint_symbol_3) {
  float f0 = 0.0f;
  float f1 = 0.0f;
  float f2 = 0.0f;
  float f3 = 0.0f;
  float const x_36 = x_6.x_GLF_uniform_float_values.arr[0].el;
  f0 = x_36;
  float const x_38 = x_6.x_GLF_uniform_float_values.arr[1].el;
  float const x_39 = f0;
  f1 = (x_38 * pow(x_39, 4.0f));
  float const x_43 = x_6.x_GLF_uniform_float_values.arr[1].el;
  float const x_44 = f0;
  f2 = (x_43 * pow(x_44, 4.0f));
  float const x_47 = f1;
  float const x_48 = f2;
  float const x_51 = x_11.one;
  float const x_53 = f0;
  f3 = sqrt((((x_47 - x_48) - x_51) + x_53));
  float const x_56 = f3;
  int const x_59 = x_13.x_GLF_uniform_int_values.arr[0].el;
  if ((int(x_56) == x_59)) {
    int const x_65 = x_13.x_GLF_uniform_int_values.arr[0].el;
    int const x_68 = x_13.x_GLF_uniform_int_values.arr[1].el;
    int const x_71 = x_13.x_GLF_uniform_int_values.arr[1].el;
    int const x_74 = x_13.x_GLF_uniform_int_values.arr[0].el;
    *(tint_symbol_3) = float4(float(x_65), float(x_68), float(x_71), float(x_74));
  } else {
    int const x_78 = x_13.x_GLF_uniform_int_values.arr[1].el;
    float const x_79 = float(x_78);
    *(tint_symbol_3) = float4(x_79, x_79, x_79, x_79);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_6, constant buf2& x_11, constant buf1& x_13, thread float4* const tint_symbol_4) {
  main_1(x_6, x_11, x_13, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_6 [[buffer(0)]], constant buf2& x_11 [[buffer(1)]], constant buf1& x_13 [[buffer(2)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, x_11, x_13, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

