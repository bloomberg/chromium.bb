#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ float el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[2];
};
struct buf1 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_float_values;
};
struct tint_padded_array_element_1 {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad_1[12];
};
struct tint_array_wrapper_1 {
  /* 0x0000 */ tint_padded_array_element_1 arr[2];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper_1 x_GLF_uniform_int_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf1& x_7, constant buf0& x_9, thread float4* const tint_symbol_3, thread float4* const tint_symbol_4) {
  float f = 0.0f;
  float const x_35 = (*(tint_symbol_3)).y;
  float const x_37 = x_7.x_GLF_uniform_float_values.arr[1].el;
  f = fract(trunc(select(1.0f, 0.100000001f, (x_35 < x_37))));
  float const x_42 = f;
  float const x_44 = x_7.x_GLF_uniform_float_values.arr[0].el;
  if ((x_42 == x_44)) {
    int const x_50 = x_9.x_GLF_uniform_int_values.arr[0].el;
    int const x_53 = x_9.x_GLF_uniform_int_values.arr[1].el;
    int const x_56 = x_9.x_GLF_uniform_int_values.arr[1].el;
    int const x_59 = x_9.x_GLF_uniform_int_values.arr[0].el;
    *(tint_symbol_4) = float4(float(x_50), float(x_53), float(x_56), float(x_59));
  } else {
    int const x_63 = x_9.x_GLF_uniform_int_values.arr[1].el;
    float const x_64 = float(x_63);
    *(tint_symbol_4) = float4(x_64, x_64, x_64, x_64);
  }
  return;
}

main_out tint_symbol_inner(constant buf1& x_7, constant buf0& x_9, float4 gl_FragCoord_param, thread float4* const tint_symbol_5, thread float4* const tint_symbol_6) {
  *(tint_symbol_5) = gl_FragCoord_param;
  main_1(x_7, x_9, tint_symbol_5, tint_symbol_6);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_6)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(float4 gl_FragCoord_param [[position]], constant buf1& x_7 [[buffer(0)]], constant buf0& x_9 [[buffer(1)]]) {
  thread float4 tint_symbol_7 = 0.0f;
  thread float4 tint_symbol_8 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_7, x_9, gl_FragCoord_param, &(tint_symbol_7), &(tint_symbol_8));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

