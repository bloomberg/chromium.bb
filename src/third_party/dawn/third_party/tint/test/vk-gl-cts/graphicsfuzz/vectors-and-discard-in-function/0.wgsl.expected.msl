#include <metal_stdlib>

using namespace metal;
struct tint_array_wrapper {
  float arr[1];
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

int func_() {
  float2 coord = 0.0f;
  float tmp3 = 0.0f;
  tint_array_wrapper tmp2 = {};
  float4 tmp = 0.0f;
  float x_48 = 0.0f;
  coord = float2(1.0f, 1.0f);
  float const x_41 = coord.y;
  if ((int(x_41) < 180)) {
    x_48 = tmp2.arr[0];
    tmp3 = x_48;
  } else {
    discard_fragment();
  }
  tmp = float4(x_48, x_48, x_48, x_48);
  return 1;
}

void main_1(thread float4* const tint_symbol_3) {
  int const x_9 = func_();
  if ((x_9 == 1)) {
    *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  } else {
    *(tint_symbol_3) = float4(0.0f, 0.0f, 0.0f, 1.0f);
  }
  return;
}

main_out tint_symbol_inner(thread float4* const tint_symbol_4) {
  main_1(tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol() {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(&(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

