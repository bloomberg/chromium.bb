#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ float el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[2];
};
struct buf1 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_float_values;
};
struct buf2 {
  /* 0x0000 */ int zero;
};
struct tint_padded_array_element_1 {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad_1[12];
};
struct tint_array_wrapper_1 {
  /* 0x0000 */ tint_padded_array_element_1 arr[2];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper_1 x_GLF_uniform_int_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf1& x_6, constant buf2& x_8, constant buf0& x_10, thread float4* const tint_symbol_3) {
  float f = 0.0f;
  bool x_48 = false;
  bool x_49_phi = false;
  float const x_33 = x_6.x_GLF_uniform_float_values.arr[1].el;
  f = pow(-(x_33), sinh(1.0f));
  float const x_37 = f;
  float const x_39 = x_6.x_GLF_uniform_float_values.arr[0].el;
  bool const x_40 = (x_37 == x_39);
  x_49_phi = x_40;
  if (!(x_40)) {
    int const x_45 = x_8.zero;
    int const x_47 = x_10.x_GLF_uniform_int_values.arr[0].el;
    x_48 = (x_45 == x_47);
    x_49_phi = x_48;
  }
  bool const x_49 = x_49_phi;
  if (x_49) {
    int const x_54 = x_10.x_GLF_uniform_int_values.arr[1].el;
    int const x_57 = x_10.x_GLF_uniform_int_values.arr[0].el;
    int const x_60 = x_10.x_GLF_uniform_int_values.arr[0].el;
    int const x_63 = x_10.x_GLF_uniform_int_values.arr[1].el;
    *(tint_symbol_3) = float4(float(x_54), float(x_57), float(x_60), float(x_63));
  } else {
    int const x_67 = x_10.x_GLF_uniform_int_values.arr[0].el;
    float const x_68 = float(x_67);
    *(tint_symbol_3) = float4(x_68, x_68, x_68, x_68);
  }
  return;
}

main_out tint_symbol_inner(constant buf1& x_6, constant buf2& x_8, constant buf0& x_10, thread float4* const tint_symbol_4) {
  main_1(x_6, x_8, x_10, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf1& x_6 [[buffer(0)]], constant buf2& x_8 [[buffer(1)]], constant buf0& x_10 [[buffer(2)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, x_8, x_10, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

