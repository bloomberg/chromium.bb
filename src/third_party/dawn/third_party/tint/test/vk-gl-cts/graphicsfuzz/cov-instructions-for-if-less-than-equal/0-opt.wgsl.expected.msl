#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[2];
};
struct buf1 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_int_values;
};
struct tint_padded_array_element_1 {
  /* 0x0000 */ float el;
  /* 0x0004 */ int8_t tint_pad_1[12];
};
struct tint_array_wrapper_1 {
  /* 0x0000 */ tint_padded_array_element_1 arr[2];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper_1 x_GLF_uniform_float_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf1& x_5, constant buf0& x_8, thread float4* const tint_symbol_3) {
  int i = 0;
  int const x_29 = x_5.x_GLF_uniform_int_values.arr[0].el;
  float const x_30 = float(x_29);
  *(tint_symbol_3) = float4(x_30, x_30, x_30, x_30);
  int const x_33 = x_5.x_GLF_uniform_int_values.arr[0].el;
  i = x_33;
  while (true) {
    int const x_38 = i;
    int const x_40 = x_5.x_GLF_uniform_int_values.arr[1].el;
    if ((x_38 < x_40)) {
    } else {
      break;
    }
    float const x_44 = x_8.x_GLF_uniform_float_values.arr[1].el;
    int const x_45 = i;
    if (!((x_44 <= float(x_45)))) {
      float const x_52 = x_8.x_GLF_uniform_float_values.arr[0].el;
      int const x_53 = i;
      int const x_55 = i;
      float const x_58 = x_8.x_GLF_uniform_float_values.arr[0].el;
      float4 const x_60 = *(tint_symbol_3);
      *(tint_symbol_3) = (x_60 + float4(x_52, float(x_53), float(x_55), x_58));
    }
    {
      int const x_62 = i;
      i = as_type<int>((as_type<uint>(x_62) + as_type<uint>(1)));
    }
  }
  return;
}

main_out tint_symbol_inner(constant buf1& x_5, constant buf0& x_8, thread float4* const tint_symbol_4) {
  main_1(x_5, x_8, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf1& x_5 [[buffer(0)]], constant buf0& x_8 [[buffer(1)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_5, x_8, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

