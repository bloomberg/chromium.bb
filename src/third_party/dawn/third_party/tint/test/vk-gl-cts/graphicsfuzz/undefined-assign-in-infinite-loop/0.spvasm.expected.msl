#include <metal_stdlib>

using namespace metal;
struct buf0 {
  /* 0x0000 */ float2 injectionSwitch;
};
struct tint_array_wrapper {
  int arr[1];
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_6, thread float4* const tint_symbol_3) {
  int GLF_dead6index = 0;
  int GLF_dead6currentNode = 0;
  tint_array_wrapper donor_replacementGLF_dead6tree = {};
  *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  GLF_dead6index = 0;
  float const x_34 = x_6.injectionSwitch.y;
  if ((x_34 < 0.0f)) {
    while (true) {
      if (true) {
      } else {
        break;
      }
      int const x_9 = GLF_dead6index;
      int const x_10 = donor_replacementGLF_dead6tree.arr[x_9];
      GLF_dead6currentNode = x_10;
      int const x_11 = GLF_dead6currentNode;
      GLF_dead6index = x_11;
    }
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_6, thread float4* const tint_symbol_4) {
  main_1(x_6, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_6 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

