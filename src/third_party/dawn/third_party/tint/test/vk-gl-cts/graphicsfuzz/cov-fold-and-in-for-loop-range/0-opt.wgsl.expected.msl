#include <metal_stdlib>

using namespace metal;
struct buf0 {
  /* 0x0000 */ int one;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

int func_(constant buf0& x_8) {
  int ret = 0;
  int i = 0;
  ret = 0;
  i = 3;
  while (true) {
    int const x_39 = i;
    int const x_40 = i;
    if ((x_39 > (x_40 & 1))) {
    } else {
      break;
    }
    int const x_44 = ret;
    ret = as_type<int>((as_type<uint>(x_44) + as_type<uint>(1)));
    {
      int const x_47 = x_8.one;
      int const x_48 = i;
      i = as_type<int>((as_type<uint>(x_48) - as_type<uint>(x_47)));
    }
  }
  int const x_50 = ret;
  return x_50;
}

void main_1(constant buf0& x_8, thread float4* const tint_symbol_3) {
  int const x_29 = func_(x_8);
  if ((x_29 == 2)) {
    *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  } else {
    *(tint_symbol_3) = float4(0.0f, 0.0f, 0.0f, 0.0f);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_8, thread float4* const tint_symbol_4) {
  main_1(x_8, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_8 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_8, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

