#include <metal_stdlib>

using namespace metal;
struct buf0 {
  /* 0x0000 */ int zero;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

float4 returnRed_(constant buf0& x_6) {
  bool x_33 = false;
  float4 x_34 = 0.0f;
  float4 x_48 = 0.0f;
  bool x_36_phi = false;
  float4 x_51_phi = 0.0f;
  x_36_phi = false;
  while (true) {
    float4 x_48_phi = 0.0f;
    bool x_49_phi = false;
    bool const x_36 = x_36_phi;
    while (true) {
      int const x_44 = x_6.zero;
      if ((x_44 == 1)) {
        x_33 = true;
        x_34 = float4(1.0f, 0.0f, 0.0f, 1.0f);
        x_48_phi = float4(1.0f, 0.0f, 0.0f, 1.0f);
        x_49_phi = true;
        break;
      }
      {
        x_48_phi = float4(0.0f, 0.0f, 0.0f, 0.0f);
        x_49_phi = false;
        if (false) {
        } else {
          break;
        }
      }
    }
    x_48 = x_48_phi;
    bool const x_49 = x_49_phi;
    x_51_phi = x_48;
    if (x_49) {
      break;
    }
    x_33 = true;
    x_34 = float4(1.0f, 0.0f, 0.0f, 1.0f);
    x_51_phi = float4(1.0f, 0.0f, 0.0f, 1.0f);
    break;
    {
      x_36_phi = false;
    }
  }
  float4 const x_51 = x_51_phi;
  return x_51;
}

void main_1(constant buf0& x_6, thread float4* const tint_symbol_3) {
  while (true) {
    float4 const x_30 = returnRed_(x_6);
    *(tint_symbol_3) = x_30;
    if (false) {
    } else {
      break;
    }
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_6, thread float4* const tint_symbol_4) {
  main_1(x_6, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_6 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

