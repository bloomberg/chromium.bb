#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[4];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_int_values;
};
struct buf1 {
  /* 0x0000 */ int zero;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_5, constant buf1& x_7, thread float4* const tint_symbol_3) {
  int const x_28 = x_5.x_GLF_uniform_int_values.arr[0].el;
  int const x_31 = x_5.x_GLF_uniform_int_values.arr[1].el;
  int const x_34 = x_5.x_GLF_uniform_int_values.arr[1].el;
  int const x_37 = x_5.x_GLF_uniform_int_values.arr[0].el;
  *(tint_symbol_3) = float4(float(x_28), float(x_31), float(x_34), float(x_37));
  while (true) {
    int const x_45 = x_7.zero;
    int const x_47 = x_5.x_GLF_uniform_int_values.arr[0].el;
    if ((x_45 == x_47)) {
      {
        if (false) {
        } else {
          break;
        }
      }
      continue;
    }
    int const x_52 = x_7.zero;
    int const x_54 = x_5.x_GLF_uniform_int_values.arr[2].el;
    if ((x_52 == x_54)) {
      break;
    }
    int const x_59 = x_7.zero;
    int const x_61 = x_5.x_GLF_uniform_int_values.arr[3].el;
    if ((x_59 == x_61)) {
      discard_fragment();
    }
    return;
    {
      if (false) {
      } else {
        break;
      }
    }
  }
  int const x_66 = x_5.x_GLF_uniform_int_values.arr[1].el;
  float const x_67 = float(x_66);
  *(tint_symbol_3) = float4(x_67, x_67, x_67, x_67);
  return;
}

main_out tint_symbol_inner(constant buf0& x_5, constant buf1& x_7, thread float4* const tint_symbol_4) {
  main_1(x_5, x_7, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_5 [[buffer(0)]], constant buf1& x_7 [[buffer(1)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_5, x_7, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

