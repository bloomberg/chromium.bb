#include <metal_stdlib>

using namespace metal;
struct buf0 {
  /* 0x0000 */ float two;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

float func_vf2_(constant buf0& x_7, thread float2* const v) {
  float const x_42 = x_7.two;
  (*(v)).x = x_42;
  float const x_45 = (*(v)).y;
  if ((x_45 < 1.0f)) {
    return 1.0f;
  }
  return 5.0f;
}

void main_1(constant buf0& x_7, thread float4* const tint_symbol_3) {
  float f = 0.0f;
  float2 param = 0.0f;
  param = float2(1.0f, 1.0f);
  float const x_34 = func_vf2_(x_7, &(param));
  f = x_34;
  float const x_35 = f;
  if ((x_35 == 5.0f)) {
    *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  } else {
    *(tint_symbol_3) = float4(0.0f, 0.0f, 0.0f, 0.0f);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_7, thread float4* const tint_symbol_4) {
  main_1(x_7, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_7 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_7, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

