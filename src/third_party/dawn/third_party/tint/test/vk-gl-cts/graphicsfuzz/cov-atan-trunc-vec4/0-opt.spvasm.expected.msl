#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[2];
};
struct buf1 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_int_values;
};
struct tint_padded_array_element_1 {
  /* 0x0000 */ float el;
  /* 0x0004 */ int8_t tint_pad_1[12];
};
struct tint_array_wrapper_1 {
  /* 0x0000 */ tint_padded_array_element_1 arr[2];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper_1 x_GLF_uniform_float_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf1& x_6, constant buf0& x_9, thread float4* const tint_symbol_3) {
  float4 v = 0.0f;
  float f = 0.0f;
  bool x_56 = false;
  bool x_57_phi = false;
  int const x_32 = x_6.x_GLF_uniform_int_values.arr[0].el;
  int const x_35 = x_6.x_GLF_uniform_int_values.arr[0].el;
  int const x_38 = x_6.x_GLF_uniform_int_values.arr[0].el;
  v = float4(float(x_32), float(x_35), -621.596008301f, float(x_38));
  float4 const x_41 = v;
  f = atan(trunc(x_41)).z;
  float const x_45 = f;
  float const x_47 = x_9.x_GLF_uniform_float_values.arr[0].el;
  bool const x_49 = (x_45 > -(x_47));
  x_57_phi = x_49;
  if (x_49) {
    float const x_52 = f;
    float const x_54 = x_9.x_GLF_uniform_float_values.arr[1].el;
    x_56 = (x_52 < -(x_54));
    x_57_phi = x_56;
  }
  bool const x_57 = x_57_phi;
  if (x_57) {
    int const x_62 = x_6.x_GLF_uniform_int_values.arr[1].el;
    int const x_65 = x_6.x_GLF_uniform_int_values.arr[0].el;
    int const x_68 = x_6.x_GLF_uniform_int_values.arr[0].el;
    int const x_71 = x_6.x_GLF_uniform_int_values.arr[1].el;
    *(tint_symbol_3) = float4(float(x_62), float(x_65), float(x_68), float(x_71));
  } else {
    int const x_75 = x_6.x_GLF_uniform_int_values.arr[0].el;
    float const x_76 = float(x_75);
    *(tint_symbol_3) = float4(x_76, x_76, x_76, x_76);
  }
  return;
}

main_out tint_symbol_inner(constant buf1& x_6, constant buf0& x_9, thread float4* const tint_symbol_4) {
  main_1(x_6, x_9, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf1& x_6 [[buffer(0)]], constant buf0& x_9 [[buffer(1)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, x_9, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

