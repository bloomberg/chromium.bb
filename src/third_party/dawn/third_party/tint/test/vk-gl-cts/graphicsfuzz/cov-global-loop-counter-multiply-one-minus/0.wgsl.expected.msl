#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[2];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_int_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_5, thread float4* const tint_symbol_3) {
  int x_23 = 0;
  int x_27 = 0;
  int x_37 = 0;
  int x_23_phi = 0;
  int x_45_phi = 0;
  x_23_phi = 0;
  while (true) {
    int x_24 = 0;
    x_23 = x_23_phi;
    x_27 = x_5.x_GLF_uniform_int_values.arr[1].el;
    if ((x_23 < as_type<int>((as_type<uint>(100) - as_type<uint>(as_type<int>(x_27)))))) {
    } else {
      break;
    }
    {
      x_24 = as_type<int>(as_type<int>((as_type<uint>(x_23) + as_type<uint>(as_type<int>(1)))));
      x_23_phi = x_24;
    }
  }
  int x_37_phi = 0;
  int x_40_phi = 0;
  int const x_32 = x_5.x_GLF_uniform_int_values.arr[0].el;
  x_45_phi = 1;
  if ((x_32 == 0)) {
    x_37_phi = 1;
    x_40_phi = x_23;
    while (true) {
      int x_41 = 0;
      int x_38 = 0;
      x_37 = x_37_phi;
      int const x_40 = x_40_phi;
      if ((x_40 < 100)) {
      } else {
        break;
      }
      {
        x_41 = as_type<int>((as_type<uint>(x_40) + as_type<uint>(1)));
        x_38 = as_type<int>(as_type<int>((as_type<uint>(x_37) * as_type<uint>(as_type<int>(as_type<int>((as_type<uint>(1) - as_type<uint>(as_type<int>(x_37)))))))));
        x_37_phi = x_38;
        x_40_phi = x_41;
      }
    }
    x_45_phi = x_37;
  }
  int const x_45 = x_45_phi;
  if ((x_45 == x_32)) {
    float const x_50 = float(x_27);
    float const x_51 = float(x_32);
    *(tint_symbol_3) = float4(x_50, x_51, x_51, x_50);
  } else {
    float const x_53 = float(x_32);
    *(tint_symbol_3) = float4(x_53, x_53, x_53, x_53);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_5, thread float4* const tint_symbol_4) {
  main_1(x_5, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_5 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_5, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

