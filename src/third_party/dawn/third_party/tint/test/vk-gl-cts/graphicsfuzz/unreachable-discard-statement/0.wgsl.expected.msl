#include <metal_stdlib>

using namespace metal;
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

float3 mand_() {
  bool x_40 = false;
  float3 x_41 = 0.0f;
  int k = 0;
  while (true) {
    k = 0;
    while (true) {
      int const x_7 = k;
      if ((x_7 < 1000)) {
      } else {
        break;
      }
      x_40 = true;
      x_41 = float3(1.0f, 1.0f, 1.0f);
      break;
    }
    bool const x_50 = x_40;
    if (x_50) {
      break;
    }
    discard_fragment();
  }
  float3 const x_52 = x_41;
  return x_52;
}

void main_1(thread float4* const tint_symbol_3) {
  int i = 0;
  *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  i = 0;
  while (true) {
    int const x_8 = i;
    if ((x_8 < 4)) {
    } else {
      break;
    }
    {
      float3 const x_38 = mand_();
      int const x_9 = i;
      i = as_type<int>((as_type<uint>(x_9) + as_type<uint>(1)));
    }
  }
  return;
}

main_out tint_symbol_inner(thread float4* const tint_symbol_4) {
  main_1(tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol() {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(&(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

