#include <metal_stdlib>

using namespace metal;
struct buf0 {
  /* 0x0000 */ int one;
};
struct buf1 {
  /* 0x0000 */ int zero;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_6, constant buf1& x_9, thread float4* const tint_symbol_3) {
  int i = 0;
  float4 v = 0.0f;
  *(tint_symbol_3) = float4(0.0f, 0.0f, 0.0f, 0.0f);
  i = 0;
  while (true) {
    int const x_38 = i;
    int const x_40 = x_6.one;
    if ((x_38 < x_40)) {
    } else {
      break;
    }
    while (true) {
      int const x_48 = x_6.one;
      if ((x_48 == 1)) {
        *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
      }
      {
        if (false) {
        } else {
          break;
        }
      }
    }
    {
      int const x_52 = i;
      i = as_type<int>((as_type<uint>(x_52) + as_type<uint>(1)));
    }
  }
  int const x_55 = x_9.zero;
  v.y = float(x_55);
  float const x_59 = v.y;
  (*(tint_symbol_3)).y = x_59;
  return;
}

main_out tint_symbol_inner(constant buf0& x_6, constant buf1& x_9, thread float4* const tint_symbol_4) {
  main_1(x_6, x_9, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_6 [[buffer(0)]], constant buf1& x_9 [[buffer(1)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, x_9, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

