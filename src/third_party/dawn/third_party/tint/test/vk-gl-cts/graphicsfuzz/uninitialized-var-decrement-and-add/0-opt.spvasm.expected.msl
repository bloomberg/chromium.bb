#include <metal_stdlib>

using namespace metal;
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(thread float4* const tint_symbol_3, thread float4* const tint_symbol_4) {
  float x_30 = 0.0f;
  uint foo = 0u;
  *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  float const x_32 = (*(tint_symbol_4)).x;
  if ((x_32 > -1.0f)) {
    float const x_38 = (*(tint_symbol_3)).x;
    x_30 = x_38;
  } else {
    uint const x_6 = foo;
    uint const x_7 = (x_6 - as_type<uint>(1));
    foo = x_7;
    x_30 = float((178493u + x_7));
  }
  float const x_40 = x_30;
  (*(tint_symbol_3)).x = x_40;
  return;
}

main_out tint_symbol_inner(float4 gl_FragCoord_param, thread float4* const tint_symbol_5, thread float4* const tint_symbol_6) {
  *(tint_symbol_5) = gl_FragCoord_param;
  main_1(tint_symbol_6, tint_symbol_5);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_6)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(float4 gl_FragCoord_param [[position]]) {
  thread float4 tint_symbol_7 = 0.0f;
  thread float4 tint_symbol_8 = 0.0f;
  main_out const inner_result = tint_symbol_inner(gl_FragCoord_param, &(tint_symbol_7), &(tint_symbol_8));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

