#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[4];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_int_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_6, thread float4* const tint_symbol_3) {
  int a = 0;
  int b = 0;
  int c = 0;
  bool x_65 = false;
  bool x_66_phi = false;
  int const x_29 = x_6.x_GLF_uniform_int_values.arr[0].el;
  a = x_29;
  int const x_31 = x_6.x_GLF_uniform_int_values.arr[1].el;
  b = x_31;
  int const x_33 = x_6.x_GLF_uniform_int_values.arr[2].el;
  c = x_33;
  while (true) {
    int const x_38 = a;
    int const x_39 = b;
    if ((x_38 < x_39)) {
    } else {
      break;
    }
    int const x_42 = a;
    a = as_type<int>((as_type<uint>(x_42) + as_type<uint>(1)));
    int const x_44 = c;
    int const x_46 = x_6.x_GLF_uniform_int_values.arr[2].el;
    if ((x_44 == x_46)) {
      int const x_52 = x_6.x_GLF_uniform_int_values.arr[3].el;
      int const x_53 = c;
      c = as_type<int>((as_type<uint>(x_53) * as_type<uint>(x_52)));
    } else {
      if (true) {
        continue;
      }
    }
  }
  int const x_57 = a;
  int const x_58 = b;
  bool const x_59 = (x_57 == x_58);
  x_66_phi = x_59;
  if (x_59) {
    int const x_62 = c;
    int const x_64 = x_6.x_GLF_uniform_int_values.arr[3].el;
    x_65 = (x_62 == x_64);
    x_66_phi = x_65;
  }
  bool const x_66 = x_66_phi;
  if (x_66) {
    int const x_71 = x_6.x_GLF_uniform_int_values.arr[2].el;
    int const x_74 = x_6.x_GLF_uniform_int_values.arr[0].el;
    int const x_77 = x_6.x_GLF_uniform_int_values.arr[0].el;
    int const x_80 = x_6.x_GLF_uniform_int_values.arr[2].el;
    *(tint_symbol_3) = float4(float(x_71), float(x_74), float(x_77), float(x_80));
  } else {
    int const x_84 = x_6.x_GLF_uniform_int_values.arr[0].el;
    float const x_85 = float(x_84);
    *(tint_symbol_3) = float4(x_85, x_85, x_85, x_85);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_6, thread float4* const tint_symbol_4) {
  main_1(x_6, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_6 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

