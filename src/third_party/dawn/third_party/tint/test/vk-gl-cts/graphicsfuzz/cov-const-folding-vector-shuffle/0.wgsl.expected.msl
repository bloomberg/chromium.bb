#include <metal_stdlib>

using namespace metal;
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(thread float4* const tint_symbol_3) {
  float2 x_26 = 0.0f;
  bool x_39 = false;
  float2 x_26_phi = 0.0f;
  int x_5_phi = 0;
  bool x_40_phi = false;
  x_26_phi = float2(0.0f, 0.0f);
  x_5_phi = 2;
  while (true) {
    float2 x_27 = 0.0f;
    int x_4 = 0;
    x_26 = x_26_phi;
    int const x_5 = x_5_phi;
    if ((x_5 < 3)) {
    } else {
      break;
    }
    {
      float2 const x_32 = float2(1.0f, float(x_5));
      x_27 = float2(x_32.x, x_32.y);
      x_4 = as_type<int>((as_type<uint>(x_5) + as_type<uint>(1)));
      x_26_phi = x_27;
      x_5_phi = x_4;
    }
  }
  bool const x_34 = (x_26.x != 1.0f);
  x_40_phi = x_34;
  if (!(x_34)) {
    x_39 = (x_26.y != 2.0f);
    x_40_phi = x_39;
  }
  bool const x_40 = x_40_phi;
  if (x_40) {
    *(tint_symbol_3) = float4(0.0f, 0.0f, 0.0f, 0.0f);
  } else {
    *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  }
  return;
}

main_out tint_symbol_inner(thread float4* const tint_symbol_4) {
  main_1(tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol() {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(&(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

