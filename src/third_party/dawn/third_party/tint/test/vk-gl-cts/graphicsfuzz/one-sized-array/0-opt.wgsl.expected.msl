#include <metal_stdlib>

using namespace metal;
struct buf0 {
  /* 0x0000 */ int zero;
};
struct tint_array_wrapper {
  int arr[1];
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_5, thread float4* const tint_symbol_3) {
  tint_array_wrapper x_10 = {};
  tint_array_wrapper x_9 = {};
  int x_7 = 0;
  int x_11_phi = 0;
  int const x_6 = x_5.zero;
  x_9.arr[0] = x_6;
  tint_array_wrapper const x_37 = x_9;
  x_10 = x_37;
  x_7 = x_9.arr[0];
  switch(0u) {
    default: {
      *(tint_symbol_3) = float4(0.0f, 0.0f, 0.0f, 0.0f);
      int const x_8 = x_10.arr[0];
      if ((x_8 == as_type<int>(x_7))) {
        x_11_phi = 1;
        break;
      }
      x_11_phi = 2;
      break;
    }
  }
  int const x_11 = x_11_phi;
  if ((x_11 == 1)) {
    *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  } else {
    *(tint_symbol_3) = float4(0.0f, 0.0f, 0.0f, 0.0f);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_5, thread float4* const tint_symbol_4) {
  main_1(x_5, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_5 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_5, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

