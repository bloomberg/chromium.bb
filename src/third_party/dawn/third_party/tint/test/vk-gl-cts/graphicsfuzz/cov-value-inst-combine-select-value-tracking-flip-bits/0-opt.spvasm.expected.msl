#include <metal_stdlib>

using namespace metal;

int tint_unary_minus(const int v) {
  return select(-v, v, v == -2147483648);
}

struct tint_padded_array_element {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[3];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_int_values;
};
struct tint_array_wrapper_1 {
  int arr[2];
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_6, thread float4* const tint_symbol_3) {
  int i = 0;
  tint_array_wrapper_1 A = {};
  int a = 0;
  int const x_30 = x_6.x_GLF_uniform_int_values.arr[1].el;
  i = x_30;
  while (true) {
    int const x_35 = i;
    int const x_37 = x_6.x_GLF_uniform_int_values.arr[0].el;
    if ((x_35 < x_37)) {
    } else {
      break;
    }
    int const x_40 = i;
    int const x_41 = i;
    A.arr[x_40] = x_41;
    {
      int const x_43 = i;
      i = as_type<int>((as_type<uint>(x_43) + as_type<uint>(1)));
    }
  }
  int const x_46 = x_6.x_GLF_uniform_int_values.arr[1].el;
  int const x_48 = A.arr[x_46];
  int const x_51 = x_6.x_GLF_uniform_int_values.arr[2].el;
  int const x_53 = A.arr[x_51];
  a = min(~(x_48), ~(x_53));
  int const x_57 = x_6.x_GLF_uniform_int_values.arr[1].el;
  float const x_58 = float(x_57);
  *(tint_symbol_3) = float4(x_58, x_58, x_58, x_58);
  int const x_60 = a;
  int const x_62 = x_6.x_GLF_uniform_int_values.arr[0].el;
  if ((x_60 == tint_unary_minus(x_62))) {
    int const x_68 = x_6.x_GLF_uniform_int_values.arr[2].el;
    int const x_71 = x_6.x_GLF_uniform_int_values.arr[1].el;
    int const x_74 = x_6.x_GLF_uniform_int_values.arr[1].el;
    int const x_77 = x_6.x_GLF_uniform_int_values.arr[2].el;
    *(tint_symbol_3) = float4(float(x_68), float(x_71), float(x_74), float(x_77));
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_6, thread float4* const tint_symbol_4) {
  main_1(x_6, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_6 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

