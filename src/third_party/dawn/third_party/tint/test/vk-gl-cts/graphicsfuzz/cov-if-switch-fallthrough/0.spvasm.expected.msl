#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ float el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[2];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_float_values;
};
struct tint_padded_array_element_1 {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad_1[12];
};
struct tint_array_wrapper_1 {
  /* 0x0000 */ tint_padded_array_element_1 arr[2];
};
struct buf1 {
  /* 0x0000 */ tint_array_wrapper_1 x_GLF_uniform_int_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_6, constant buf1& x_8, thread float4* const tint_symbol_3, thread float4* const tint_symbol_4) {
  float const x_31 = x_6.x_GLF_uniform_float_values.arr[1].el;
  *(tint_symbol_3) = float4(x_31, x_31, x_31, x_31);
  float const x_34 = (*(tint_symbol_4)).y;
  float const x_36 = x_6.x_GLF_uniform_float_values.arr[0].el;
  if ((x_34 >= x_36)) {
    int const x_41 = x_8.x_GLF_uniform_int_values.arr[1].el;
    switch(x_41) {
      case 0:
      case 16: {
        int const x_45 = x_8.x_GLF_uniform_int_values.arr[0].el;
        float const x_46 = float(x_45);
        float const x_47 = float(x_41);
        *(tint_symbol_3) = float4(x_46, x_47, x_47, x_46);
        break;
      }
      default: {
        break;
      }
    }
  }
  int const x_50 = x_8.x_GLF_uniform_int_values.arr[1].el;
  int const x_52 = x_8.x_GLF_uniform_int_values.arr[0].el;
  if ((x_50 == x_52)) {
    *(tint_symbol_3) = float4(x_36, x_36, x_36, x_36);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_6, constant buf1& x_8, float4 gl_FragCoord_param, thread float4* const tint_symbol_5, thread float4* const tint_symbol_6) {
  *(tint_symbol_5) = gl_FragCoord_param;
  main_1(x_6, x_8, tint_symbol_6, tint_symbol_5);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_6)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(float4 gl_FragCoord_param [[position]], constant buf0& x_6 [[buffer(0)]], constant buf1& x_8 [[buffer(1)]]) {
  thread float4 tint_symbol_7 = 0.0f;
  thread float4 tint_symbol_8 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, x_8, gl_FragCoord_param, &(tint_symbol_7), &(tint_symbol_8));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

