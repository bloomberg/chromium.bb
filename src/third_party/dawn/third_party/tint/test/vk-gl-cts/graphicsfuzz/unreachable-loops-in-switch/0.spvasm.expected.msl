#include <metal_stdlib>

using namespace metal;
struct tint_array_wrapper {
  float arr[1];
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(thread float4* const tint_symbol_3) {
  int i = 0;
  tint_array_wrapper data = {};
  *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  i = 0;
  while (true) {
    int const x_6 = i;
    if ((x_6 < 1)) {
    } else {
      break;
    }
    int const x_7 = i;
    float const x_40 = data.arr[x_7];
    float const x_42 = data.arr[0];
    if ((x_40 < x_42)) {
      if (false) {
        int const x_8 = i;
        if ((float(x_8) >= 1.0f)) {
        }
      }
      switch(0) {
        case 1: {
          while (true) {
            if (true) {
            } else {
              break;
            }
          }
          while (true) {
          }
          /* fallthrough */
        }
        case 0: {
          data.arr[0] = 2.0f;
          break;
        }
        default: {
          break;
        }
      }
    }
    {
      int const x_9 = i;
      i = as_type<int>((as_type<uint>(x_9) + as_type<uint>(1)));
    }
  }
  return;
}

main_out tint_symbol_inner(thread float4* const tint_symbol_4) {
  main_1(tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol() {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(&(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

