#include <metal_stdlib>

using namespace metal;

int tint_unary_minus(const int v) {
  return select(-v, v, v == -2147483648);
}

struct tint_padded_array_element {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[4];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_int_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_6, thread float4* const tint_symbol_3) {
  int a = 0;
  int i = 0;
  int const x_27 = x_6.x_GLF_uniform_int_values.arr[1].el;
  a = x_27;
  int const x_29 = x_6.x_GLF_uniform_int_values.arr[3].el;
  i = tint_unary_minus(x_29);
  while (true) {
    int const x_35 = i;
    int const x_36 = as_type<int>((as_type<uint>(x_35) + as_type<uint>(1)));
    i = x_36;
    int const x_39 = x_6.x_GLF_uniform_int_values.arr[2].el;
    if ((reverse_bits(x_36) <= x_39)) {
    } else {
      break;
    }
    int const x_42 = a;
    a = as_type<int>((as_type<uint>(x_42) + as_type<uint>(1)));
  }
  int const x_44 = a;
  int const x_46 = x_6.x_GLF_uniform_int_values.arr[0].el;
  if ((x_44 == x_46)) {
    int const x_52 = x_6.x_GLF_uniform_int_values.arr[2].el;
    int const x_55 = x_6.x_GLF_uniform_int_values.arr[1].el;
    int const x_58 = x_6.x_GLF_uniform_int_values.arr[1].el;
    int const x_61 = x_6.x_GLF_uniform_int_values.arr[2].el;
    *(tint_symbol_3) = float4(float(x_52), float(x_55), float(x_58), float(x_61));
  } else {
    int const x_65 = x_6.x_GLF_uniform_int_values.arr[1].el;
    float const x_66 = float(x_65);
    *(tint_symbol_3) = float4(x_66, x_66, x_66, x_66);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_6, thread float4* const tint_symbol_4) {
  main_1(x_6, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_6 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

