#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[4];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_int_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_7, thread float4* const tint_symbol_3) {
  int a = 0;
  int sum = 0;
  int i = 0;
  a = 65536;
  int const x_29 = x_7.x_GLF_uniform_int_values.arr[0].el;
  sum = x_29;
  int const x_31 = x_7.x_GLF_uniform_int_values.arr[1].el;
  if ((1 == x_31)) {
    int const x_35 = a;
    a = as_type<int>((as_type<uint>(x_35) - as_type<uint>(1)));
  }
  i = 0;
  while (true) {
    int const x_41 = i;
    int const x_42 = a;
    if ((x_41 < x_42)) {
    } else {
      break;
    }
    int const x_45 = i;
    int const x_46 = sum;
    sum = as_type<int>((as_type<uint>(x_46) + as_type<uint>(x_45)));
    {
      int const x_49 = x_7.x_GLF_uniform_int_values.arr[2].el;
      int const x_50 = i;
      i = as_type<int>((as_type<uint>(x_50) + as_type<uint>(x_49)));
    }
  }
  int const x_52 = sum;
  int const x_54 = x_7.x_GLF_uniform_int_values.arr[3].el;
  if ((x_52 == x_54)) {
    int const x_60 = x_7.x_GLF_uniform_int_values.arr[1].el;
    int const x_63 = x_7.x_GLF_uniform_int_values.arr[0].el;
    int const x_66 = x_7.x_GLF_uniform_int_values.arr[0].el;
    int const x_69 = x_7.x_GLF_uniform_int_values.arr[1].el;
    *(tint_symbol_3) = float4(float(x_60), float(x_63), float(x_66), float(x_69));
  } else {
    int const x_73 = x_7.x_GLF_uniform_int_values.arr[0].el;
    float const x_74 = float(x_73);
    *(tint_symbol_3) = float4(x_74, x_74, x_74, x_74);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_7, thread float4* const tint_symbol_4) {
  main_1(x_7, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_7 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_7, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

