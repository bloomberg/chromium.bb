#include <metal_stdlib>

using namespace metal;
struct buf0 {
  /* 0x0000 */ float2 threeandfour;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_6, thread float4* const tint_symbol_3) {
  float4 v = 0.0f;
  v = float4(2.0f, 3.0f, 4.0f, 5.0f);
  float const x_40 = x_6.threeandfour.y;
  float2 const x_42 = select(float2(2.0f, 6.0f), float2(1.0f, x_40), bool2(true, false));
  float4 const x_43 = v;
  v = float4(x_42.x, x_42.y, x_43.z, x_43.w);
  float4 const x_45 = v;
  if (all((x_45 == float4(1.0f, 6.0f, 4.0f, 5.0f)))) {
    *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  } else {
    *(tint_symbol_3) = float4(0.0f, 0.0f, 0.0f, 0.0f);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_6, thread float4* const tint_symbol_4) {
  main_1(x_6, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_6 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

