#include <metal_stdlib>

using namespace metal;
struct tint_array_wrapper {
  int arr[2];
};
struct Array {
  tint_array_wrapper values;
};
struct buf0 {
  /* 0x0000 */ int zero;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_7, thread float4* const tint_symbol_3) {
  Array a = {};
  Array b = {};
  float one = 0.0f;
  int const x_10 = x_7.zero;
  a.values.arr[x_10] = 1;
  Array const x_35 = a;
  b = x_35;
  one = 0.0f;
  int const x_11 = x_7.zero;
  int const x_12 = b.values.arr[x_11];
  if ((x_12 == 1)) {
    one = 1.0f;
  }
  float const x_41 = one;
  *(tint_symbol_3) = float4(x_41, 0.0f, 0.0f, 1.0f);
  return;
}

main_out tint_symbol_inner(constant buf0& x_7, thread float4* const tint_symbol_4) {
  main_1(x_7, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_7 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_7, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

