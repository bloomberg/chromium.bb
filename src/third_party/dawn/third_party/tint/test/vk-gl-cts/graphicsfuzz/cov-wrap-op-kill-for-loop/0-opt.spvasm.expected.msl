#include <metal_stdlib>

using namespace metal;
struct buf0 {
  /* 0x0000 */ int zero;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void func_i1_(constant buf0& x_7, thread int* const x, thread float4* const tint_symbol_3) {
  int const x_41 = *(x);
  int const x_43 = x_7.zero;
  if ((x_41 < x_43)) {
    discard_fragment();
  }
  int const x_47 = *(x);
  if ((x_47 > 8)) {
    *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  } else {
    *(tint_symbol_3) = float4(0.0f, 0.0f, 0.0f, 0.0f);
  }
  return;
}

void main_1(constant buf0& x_7, thread float4* const tint_symbol_4) {
  int i = 0;
  int param = 0;
  int x_31_phi = 0;
  *(tint_symbol_4) = float4(0.0f, 0.0f, 0.0f, 0.0f);
  i = 0;
  x_31_phi = 0;
  while (true) {
    int const x_31 = x_31_phi;
    int const x_35 = x_7.zero;
    if ((x_31 < as_type<int>((as_type<uint>(10) + as_type<uint>(x_35))))) {
    } else {
      break;
    }
    {
      param = x_31;
      func_i1_(x_7, &(param), tint_symbol_4);
      int const x_32 = as_type<int>((as_type<uint>(x_31) + as_type<uint>(1)));
      i = x_32;
      x_31_phi = x_32;
    }
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_7, thread float4* const tint_symbol_5) {
  main_1(x_7, tint_symbol_5);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_5)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_7 [[buffer(0)]]) {
  thread float4 tint_symbol_6 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_7, &(tint_symbol_6));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

