#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ float el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[3];
};
struct buf1 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_float_values;
};
struct tint_padded_array_element_1 {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad_1[12];
};
struct tint_array_wrapper_1 {
  /* 0x0000 */ tint_padded_array_element_1 arr[2];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper_1 x_GLF_uniform_int_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf1& x_6, constant buf0& x_9, thread float4* const tint_symbol_3) {
  float2 v0 = 0.0f;
  float2 v1 = 0.0f;
  float const x_37 = x_6.x_GLF_uniform_float_values.arr[2].el;
  v0 = float2(x_37, 3.799999952f);
  float2 const x_39 = v0;
  float const x_43 = x_6.x_GLF_uniform_float_values.arr[1].el;
  v1 = clamp((x_39 - float2(1.0f, 1.0f)), float2(0.0f, 0.0f), float2(x_43, x_43));
  float2 const x_47 = v1;
  float const x_49 = x_6.x_GLF_uniform_float_values.arr[0].el;
  float const x_51 = x_6.x_GLF_uniform_float_values.arr[1].el;
  if (all((x_47 == float2(x_49, x_51)))) {
    int const x_59 = x_9.x_GLF_uniform_int_values.arr[0].el;
    int const x_62 = x_9.x_GLF_uniform_int_values.arr[1].el;
    int const x_65 = x_9.x_GLF_uniform_int_values.arr[1].el;
    int const x_68 = x_9.x_GLF_uniform_int_values.arr[0].el;
    *(tint_symbol_3) = float4(float(x_59), float(x_62), float(x_65), float(x_68));
  } else {
    int const x_72 = x_9.x_GLF_uniform_int_values.arr[1].el;
    float const x_73 = float(x_72);
    *(tint_symbol_3) = float4(x_73, x_73, x_73, x_73);
  }
  return;
}

main_out tint_symbol_inner(constant buf1& x_6, constant buf0& x_9, thread float4* const tint_symbol_4) {
  main_1(x_6, x_9, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf1& x_6 [[buffer(0)]], constant buf0& x_9 [[buffer(1)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, x_9, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

