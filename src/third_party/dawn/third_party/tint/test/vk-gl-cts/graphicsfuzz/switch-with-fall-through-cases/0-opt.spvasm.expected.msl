#include <metal_stdlib>

using namespace metal;
struct buf0 {
  /* 0x0000 */ float2 injectionSwitch;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_6, thread float4* const tint_symbol_3) {
  int i = 0;
  int value = 0;
  float y = 0.0f;
  int x_31_phi = 0;
  i = 0;
  x_31_phi = 0;
  while (true) {
    int const x_31 = x_31_phi;
    float const x_37 = x_6.injectionSwitch.x;
    if ((x_31 < as_type<int>((as_type<uint>(2) + as_type<uint>(int(x_37)))))) {
    } else {
      break;
    }
    float x_55_phi = 0.0f;
    float x_46_phi = 0.0f;
    value = x_31;
    y = 0.5f;
    x_55_phi = 0.5f;
    x_46_phi = 0.5f;
    switch(x_31) {
      case 0: {
        float const x_54 = (0.5f + 0.5f);
        y = x_54;
        x_55_phi = x_54;
        /* fallthrough */
      }
      case 1: {
        float const x_55 = x_55_phi;
        float const x_47 = clamp(1.0f, 0.5f, x_55);
        y = x_47;
        x_46_phi = x_47;
        /* fallthrough */
      }
      default: {
        /* fallthrough */
      }
      case 2: {
        float const x_46 = x_46_phi;
        if ((x_46 == 1.0f)) {
          *(tint_symbol_3) = float4(float(as_type<int>((as_type<uint>(x_31) + as_type<uint>(1)))), 0.0f, 0.0f, 1.0f);
          return;
        }
        break;
      }
    }
    {
      int const x_32 = as_type<int>((as_type<uint>(x_31) + as_type<uint>(1)));
      i = x_32;
      x_31_phi = x_32;
    }
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_6, thread float4* const tint_symbol_4) {
  main_1(x_6, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_6 [[buffer(0)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

