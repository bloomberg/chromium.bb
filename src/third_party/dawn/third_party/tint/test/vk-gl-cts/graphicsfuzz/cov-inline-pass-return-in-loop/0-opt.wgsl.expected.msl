#include <metal_stdlib>

using namespace metal;
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

float func_() {
  int i = 0;
  i = 0;
  while (true) {
    int const x_35 = i;
    if ((x_35 < 10)) {
    } else {
      break;
    }
    int const x_38 = i;
    if ((x_38 > 5)) {
      int const x_42 = i;
      i = as_type<int>((as_type<uint>(x_42) + as_type<uint>(1)));
    }
    int const x_44 = i;
    if ((x_44 > 8)) {
      return 0.0f;
    }
    {
      int const x_48 = i;
      i = as_type<int>((as_type<uint>(x_48) + as_type<uint>(1)));
    }
  }
  return 1.0f;
}

void main_1(thread float4* const tint_symbol_3) {
  if (false) {
    float const x_28 = func_();
    *(tint_symbol_3) = float4(x_28, x_28, x_28, x_28);
  } else {
    *(tint_symbol_3) = float4(1.0f, 0.0f, 0.0f, 1.0f);
  }
  return;
}

main_out tint_symbol_inner(thread float4* const tint_symbol_4) {
  main_1(tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol() {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(&(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

