#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[3];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_int_values;
};
struct buf2 {
  /* 0x0000 */ float2 injectionSwitch;
};
struct tint_padded_array_element_1 {
  /* 0x0000 */ float el;
  /* 0x0004 */ int8_t tint_pad_1[12];
};
struct tint_array_wrapper_1 {
  /* 0x0000 */ tint_padded_array_element_1 arr[1];
};
struct buf1 {
  /* 0x0000 */ tint_array_wrapper_1 x_GLF_uniform_float_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_6, constant buf2& x_9, constant buf1& x_11, thread float4* const tint_symbol_3) {
  int a = 0;
  int i = 0;
  a = 1;
  int const x_38 = x_6.x_GLF_uniform_int_values.arr[0].el;
  int const x_41 = x_6.x_GLF_uniform_int_values.arr[1].el;
  int const x_44 = x_6.x_GLF_uniform_int_values.arr[1].el;
  int const x_47 = x_6.x_GLF_uniform_int_values.arr[0].el;
  *(tint_symbol_3) = float4(float(x_38), float(x_41), float(x_44), float(x_47));
  int const x_51 = x_6.x_GLF_uniform_int_values.arr[1].el;
  i = x_51;
  while (true) {
    int const x_56 = i;
    int const x_58 = x_6.x_GLF_uniform_int_values.arr[2].el;
    if ((x_56 < x_58)) {
    } else {
      break;
    }
    int const x_61 = a;
    a = as_type<int>((as_type<uint>(x_61) + as_type<uint>(1)));
    if ((x_61 > 3)) {
      break;
    }
    float const x_67 = x_9.injectionSwitch.x;
    float const x_69 = x_11.x_GLF_uniform_float_values.arr[0].el;
    if ((x_67 > x_69)) {
      discard_fragment();
    }
    {
      int const x_73 = i;
      i = as_type<int>((as_type<uint>(x_73) + as_type<uint>(1)));
    }
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_6, constant buf2& x_9, constant buf1& x_11, thread float4* const tint_symbol_4) {
  main_1(x_6, x_9, x_11, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_6 [[buffer(0)]], constant buf2& x_9 [[buffer(1)]], constant buf1& x_11 [[buffer(2)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, x_9, x_11, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

