#include <metal_stdlib>

using namespace metal;
struct tint_padded_array_element {
  /* 0x0000 */ float el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[2];
};
struct buf0 {
  /* 0x0000 */ tint_array_wrapper x_GLF_uniform_float_values;
};
struct tint_padded_array_element_1 {
  /* 0x0000 */ int el;
  /* 0x0004 */ int8_t tint_pad_1[12];
};
struct tint_array_wrapper_1 {
  /* 0x0000 */ tint_padded_array_element_1 arr[3];
};
struct buf1 {
  /* 0x0000 */ tint_array_wrapper_1 x_GLF_uniform_int_values;
};
struct main_out {
  float4 x_GLF_color_1;
};
struct tint_symbol_1 {
  float4 x_GLF_color_1 [[color(0)]];
};

void main_1(constant buf0& x_6, constant buf1& x_9, thread float4* const tint_symbol_3) {
  float f = 0.0f;
  int i = 0;
  float a = 0.0f;
  float const x_37 = x_6.x_GLF_uniform_float_values.arr[1].el;
  f = x_37;
  int const x_39 = x_9.x_GLF_uniform_int_values.arr[1].el;
  i = x_39;
  while (true) {
    int const x_44 = i;
    int const x_46 = x_9.x_GLF_uniform_int_values.arr[0].el;
    if ((x_44 > x_46)) {
    } else {
      break;
    }
    int const x_49 = i;
    a = (1.0f - fmax(1.0f, float(x_49)));
    float const x_53 = a;
    f = fmin(fmax(x_53, 0.0f), 0.0f);
    {
      int const x_56 = i;
      i = as_type<int>((as_type<uint>(x_56) - as_type<uint>(1)));
    }
  }
  float const x_58 = f;
  float const x_60 = x_6.x_GLF_uniform_float_values.arr[0].el;
  if ((x_58 == x_60)) {
    int const x_66 = x_9.x_GLF_uniform_int_values.arr[2].el;
    float const x_68 = f;
    int const x_70 = x_9.x_GLF_uniform_int_values.arr[0].el;
    *(tint_symbol_3) = float4(float(x_66), x_68, float(x_70), 1.0f);
  } else {
    *(tint_symbol_3) = float4(0.0f, 0.0f, 0.0f, 0.0f);
  }
  return;
}

main_out tint_symbol_inner(constant buf0& x_6, constant buf1& x_9, thread float4* const tint_symbol_4) {
  main_1(x_6, x_9, tint_symbol_4);
  main_out const tint_symbol_2 = {.x_GLF_color_1=*(tint_symbol_4)};
  return tint_symbol_2;
}

fragment tint_symbol_1 tint_symbol(constant buf0& x_6 [[buffer(0)]], constant buf1& x_9 [[buffer(1)]]) {
  thread float4 tint_symbol_5 = 0.0f;
  main_out const inner_result = tint_symbol_inner(x_6, x_9, &(tint_symbol_5));
  tint_symbol_1 wrapper_result = {};
  wrapper_result.x_GLF_color_1 = inner_result.x_GLF_color_1;
  return wrapper_result;
}

