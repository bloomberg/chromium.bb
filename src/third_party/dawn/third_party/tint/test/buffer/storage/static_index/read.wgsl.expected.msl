#include <metal_stdlib>

using namespace metal;

template<typename T, int N, int M>
inline auto operator*(matrix<T, N, M> lhs, packed_vec<T, N> rhs) {
  return lhs * vec<T, N>(rhs);
}

template<typename T, int N, int M>
inline auto operator*(packed_vec<T, M> lhs, matrix<T, N, M> rhs) {
  return vec<T, M>(lhs) * rhs;
}

struct Inner {
  /* 0x0000 */ int x;
};
struct tint_padded_array_element {
  /* 0x0000 */ Inner el;
  /* 0x0004 */ int8_t tint_pad[12];
};
struct tint_array_wrapper {
  /* 0x0000 */ tint_padded_array_element arr[4];
};
struct S {
  /* 0x0000 */ packed_int3 a;
  /* 0x000c */ int b;
  /* 0x0010 */ packed_uint3 c;
  /* 0x001c */ uint d;
  /* 0x0020 */ packed_float3 e;
  /* 0x002c */ float f;
  /* 0x0030 */ float2x3 g;
  /* 0x0050 */ float3x2 h;
  /* 0x0068 */ Inner i;
  /* 0x006c */ tint_array_wrapper j;
  /* 0x00ac */ int8_t tint_pad_1[4];
};

kernel void tint_symbol(const device S& s [[buffer(0)]]) {
  int3 const a = s.a;
  int const b = s.b;
  uint3 const c = s.c;
  uint const d = s.d;
  float3 const e = s.e;
  float const f = s.f;
  float2x3 const g = s.g;
  float3x2 const h = s.h;
  Inner const i = s.i;
  tint_array_wrapper const j = s.j;
  return;
}

