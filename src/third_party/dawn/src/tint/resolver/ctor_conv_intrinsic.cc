// Copyright 2021 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/intrinsic-gen
// using the template:
//   src/tint/resolver/ctor_conv_intrinsic.cc.tmpl
// and the intrinsic defintion file:
//   src/tint/intrinsics.def
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include "src/tint/resolver/ctor_conv_intrinsic.h"

namespace tint::resolver {

const char* str(CtorConvIntrinsic i) {
    switch (i) {
        case CtorConvIntrinsic::kNone:
            return "<none>";
        case CtorConvIntrinsic::kI32:
            return "i32";
        case CtorConvIntrinsic::kU32:
            return "u32";
        case CtorConvIntrinsic::kF32:
            return "f32";
        case CtorConvIntrinsic::kBool:
            return "bool";
        case CtorConvIntrinsic::kVec2:
            return "vec2";
        case CtorConvIntrinsic::kVec3:
            return "vec3";
        case CtorConvIntrinsic::kVec4:
            return "vec4";
        case CtorConvIntrinsic::kMat2x2:
            return "mat2x2";
        case CtorConvIntrinsic::kMat2x3:
            return "mat2x3";
        case CtorConvIntrinsic::kMat2x4:
            return "mat2x4";
        case CtorConvIntrinsic::kMat3x2:
            return "mat3x2";
        case CtorConvIntrinsic::kMat3x3:
            return "mat3x3";
        case CtorConvIntrinsic::kMat3x4:
            return "mat3x4";
        case CtorConvIntrinsic::kMat4x2:
            return "mat4x2";
        case CtorConvIntrinsic::kMat4x3:
            return "mat4x3";
        case CtorConvIntrinsic::kMat4x4:
            return "mat4x4";
    }
    return "<unknown>";
}

}  // namespace tint::resolver

