-*- buffer-read-only: t -*-

!!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
This file is built by ..\autodoc.pl extracting documentation from the C source
files.

=head1 NAME

perlintern - autogenerated documentation of purely B<internal>
		 Perl functions

=head1 DESCRIPTION
X<internal Perl functions> X<interpreter functions>

This file is the autogenerated documentation of functions in the
Perl interpreter that are documented using Perl's internal documentation
format but are not marked as part of the Perl API. In other words,
B<they are not for use in extensions>!


=head1 Compile-time scope hooks

=over 8

=item BhkENTRY
X<BhkENTRY>

Return an entry from the BHK structure. I<which> is a preprocessor token
indicating which entry to return. If the appropriate flag is not set
this will return NULL. The type of the return value depends on which
entry you ask for.

NOTE: this function is experimental and may change or be
removed without notice.

	void *	BhkENTRY(BHK *hk, which)

=for hackers
Found in file op.h

=item BhkFLAGS
X<BhkFLAGS>

Return the BHK's flags.

NOTE: this function is experimental and may change or be
removed without notice.

	U32	BhkFLAGS(BHK *hk)

=for hackers
Found in file op.h

=item CALL_BLOCK_HOOKS
X<CALL_BLOCK_HOOKS>

Call all the registered block hooks for type I<which>. I<which> is a
preprocessing token; the type of I<arg> depends on I<which>.

NOTE: this function is experimental and may change or be
removed without notice.

	void	CALL_BLOCK_HOOKS(which, arg)

=for hackers
Found in file op.h


=back

=head1 CV reference counts and CvOUTSIDE

=over 8

=item CvWEAKOUTSIDE
X<CvWEAKOUTSIDE>

Each CV has a pointer, C<CvOUTSIDE()>, to its lexically enclosing
CV (if any). Because pointers to anonymous sub prototypes are
stored in C<&> pad slots, it is a possible to get a circular reference,
with the parent pointing to the child and vice-versa. To avoid the
ensuing memory leak, we do not increment the reference count of the CV
pointed to by C<CvOUTSIDE> in the I<one specific instance> that the parent
has a C<&> pad slot pointing back to us. In this case, we set the
C<CvWEAKOUTSIDE> flag in the child. This allows us to determine under what
circumstances we should decrement the refcount of the parent when freeing
the child.

There is a further complication with non-closure anonymous subs (i.e. those
that do not refer to any lexicals outside that sub). In this case, the
anonymous prototype is shared rather than being cloned. This has the
consequence that the parent may be freed while there are still active
children, eg

    BEGIN { $a = sub { eval '$x' } }

In this case, the BEGIN is freed immediately after execution since there
are no active references to it: the anon sub prototype has
C<CvWEAKOUTSIDE> set since it's not a closure, and $a points to the same
CV, so it doesn't contribute to BEGIN's refcount either.  When $a is
executed, the C<eval '$x'> causes the chain of C<CvOUTSIDE>s to be followed,
and the freed BEGIN is accessed.

To avoid this, whenever a CV and its associated pad is freed, any
C<&> entries in the pad are explicitly removed from the pad, and if the
refcount of the pointed-to anon sub is still positive, then that
child's C<CvOUTSIDE> is set to point to its grandparent. This will only
occur in the single specific case of a non-closure anon prototype
having one or more active references (such as C<$a> above).

One other thing to consider is that a CV may be merely undefined
rather than freed, eg C<undef &foo>. In this case, its refcount may
not have reached zero, but we still delete its pad and its C<CvROOT> etc.
Since various children may still have their C<CvOUTSIDE> pointing at this
undefined CV, we keep its own C<CvOUTSIDE> for the time being, so that
the chain of lexical scopes is unbroken. For example, the following
should print 123:

    my $x = 123;
    sub tmp { sub { eval '$x' } }
    my $a = tmp();
    undef &tmp;
    print  $a->();

	bool	CvWEAKOUTSIDE(CV *cv)

=for hackers
Found in file cv.h


=back

=head1 Embedding Functions

=over 8

=item cv_dump
X<cv_dump>

dump the contents of a CV

	void	cv_dump(CV *cv, const char *title)

=for hackers
Found in file pad.c

=item do_dump_pad
X<do_dump_pad>

Dump the contents of a padlist

	void	do_dump_pad(I32 level, PerlIO *file,
		            PADLIST *padlist, int full)

=for hackers
Found in file pad.c

=item intro_my
X<intro_my>

"Introduce" my variables to visible status.

	U32	intro_my()

=for hackers
Found in file pad.c

=item padlist_dup
X<padlist_dup>

Duplicates a pad.

	AV *	padlist_dup(AV *srcpad, CLONE_PARAMS *param)

=for hackers
Found in file pad.c

=item pad_alloc_name
X<pad_alloc_name>

Allocates a place in the currently-compiling
pad (via L<perlapi/pad_alloc>) and
then stores a name for that entry.  I<namesv> is adopted and becomes the
name entry; it must already contain the name string and be sufficiently
upgraded.  I<typestash> and I<ourstash> and the C<padadd_STATE> flag get
added to I<namesv>.  None of the other
processing of L<perlapi/pad_add_name_pvn>
is done.  Returns the offset of the allocated pad slot.

	PADOFFSET pad_alloc_name(SV *namesv, U32 flags,
	                         HV *typestash, HV *ourstash)

=for hackers
Found in file pad.c

=item pad_block_start
X<pad_block_start>

Update the pad compilation state variables on entry to a new block

	void	pad_block_start(int full)

=for hackers
Found in file pad.c

=item pad_check_dup
X<pad_check_dup>

Check for duplicate declarations: report any of:

     * a my in the current scope with the same name;
     * an our (anywhere in the pad) with the same name and the
       same stash as C<ourstash>

C<is_our> indicates that the name to check is an 'our' declaration.

	void	pad_check_dup(SV *name, U32 flags,
		              const HV *ourstash)

=for hackers
Found in file pad.c

=item pad_findlex
X<pad_findlex>

Find a named lexical anywhere in a chain of nested pads. Add fake entries
in the inner pads if it's found in an outer one.

Returns the offset in the bottom pad of the lex or the fake lex.
cv is the CV in which to start the search, and seq is the current cop_seq
to match against. If warn is true, print appropriate warnings.  The out_*
vars return values, and so are pointers to where the returned values
should be stored. out_capture, if non-null, requests that the innermost
instance of the lexical is captured; out_name_sv is set to the innermost
matched namesv or fake namesv; out_flags returns the flags normally
associated with the IVX field of a fake namesv.

Note that pad_findlex() is recursive; it recurses up the chain of CVs,
then comes back down, adding fake entries as it goes. It has to be this way
because fake namesvs in anon protoypes have to store in xlow the index into
the parent pad.

	PADOFFSET pad_findlex(const char *namepv,
	                      STRLEN namelen, U32 flags,
	                      const CV* cv, U32 seq, int warn,
	                      SV** out_capture,
	                      SV** out_name_sv, int *out_flags)

=for hackers
Found in file pad.c

=item pad_fixup_inner_anons
X<pad_fixup_inner_anons>

For any anon CVs in the pad, change CvOUTSIDE of that CV from
old_cv to new_cv if necessary. Needed when a newly-compiled CV has to be
moved to a pre-existing CV struct.

	void	pad_fixup_inner_anons(PADLIST *padlist,
		                      CV *old_cv, CV *new_cv)

=for hackers
Found in file pad.c

=item pad_free
X<pad_free>

Free the SV at offset po in the current pad.

	void	pad_free(PADOFFSET po)

=for hackers
Found in file pad.c

=item pad_leavemy
X<pad_leavemy>

Cleanup at end of scope during compilation: set the max seq number for
lexicals in this scope and warn of any lexicals that never got introduced.

	void	pad_leavemy()

=for hackers
Found in file pad.c

=item pad_push
X<pad_push>

Push a new pad frame onto the padlist, unless there's already a pad at
this depth, in which case don't bother creating a new one.  Then give
the new pad an @_ in slot zero.

	void	pad_push(PADLIST *padlist, int depth)

=for hackers
Found in file pad.c

=item pad_reset
X<pad_reset>

Mark all the current temporaries for reuse

	void	pad_reset()

=for hackers
Found in file pad.c

=item pad_swipe
X<pad_swipe>

Abandon the tmp in the current pad at offset po and replace with a
new one.

	void	pad_swipe(PADOFFSET po, bool refadjust)

=for hackers
Found in file pad.c


=back

=head1 Functions in file op.c

=over 8

=item core_prototype
X<core_prototype>

This function assigns the prototype of the named core function to C<sv>, or
to a new mortal SV if C<sv> is NULL.  It returns the modified C<sv>, or
NULL if the core function has no prototype.  C<code> is a code as returned
by C<keyword()>.  It must be negative and unequal to -KEY_CORE.

	SV *	core_prototype(SV *sv, const char *name,
		               const int code,
		               int * const opnum)

=for hackers
Found in file op.c


=back

=head1 Functions in file pp_ctl.c


=over 8

=item docatch
X<docatch>

Check for the cases 0 or 3 of cur_env.je_ret, only used inside an eval context.

0 is used as continue inside eval,

3 is used for a die caught by an inner eval - continue inner loop

See cop.h: je_mustcatch, when set at any runlevel to TRUE, means eval ops must
establish a local jmpenv to handle exception traps.

	OP*	docatch(OP *o)

=for hackers
Found in file pp_ctl.c


=back

=head1 GV Functions

=over 8

=item gv_try_downgrade
X<gv_try_downgrade>

If the typeglob C<gv> can be expressed more succinctly, by having
something other than a real GV in its place in the stash, replace it
with the optimised form.  Basic requirements for this are that C<gv>
is a real typeglob, is sufficiently ordinary, and is only referenced
from its package.  This function is meant to be used when a GV has been
looked up in part to see what was there, causing upgrading, but based
on what was found it turns out that the real GV isn't required after all.

If C<gv> is a completely empty typeglob, it is deleted from the stash.

If C<gv> is a typeglob containing only a sufficiently-ordinary constant
sub, the typeglob is replaced with a scalar-reference placeholder that
more compactly represents the same thing.

NOTE: this function is experimental and may change or be
removed without notice.

	void	gv_try_downgrade(GV* gv)

=for hackers
Found in file gv.c


=back

=head1 Hash Manipulation Functions

=over 8

=item hv_ename_add
X<hv_ename_add>

Adds a name to a stash's internal list of effective names.  See
C<hv_ename_delete>.

This is called when a stash is assigned to a new location in the symbol
table.

	void	hv_ename_add(HV *hv, const char *name, U32 len,
		             U32 flags)

=for hackers
Found in file hv.c

=item hv_ename_delete
X<hv_ename_delete>

Removes a name from a stash's internal list of effective names.  If this is
the name returned by C<HvENAME>, then another name in the list will take
its place (C<HvENAME> will use it).

This is called when a stash is deleted from the symbol table.

	void	hv_ename_delete(HV *hv, const char *name,
		                U32 len, U32 flags)

=for hackers
Found in file hv.c

=item refcounted_he_chain_2hv
X<refcounted_he_chain_2hv>

Generates and returns a C<HV *> representing the content of a
C<refcounted_he> chain.
I<flags> is currently unused and must be zero.

	HV *	refcounted_he_chain_2hv(
		    const struct refcounted_he *c, U32 flags
		)

=for hackers
Found in file hv.c

=item refcounted_he_fetch_pv
X<refcounted_he_fetch_pv>

Like L</refcounted_he_fetch_pvn>, but takes a nul-terminated string
instead of a string/length pair.

	SV *	refcounted_he_fetch_pv(
		    const struct refcounted_he *chain,
		    const char *key, U32 hash, U32 flags
		)

=for hackers
Found in file hv.c

=item refcounted_he_fetch_pvn
X<refcounted_he_fetch_pvn>

Search along a C<refcounted_he> chain for an entry with the key specified
by I<keypv> and I<keylen>.  If I<flags> has the C<REFCOUNTED_HE_KEY_UTF8>
bit set, the key octets are interpreted as UTF-8, otherwise they
are interpreted as Latin-1.  I<hash> is a precomputed hash of the key
string, or zero if it has not been precomputed.  Returns a mortal scalar
representing the value associated with the key, or C<&PL_sv_placeholder>
if there is no value associated with the key.

	SV *	refcounted_he_fetch_pvn(
		    const struct refcounted_he *chain,
		    const char *keypv, STRLEN keylen, U32 hash,
		    U32 flags
		)

=for hackers
Found in file hv.c

=item refcounted_he_fetch_pvs
X<refcounted_he_fetch_pvs>

Like L</refcounted_he_fetch_pvn>, but takes a literal string instead of
a string/length pair, and no precomputed hash.

	SV *	refcounted_he_fetch_pvs(
		    const struct refcounted_he *chain,
		    const char *key, U32 flags
		)

=for hackers
Found in file hv.h

=item refcounted_he_fetch_sv
X<refcounted_he_fetch_sv>

Like L</refcounted_he_fetch_pvn>, but takes a Perl scalar instead of a
string/length pair.

	SV *	refcounted_he_fetch_sv(
		    const struct refcounted_he *chain, SV *key,
		    U32 hash, U32 flags
		)

=for hackers
Found in file hv.c

=item refcounted_he_free
X<refcounted_he_free>

Decrements the reference count of a C<refcounted_he> by one.  If the
reference count reaches zero the structure's memory is freed, which
(recursively) causes a reduction of its parent C<refcounted_he>'s
reference count.  It is safe to pass a null pointer to this function:
no action occurs in this case.

	void	refcounted_he_free(struct refcounted_he *he)

=for hackers
Found in file hv.c

=item refcounted_he_inc
X<refcounted_he_inc>

Increment the reference count of a C<refcounted_he>.  The pointer to the
C<refcounted_he> is also returned.  It is safe to pass a null pointer
to this function: no action occurs and a null pointer is returned.

	struct refcounted_he * refcounted_he_inc(
	                           struct refcounted_he *he
	                       )

=for hackers
Found in file hv.c

=item refcounted_he_new_pv
X<refcounted_he_new_pv>

Like L</refcounted_he_new_pvn>, but takes a nul-terminated string instead
of a string/length pair.

	struct refcounted_he * refcounted_he_new_pv(
	                           struct refcounted_he *parent,
	                           const char *key, U32 hash,
	                           SV *value, U32 flags
	                       )

=for hackers
Found in file hv.c

=item refcounted_he_new_pvn
X<refcounted_he_new_pvn>

Creates a new C<refcounted_he>.  This consists of a single key/value
pair and a reference to an existing C<refcounted_he> chain (which may
be empty), and thus forms a longer chain.  When using the longer chain,
the new key/value pair takes precedence over any entry for the same key
further along the chain.

The new key is specified by I<keypv> and I<keylen>.  If I<flags> has
the C<REFCOUNTED_HE_KEY_UTF8> bit set, the key octets are interpreted
as UTF-8, otherwise they are interpreted as Latin-1.  I<hash> is
a precomputed hash of the key string, or zero if it has not been
precomputed.

I<value> is the scalar value to store for this key.  I<value> is copied
by this function, which thus does not take ownership of any reference
to it, and later changes to the scalar will not be reflected in the
value visible in the C<refcounted_he>.  Complex types of scalar will not
be stored with referential integrity, but will be coerced to strings.
I<value> may be either null or C<&PL_sv_placeholder> to indicate that no
value is to be associated with the key; this, as with any non-null value,
takes precedence over the existence of a value for the key further along
the chain.

I<parent> points to the rest of the C<refcounted_he> chain to be
attached to the new C<refcounted_he>.  This function takes ownership
of one reference to I<parent>, and returns one reference to the new
C<refcounted_he>.

	struct refcounted_he * refcounted_he_new_pvn(
	                           struct refcounted_he *parent,
	                           const char *keypv,
	                           STRLEN keylen, U32 hash,
	                           SV *value, U32 flags
	                       )

=for hackers
Found in file hv.c

=item refcounted_he_new_pvs
X<refcounted_he_new_pvs>

Like L</refcounted_he_new_pvn>, but takes a literal string instead of
a string/length pair, and no precomputed hash.

	struct refcounted_he * refcounted_he_new_pvs(
	                           struct refcounted_he *parent,
	                           const char *key, SV *value,
	                           U32 flags
	                       )

=for hackers
Found in file hv.h

=item refcounted_he_new_sv
X<refcounted_he_new_sv>

Like L</refcounted_he_new_pvn>, but takes a Perl scalar instead of a
string/length pair.

	struct refcounted_he * refcounted_he_new_sv(
	                           struct refcounted_he *parent,
	                           SV *key, U32 hash, SV *value,
	                           U32 flags
	                       )

=for hackers
Found in file hv.c


=back

=head1 IO Functions

=over 8

=item start_glob
X<start_glob>

Function called by C<do_readline> to spawn a glob (or do the glob inside
perl on VMS). This code used to be inline, but now perl uses C<File::Glob>
this glob starter is only used by miniperl during the build process.
Moving it away shrinks pp_hot.c; shrinking pp_hot.c helps speed perl up.

NOTE: this function is experimental and may change or be
removed without notice.

	PerlIO*	start_glob(SV *tmpglob, IO *io)

=for hackers
Found in file doio.c


=back

=head1 Magical Functions

=over 8

=item magic_clearhint
X<magic_clearhint>

Triggered by a delete from %^H, records the key to
C<PL_compiling.cop_hints_hash>.

	int	magic_clearhint(SV* sv, MAGIC* mg)

=for hackers
Found in file mg.c

=item magic_clearhints
X<magic_clearhints>

Triggered by clearing %^H, resets C<PL_compiling.cop_hints_hash>.

	int	magic_clearhints(SV* sv, MAGIC* mg)

=for hackers
Found in file mg.c

=item magic_methcall
X<magic_methcall>

Invoke a magic method (like FETCH).

C<sv> and C<mg> are the tied thingy and the tie magic.

C<meth> is the name of the method to call.

C<argc> is the number of args (in addition to $self) to pass to the method.

The C<flags> can be:

    G_DISCARD     invoke method with G_DISCARD flag and don't
                  return a value
    G_UNDEF_FILL  fill the stack with argc pointers to
                  PL_sv_undef

The arguments themselves are any values following the C<flags> argument.

Returns the SV (if any) returned by the method, or NULL on failure.


	SV*	magic_methcall(SV *sv, const MAGIC *mg,
		               const char *meth, U32 flags,
		               U32 argc, ...)

=for hackers
Found in file mg.c

=item magic_sethint
X<magic_sethint>

Triggered by a store to %^H, records the key/value pair to
C<PL_compiling.cop_hints_hash>.  It is assumed that hints aren't storing
anything that would need a deep copy.  Maybe we should warn if we find a
reference.

	int	magic_sethint(SV* sv, MAGIC* mg)

=for hackers
Found in file mg.c

=item mg_localize
X<mg_localize>

Copy some of the magic from an existing SV to new localized version of that
SV. Container magic (eg %ENV, $1, tie) gets copied, value magic doesn't (eg
taint, pos).

If setmagic is false then no set magic will be called on the new (empty) SV.
This typically means that assignment will soon follow (e.g. 'local $x = $y'),
and that will handle the magic.

	void	mg_localize(SV* sv, SV* nsv, bool setmagic)

=for hackers
Found in file mg.c


=back

=head1 MRO Functions

=over 8

=item mro_get_linear_isa_dfs
X<mro_get_linear_isa_dfs>

Returns the Depth-First Search linearization of @ISA
the given stash.  The return value is a read-only AV*.
C<level> should be 0 (it is used internally in this
function's recursion).

You are responsible for C<SvREFCNT_inc()> on the
return value if you plan to store it anywhere
semi-permanently (otherwise it might be deleted
out from under you the next time the cache is
invalidated).

	AV*	mro_get_linear_isa_dfs(HV* stash, U32 level)

=for hackers
Found in file mro.c

=item mro_isa_changed_in
X<mro_isa_changed_in>

Takes the necessary steps (cache invalidations, mostly)
when the @ISA of the given package has changed.  Invoked
by the C<setisa> magic, should not need to invoke directly.

	void	mro_isa_changed_in(HV* stash)

=for hackers
Found in file mro.c

=item mro_package_moved
X<mro_package_moved>

Call this function to signal to a stash that it has been assigned to
another spot in the stash hierarchy.  C<stash> is the stash that has been
assigned. C<oldstash> is the stash it replaces, if any.  C<gv> is the glob
that is actually being assigned to.

This can also be called with a null first argument to
indicate that C<oldstash> has been deleted.

This function invalidates isa caches on the old stash, on all subpackages
nested inside it, and on the subclasses of all those, including
non-existent packages that have corresponding entries in C<stash>.

It also sets the effective names (C<HvENAME>) on all the stashes as
appropriate.

If the C<gv> is present and is not in the symbol table, then this function
simply returns.  This checked will be skipped if C<flags & 1>.

	void	mro_package_moved(HV * const stash,
		                  HV * const oldstash,
		                  const GV * const gv,
		                  U32 flags)

=for hackers
Found in file mro.c


=back

=head1 Optree Manipulation Functions

=over 8

=item finalize_optree
X<finalize_optree>

This function finalizes the optree. Should be called directly after
the complete optree is built. It does some additional
checking which can't be done in the normal ck_xxx functions and makes
the tree thread-safe.

	void	finalize_optree(OP* o)

=for hackers
Found in file op.c


=back

=head1 Pad Data Structures

=over 8

=item CX_CURPAD_SAVE
X<CX_CURPAD_SAVE>

Save the current pad in the given context block structure.

	void	CX_CURPAD_SAVE(struct context)

=for hackers
Found in file pad.h

=item CX_CURPAD_SV
X<CX_CURPAD_SV>

Access the SV at offset po in the saved current pad in the given
context block structure (can be used as an lvalue).

	SV *	CX_CURPAD_SV(struct context, PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_BASE_SV
X<PAD_BASE_SV>

Get the value from slot C<po> in the base (DEPTH=1) pad of a padlist

	SV *	PAD_BASE_SV(PADLIST padlist, PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_CLONE_VARS
X<PAD_CLONE_VARS>

Clone the state variables associated with running and compiling pads.

	void	PAD_CLONE_VARS(PerlInterpreter *proto_perl,
		               CLONE_PARAMS* param)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_FLAGS
X<PAD_COMPNAME_FLAGS>

Return the flags for the current compiling pad name
at offset C<po>. Assumes a valid slot entry.

	U32	PAD_COMPNAME_FLAGS(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_GEN
X<PAD_COMPNAME_GEN>

The generation number of the name at offset C<po> in the current
compiling pad (lvalue). Note that C<SvUVX> is hijacked for this purpose.

	STRLEN	PAD_COMPNAME_GEN(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_GEN_set
X<PAD_COMPNAME_GEN_set>

Sets the generation number of the name at offset C<po> in the current
ling pad (lvalue) to C<gen>.  Note that C<SvUV_set> is hijacked for this purpose.

	STRLEN	PAD_COMPNAME_GEN_set(PADOFFSET po, int gen)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_OURSTASH
X<PAD_COMPNAME_OURSTASH>

Return the stash associated with an C<our> variable.
Assumes the slot entry is a valid C<our> lexical.

	HV *	PAD_COMPNAME_OURSTASH(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_PV
X<PAD_COMPNAME_PV>

Return the name of the current compiling pad name
at offset C<po>. Assumes a valid slot entry.

	char *	PAD_COMPNAME_PV(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_COMPNAME_TYPE
X<PAD_COMPNAME_TYPE>

Return the type (stash) of the current compiling pad name at offset
C<po>. Must be a valid name. Returns null if not typed.

	HV *	PAD_COMPNAME_TYPE(PADOFFSET po)

=for hackers
Found in file pad.h

=item pad_peg
X<pad_peg>

When PERL_MAD is enabled, this is a small no-op function that gets called
at the start of each pad-related function.  It can be breakpointed to
track all pad operations.  The parameter is a string indicating the type
of pad operation being performed.

NOTE: this function is experimental and may change or be
removed without notice.

	void	pad_peg(const char *s)

=for hackers
Found in file pad.c

=item PAD_RESTORE_LOCAL
X<PAD_RESTORE_LOCAL>

Restore the old pad saved into the local variable opad by PAD_SAVE_LOCAL()

	void	PAD_RESTORE_LOCAL(PAD *opad)

=for hackers
Found in file pad.h

=item PAD_SAVE_LOCAL
X<PAD_SAVE_LOCAL>

Save the current pad to the local variable opad, then make the
current pad equal to npad

	void	PAD_SAVE_LOCAL(PAD *opad, PAD *npad)

=for hackers
Found in file pad.h

=item PAD_SAVE_SETNULLPAD
X<PAD_SAVE_SETNULLPAD>

Save the current pad then set it to null.

	void	PAD_SAVE_SETNULLPAD()

=for hackers
Found in file pad.h

=item PAD_SETSV
X<PAD_SETSV>

Set the slot at offset C<po> in the current pad to C<sv>

	SV *	PAD_SETSV(PADOFFSET po, SV* sv)

=for hackers
Found in file pad.h

=item PAD_SET_CUR
X<PAD_SET_CUR>

Set the current pad to be pad C<n> in the padlist, saving
the previous current pad. NB currently this macro expands to a string too
long for some compilers, so it's best to replace it with

    SAVECOMPPAD();
    PAD_SET_CUR_NOSAVE(padlist,n);


	void	PAD_SET_CUR(PADLIST padlist, I32 n)

=for hackers
Found in file pad.h

=item PAD_SET_CUR_NOSAVE
X<PAD_SET_CUR_NOSAVE>

like PAD_SET_CUR, but without the save

	void	PAD_SET_CUR_NOSAVE(PADLIST padlist, I32 n)

=for hackers
Found in file pad.h

=item PAD_SV
X<PAD_SV>

Get the value at offset C<po> in the current pad

	void	PAD_SV(PADOFFSET po)

=for hackers
Found in file pad.h

=item PAD_SVl
X<PAD_SVl>

Lightweight and lvalue version of C<PAD_SV>.
Get or set the value at offset C<po> in the current pad.
Unlike C<PAD_SV>, does not print diagnostics with -DX.
For internal use only.

	SV *	PAD_SVl(PADOFFSET po)

=for hackers
Found in file pad.h

=item SAVECLEARSV
X<SAVECLEARSV>

Clear the pointed to pad value on scope exit. (i.e. the runtime action of 'my')

	void	SAVECLEARSV(SV **svp)

=for hackers
Found in file pad.h

=item SAVECOMPPAD
X<SAVECOMPPAD>

save PL_comppad and PL_curpad





	void	SAVECOMPPAD()

=for hackers
Found in file pad.h

=item SAVEPADSV
X<SAVEPADSV>

Save a pad slot (used to restore after an iteration)

XXX DAPM it would make more sense to make the arg a PADOFFSET
	void	SAVEPADSV(PADOFFSET po)

=for hackers
Found in file pad.h


=back

=head1 Per-Interpreter Variables

=over 8

=item PL_DBsingle
X<PL_DBsingle>

When Perl is run in debugging mode, with the B<-d> switch, this SV is a
boolean which indicates whether subs are being single-stepped.
Single-stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's $DB::single variable.  See
C<PL_DBsub>.

	SV *	PL_DBsingle

=for hackers
Found in file intrpvar.h

=item PL_DBsub
X<PL_DBsub>

When Perl is run in debugging mode, with the B<-d> switch, this GV contains
the SV which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's $DB::sub variable.  See
C<PL_DBsingle>.

	GV *	PL_DBsub

=for hackers
Found in file intrpvar.h

=item PL_DBtrace
X<PL_DBtrace>

Trace variable used when Perl is run in debugging mode, with the B<-d>
switch.  This is the C variable which corresponds to Perl's $DB::trace
variable.  See C<PL_DBsingle>.

	SV *	PL_DBtrace

=for hackers
Found in file intrpvar.h

=item PL_dowarn
X<PL_dowarn>

The C variable which corresponds to Perl's $^W warning variable.

	bool	PL_dowarn

=for hackers
Found in file intrpvar.h

=item PL_last_in_gv
X<PL_last_in_gv>

The GV which was last used for a filehandle input operation. (C<< <FH> >>)

	GV*	PL_last_in_gv

=for hackers
Found in file intrpvar.h

=item PL_ofsgv
X<PL_ofsgv>

The glob containing the output field separator - C<*,> in Perl space.

	GV*	PL_ofsgv

=for hackers
Found in file intrpvar.h

=item PL_rs
X<PL_rs>

The input record separator - C<$/> in Perl space.

	SV*	PL_rs

=for hackers
Found in file intrpvar.h


=back

=head1 Stack Manipulation Macros

=over 8

=item djSP
X<djSP>

Declare Just C<SP>. This is actually identical to C<dSP>, and declares
a local copy of perl's stack pointer, available via the C<SP> macro.
See C<SP>.  (Available for backward source code compatibility with the
old (Perl 5.005) thread model.)

		djSP;

=for hackers
Found in file pp.h

=item LVRET
X<LVRET>

True if this op will be the return value of an lvalue subroutine

=for hackers
Found in file pp.h


=back

=head1 SV Manipulation Functions

=over 8

=item sv_add_arena
X<sv_add_arena>

Given a chunk of memory, link it to the head of the list of arenas,
and split it into a list of free SVs.

	void	sv_add_arena(char *const ptr, const U32 size,
		             const U32 flags)

=for hackers
Found in file sv.c

=item sv_clean_all
X<sv_clean_all>

Decrement the refcnt of each remaining SV, possibly triggering a
cleanup.  This function may have to be called multiple times to free
SVs which are in complex self-referential hierarchies.

	I32	sv_clean_all()

=for hackers
Found in file sv.c

=item sv_clean_objs
X<sv_clean_objs>

Attempt to destroy all objects not yet freed.

	void	sv_clean_objs()

=for hackers
Found in file sv.c

=item sv_free_arenas
X<sv_free_arenas>

Deallocate the memory used by all arenas.  Note that all the individual SV
heads and bodies within the arenas must already have been freed.

	void	sv_free_arenas()

=for hackers
Found in file sv.c


=back

=head1 SV-Body Allocation

=over 8

=item sv_2num
X<sv_2num>

Return an SV with the numeric value of the source SV, doing any necessary
reference or overload conversion.  You must use the C<SvNUM(sv)> macro to
access this function.

NOTE: this function is experimental and may change or be
removed without notice.

	SV*	sv_2num(SV *const sv)

=for hackers
Found in file sv.c

=item sv_ref
X<sv_ref>

Returns a SV describing what the SV passed in is a reference to.

	SV*	sv_ref(SV *dst, const SV *const sv,
		       const int ob)

=for hackers
Found in file sv.c


=back

=head1 Unicode Support

=over 8

=item find_uninit_var
X<find_uninit_var>

Find the name of the undefined variable (if any) that caused the operator
to issue a "Use of uninitialized value" warning.
If match is true, only return a name if its value matches uninit_sv.
So roughly speaking, if a unary operator (such as OP_COS) generates a
warning, then following the direct child of the op may yield an
OP_PADSV or OP_GV that gives the name of the undefined variable.  On the
other hand, with OP_ADD there are two branches to follow, so we only print
the variable name if we get an exact match.

The name is returned as a mortal SV.

Assumes that PL_op is the op that originally triggered the error, and that
PL_comppad/PL_curpad points to the currently executing pad.

NOTE: this function is experimental and may change or be
removed without notice.

	SV*	find_uninit_var(const OP *const obase,
		                const SV *const uninit_sv,
		                bool top)

=for hackers
Found in file sv.c

=item report_uninit
X<report_uninit>

Print appropriate "Use of uninitialized variable" warning.

	void	report_uninit(const SV *uninit_sv)

=for hackers
Found in file sv.c


=back

=head1 Undocumented functions

The following functions are currently undocumented.  If you use one of
them, you may wish to consider creating and submitting documentation for
it.

=over

=item _add_range_to_invlist
X<_add_range_to_invlist>

=item _core_swash_init
X<_core_swash_init>

=item _invlist_array_init
X<_invlist_array_init>

=item _invlist_contents
X<_invlist_contents>

=item _invlist_intersection
X<_invlist_intersection>

=item _invlist_intersection_maybe_complement_2nd
X<_invlist_intersection_maybe_complement_2nd>

=item _invlist_invert
X<_invlist_invert>

=item _invlist_invert_prop
X<_invlist_invert_prop>

=item _invlist_populate_swatch
X<_invlist_populate_swatch>

=item _invlist_subtract
X<_invlist_subtract>

=item _invlist_union
X<_invlist_union>

=item _invlist_union_maybe_complement_2nd
X<_invlist_union_maybe_complement_2nd>

=item _is_utf8__perl_idstart
X<_is_utf8__perl_idstart>

=item _new_invlist
X<_new_invlist>

=item _swash_inversion_hash
X<_swash_inversion_hash>

=item _swash_to_invlist
X<_swash_to_invlist>

=item _to_fold_latin1
X<_to_fold_latin1>

=item _to_upper_title_latin1
X<_to_upper_title_latin1>

=item aassign_common_vars
X<aassign_common_vars>

=item add_cp_to_invlist
X<add_cp_to_invlist>

=item addmad
X<addmad>

=item allocmy
X<allocmy>

=item amagic_is_enabled
X<amagic_is_enabled>

=item append_madprops
X<append_madprops>

=item apply
X<apply>

=item av_reify
X<av_reify>

=item bind_match
X<bind_match>

=item block_end
X<block_end>

=item block_start
X<block_start>

=item boot_core_PerlIO
X<boot_core_PerlIO>

=item boot_core_UNIVERSAL
X<boot_core_UNIVERSAL>

=item boot_core_mro
X<boot_core_mro>

=item cando
X<cando>

=item check_utf8_print
X<check_utf8_print>

=item ck_entersub_args_core
X<ck_entersub_args_core>

=item convert
X<convert>

=item coresub_op
X<coresub_op>

=item create_eval_scope
X<create_eval_scope>

=item cv_ckproto_len_flags
X<cv_ckproto_len_flags>

=item cvgv_set
X<cvgv_set>

=item cvstash_set
X<cvstash_set>

=item deb_stack_all
X<deb_stack_all>

=item delete_eval_scope
X<delete_eval_scope>

=item die_unwind
X<die_unwind>

=item do_aexec
X<do_aexec>

=item do_aexec5
X<do_aexec5>

=item do_eof
X<do_eof>

=item do_exec
X<do_exec>

=item do_exec3
X<do_exec3>

=item do_execfree
X<do_execfree>

=item do_ipcctl
X<do_ipcctl>

=item do_ipcget
X<do_ipcget>

=item do_msgrcv
X<do_msgrcv>

=item do_msgsnd
X<do_msgsnd>

=item do_ncmp
X<do_ncmp>

=item do_op_xmldump
X<do_op_xmldump>

=item do_pmop_xmldump
X<do_pmop_xmldump>

=item do_print
X<do_print>

=item do_readline
X<do_readline>

=item do_seek
X<do_seek>

=item do_semop
X<do_semop>

=item do_shmio
X<do_shmio>

=item do_sysseek
X<do_sysseek>

=item do_tell
X<do_tell>

=item do_trans
X<do_trans>

=item do_vecget
X<do_vecget>

=item do_vecset
X<do_vecset>

=item do_vop
X<do_vop>

=item dofile
X<dofile>

=item dump_all_perl
X<dump_all_perl>

=item dump_packsubs_perl
X<dump_packsubs_perl>

=item dump_sub_perl
X<dump_sub_perl>

=item dump_sv_child
X<dump_sv_child>

=item emulate_cop_io
X<emulate_cop_io>

=item feature_is_enabled
X<feature_is_enabled>

=item find_rundefsv2
X<find_rundefsv2>

=item find_script
X<find_script>

=item free_tied_hv_pool
X<free_tied_hv_pool>

=item get_db_sub
X<get_db_sub>

=item get_debug_opts
X<get_debug_opts>

=item get_hash_seed
X<get_hash_seed>

=item get_invlist_iter_addr
X<get_invlist_iter_addr>

=item get_invlist_len_addr
X<get_invlist_len_addr>

=item get_invlist_version_id_addr
X<get_invlist_version_id_addr>

=item get_invlist_zero_addr
X<get_invlist_zero_addr>

=item get_no_modify
X<get_no_modify>

=item get_opargs
X<get_opargs>

=item get_re_arg
X<get_re_arg>

=item getenv_len
X<getenv_len>

=item hfree_next_entry
X<hfree_next_entry>

=item hv_backreferences_p
X<hv_backreferences_p>

=item hv_kill_backrefs
X<hv_kill_backrefs>

=item hv_undef_flags
X<hv_undef_flags>

=item init_argv_symbols
X<init_argv_symbols>

=item init_dbargs
X<init_dbargs>

=item init_debugger
X<init_debugger>

=item invert
X<invert>

=item invlist_array
X<invlist_array>

=item invlist_clone
X<invlist_clone>

=item invlist_iterinit
X<invlist_iterinit>

=item invlist_len
X<invlist_len>

=item invlist_max
X<invlist_max>

=item invlist_set_len
X<invlist_set_len>

=item invlist_trim
X<invlist_trim>

=item io_close
X<io_close>

=item is_utf8_X_L
X<is_utf8_X_L>

=item is_utf8_X_LV
X<is_utf8_X_LV>

=item is_utf8_X_LVT
X<is_utf8_X_LVT>

=item is_utf8_X_LV_LVT_V
X<is_utf8_X_LV_LVT_V>

=item is_utf8_X_T
X<is_utf8_X_T>

=item is_utf8_X_V
X<is_utf8_X_V>

=item is_utf8_X_begin
X<is_utf8_X_begin>

=item is_utf8_X_extend
X<is_utf8_X_extend>

=item is_utf8_X_non_hangul
X<is_utf8_X_non_hangul>

=item is_utf8_X_prepend
X<is_utf8_X_prepend>

=item jmaybe
X<jmaybe>

=item keyword
X<keyword>

=item keyword_plugin_standard
X<keyword_plugin_standard>

=item list
X<list>

=item localize
X<localize>

=item mad_free
X<mad_free>

=item madlex
X<madlex>

=item madparse
X<madparse>

=item magic_clear_all_env
X<magic_clear_all_env>

=item magic_clearenv
X<magic_clearenv>

=item magic_clearisa
X<magic_clearisa>

=item magic_clearpack
X<magic_clearpack>

=item magic_clearsig
X<magic_clearsig>

=item magic_existspack
X<magic_existspack>

=item magic_freearylen_p
X<magic_freearylen_p>

=item magic_freeovrld
X<magic_freeovrld>

=item magic_get
X<magic_get>

=item magic_getarylen
X<magic_getarylen>

=item magic_getdefelem
X<magic_getdefelem>

=item magic_getnkeys
X<magic_getnkeys>

=item magic_getpack
X<magic_getpack>

=item magic_getpos
X<magic_getpos>

=item magic_getsig
X<magic_getsig>

=item magic_getsubstr
X<magic_getsubstr>

=item magic_gettaint
X<magic_gettaint>

=item magic_getuvar
X<magic_getuvar>

=item magic_getvec
X<magic_getvec>

=item magic_killbackrefs
X<magic_killbackrefs>

=item magic_len
X<magic_len>

=item magic_nextpack
X<magic_nextpack>

=item magic_regdata_cnt
X<magic_regdata_cnt>

=item magic_regdatum_get
X<magic_regdatum_get>

=item magic_regdatum_set
X<magic_regdatum_set>

=item magic_scalarpack
X<magic_scalarpack>

=item magic_set
X<magic_set>

=item magic_set_all_env
X<magic_set_all_env>

=item magic_setamagic
X<magic_setamagic>

=item magic_setarylen
X<magic_setarylen>

=item magic_setcollxfrm
X<magic_setcollxfrm>

=item magic_setdbline
X<magic_setdbline>

=item magic_setdefelem
X<magic_setdefelem>

=item magic_setenv
X<magic_setenv>

=item magic_setisa
X<magic_setisa>

=item magic_setmglob
X<magic_setmglob>

=item magic_setnkeys
X<magic_setnkeys>

=item magic_setpack
X<magic_setpack>

=item magic_setpos
X<magic_setpos>

=item magic_setregexp
X<magic_setregexp>

=item magic_setsig
X<magic_setsig>

=item magic_setsubstr
X<magic_setsubstr>

=item magic_settaint
X<magic_settaint>

=item magic_setutf8
X<magic_setutf8>

=item magic_setuvar
X<magic_setuvar>

=item magic_setvec
X<magic_setvec>

=item magic_setvstring
X<magic_setvstring>

=item magic_sizepack
X<magic_sizepack>

=item magic_wipepack
X<magic_wipepack>

=item malloc_good_size
X<malloc_good_size>

=item malloced_size
X<malloced_size>

=item mem_collxfrm
X<mem_collxfrm>

=item mode_from_discipline
X<mode_from_discipline>

=item more_bodies
X<more_bodies>

=item mro_meta_dup
X<mro_meta_dup>

=item mro_meta_init
X<mro_meta_init>

=item munge_qwlist_to_paren_list
X<munge_qwlist_to_paren_list>

=item my_attrs
X<my_attrs>

=item my_betoh16
X<my_betoh16>

=item my_betoh32
X<my_betoh32>

=item my_betoh64
X<my_betoh64>

=item my_betohi
X<my_betohi>

=item my_betohl
X<my_betohl>

=item my_betohs
X<my_betohs>

=item my_clearenv
X<my_clearenv>

=item my_htobe16
X<my_htobe16>

=item my_htobe32
X<my_htobe32>

=item my_htobe64
X<my_htobe64>

=item my_htobei
X<my_htobei>

=item my_htobel
X<my_htobel>

=item my_htobes
X<my_htobes>

=item my_htole16
X<my_htole16>

=item my_htole32
X<my_htole32>

=item my_htole64
X<my_htole64>

=item my_htolei
X<my_htolei>

=item my_htolel
X<my_htolel>

=item my_htoles
X<my_htoles>

=item my_letoh16
X<my_letoh16>

=item my_letoh32
X<my_letoh32>

=item my_letoh64
X<my_letoh64>

=item my_letohi
X<my_letohi>

=item my_letohl
X<my_letohl>

=item my_letohs
X<my_letohs>

=item my_lstat_flags
X<my_lstat_flags>

=item my_stat_flags
X<my_stat_flags>

=item my_swabn
X<my_swabn>

=item my_unexec
X<my_unexec>

=item newATTRSUB_flags
X<newATTRSUB_flags>

=item newGP
X<newGP>

=item newMADPROP
X<newMADPROP>

=item newMADsv
X<newMADsv>

=item newTOKEN
X<newTOKEN>

=item newXS_len_flags
X<newXS_len_flags>

=item new_warnings_bitfield
X<new_warnings_bitfield>

=item nextargv
X<nextargv>

=item oopsAV
X<oopsAV>

=item oopsHV
X<oopsHV>

=item op_clear
X<op_clear>

=item op_const_sv
X<op_const_sv>

=item op_getmad
X<op_getmad>

=item op_getmad_weak
X<op_getmad_weak>

=item op_integerize
X<op_integerize>

=item op_lvalue_flags
X<op_lvalue_flags>

=item op_refcnt_dec
X<op_refcnt_dec>

=item op_refcnt_inc
X<op_refcnt_inc>

=item op_std_init
X<op_std_init>

=item op_xmldump
X<op_xmldump>

=item package
X<package>

=item package_version
X<package_version>

=item parse_unicode_opts
X<parse_unicode_opts>

=item parser_free
X<parser_free>

=item peep
X<peep>

=item pending_Slabs_to_ro
X<pending_Slabs_to_ro>

=item pmop_xmldump
X<pmop_xmldump>

=item pmruntime
X<pmruntime>

=item populate_isa
X<populate_isa>

=item prepend_madprops
X<prepend_madprops>

=item qerror
X<qerror>

=item reg_named_buff
X<reg_named_buff>

=item reg_named_buff_iter
X<reg_named_buff_iter>

=item reg_numbered_buff_fetch
X<reg_numbered_buff_fetch>

=item reg_numbered_buff_length
X<reg_numbered_buff_length>

=item reg_numbered_buff_store
X<reg_numbered_buff_store>

=item reg_qr_package
X<reg_qr_package>

=item reg_temp_copy
X<reg_temp_copy>

=item regcurly
X<regcurly>

=item regprop
X<regprop>

=item report_evil_fh
X<report_evil_fh>

=item report_redefined_cv
X<report_redefined_cv>

=item report_wrongway_fh
X<report_wrongway_fh>

=item rpeep
X<rpeep>

=item rsignal_restore
X<rsignal_restore>

=item rsignal_save
X<rsignal_save>

=item rxres_save
X<rxres_save>

=item same_dirent
X<same_dirent>

=item sawparens
X<sawparens>

=item scalar
X<scalar>

=item scalarvoid
X<scalarvoid>

=item set_regclass_bit
X<set_regclass_bit>

=item sighandler
X<sighandler>

=item softref2xv
X<softref2xv>

=item sub_crush_depth
X<sub_crush_depth>

=item sv_add_backref
X<sv_add_backref>

=item sv_catxmlpv
X<sv_catxmlpv>

=item sv_catxmlpvn
X<sv_catxmlpvn>

=item sv_catxmlsv
X<sv_catxmlsv>

=item sv_compile_2op_is_broken
X<sv_compile_2op_is_broken>

=item sv_del_backref
X<sv_del_backref>

=item sv_free2
X<sv_free2>

=item sv_kill_backrefs
X<sv_kill_backrefs>

=item sv_sethek
X<sv_sethek>

=item sv_setsv_cow
X<sv_setsv_cow>

=item sv_unglob
X<sv_unglob>

=item sv_xmlpeek
X<sv_xmlpeek>

=item tied_method
X<tied_method>

=item token_free
X<token_free>

=item token_getmad
X<token_getmad>

=item translate_substr_offsets
X<translate_substr_offsets>

=item try_amagic_bin
X<try_amagic_bin>

=item try_amagic_un
X<try_amagic_un>

=item unshare_hek
X<unshare_hek>

=item utilize
X<utilize>

=item varname
X<varname>

=item vivify_defelem
X<vivify_defelem>

=item vivify_ref
X<vivify_ref>

=item wait4pid
X<wait4pid>

=item was_lvalue_sub
X<was_lvalue_sub>

=item watch
X<watch>

=item write_to_stderr
X<write_to_stderr>

=item xmldump_all
X<xmldump_all>

=item xmldump_all_perl
X<xmldump_all_perl>

=item xmldump_eval
X<xmldump_eval>

=item xmldump_form
X<xmldump_form>

=item xmldump_indent
X<xmldump_indent>

=item xmldump_packsubs
X<xmldump_packsubs>

=item xmldump_packsubs_perl
X<xmldump_packsubs_perl>

=item xmldump_sub
X<xmldump_sub>

=item xmldump_sub_perl
X<xmldump_sub_perl>

=item xmldump_vindent
X<xmldump_vindent>

=item xs_apiversion_bootcheck
X<xs_apiversion_bootcheck>

=item xs_version_bootcheck
X<xs_version_bootcheck>

=item yyerror
X<yyerror>

=item yyerror_pv
X<yyerror_pv>

=item yyerror_pvn
X<yyerror_pvn>

=item yylex
X<yylex>

=item yyparse
X<yyparse>

=item yyunlex
X<yyunlex>

=back


=head1 AUTHORS

The autodocumentation system was originally added to the Perl core by
Benjamin Stuhl. Documentation is by whoever was kind enough to
document their functions.

=head1 SEE ALSO

L<perlguts>, L<perlapi>

=cut

 ex: set ro:
