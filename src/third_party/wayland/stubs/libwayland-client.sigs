// These signatures are obtained by hand from wayland-client-core.h.

void wl_event_queue_destroy(struct wl_event_queue* queue);
void wl_proxy_marshal_array(struct wl_proxy* p, uint32_t opcode, union wl_argument* args);
struct wl_proxy* wl_proxy_create(struct wl_proxy* factory, const struct wl_interface* interface);
void* wl_proxy_create_wrapper(void* proxy);
void wl_proxy_wrapper_destroy(void* proxy_wrapper);
struct wl_proxy* wl_proxy_marshal_array_constructor(struct wl_proxy* proxy, uint32_t opcode, union wl_argument* args, const struct wl_interface* interface);
struct wl_proxy* wl_proxy_marshal_array_constructor_versioned(struct wl_proxy* proxy, uint32_t opcode, union wl_argument* args, const struct wl_interface* interface, uint32_t version);
void wl_proxy_destroy(struct wl_proxy* proxy);
int wl_proxy_add_listener(struct wl_proxy* proxy, wl_proxy_listener_impl implementation, void* data);
const void* wl_proxy_get_listener(struct wl_proxy* proxy);
int wl_proxy_add_dispatcher(struct wl_proxy* proxy, wl_dispatcher_func_t dispatcher_func, const void* dispatcher_data, void* data);
void wl_proxy_set_user_data(struct wl_proxy* proxy, void* user_data);
void* wl_proxy_get_user_data(struct wl_proxy* proxy);
uint32_t wl_proxy_get_version(struct wl_proxy* proxy);
uint32_t wl_proxy_get_id(struct wl_proxy* proxy);
const char* wl_proxy_get_class(struct wl_proxy* proxy);
void wl_proxy_set_queue(struct wl_proxy* proxy, struct wl_event_queue* queue);
struct wl_display* wl_display_connect(const char* name);
struct wl_display* wl_display_connect_to_fd(int fd);
void wl_display_disconnect(struct wl_display* display);
int wl_display_get_fd(struct wl_display* display);
int wl_display_dispatch(struct wl_display* display);
int wl_display_dispatch_queue(struct wl_display* display, struct wl_event_queue* queue);
int wl_display_dispatch_queue_pending(struct wl_display* display, struct wl_event_queue* queue);
int wl_display_dispatch_pending(struct wl_display* display);
int wl_display_get_error(struct wl_display* display);
uint32_t wl_display_get_protocol_error(struct wl_display* display, const struct wl_interface** interface, uint32_t* id);
int wl_display_flush(struct wl_display* display);
int wl_display_roundtrip_queue(struct wl_display* display, struct wl_event_queue* queue);
int wl_display_roundtrip(struct wl_display* display);
struct wl_event_queue* wl_display_create_queue(struct wl_display* display);
int wl_display_prepare_read_queue(struct wl_display* display, struct wl_event_queue* queue);
int wl_display_prepare_read(struct wl_display* display);
void wl_display_cancel_read(struct wl_display* display);
int wl_display_read_events(struct wl_display* display);
void wl_log_set_handler_client(wl_log_func_t handler);

// generate_stubs cannot generate forwarding functions for variadic functions.
// These are left commented here for completeness.
// void wl_proxy_marshal(struct wl_proxy* p, uint32_t opcode, ...);
// struct wl_proxy* wl_proxy_marshal_constructor(struct wl_proxy* proxy, uint32_t opcode, const struct wl_interface* interface, ...);
// struct wl_proxy* wl_proxy_marshal_constructor_versioned(struct wl_proxy* proxy, uint32_t opcode, const struct wl_interface* interface, uint32_t version, ...);

// These signatures are obtained by hand from wayland-util.h.
// Wayland utility is not a separate library, but rather included in libwayland-* libraries.
// It must be enough to include these in libwayland-client and dlopen should successfully
// resolve these symbols.
void wl_list_init(struct wl_list *list);
void wl_list_insert(struct wl_list *list, struct wl_list *elm);
void wl_list_remove(struct wl_list *elm);
int wl_list_length(const struct wl_list *list);
int wl_list_empty(const struct wl_list *list);
void wl_list_insert_list(struct wl_list *list, struct wl_list *other);
void wl_array_init(struct wl_array *array);
void wl_array_release(struct wl_array *array);
void *wl_array_add(struct wl_array *array, size_t size);
int wl_array_copy(struct wl_array *array, struct wl_array *source);
