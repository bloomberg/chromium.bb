// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and gl_angle_ext.xml.
//
// Copyright 2019 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// capture_gles_1_0_autogen.h:
//   Capture functions for the OpenGL ES 1.0 entry points.

#ifndef LIBANGLE_CAPTURE_GLES_1_0_AUTOGEN_H_
#define LIBANGLE_CAPTURE_GLES_1_0_AUTOGEN_H_

#include "common/PackedEnums.h"
#include "libANGLE/FrameCapture.h"

namespace gl
{
class Context;

// Method Captures

angle::CallCapture CaptureAlphaFunc(const Context *context,
                                    bool isCallValid,
                                    AlphaTestFunc funcPacked,
                                    GLfloat ref);
angle::CallCapture CaptureAlphaFuncx(const Context *context,
                                     bool isCallValid,
                                     AlphaTestFunc funcPacked,
                                     GLfixed ref);
angle::CallCapture CaptureClearColorx(const Context *context,
                                      bool isCallValid,
                                      GLfixed red,
                                      GLfixed green,
                                      GLfixed blue,
                                      GLfixed alpha);
angle::CallCapture CaptureClearDepthx(const Context *context, bool isCallValid, GLfixed depth);
angle::CallCapture CaptureClientActiveTexture(const Context *context,
                                              bool isCallValid,
                                              GLenum texture);
angle::CallCapture CaptureClipPlanef(const Context *context,
                                     bool isCallValid,
                                     GLenum p,
                                     const GLfloat *eqn);
angle::CallCapture CaptureClipPlanex(const Context *context,
                                     bool isCallValid,
                                     GLenum plane,
                                     const GLfixed *equation);
angle::CallCapture CaptureColor4f(const Context *context,
                                  bool isCallValid,
                                  GLfloat red,
                                  GLfloat green,
                                  GLfloat blue,
                                  GLfloat alpha);
angle::CallCapture CaptureColor4ub(const Context *context,
                                   bool isCallValid,
                                   GLubyte red,
                                   GLubyte green,
                                   GLubyte blue,
                                   GLubyte alpha);
angle::CallCapture CaptureColor4x(const Context *context,
                                  bool isCallValid,
                                  GLfixed red,
                                  GLfixed green,
                                  GLfixed blue,
                                  GLfixed alpha);
angle::CallCapture CaptureColorPointer(const Context *context,
                                       bool isCallValid,
                                       GLint size,
                                       VertexAttribType typePacked,
                                       GLsizei stride,
                                       const void *pointer);
angle::CallCapture CaptureDepthRangex(const Context *context,
                                      bool isCallValid,
                                      GLfixed n,
                                      GLfixed f);
angle::CallCapture CaptureDisableClientState(const Context *context,
                                             bool isCallValid,
                                             ClientVertexArrayType arrayPacked);
angle::CallCapture CaptureEnableClientState(const Context *context,
                                            bool isCallValid,
                                            ClientVertexArrayType arrayPacked);
angle::CallCapture CaptureFogf(const Context *context,
                               bool isCallValid,
                               GLenum pname,
                               GLfloat param);
angle::CallCapture CaptureFogfv(const Context *context,
                                bool isCallValid,
                                GLenum pname,
                                const GLfloat *params);
angle::CallCapture CaptureFogx(const Context *context,
                               bool isCallValid,
                               GLenum pname,
                               GLfixed param);
angle::CallCapture CaptureFogxv(const Context *context,
                                bool isCallValid,
                                GLenum pname,
                                const GLfixed *param);
angle::CallCapture CaptureFrustumf(const Context *context,
                                   bool isCallValid,
                                   GLfloat l,
                                   GLfloat r,
                                   GLfloat b,
                                   GLfloat t,
                                   GLfloat n,
                                   GLfloat f);
angle::CallCapture CaptureFrustumx(const Context *context,
                                   bool isCallValid,
                                   GLfixed l,
                                   GLfixed r,
                                   GLfixed b,
                                   GLfixed t,
                                   GLfixed n,
                                   GLfixed f);
angle::CallCapture CaptureGetClipPlanef(const Context *context,
                                        bool isCallValid,
                                        GLenum plane,
                                        GLfloat *equation);
angle::CallCapture CaptureGetClipPlanex(const Context *context,
                                        bool isCallValid,
                                        GLenum plane,
                                        GLfixed *equation);
angle::CallCapture CaptureGetFixedv(const Context *context,
                                    bool isCallValid,
                                    GLenum pname,
                                    GLfixed *params);
angle::CallCapture CaptureGetLightfv(const Context *context,
                                     bool isCallValid,
                                     GLenum light,
                                     LightParameter pnamePacked,
                                     GLfloat *params);
angle::CallCapture CaptureGetLightxv(const Context *context,
                                     bool isCallValid,
                                     GLenum light,
                                     LightParameter pnamePacked,
                                     GLfixed *params);
angle::CallCapture CaptureGetMaterialfv(const Context *context,
                                        bool isCallValid,
                                        GLenum face,
                                        MaterialParameter pnamePacked,
                                        GLfloat *params);
angle::CallCapture CaptureGetMaterialxv(const Context *context,
                                        bool isCallValid,
                                        GLenum face,
                                        MaterialParameter pnamePacked,
                                        GLfixed *params);
angle::CallCapture CaptureGetPointerv(const Context *context,
                                      bool isCallValid,
                                      GLenum pname,
                                      void **params);
angle::CallCapture CaptureGetTexEnvfv(const Context *context,
                                      bool isCallValid,
                                      TextureEnvTarget targetPacked,
                                      TextureEnvParameter pnamePacked,
                                      GLfloat *params);
angle::CallCapture CaptureGetTexEnviv(const Context *context,
                                      bool isCallValid,
                                      TextureEnvTarget targetPacked,
                                      TextureEnvParameter pnamePacked,
                                      GLint *params);
angle::CallCapture CaptureGetTexEnvxv(const Context *context,
                                      bool isCallValid,
                                      TextureEnvTarget targetPacked,
                                      TextureEnvParameter pnamePacked,
                                      GLfixed *params);
angle::CallCapture CaptureGetTexParameterxv(const Context *context,
                                            bool isCallValid,
                                            TextureType targetPacked,
                                            GLenum pname,
                                            GLfixed *params);
angle::CallCapture CaptureLightModelf(const Context *context,
                                      bool isCallValid,
                                      GLenum pname,
                                      GLfloat param);
angle::CallCapture CaptureLightModelfv(const Context *context,
                                       bool isCallValid,
                                       GLenum pname,
                                       const GLfloat *params);
angle::CallCapture CaptureLightModelx(const Context *context,
                                      bool isCallValid,
                                      GLenum pname,
                                      GLfixed param);
angle::CallCapture CaptureLightModelxv(const Context *context,
                                       bool isCallValid,
                                       GLenum pname,
                                       const GLfixed *param);
angle::CallCapture CaptureLightf(const Context *context,
                                 bool isCallValid,
                                 GLenum light,
                                 LightParameter pnamePacked,
                                 GLfloat param);
angle::CallCapture CaptureLightfv(const Context *context,
                                  bool isCallValid,
                                  GLenum light,
                                  LightParameter pnamePacked,
                                  const GLfloat *params);
angle::CallCapture CaptureLightx(const Context *context,
                                 bool isCallValid,
                                 GLenum light,
                                 LightParameter pnamePacked,
                                 GLfixed param);
angle::CallCapture CaptureLightxv(const Context *context,
                                  bool isCallValid,
                                  GLenum light,
                                  LightParameter pnamePacked,
                                  const GLfixed *params);
angle::CallCapture CaptureLineWidthx(const Context *context, bool isCallValid, GLfixed width);
angle::CallCapture CaptureLoadIdentity(const Context *context, bool isCallValid);
angle::CallCapture CaptureLoadMatrixf(const Context *context, bool isCallValid, const GLfloat *m);
angle::CallCapture CaptureLoadMatrixx(const Context *context, bool isCallValid, const GLfixed *m);
angle::CallCapture CaptureLogicOp(const Context *context,
                                  bool isCallValid,
                                  LogicalOperation opcodePacked);
angle::CallCapture CaptureMaterialf(const Context *context,
                                    bool isCallValid,
                                    GLenum face,
                                    MaterialParameter pnamePacked,
                                    GLfloat param);
angle::CallCapture CaptureMaterialfv(const Context *context,
                                     bool isCallValid,
                                     GLenum face,
                                     MaterialParameter pnamePacked,
                                     const GLfloat *params);
angle::CallCapture CaptureMaterialx(const Context *context,
                                    bool isCallValid,
                                    GLenum face,
                                    MaterialParameter pnamePacked,
                                    GLfixed param);
angle::CallCapture CaptureMaterialxv(const Context *context,
                                     bool isCallValid,
                                     GLenum face,
                                     MaterialParameter pnamePacked,
                                     const GLfixed *param);
angle::CallCapture CaptureMatrixMode(const Context *context,
                                     bool isCallValid,
                                     MatrixType modePacked);
angle::CallCapture CaptureMultMatrixf(const Context *context, bool isCallValid, const GLfloat *m);
angle::CallCapture CaptureMultMatrixx(const Context *context, bool isCallValid, const GLfixed *m);
angle::CallCapture CaptureMultiTexCoord4f(const Context *context,
                                          bool isCallValid,
                                          GLenum target,
                                          GLfloat s,
                                          GLfloat t,
                                          GLfloat r,
                                          GLfloat q);
angle::CallCapture CaptureMultiTexCoord4x(const Context *context,
                                          bool isCallValid,
                                          GLenum texture,
                                          GLfixed s,
                                          GLfixed t,
                                          GLfixed r,
                                          GLfixed q);
angle::CallCapture CaptureNormal3f(const Context *context,
                                   bool isCallValid,
                                   GLfloat nx,
                                   GLfloat ny,
                                   GLfloat nz);
angle::CallCapture CaptureNormal3x(const Context *context,
                                   bool isCallValid,
                                   GLfixed nx,
                                   GLfixed ny,
                                   GLfixed nz);
angle::CallCapture CaptureNormalPointer(const Context *context,
                                        bool isCallValid,
                                        VertexAttribType typePacked,
                                        GLsizei stride,
                                        const void *pointer);
angle::CallCapture CaptureOrthof(const Context *context,
                                 bool isCallValid,
                                 GLfloat l,
                                 GLfloat r,
                                 GLfloat b,
                                 GLfloat t,
                                 GLfloat n,
                                 GLfloat f);
angle::CallCapture CaptureOrthox(const Context *context,
                                 bool isCallValid,
                                 GLfixed l,
                                 GLfixed r,
                                 GLfixed b,
                                 GLfixed t,
                                 GLfixed n,
                                 GLfixed f);
angle::CallCapture CapturePointParameterf(const Context *context,
                                          bool isCallValid,
                                          PointParameter pnamePacked,
                                          GLfloat param);
angle::CallCapture CapturePointParameterfv(const Context *context,
                                           bool isCallValid,
                                           PointParameter pnamePacked,
                                           const GLfloat *params);
angle::CallCapture CapturePointParameterx(const Context *context,
                                          bool isCallValid,
                                          PointParameter pnamePacked,
                                          GLfixed param);
angle::CallCapture CapturePointParameterxv(const Context *context,
                                           bool isCallValid,
                                           PointParameter pnamePacked,
                                           const GLfixed *params);
angle::CallCapture CapturePointSize(const Context *context, bool isCallValid, GLfloat size);
angle::CallCapture CapturePointSizex(const Context *context, bool isCallValid, GLfixed size);
angle::CallCapture CapturePolygonOffsetx(const Context *context,
                                         bool isCallValid,
                                         GLfixed factor,
                                         GLfixed units);
angle::CallCapture CapturePopMatrix(const Context *context, bool isCallValid);
angle::CallCapture CapturePushMatrix(const Context *context, bool isCallValid);
angle::CallCapture CaptureRotatef(const Context *context,
                                  bool isCallValid,
                                  GLfloat angle,
                                  GLfloat x,
                                  GLfloat y,
                                  GLfloat z);
angle::CallCapture CaptureRotatex(const Context *context,
                                  bool isCallValid,
                                  GLfixed angle,
                                  GLfixed x,
                                  GLfixed y,
                                  GLfixed z);
angle::CallCapture CaptureSampleCoveragex(const Context *context,
                                          bool isCallValid,
                                          GLclampx value,
                                          GLboolean invert);
angle::CallCapture CaptureScalef(const Context *context,
                                 bool isCallValid,
                                 GLfloat x,
                                 GLfloat y,
                                 GLfloat z);
angle::CallCapture CaptureScalex(const Context *context,
                                 bool isCallValid,
                                 GLfixed x,
                                 GLfixed y,
                                 GLfixed z);
angle::CallCapture CaptureShadeModel(const Context *context,
                                     bool isCallValid,
                                     ShadingModel modePacked);
angle::CallCapture CaptureTexCoordPointer(const Context *context,
                                          bool isCallValid,
                                          GLint size,
                                          VertexAttribType typePacked,
                                          GLsizei stride,
                                          const void *pointer);
angle::CallCapture CaptureTexEnvf(const Context *context,
                                  bool isCallValid,
                                  TextureEnvTarget targetPacked,
                                  TextureEnvParameter pnamePacked,
                                  GLfloat param);
angle::CallCapture CaptureTexEnvfv(const Context *context,
                                   bool isCallValid,
                                   TextureEnvTarget targetPacked,
                                   TextureEnvParameter pnamePacked,
                                   const GLfloat *params);
angle::CallCapture CaptureTexEnvi(const Context *context,
                                  bool isCallValid,
                                  TextureEnvTarget targetPacked,
                                  TextureEnvParameter pnamePacked,
                                  GLint param);
angle::CallCapture CaptureTexEnviv(const Context *context,
                                   bool isCallValid,
                                   TextureEnvTarget targetPacked,
                                   TextureEnvParameter pnamePacked,
                                   const GLint *params);
angle::CallCapture CaptureTexEnvx(const Context *context,
                                  bool isCallValid,
                                  TextureEnvTarget targetPacked,
                                  TextureEnvParameter pnamePacked,
                                  GLfixed param);
angle::CallCapture CaptureTexEnvxv(const Context *context,
                                   bool isCallValid,
                                   TextureEnvTarget targetPacked,
                                   TextureEnvParameter pnamePacked,
                                   const GLfixed *params);
angle::CallCapture CaptureTexParameterx(const Context *context,
                                        bool isCallValid,
                                        TextureType targetPacked,
                                        GLenum pname,
                                        GLfixed param);
angle::CallCapture CaptureTexParameterxv(const Context *context,
                                         bool isCallValid,
                                         TextureType targetPacked,
                                         GLenum pname,
                                         const GLfixed *params);
angle::CallCapture CaptureTranslatef(const Context *context,
                                     bool isCallValid,
                                     GLfloat x,
                                     GLfloat y,
                                     GLfloat z);
angle::CallCapture CaptureTranslatex(const Context *context,
                                     bool isCallValid,
                                     GLfixed x,
                                     GLfixed y,
                                     GLfixed z);
angle::CallCapture CaptureVertexPointer(const Context *context,
                                        bool isCallValid,
                                        GLint size,
                                        VertexAttribType typePacked,
                                        GLsizei stride,
                                        const void *pointer);

// Parameter Captures

void CaptureClipPlanef_eqn(const Context *context,
                           bool isCallValid,
                           GLenum p,
                           const GLfloat *eqn,
                           angle::ParamCapture *paramCapture);
void CaptureClipPlanex_equation(const Context *context,
                                bool isCallValid,
                                GLenum plane,
                                const GLfixed *equation,
                                angle::ParamCapture *paramCapture);
void CaptureColorPointer_pointer(const Context *context,
                                 bool isCallValid,
                                 GLint size,
                                 VertexAttribType typePacked,
                                 GLsizei stride,
                                 const void *pointer,
                                 angle::ParamCapture *paramCapture);
void CaptureFogfv_params(const Context *context,
                         bool isCallValid,
                         GLenum pname,
                         const GLfloat *params,
                         angle::ParamCapture *paramCapture);
void CaptureFogxv_param(const Context *context,
                        bool isCallValid,
                        GLenum pname,
                        const GLfixed *param,
                        angle::ParamCapture *paramCapture);
void CaptureGetClipPlanef_equation(const Context *context,
                                   bool isCallValid,
                                   GLenum plane,
                                   GLfloat *equation,
                                   angle::ParamCapture *paramCapture);
void CaptureGetClipPlanex_equation(const Context *context,
                                   bool isCallValid,
                                   GLenum plane,
                                   GLfixed *equation,
                                   angle::ParamCapture *paramCapture);
void CaptureGetFixedv_params(const Context *context,
                             bool isCallValid,
                             GLenum pname,
                             GLfixed *params,
                             angle::ParamCapture *paramCapture);
void CaptureGetLightfv_params(const Context *context,
                              bool isCallValid,
                              GLenum light,
                              LightParameter pnamePacked,
                              GLfloat *params,
                              angle::ParamCapture *paramCapture);
void CaptureGetLightxv_params(const Context *context,
                              bool isCallValid,
                              GLenum light,
                              LightParameter pnamePacked,
                              GLfixed *params,
                              angle::ParamCapture *paramCapture);
void CaptureGetMaterialfv_params(const Context *context,
                                 bool isCallValid,
                                 GLenum face,
                                 MaterialParameter pnamePacked,
                                 GLfloat *params,
                                 angle::ParamCapture *paramCapture);
void CaptureGetMaterialxv_params(const Context *context,
                                 bool isCallValid,
                                 GLenum face,
                                 MaterialParameter pnamePacked,
                                 GLfixed *params,
                                 angle::ParamCapture *paramCapture);
void CaptureGetPointerv_params(const Context *context,
                               bool isCallValid,
                               GLenum pname,
                               void **params,
                               angle::ParamCapture *paramCapture);
void CaptureGetTexEnvfv_params(const Context *context,
                               bool isCallValid,
                               TextureEnvTarget targetPacked,
                               TextureEnvParameter pnamePacked,
                               GLfloat *params,
                               angle::ParamCapture *paramCapture);
void CaptureGetTexEnviv_params(const Context *context,
                               bool isCallValid,
                               TextureEnvTarget targetPacked,
                               TextureEnvParameter pnamePacked,
                               GLint *params,
                               angle::ParamCapture *paramCapture);
void CaptureGetTexEnvxv_params(const Context *context,
                               bool isCallValid,
                               TextureEnvTarget targetPacked,
                               TextureEnvParameter pnamePacked,
                               GLfixed *params,
                               angle::ParamCapture *paramCapture);
void CaptureGetTexParameterxv_params(const Context *context,
                                     bool isCallValid,
                                     TextureType targetPacked,
                                     GLenum pname,
                                     GLfixed *params,
                                     angle::ParamCapture *paramCapture);
void CaptureLightModelfv_params(const Context *context,
                                bool isCallValid,
                                GLenum pname,
                                const GLfloat *params,
                                angle::ParamCapture *paramCapture);
void CaptureLightModelxv_param(const Context *context,
                               bool isCallValid,
                               GLenum pname,
                               const GLfixed *param,
                               angle::ParamCapture *paramCapture);
void CaptureLightfv_params(const Context *context,
                           bool isCallValid,
                           GLenum light,
                           LightParameter pnamePacked,
                           const GLfloat *params,
                           angle::ParamCapture *paramCapture);
void CaptureLightxv_params(const Context *context,
                           bool isCallValid,
                           GLenum light,
                           LightParameter pnamePacked,
                           const GLfixed *params,
                           angle::ParamCapture *paramCapture);
void CaptureLoadMatrixf_m(const Context *context,
                          bool isCallValid,
                          const GLfloat *m,
                          angle::ParamCapture *paramCapture);
void CaptureLoadMatrixx_m(const Context *context,
                          bool isCallValid,
                          const GLfixed *m,
                          angle::ParamCapture *paramCapture);
void CaptureMaterialfv_params(const Context *context,
                              bool isCallValid,
                              GLenum face,
                              MaterialParameter pnamePacked,
                              const GLfloat *params,
                              angle::ParamCapture *paramCapture);
void CaptureMaterialxv_param(const Context *context,
                             bool isCallValid,
                             GLenum face,
                             MaterialParameter pnamePacked,
                             const GLfixed *param,
                             angle::ParamCapture *paramCapture);
void CaptureMultMatrixf_m(const Context *context,
                          bool isCallValid,
                          const GLfloat *m,
                          angle::ParamCapture *paramCapture);
void CaptureMultMatrixx_m(const Context *context,
                          bool isCallValid,
                          const GLfixed *m,
                          angle::ParamCapture *paramCapture);
void CaptureNormalPointer_pointer(const Context *context,
                                  bool isCallValid,
                                  VertexAttribType typePacked,
                                  GLsizei stride,
                                  const void *pointer,
                                  angle::ParamCapture *paramCapture);
void CapturePointParameterfv_params(const Context *context,
                                    bool isCallValid,
                                    PointParameter pnamePacked,
                                    const GLfloat *params,
                                    angle::ParamCapture *paramCapture);
void CapturePointParameterxv_params(const Context *context,
                                    bool isCallValid,
                                    PointParameter pnamePacked,
                                    const GLfixed *params,
                                    angle::ParamCapture *paramCapture);
void CaptureTexCoordPointer_pointer(const Context *context,
                                    bool isCallValid,
                                    GLint size,
                                    VertexAttribType typePacked,
                                    GLsizei stride,
                                    const void *pointer,
                                    angle::ParamCapture *paramCapture);
void CaptureTexEnvfv_params(const Context *context,
                            bool isCallValid,
                            TextureEnvTarget targetPacked,
                            TextureEnvParameter pnamePacked,
                            const GLfloat *params,
                            angle::ParamCapture *paramCapture);
void CaptureTexEnviv_params(const Context *context,
                            bool isCallValid,
                            TextureEnvTarget targetPacked,
                            TextureEnvParameter pnamePacked,
                            const GLint *params,
                            angle::ParamCapture *paramCapture);
void CaptureTexEnvxv_params(const Context *context,
                            bool isCallValid,
                            TextureEnvTarget targetPacked,
                            TextureEnvParameter pnamePacked,
                            const GLfixed *params,
                            angle::ParamCapture *paramCapture);
void CaptureTexParameterxv_params(const Context *context,
                                  bool isCallValid,
                                  TextureType targetPacked,
                                  GLenum pname,
                                  const GLfixed *params,
                                  angle::ParamCapture *paramCapture);
void CaptureVertexPointer_pointer(const Context *context,
                                  bool isCallValid,
                                  GLint size,
                                  VertexAttribType typePacked,
                                  GLsizei stride,
                                  const void *pointer,
                                  angle::ParamCapture *paramCapture);
}  // namespace gl

#endif  // LIBANGLE_CAPTURE_GLES_1_0_AUTOGEN_H_
