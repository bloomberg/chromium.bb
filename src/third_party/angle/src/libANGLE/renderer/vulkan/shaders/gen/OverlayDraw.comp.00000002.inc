// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x7b,0x90,0x97,0x55,
    0x19,0xfe,0xde,0xf3,0x5b,0x76,0x17,0xd8,0x84,0x52,0x28,0x14,0x51,0x58,0x31,0x18,
    0x70,0xb9,0x0c,0x2c,0x9b,0xcb,0x6d,0x41,0x58,0x4c,0x47,0xee,0xcd,0xb4,0x4c,0x81,
    0x8b,0x95,0xca,0x80,0x31,0x2c,0x18,0xcc,0x72,0x59,0x40,0xc3,0x08,0xd2,0x29,0x59,
    0x16,0x02,0x64,0xa4,0x91,0x94,0x49,0xe4,0xaf,0xa6,0x9a,0xa9,0xa0,0xe9,0xc2,0xc5,
    0x60,0x4c,0x2e,0x46,0x16,0xb7,0x0c,0x54,0x42,0xc8,0x94,0xbb,0xe7,0xf9,0xde,0xe7,
    0xe5,0xf7,0xee,0x37,0xcb,0x6f,0xe6,0xcc,0xf7,0x9d,0xe7,0xbd,0x3d,0xe7,0x9c,0xf7,
    0x9c,0xf3,0xfe,0xbe,0x5c,0x28,0x2d,0x4a,0x12,0x49,0xda,0x24,0xc5,0xc9,0xad,0xb9,
    0x24,0xfd,0x7d,0x3e,0x09,0x11,0x49,0x92,0xb6,0x49,0x61,0xfa,0xac,0x7e,0x78,0xe2,
    0xc3,0x65,0x73,0xea,0x1e,0x2b,0x1b,0x30,0xb0,0x2f,0xe4,0xb7,0x24,0xaa,0x08,0x59,
    0xbb,0xa4,0x28,0x69,0x15,0x9f,0x05,0xb1,0xcd,0x7c,0xf4,0x89,0x59,0xc0,0x0f,0xc7,
    0x76,0x2e,0xb6,0xf6,0xd1,0xbe,0x20,0xf5,0xa7,0xf2,0x02,0xda,0x54,0xc7,0xb7,0xe1,
    0xf1,0x59,0x98,0xea,0x24,0xc9,0x98,0xe8,0xa1,0x4a,0x43,0x27,0xa5,0x7c,0x1a,0x26,
    0xc4,0xbc,0x5e,0x20,0x76,0xb7,0xc3,0x72,0xc4,0xfa,0xd2,0xff,0x08,0xfa,0xef,0x2b,
    0xaa,0x33,0x32,0xe3,0xbf,0x3a,0x5a,0x8c,0xa4,0x2f,0xe8,0x8f,0x8a,0xcf,0x6e,0x37,
    0x64,0xda,0xef,0xea,0xf8,0x2e,0xcb,0xc8,0x97,0x51,0x5e,0xc0,0xfe,0xda,0xcc,0x78,
    0x9a,0x5a,0x18,0x4f,0x53,0x0b,0xe3,0x69,0x6a,0x61,0x3c,0x4d,0x2d,0x8c,0x67,0x9d,
    0x8d,0xa7,0x40,0x75,0xd6,0xb7,0x30,0x9e,0xf5,0x6e,0x3c,0x1b,0x32,0x7c,0x37,0x90,
    0xaf,0xc9,0x0f,0xa7,0xeb,0x9b,0x24,0x9d,0x19,0xf3,0x68,0x0b,0x7c,0x8f,0x3a,0xbe,
    0xc5,0x8c,0x71,0xd4,0xf9,0x38,0x9b,0x89,0x71,0x96,0x31,0x72,0xec,0x9f,0x63,0x8c,
    0xdb,0xd9,0x7f,0x4f,0x9a,0xeb,0xa3,0xdf,0xd5,0xf5,0x2f,0x8b,0xea,0x77,0x8a,0xed,
    0xd6,0x18,0x25,0xa4,0xfe,0x72,0xa9,0x3f,0xbc,0x77,0x88,0x3a,0x85,0x9c,0x27,0xfc,
    0xbe,0x18,0xfb,0x45,0x9c,0x97,0xc0,0x7e,0x31,0xfb,0x58,0x97,0xdb,0x22,0xda,0x3a,
    0x3e,0x3b,0x46,0x0f,0x1d,0x68,0x07,0x9d,0x6e,0xa9,0x2f,0xd5,0x41,0xbf,0x67,0x7c,
    0xb6,0xa6,0x8f,0x5e,0x8c,0x51,0xce,0x18,0xd6,0xaf,0xa4,0xbe,0xf5,0x87,0x71,0x0d,
    0x3b,0x33,0x97,0x8b,0x89,0x75,0x89,0xd2,0x2a,0xf6,0xbb,0xf1,0x39,0x9c,0x7a,0xc8,
    0xc9,0xaa,0x1b,0x7a,0x9a,0x7f,0x23,0x52,0x5e,0x05,0xc9,0x03,0x8c,0x3f,0x32,0x8d,
    0xa5,0xfd,0x51,0x6e,0xdc,0xa3,0xc9,0x5f,0xc8,0x61,0x74,0x3a,0x67,0x79,0x8e,0xa3,
    0xd3,0x35,0xd3,0xb9,0x87,0xbf,0x87,0x68,0x5b,0xec,0x38,0xd7,0x38,0x7b,0xf4,0x6b,
    0x33,0x63,0x7e,0x2a,0xa3,0x5f,0x17,0xdb,0x75,0xd7,0xaf,0x27,0x87,0x4e,0x71,0xb6,
    0x1a,0x38,0x87,0x42,0x0e,0xd9,0x27,0x38,0x2c,0xe5,0x7b,0x03,0xc7,0x84,0xfe,0x32,
    0xb7,0x76,0x2b,0xe2,0x73,0xb4,0x5b,0xbb,0x95,0xec,0xe7,0x5c,0xcc,0x46,0x37,0x7f,
    0x6b,0xc9,0xaf,0x91,0xf3,0xdc,0x94,0x99,0xe7,0xb5,0xd4,0xc3,0x5e,0x69,0x72,0xf3,
    0x8c,0x7d,0xb1,0x8e,0x9c,0x7e,0xca,0x78,0xeb,0xc9,0x09,0xfd,0x0d,0x8e,0xc3,0xef,
    0x39,0x2e,0xe3,0x80,0xf7,0x5d,0x29,0xe3,0x25,0xc3,0x20,0x3f,0xc8,0xfc,0xb2,0x79,
    0x3e,0xc4,0x31,0x1f,0xa4,0xbf,0x43,0x3c,0xff,0x24,0x8d,0x5d,0x90,0xee,0x17,0xcb,
    0x51,0xe8,0xff,0x83,0xb9,0x76,0x94,0xfa,0xe8,0xbf,0x4b,0x0c,0xf2,0x7f,0xf2,0xbd,
    0xc8,0xc5,0x3f,0xcd,0x39,0xeb,0x1d,0x51,0x8c,0xf5,0x0c,0x31,0x6b,0xbb,0xb8,0x26,
    0x1f,0x30,0x8e,0xad,0x41,0xd2,0xc2,0x9a,0x7c,0xc8,0xf7,0x0f,0x18,0x1f,0xfd,0xb3,
    0xc4,0x8c,0xff,0xb9,0x4c,0x9e,0x15,0x89,0xf6,0x2d,0xfe,0x60,0x69,0x1e,0xff,0xb4,
    0xd3,0x1d,0x25,0x3a,0x97,0x88,0x35,0x9a,0xef,0x36,0xf6,0xef,0xb1,0xdf,0xcd,0xad,
    0xef,0xeb,0x11,0x9b,0xe6,0xc6,0xfa,0xeb,0xd8,0xdf,0xb7,0x77,0xef,0x50,0x8b,0xf5,
    0x9b,0x4c,0x2c,0xc8,0xe1,0x6b,0xaf,0xe8,0x3c,0x15,0x72,0xec,0xa7,0xa4,0x79,0x3e,
    0xda,0x2f,0x10,0x83,0xcd,0xbf,0x29,0x84,0x6e,0x25,0xfb,0xef,0x89,0xcd,0x6d,0x61,
    0xba,0x86,0x97,0x45,0xf7,0x7a,0x25,0xf7,0x4b,0x59,0x5c,0x69,0xac,0xc5,0x17,0x72,
    0x38,0x13,0x5a,0xa5,0xfe,0x0a,0xe8,0x1b,0x39,0xf0,0x69,0x44,0x70,0xff,0x7d,0x12,
    0x7b,0x57,0xe8,0xeb,0x72,0x7c,0xc7,0xf9,0x71,0x55,0x54,0x8e,0xe7,0x10,0xe6,0xce,
    0x11,0xe6,0xc7,0xd8,0xe8,0x15,0x7e,0xdf,0x21,0x76,0xc4,0xad,0x55,0x55,0xf4,0x88,
    0x3c,0xf8,0x17,0x73,0x03,0xfb,0x7c,0x08,0xcf,0xba,0x63,0xc4,0x7f,0x11,0x75,0x70,
    0x6e,0x1d,0xa7,0x8f,0x63,0x69,0x8e,0x17,0xa4,0x73,0x72,0x82,0x38,0x38,0x9d,0xa2,
    0xdf,0x4b,0x51,0x06,0xfc,0x24,0xc6,0x4f,0xde,0x78,0xbf,0x18,0x9f,0x57,0xc8,0xf3,
    0x14,0xe3,0x20,0x37,0xfe,0xcb,0xbc,0x30,0xde,0x1f,0x31,0x2f,0x8c,0xf7,0x79,0x62,
    0x1f,0x39,0xde,0xf5,0xdc,0xd3,0x17,0x28,0x9f,0x1a,0x35,0xb1,0x2f,0xff,0x47,0x7f,
    0x17,0x6e,0xdc,0x1d,0x49,0x32,0x3e,0xf2,0x2f,0x4c,0x79,0xa8,0x3c,0x71,0xd8,0x65,
    0x62,0x62,0xfc,0xc8,0x17,0xcf,0x8f,0x99,0x17,0x07,0x82,0xee,0x03,0x70,0x2e,0xc8,
    0xe9,0x39,0x05,0x19,0xec,0xf7,0x05,0xf5,0x01,0x59,0x89,0xa8,0xec,0xb5,0xe8,0x3b,
    0x3d,0xe3,0x45,0xe5,0x58,0x9f,0xff,0x47,0xbe,0xd7,0x78,0xc6,0xd9,0x1c,0x41,0x7e,
    0x35,0xbe,0x5f,0x63,0x4c,0xbc,0x97,0x44,0xaf,0xc8,0xed,0x56,0xdc,0x07,0x0f,0x32,
    0x46,0x3d,0x73,0xb8,0x50,0x54,0xf6,0x87,0x18,0x03,0x7a,0xad,0x45,0xf7,0x0c,0x70,
    0xd3,0x69,0x23,0x8a,0xff,0x91,0x63,0x2c,0x21,0x0f,0xe0,0x55,0x91,0x37,0xce,0xeb,
    0x76,0xa2,0x67,0x51,0x35,0x7d,0xda,0xba,0x63,0x0e,0xdb,0x8b,0xca,0x6d,0xfe,0x8b,
    0x83,0x62,0xed,0x25,0x3f,0xff,0x96,0x13,0xad,0x83,0xe6,0x04,0x74,0xd6,0x33,0x27,
    0xda,0x04,0xc5,0x91,0x13,0xed,0x42,0x7e,0xbc,0xc0,0xdb,0xc6,0x06,0x0c,0xe3,0xc5,
    0xbb,0xc5,0x28,0x71,0x31,0x02,0xf3,0x7d,0x3b,0x63,0x7c,0x8e,0x31,0x4a,0x5c,0x8c,
    0x5b,0x82,0xe2,0x58,0x33,0xf3,0x87,0x27,0xd6,0x05,0xf2,0xf6,0x41,0x79,0x5c,0xa5,
    0x2e,0x62,0x6d,0xa5,0xed,0x6d,0xa2,0x72,0xf0,0xeb,0x28,0x79,0x7e,0xc0,0x3b,0xc4,
    0xd6,0x91,0x39,0x8a,0x77,0xf8,0xbf,0xce,0xf5,0x01,0x6e,0x79,0xd3,0x49,0xf2,0xfb,
    0xc8,0xb0,0x3b,0xdc,0x1c,0xbd,0xca,0x1c,0xe8,0x2c,0xaa,0x0b,0x99,0xc5,0xbf,0x53,
    0x14,0x47,0xfc,0xbb,0x5c,0x7c,0xe0,0x5d,0x62,0xbb,0x8b,0xf1,0xbb,0xb8,0x78,0x5d,
    0x19,0x4f,0x5c,0xbc,0x52,0xc6,0x13,0x17,0xef,0x1e,0x51,0xdd,0x52,0x72,0x37,0x5f,
    0x78,0xda,0xdc,0x74,0x67,0x7c,0x8c,0xe7,0x1e,0xc6,0x34,0x6e,0xf7,0x8a,0xca,0xc1,
    0xad,0x87,0xe3,0x06,0xfc,0xcb,0xb1,0xf5,0xa0,0x3f,0xbc,0x2f,0x21,0x8f,0x5e,0x1c,
    0x63,0x8d,0xe3,0x76,0x9f,0x5b,0x4b,0xe3,0x56,0x26,0xaa,0x7b,0x1f,0xb9,0x99,0xaf,
    0x1e,0x8e,0x5b,0x1f,0xc6,0x07,0xdf,0x32,0xc6,0x34,0x6e,0xa8,0xaf,0xfb,0x90,0x5b,
    0x7f,0xc7,0x0d,0x78,0xbf,0xd8,0xfa,0xd3,0x5f,0x3f,0x37,0x6f,0x03,0xdc,0xbc,0x19,
    0xdf,0x81,0xa2,0xb8,0xe7,0x3b,0x88,0x7c,0x73,0x8e,0x6f,0x85,0xa8,0xee,0x20,0xf2,
    0x35,0xff,0xfd,0x1d,0xdf,0xaf,0x90,0x13,0xc6,0x50,0x41,0x1e,0xe0,0x57,0xe9,0xf8,
    0x41,0xe7,0x7e,0x9c,0xf5,0xb4,0xbf,0x3f,0x93,0x57,0xc0,0x97,0xc6,0x98,0xd8,0x07,
    0x23,0x24,0xbf,0x9f,0xaa,0xe2,0x6e,0xc4,0xbd,0x56,0x9d,0xd9,0xab,0xb8,0xf7,0xca,
    0xb9,0x5f,0xc1,0x7d,0x0c,0x75,0x10,0xb7,0x22,0x34,0xbf,0x17,0xbe,0xc4,0xbd,0x81,
    0xe7,0x8d,0xdc,0x0d,0x1a,0x07,0xbf,0x67,0x89,0xdd,0x1e,0x14,0x87,0x2f,0xc3,0x3a,
    0x07,0xc5,0x2b,0x13,0xe5,0x82,0x73,0xe3,0xce,0xd0,0x9c,0xcb,0x18,0xea,0xd9,0xd9,
    0xd1,0x25,0xa8,0xce,0x73,0xf4,0x71,0xb7,0xf3,0x61,0xf3,0xda,0x2d,0x28,0x5e,0xce,
    0x7b,0x63,0x90,0x3b,0x23,0x20,0x2b,0x8d,0xed,0x5e,0xf2,0xc6,0xd3,0xec,0x7a,0xd0,
    0xae,0x86,0x76,0xe5,0xce,0x0e,0xb2,0x9e,0xb1,0xf5,0xa6,0x5d,0x6f,0x67,0x57,0x46,
    0xbb,0x5a,0xda,0x0d,0x74,0x76,0x90,0xf5,0x89,0xad,0x3f,0xed,0xfa,0xbb,0x79,0x1a,
    0x10,0x74,0x3c,0x39,0xde,0x0d,0x15,0xd4,0xe9,0xe3,0x74,0xfa,0x51,0x27,0x64,0x74,
    0x10,0xe3,0x7a,0xcc,0x3a,0xbc,0xf7,0x74,0xfa,0xbd,0xa8,0x2f,0x19,0xfd,0x72,0xa7,
    0x5f,0xea,0xf4,0xbb,0x53,0x3f,0xc9,0xe8,0x0f,0x72,0xfa,0x15,0xe9,0xb9,0xd7,0x36,
    0xd5,0x3f,0x19,0x94,0x37,0xc6,0xd1,0x8f,0x63,0xeb,0xc5,0xb9,0xe9,0xce,0xb9,0x35,
    0xdf,0xe3,0x5d,0xce,0x1b,0x36,0xd1,0x9d,0x29,0x4b,0x89,0x4d,0x12,0xd5,0x85,0x6c,
    0x1b,0xe7,0xf4,0xeb,0xa2,0xb1,0x26,0x31,0xef,0xa6,0xb8,0x7c,0x87,0xac,0x26,0xb6,
    0x29,0xcc,0xf7,0x1a,0xb7,0x1f,0xbf,0x21,0x9a,0x7b,0x7e,0x3f,0x7e,0x53,0x14,0xaf,
    0xe4,0xbd,0x02,0xff,0xd3,0x44,0xf1,0x49,0xdc,0x2b,0xe6,0x6b,0x8a,0xdb,0x7b,0x8f,
    0x8a,0xf2,0xc0,0xf8,0xa7,0x31,0x26,0xb8,0x4c,0x77,0x5c,0xa0,0x53,0x1b,0xdb,0x74,
    0xda,0xd7,0x3a,0x2e,0xdf,0x71,0x5c,0xec,0xae,0x7c,0x5c,0x74,0x1f,0x40,0xf6,0x27,
    0x62,0x4f,0x88,0xe2,0x35,0x2e,0x87,0x9f,0x14,0xc5,0xcb,0xb9,0x2e,0xe6,0x7f,0xba,
    0xe3,0x37,0x43,0x94,0x23,0x38,0x3f,0x49,0x1e,0x16,0x7b,0x96,0x8b,0x6d,0xf3,0xfc,
    0x14,0xc7,0x0b,0xd9,0x76,0xc6,0x99,0x2d,0x8a,0x9f,0x74,0xf7,0xd7,0x1c,0x51,0xdf,
    0xaf,0x50,0xa7,0x4e,0x54,0x6f,0x0e,0xc7,0x3f,0xcf,0x8d,0x1f,0xb2,0xb9,0xb1,0xcd,
    0x23,0xbf,0xb9,0xac,0x01,0x50,0x1f,0xcf,0xcf,0x9c,0x2b,0x45,0xac,0x1d,0x51,0xf3,
    0x2c,0xa0,0x7c,0x6c,0xdc,0xd5,0xf8,0x9f,0x32,0x38,0x68,0x1d,0x74,0x20,0xe4,0x6b,
    0x80,0xc0,0xbc,0x41,0x2d,0x3c,0x24,0xa8,0x4d,0x2e,0xfd,0xdf,0xa5,0xd8,0xd0,0xa0,
    0xff,0x17,0x20,0x5b,0x1d,0x31,0xf8,0x19,0x16,0xd4,0xd7,0xd0,0x90,0xf7,0x3d,0x9c,
    0xb6,0x0b,0xa4,0xb9,0x6f,0xb3,0x19,0x11,0x54,0x07,0x7e,0x1a,0x88,0x8d,0x0c,0xea,
    0x6b,0x44,0xc8,0x73,0x78,0x80,0xfc,0xc0,0xe1,0x19,0x62,0xd5,0x41,0xf1,0xa1,0x4e,
    0x6f,0x4c,0x50,0xfb,0xc4,0xf1,0x7f,0x90,0x98,0x38,0xec,0xab,0xc4,0xa0,0x3a,0x8e,
    0xb5,0xe0,0x43,0x41,0xed,0xa1,0x0f,0x79,0x35,0x6b,0x10,0x9b,0xdf,0x79,0x92,0xaf,
    0x1b,0x5b,0xe5,0x94,0x0f,0x72,0x02,0x76,0x73,0x33,0xe7,0xbe,0xd6,0x91,0xad,0x53,
    0xdd,0x02,0xea,0xa2,0xe6,0x18,0xcc,0xfb,0x02,0xf6,0xf3,0xa4,0x79,0x5d,0x7a,0x8d,
    0xf9,0xb6,0x88,0xf1,0x16,0xb9,0x78,0xfb,0x39,0x7e,0xe8,0x14,0x46,0xdb,0x06,0xc9,
    0xd7,0xa9,0x6f,0x06,0xad,0x7f,0x21,0x5b,0x25,0x2a,0xb3,0x3a,0x75,0xb9,0xa8,0xdc,
    0xea,0xd4,0x25,0x94,0x5b,0x0e,0x41,0xbe,0x18,0xf7,0x3d,0x63,0xe2,0xdd,0xea,0xd4,
    0xef,0xbb,0x3a,0xf5,0x4d,0x57,0xa7,0xae,0x10,0x95,0x59,0x9d,0xfa,0x03,0xe6,0xd7,
    0x0a,0x57,0xa7,0xae,0x14,0xc5,0x6d,0xef,0xad,0x22,0x8f,0x95,0xae,0x4e,0x7d,0x5e,
    0xf4,0xdb,0x44,0x35,0x7d,0xfa,0x3a,0xf5,0x05,0x51,0xb9,0xd5,0x90,0x8f,0x04,0xc5,
    0x5e,0x68,0xa1,0x4e,0x1d,0xcb,0x1a,0xf2,0x11,0x57,0x43,0x8e,0x0b,0x8a,0x63,0xcf,
    0x4c,0x76,0x77,0x02,0xf0,0xf1,0xb1,0x4d,0xe6,0x59,0x3b,0xde,0xd5,0xa9,0x13,0x5c,
    0x8c,0x6c,0x9d,0x3a,0x91,0x31,0x26,0xb8,0x18,0x93,0x82,0xe2,0x58,0x33,0xf3,0x37,
    0xd9,0xd5,0xa9,0x5f,0x0b,0xca,0x03,0x73,0x3a,0x89,0x71,0x6d,0x9f,0xbf,0x28,0x2a,
    0x07,0xbf,0x46,0xb7,0x1e,0xc0,0xd7,0xc4,0xd6,0xc8,0xf5,0x58,0xc3,0x1c,0x69,0x60,
    0xbf,0xd1,0xd5,0x13,0x1b,0x24,0x3f,0x6e,0x9b,0xd3,0x97,0x32,0x73,0x3a,0x4a,0xf2,
    0x73,0xba,0x59,0x54,0x6e,0xe3,0xdd,0x22,0x8a,0x6d,0x76,0x73,0x6a,0x67,0xd8,0x2b,
    0xc4,0x83,0xc3,0xb6,0x39,0x5d,0xc3,0xa6,0x06,0xe5,0xe1,0xeb,0x8d,0x69,0x41,0xf1,
    0x6d,0xae,0xde,0xa8,0x0d,0x8a,0x57,0x3a,0xbd,0xc7,0x82,0xe2,0xbe,0x06,0xf9,0x56,
    0x68,0xce,0x7f,0x0c,0xf5,0x6c,0x0c,0xdf,0x0e,0xaa,0x63,0x35,0xc8,0xe3,0xce,0xc7,
    0x8d,0xf3,0x3b,0x28,0x6e,0x35,0xc8,0x62,0xb7,0xfe,0x90,0xcd,0x88,0x6d,0x16,0xd7,
    0x6b,0x96,0xab,0x25,0xbe,0x4b,0x3b,0xab,0x41,0x16,0x39,0x3b,0xc8,0x66,0xc7,0x56,
    0x47,0xbb,0x3a,0x67,0x37,0x8f,0x76,0x56,0x83,0x2c,0x74,0x76,0x90,0x3d,0x8d,0x33,
    0x90,0x76,0x0b,0xdc,0x1d,0x5d,0x1f,0x74,0x3c,0x56,0x83,0x2c,0xa4,0xce,0xd3,0x4e,
    0x67,0x3e,0x75,0x42,0x46,0x67,0x61,0xc8,0xef,0xff,0xbf,0x07,0xf5,0x05,0xdf,0xf3,
    0x19,0x2f,0x3d,0x47,0xa8,0x3b,0xdb,0xf9,0x9b,0x43,0x7f,0x56,0xa3,0x98,0xce,0x22,
    0xe7,0xef,0x9d,0xa0,0x3e,0x11,0x63,0x0e,0xc7,0x0d,0xdd,0xc5,0xd4,0x9d,0xe1,0xfc,
    0xcd,0xa4,0x3f,0xab,0x61,0x4c,0x67,0xb1,0xf3,0x77,0x24,0xa8,0x4f,0xc4,0x98,0xc9,
    0xf9,0xb7,0xf5,0x6b,0x70,0x79,0xb1,0x9c,0xd8,0xd2,0xa0,0x38,0xbe,0x23,0xee,0x24,
    0xf6,0x4c,0x50,0x3f,0x90,0xd9,0xdd,0xfd,0x6c,0x50,0xbc,0x2e,0xc9,0xdf,0xa9,0xdb,
    0x45,0xf1,0xd7,0x79,0x5f,0xee,0x70,0x7b,0x0b,0xb2,0x37,0x62,0xdb,0xc1,0xbd,0x84,
    0xf7,0xe7,0xb8,0x97,0x56,0x32,0x8f,0xb7,0x48,0x9e,0xdb,0x0f,0x83,0xfa,0xaa,0x77,
    0x39,0xbb,0xca,0x61,0xe3,0x68,0xbb,0x3a,0xa8,0x2e,0x64,0xcb,0x89,0xfd,0x28,0xa8,
    0xaf,0xd5,0xcc,0x5d,0x7c,0xbb,0x7c,0x3e,0xe8,0x77,0xcb,0x25,0xd4,0xf9,0x71,0x50,
    0xbd,0x95,0x21,0xff,0xcd,0xe3,0x27,0x41,0xf1,0x7a,0x7e,0x07,0x7b,0x31,0xe8,0x5e,
    0x1c,0xcf,0xb3,0x76,0x4d,0x50,0x1d,0xdb,0x83,0xc0,0x1a,0x89,0x49,0xca,0xa9,0x30,
    0xfd,0xfe,0xb9,0x36,0xa8,0x2e,0x64,0xf0,0x31,0x95,0xf7,0x48,0x53,0x50,0x1e,0x6b,
    0x43,0xf3,0x6f,0x28,0xb8,0x13,0xd7,0x05,0x95,0x27,0x49,0xbe,0x8e,0xf8,0x6d,0xe6,
    0x3c,0xf1,0x75,0xc4,0xef,0x28,0xb7,0xfb,0x73,0xa7,0xa8,0x0f,0xdf,0x4a,0xe2,0xae,
    0x85,0x6c,0x17,0xef,0x92,0x32,0x7e,0x8b,0x83,0xed,0x4e,0x57,0x83,0x6c,0x08,0x7a,
    0xc7,0xed,0xbf,0x49,0x0d,0xb2,0x31,0xa8,0x0f,0x5f,0x83,0x6c,0x62,0x0d,0xb2,0xd1,
    0xd5,0x20,0x2f,0x05,0xf5,0xb5,0xc9,0xd5,0x20,0x9b,0x69,0xbb,0xeb,0x26,0x35,0xc8,
    0xcb,0x41,0x75,0x36,0xba,0x1a,0x64,0x4b,0x50,0x5f,0x2f,0xbb,0xda,0xe2,0x67,0xe4,
    0xe7,0x6b,0x90,0xad,0x41,0xf1,0x4d,0x4e,0xef,0xe7,0x41,0xed,0x7d,0x0d,0xf2,0x2a,
    0x31,0x5f,0x83,0xbc,0x46,0xcc,0xd7,0x20,0xdb,0x82,0xda,0x43,0x1f,0xf2,0xad,0xdc,
    0x7b,0x96,0xb3,0x3b,0x5c,0x4d,0x50,0x94,0x53,0x3e,0xd8,0x6b,0xb0,0x7b,0x23,0x73,
    0x57,0x34,0x38,0xdd,0x42,0xea,0xe2,0x3e,0x81,0xdd,0x0e,0x69,0x5e,0x6b,0x2c,0x91,
    0x3c,0xaf,0x3f,0x4b,0x7e,0x9c,0xbf,0xe4,0xbe,0xfa,0x8b,0x28,0xbe,0x8b,0x67,0xdc,
    0x1e,0xb7,0xaf,0x20,0xdb,0x1d,0xdb,0x1e,0xfa,0xda,0x2d,0xfa,0xed,0x11,0xdf,0x56,
    0xf7,0x89,0x7e,0x7b,0xb4,0xbc,0x49,0xeb,0x15,0xe2,0x56,0xa3,0xfc,0x55,0x14,0xb3,
    0xf3,0xfa,0x80,0xf3,0x0d,0xd9,0xfe,0xd8,0x0e,0xd0,0xf7,0x7e,0x77,0x7f,0xbd,0xc5,
    0xff,0xff,0xf8,0xa6,0x6a,0xdf,0x6b,0xab,0x62,0x04,0xc4,0xfd,0x9b,0xe4,0xbf,0x79,
    0xd6,0xb8,0xff,0xd3,0x6f,0x53,0x66,0x75,0xf9,0x41,0x51,0xcc,0x7f,0x2f,0x38,0xec,
    0xbe,0x2b,0x98,0xde,0x11,0x51,0x5d,0xc8,0x26,0x44,0x04,0xf1,0x77,0x07,0xc5,0xdf,
    0x92,0xfc,0xf9,0x67,0x3c,0x0f,0x70,0xee,0xa1,0xf7,0x36,0x6b,0x07,0xcc,0x0b,0x6c,
    0xf6,0xbb,0xbc,0x7f,0x57,0x5a,0xce,0xfb,0x5f,0x71,0x6e,0x8e,0x71,0xde,0x4f,0x73,
    0x6e,0x4e,0xb8,0xb9,0x81,0xec,0x78,0x6c,0x27,0x18,0xf3,0x38,0xe7,0x18,0xdf,0xa5,
    0xff,0xc3,0x6f,0xd2,0x76,0xae,0x9c,0x11,0xe5,0x51,0x1b,0xfd,0x22,0x1f,0xde,0xa7,
    0xce,0x19,0xc7,0xe5,0x43,0x51,0xfc,0xfd,0x9b,0xec,0x93,0x73,0xa2,0x3a,0xe0,0x63,
    0xfb,0xe4,0xbc,0xe8,0x18,0xce,0x31,0x9f,0x8c,0xcb,0x09,0x8e,0x1f,0x3a,0x87,0x82,
    0xea,0x60,0x4e,0xce,0x93,0xb3,0xf1,0xbc,0x90,0xe1,0xf9,0x31,0x79,0x5a,0x2e,0x7e,
    0x22,0x6a,0xef,0xf7,0xd2,0xa7,0xc4,0xfc,0x5e,0xba,0x48,0xcc,0xef,0xa5,0x4b,0xa2,
    0xf6,0xd0,0xbf,0xc8,0xdc,0x9d,0x1e,0xe3,0x20,0x26,0xe2,0x5c,0x22,0x67,0xcb,0xdb,
    0x3d,0xd2,0xfc,0x3b,0xf6,0x95,0xf4,0x1b,0xae,0x24,0x15,0xb1,0x7d,0x06,0x23,0x9d,
    0x6f,0x31,0xe0,0x1e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 4, local_size_y = 4, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[256 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[16];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[16];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
//
//     bool rotateXY;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uvec4 arrayItem = textWidgetsData[textWidget]. text[packIndex / 4];
//     const uint col = packIndex % 4;
//
//     uint packedChars;
//     if(col == 0)
//     {
//         packedChars = arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         packedChars = arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         packedChars = arrayItem[2];
//     }
//     else
//     {
//         packedChars = arrayItem[3];
//     }
//
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontLayer)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     const uvec2 glyphOffset = fontGlyphSize *
//         uvec2(textChar % 32, textChar / 32);
//
//     return texelFetch(font, ivec3(glyphOffset + coordInGlyph, fontLayer), 0). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     const uvec4 arrayItem = graphWidgetsData[graphWidget]. values[valueIndex / 4];
//     const uint col = valueIndex % 4;
//
//     if(col == 0)
//     {
//         return arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         return arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         return arrayItem[2];
//     }
//     else
//     {
//         return arrayItem[3];
//     }
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontLayer = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar <(32 * 3))
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontLayer);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//
//         if(params . rotateXY)
//         {
//
//             imageCoords . xy = imageCoords . yx;
//             imageCoords . x = params . outputSize . y - 1 - imageCoords . x;
//         }
//
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
