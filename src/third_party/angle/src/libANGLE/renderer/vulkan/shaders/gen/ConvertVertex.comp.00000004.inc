// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x98,0x77,0x70,0x57,0x45,
    0x10,0xc7,0xdf,0x25,0xe1,0x97,0x48,0x42,0x87,0x04,0xa4,0x25,0x04,0x31,0x98,0x10,
    0x5a,0x08,0x3d,0xe2,0x28,0x62,0xc1,0x8a,0x28,0x30,0x22,0x16,0x34,0xa2,0x62,0x03,
    0x3b,0x28,0x58,0xa2,0x88,0x22,0x76,0xc5,0xde,0x69,0x16,0x14,0x0b,0x45,0xb1,0xa0,
    0x60,0x09,0x62,0xc5,0xde,0x7b,0x99,0x71,0xc6,0x82,0x82,0x88,0xb7,0xef,0x3e,0x2b,
    0xcb,0x4d,0xfe,0x32,0x33,0x6f,0x7e,0x6f,0xbf,0xbb,0xfb,0xdd,0xbd,0xbd,0xbd,0xf2,
    0x92,0x9d,0x55,0x9a,0x9b,0x24,0x2e,0x69,0x9c,0xe4,0x25,0x35,0x2e,0x49,0xff,0x5a,
    0x24,0x59,0x89,0xbc,0xe6,0x27,0x99,0xf4,0x77,0xc4,0xc8,0x51,0x23,0x2b,0xa7,0x4c,
    0x9d,0x58,0x59,0xd5,0xaf,0x97,0xe8,0x9b,0x26,0xd9,0xa9,0x9d,0xe8,0x9a,0x79,0x9b,
    0x46,0xfe,0x37,0xc7,0x3f,0x93,0x8f,0x9a,0x74,0xb2,0x2a,0x9a,0x7b,0x3c,0x27,0xe5,
    0x4a,0x92,0x61,0xd8,0xca,0xb3,0x97,0xb7,0xde,0x29,0x84,0x49,0x4a,0xf9,0x55,0xcc,
    0x81,0xe5,0x18,0x2c,0x0b,0x2c,0xcf,0x60,0xd9,0x60,0x05,0x06,0xcb,0x01,0x6b,0x6e,
    0xb0,0x46,0x60,0xad,0x0d,0x96,0x01,0x6b,0x6b,0xb0,0x5c,0xb0,0x0e,0x06,0xcb,0x03,
    0x2b,0x36,0xd8,0x0e,0x60,0x5d,0x0d,0xd6,0x18,0xac,0xcc,0x60,0xf9,0x60,0x15,0x06,
    0x2b,0x00,0xeb,0x65,0xb0,0x26,0x60,0x55,0x06,0x6b,0x0a,0x36,0x40,0xea,0xee,0x47,
    0xaa,0x35,0x18,0xe1,0x47,0x78,0x0c,0xf9,0x6b,0x7d,0x26,0x46,0x75,0x14,0xfb,0x89,
    0xd4,0x47,0xec,0x8f,0xf3,0xbf,0x5d,0xfe,0xd3,0x05,0xb9,0x84,0x3a,0x8b,0xbc,0x29,
    0xe2,0xdb,0xdc,0x00,0xdf,0x66,0xc3,0xb7,0x25,0xe2,0xdb,0x02,0x9f,0xca,0x42,0x9c,
    0x4f,0x1d,0x45,0x1e,0x8a,0xdc,0xce,0x3f,0xad,0xfc,0x28,0xb2,0x52,0xfb,0xec,0x94,
    0x4f,0xde,0xdb,0x78,0x9b,0x0c,0x35,0x4e,0xd2,0xdf,0x9c,0x74,0x2e,0x72,0xc9,0xab,
    0xc4,0xe7,0x94,0xc7,0xbb,0xe2,0x85,0xde,0xbb,0x05,0x3e,0x25,0xde,0xbe,0x25,0x3d,
    0x96,0x8b,0x7f,0x21,0xef,0x2d,0xd0,0x17,0xf1,0x5e,0x08,0x5f,0x7b,0xc3,0x57,0x88,
    0x4d,0x31,0xf9,0x08,0xd6,0xc9,0x5b,0x6b,0x9f,0xfc,0xdf,0x47,0xf2,0xe8,0x46,0xbf,
    0x08,0xd7,0x60,0xe4,0x9d,0xc1,0x64,0xdc,0x65,0x8c,0x41,0xe6,0xa2,0x1c,0xb9,0xbb,
    0xf1,0xdf,0x05,0xdb,0x8c,0xd1,0xf7,0xa4,0xa7,0x55,0xae,0x22,0xef,0x72,0xea,0x38,
    0x84,0xb9,0x54,0xb9,0x86,0x3e,0x56,0xfb,0xe1,0x91,0x7c,0x00,0xf6,0xad,0x3d,0xcb,
    0xc1,0xc6,0x6f,0x34,0x73,0x2e,0xb2,0xd4,0x6e,0x1c,0xf3,0xd3,0xd1,0xa3,0xda,0x83,
    0x9d,0xe8,0xb5,0x63,0xc8,0xf7,0x58,0x72,0x99,0xc8,0x78,0x45,0x3e,0xce,0xe4,0x27,
    0xf1,0x6a,0xcd,0x3c,0x9f,0x80,0xce,0x8e,0x6f,0x32,0x6b,0x42,0xf3,0x38,0x15,0x7b,
    0xd5,0x9f,0xc5,0x7a,0x53,0x79,0xba,0xc9,0x53,0xe4,0xf3,0xfd,0xb3,0x35,0x7b,0x9b,
    0x3c,0x93,0xf5,0xa4,0x7c,0x97,0x19,0x7f,0x91,0xaf,0x8d,0xea,0x77,0x2f,0x73,0x22,
    0xf9,0xdd,0x4f,0x3f,0x94,0x19,0xfe,0x85,0xc2,0xef,0xff,0x54,0x5e,0x1c,0xcd,0xdf,
    0x4a,0xd6,0xb9,0xf8,0xbf,0x8c,0xbf,0xad,0x6b,0xbd,0xb1,0x97,0xba,0xfe,0x98,0x8e,
    0x6e,0xc6,0x2a,0xa9,0xeb,0x26,0x53,0x57,0x59,0x73,0x9b,0xe0,0xf9,0x9b,0x1c,0x37,
    0x53,0x57,0x91,0xb7,0x80,0x15,0x79,0xf9,0x1f,0xfc,0xb2,0xb1,0xdf,0x4a,0x8c,0x7f,
    0xb0,0xdf,0xca,0x7e,0xec,0xd0,0x3b,0xde,0x33,0xb6,0x6f,0x5c,0xd8,0xa3,0x2b,0xbc,
    0x24,0x7e,0xb2,0x6e,0x05,0xab,0x27,0xe7,0x6a,0xdf,0x75,0x59,0xf4,0x4a,0x42,0xac,
    0x3f,0x3d,0xd2,0x88,0x18,0x32,0xce,0x96,0x2e,0x8c,0x57,0xe5,0x56,0x91,0xdc,0xde,
    0xc8,0xb2,0xee,0xca,0x22,0x7d,0xf7,0x48,0x5f,0x11,0xc9,0x3d,0x22,0xfb,0x5e,0x91,
    0xbe,0x4f,0xa4,0x1f,0x88,0xbc,0x9b,0xcf,0x52,0xc6,0xdc,0x98,0x03,0x48,0x7a,0x6a,
    0x28,0xe3,0xce,0x07,0x17,0x1b,0x59,0x6f,0x05,0x2e,0xac,0xd1,0x5a,0x63,0xd3,0xc4,
    0x05,0xfc,0x21,0x6f,0x23,0x73,0xd9,0xd4,0x05,0x3f,0xc1,0x37,0xfa,0x4a,0x34,0xe7,
    0xcc,0xdc,0xe4,0xed,0x45,0xd7,0x4c,0xce,0x3e,0x17,0xea,0x23,0xef,0x5b,0x7c,0x50,
    0x79,0x17,0xac,0xc6,0xdb,0xb7,0x24,0x07,0x79,0x6f,0xc5,0xfb,0x5f,0x5e,0xdf,0x1a,
    0x1f,0xf9,0xfd,0x43,0xc6,0xe4,0x7f,0x8b,0xe0,0x16,0x7d,0x5b,0xf4,0xf2,0xab,0xb9,
    0xb5,0x73,0xa1,0xce,0x8f,0x90,0xdb,0x8e,0x2e,0x60,0xf5,0xe4,0x23,0x72,0x1b,0xff,
    0x14,0xe2,0xdb,0xc6,0x6d,0xab,0x47,0x87,0x06,0xea,0xd1,0x11,0xfc,0x62,0x6f,0x93,
    0xf6,0xa2,0x0b,0x58,0xbd,0xb1,0xe9,0x4c,0xcc,0x19,0xd8,0x14,0xbb,0x60,0xd7,0x99,
    0xf1,0xc9,0x3c,0x17,0x9b,0x1c,0x4b,0x5c,0x98,0x7b,0xad,0x71,0x17,0x6a,0xbc,0xd8,
    0x70,0x96,0xba,0x80,0x6b,0x8d,0xbb,0xba,0xe0,0x57,0x4a,0x8d,0xbb,0x99,0x1a,0x8b,
    0x6e,0x27,0xff,0x74,0x63,0x4c,0xf2,0x2e,0xf5,0xd1,0x31,0x76,0x33,0xb1,0x77,0x21,
    0xb6,0xe4,0x25,0xfd,0x25,0xf2,0x40,0x1f,0x43,0xd6,0x5e,0xb9,0x0b,0xf7,0x82,0xee,
    0xe8,0xa5,0x1f,0xcb,0xf1,0x15,0x7d,0xa5,0x0b,0x3d,0x2a,0x3a,0xe9,0xbd,0x4a,0xe3,
    0xdb,0xd3,0x85,0x33,0xad,0x07,0x7a,0xe9,0xd5,0x9e,0x26,0x6e,0x6f,0x13,0x57,0xfa,
    0xb4,0xb7,0xe1,0xed,0xeb,0x42,0x6f,0x8b,0x4e,0x7a,0xb6,0x6f,0xca,0x9b,0x49,0xfd,
    0xaa,0xa4,0x96,0xf4,0x76,0x1f,0xc3,0xd7,0xcf,0x85,0xf5,0xf5,0x22,0x35,0xaf,0x76,
    0x01,0xab,0x32,0x3d,0x55,0x4d,0x1d,0x8a,0xa8,0x43,0x91,0xf1,0xef,0x1f,0xcd,0xd9,
    0x00,0x17,0xb0,0xc5,0xa6,0x0f,0x07,0xb8,0xed,0xfb,0xb0,0xd0,0xf8,0x0f,0x22,0xbe,
    0xd8,0xca,0xba,0x1a,0x44,0x2d,0x64,0x4f,0x18,0xec,0xc2,0x9d,0x60,0x20,0xbd,0x3e,
    0xc0,0x3f,0xd5,0xc4,0xc9,0x67,0xbf,0x90,0x33,0xa7,0xbf,0xf7,0xcd,0xe5,0x4c,0xd3,
    0xf7,0xc6,0xec,0x23,0x05,0xa6,0x17,0xba,0x62,0xa3,0xfd,0x52,0xce,0xb9,0xd9,0xdd,
    0xd8,0x54,0x80,0x6b,0x9f,0xf6,0xc0,0xaf,0xc2,0xd8,0x54,0xc2,0xaf,0x3c,0xbd,0xe0,
    0xe9,0x69,0x6c,0x7a,0x83,0x2b,0x4f,0x1f,0xfc,0x04,0xd7,0x5a,0xf5,0x85,0xbf,0x8f,
    0xe1,0xea,0x07,0x57,0x95,0xe1,0xaa,0x06,0x57,0xbf,0xfe,0xf8,0x56,0xa7,0x7b,0x71,
    0x56,0x2a,0xdb,0xda,0x34,0x6b,0xa0,0x36,0x4d,0xcc,0x7b,0x53,0x6a,0xd3,0xdc,0xec,
    0x69,0x83,0x38,0x53,0x34,0xe6,0x60,0x7c,0x66,0xc1,0x39,0x14,0x6c,0x88,0x19,0xd3,
    0xae,0xe0,0x35,0xcc,0xf5,0xa0,0xff,0xb0,0xc0,0x31,0x0c,0x5e,0xc9,0x71,0x98,0xc9,
    0xb1,0x05,0xf7,0x66,0xf9,0x6b,0x69,0xf2,0x6a,0x45,0x5e,0x6d,0x4c,0x5e,0xbb,0x27,
    0xdb,0xef,0xbd,0x7b,0x47,0xf2,0xe1,0x91,0x3c,0x3e,0x92,0x27,0x44,0xf2,0xd1,0x91,
    0x3c,0x35,0x92,0xcf,0x8d,0xe4,0x4b,0x23,0x79,0x4e,0x24,0xcf,0x8b,0xe4,0x5b,0x8d,
    0x2c,0xe7,0xfc,0x03,0x91,0x7e,0x85,0x91,0xe5,0x1c,0x7f,0x25,0xd2,0xbf,0x15,0xf9,
    0xbf,0x13,0xc9,0x9f,0x25,0xdb,0x9f,0x4d,0x5f,0x46,0xf3,0xb6,0x07,0x75,0xd4,0x7e,
    0xda,0x93,0x7e,0x1a,0x6e,0x6c,0x46,0x80,0xd7,0x31,0x8f,0x7b,0xe1,0x37,0x82,0x79,
    0xdc,0x1d,0x4c,0xed,0xf7,0x89,0x38,0xf7,0x6d,0x80,0x73,0x24,0xb8,0xf6,0xcb,0x7e,
    0xf8,0x8d,0x84,0x73,0x6f,0x30,0xb5,0xdf,0x9f,0xb9,0x54,0xce,0x03,0xe1,0x3c,0xc0,
    0xd8,0x1c,0x04,0xae,0x7b,0xf7,0x28,0xfc,0x0e,0x32,0x36,0x87,0xc0,0xa3,0xe7,0xd4,
    0xa1,0x60,0xa3,0xd3,0xda,0x07,0xec,0x30,0x7c,0x45,0x27,0x7b,0xfe,0xd8,0x64,0xdb,
    0x9e,0x2f,0xba,0x31,0xfe,0x19,0x4b,0xef,0x8d,0xa1,0x5f,0xc7,0x21,0x8f,0x35,0xb1,
    0x8e,0xa0,0x1f,0x65,0x3c,0xe3,0x91,0x55,0x77,0x24,0x79,0x88,0x6e,0x02,0xb2,0xee,
    0xbd,0x47,0xb1,0x5f,0x8d,0xa7,0x1f,0xc5,0xe6,0x70,0x70,0xf5,0x3f,0x9e,0x5e,0xd6,
    0x39,0x99,0x04,0x36,0x24,0xad,0x51,0x26,0xbd,0xd3,0x9e,0xc8,0xbd,0xb7,0x16,0xbd,
    0xfa,0x9e,0x84,0x4e,0x78,0x8f,0x46,0xd6,0xba,0x9e,0x4c,0x5d,0x27,0x1b,0xfb,0x53,
    0xc0,0x17,0x51,0x9f,0xd3,0xc0,0x4e,0xa5,0x3e,0x53,0x4c,0x7d,0x44,0x77,0xba,0x7f,
    0x6e,0xa6,0x1e,0xa7,0x1b,0x9e,0x33,0x18,0xf3,0x42,0x78,0xce,0x04,0x93,0xda,0x2f,
    0xf0,0x16,0x72,0x6f,0x3d,0x1b,0xbc,0x8a,0x3b,0xf6,0x34,0x7c,0xcf,0x41,0x27,0x39,
    0x4f,0x45,0x56,0xde,0xf3,0x22,0xde,0x69,0x60,0x96,0xf7,0x02,0xf0,0xe9,0xdc,0xcd,
    0x95,0x77,0x06,0x3a,0xe1,0x3d,0x17,0x59,0x6b,0x71,0x21,0xb5,0x98,0x69,0x62,0x5d,
    0x04,0xae,0xb5,0xb8,0x18,0x4c,0x6b,0x51,0x67,0x6a,0x21,0xba,0x4b,0xfc,0x33,0x9b,
    0x5a,0x5c,0x62,0x78,0x66,0x91,0xb3,0xee,0x8d,0x97,0xf3,0x4d,0x30,0x8b,0x5c,0x2e,
    0x05,0x93,0x73,0xb0,0x0e,0xff,0xd9,0xc6,0xff,0x8a,0x68,0xcc,0x57,0x82,0x8d,0x26,
    0x8f,0xb9,0x26,0x0f,0xd1,0x5d,0xe5,0x9f,0xab,0xe1,0xb9,0x8a,0x18,0x73,0x92,0x6d,
    0x77,0xbe,0xb9,0xe8,0xae,0x36,0x31,0xae,0x61,0xbf,0x53,0xf9,0x3a,0x62,0x5e,0x48,
    0xce,0xd7,0xf3,0xdd,0x72,0x9d,0x19,0xc7,0x0d,0xf8,0x5d,0x6f,0xce,0x9f,0x1b,0xc1,
    0xaf,0x35,0x71,0x6f,0x8c,0xe2,0xce,0x35,0x71,0x6e,0x62,0xdf,0xd4,0x3a,0xdc,0x14,
    0xd5,0xa1,0x0e,0x79,0x0a,0xf2,0xcd,0xc6,0xf7,0x16,0xd6,0x85,0xf8,0xce,0x43,0xd6,
    0xf9,0xbc,0xad,0x81,0x73,0xf7,0x76,0x70,0xb1,0xbf,0x15,0x59,0xd7,0xe1,0x1d,0x9c,
    0x8d,0xf3,0xd8,0xa7,0x35,0x9f,0x3b,0x0c,0xe7,0x9d,0x0d,0x70,0xde,0x05,0xae,0x35,
    0xb9,0x1b,0xac,0xc6,0xf4,0xef,0xdd,0xc6,0xfe,0x1e,0xea,0xac,0x73,0x79,0x1f,0xd8,
    0xbd,0xcc,0xe5,0x02,0x33,0x97,0xa2,0x9b,0x9f,0xf6,0x5f,0x18,0xfb,0x7c,0x38,0x1f,
    0xe0,0x9b,0x50,0xea,0xb2,0x00,0xdd,0x22,0x13,0xe3,0x41,0x62,0xac,0xf6,0x31,0xca,
    0xd2,0x3d,0x32,0xdc,0xb9,0x1e,0x64,0x3e,0x05,0x7b,0xd8,0xe0,0xca,0xf9,0x70,0xc4,
    0xb9,0x00,0xce,0xb2,0x74,0x0f,0x0d,0xe7,0x95,0xae,0xa5,0x25,0x60,0xba,0x96,0x96,
    0x44,0xf3,0x34,0xc5,0xe4,0xf3,0x68,0xb4,0x9f,0x3f,0xd6,0xc0,0x7e,0xbe,0x14,0x5c,
    0xf7,0xf3,0xc7,0xf1,0x5b,0x6a,0x6c,0x9e,0x88,0xd6,0xc1,0x93,0x60,0x76,0x3f,0x7f,
    0x0a,0xdf,0x27,0xa9,0xe7,0x72,0x53,0x4f,0xd1,0x2d,0xf3,0xcf,0x2a,0x72,0x5c,0x66,
    0x72,0x7a,0x9a,0x9c,0x56,0x9a,0x78,0xcf,0x80,0xcb,0x18,0x57,0x20,0xcb,0x18,0x97,
    0xe3,0xbf,0xca,0xd8,0x3e,0xcb,0xfd,0x41,0xe5,0xe7,0xb8,0x1f,0x3c,0x4f,0x5f,0x3c,
    0x8f,0xcd,0x73,0xc6,0xe6,0x05,0xee,0x14,0x6b,0xb0,0x59,0x8d,0xdd,0x0b,0x26,0xe6,
    0xea,0x28,0xe6,0x72,0xe3,0xff,0x22,0xf3,0xac,0xe7,0xdb,0x4b,0x60,0xda,0x4b,0x6b,
    0xcd,0xd8,0x5f,0x4a,0xe3,0x24,0x29,0x26,0x3c,0x6b,0x0c,0xcf,0xab,0xdc,0x3d,0x54,
    0x7e,0x0d,0x5e,0x5d,0xfb,0xeb,0xc0,0xea,0x4d,0x4f,0xbd,0x4e,0xef,0xac,0x33,0x3d,
    0xb1,0x1e,0x5c,0xc7,0xf3,0x06,0xdc,0xeb,0xcd,0x1e,0xfa,0x26,0xb8,0x7e,0x8b,0xbe,
    0x02,0x26,0xb1,0x45,0xff,0x36,0xf7,0x1e,0xc9,0x7f,0x83,0xc9,0x5f,0xf0,0x77,0xfd,
    0xf3,0x01,0xf9,0xbf,0x6b,0xf2,0x7d,0x2f,0xea,0xf7,0xf7,0x59,0x1f,0xef,0x11,0xe3,
    0x1d,0x30,0xa9,0xe3,0x06,0xfc,0x3f,0x30,0xba,0xda,0x48,0xb7,0xc1,0xf4,0xfd,0x87,
    0xdc,0xb3,0x74,0x8c,0x1f,0x81,0x89,0xef,0x5b,0xc8,0x9a,0xc7,0xc7,0xdc,0xd1,0x54,
    0xfe,0x84,0xba,0xea,0xf7,0xd3,0xa7,0x60,0x1f,0x9b,0xf9,0xfd,0x94,0xd8,0x3a,0x2f,
    0x6b,0x8d,0xff,0xe7,0xf8,0x4f,0x23,0x97,0x2f,0xc0,0xc4,0xf7,0x33,0x64,0xcd,0xf3,
    0x2b,0xee,0x7f,0xa7,0xf0,0xbd,0xf7,0x35,0x98,0x72,0x7d,0x43,0xaf,0x69,0x3f,0x7e,
    0x0b,0xb6,0x38,0x9d,0x8b,0xe0,0xf3,0x1d,0xf8,0x65,0xdc,0xc3,0xbf,0x87,0xe7,0x3b,
    0x62,0x7e,0x09,0xa6,0xdf,0x94,0x3f,0x70,0xc7,0x2c,0xf0,0xb7,0x4c,0x91,0x7f,0xe2,
    0x7f,0x40,0x65,0xe8,0x7e,0x34,0x7e,0x3f,0x19,0xbf,0x9f,0xf1,0x93,0xbb,0xd4,0xcf,
    0xd1,0xdd,0xbf,0x1d,0x73,0x5e,0xc4,0xdd,0xbf,0x90,0xff,0x99,0x4b,0x6d,0x76,0x34,
    0x1c,0xbf,0x80,0x0b,0xc7,0x2f,0xd1,0x37,0x4e,0x27,0x38,0xda,0x9b,0xef,0x87,0x0e,
    0x86,0xaf,0x23,0x7c,0x9d,0xcd,0xdd,0xfa,0x57,0x73,0x57,0x16,0xfe,0xdf,0xb0,0xd3,
    0xda,0xff,0x0e,0xa6,0x7d,0xf0,0x07,0x98,0x8c,0xef,0x57,0x64,0xad,0xf5,0x46,0xf8,
    0x24,0xb7,0x8d,0x26,0xb7,0x2c,0xf3,0x7f,0xec,0x62,0x93,0x5b,0x09,0xf9,0x94,0x9a,
    0xff,0x1b,0x65,0x35,0xf0,0x7f,0x92,0x6c,0x70,0xdd,0xb3,0x72,0xf8,0x9f,0xc6,0x74,
    0x63,0xd3,0xc8,0x05,0x5c,0xef,0x8a,0x19,0x17,0xb0,0x21,0xe6,0x8c,0xce,0x75,0x81,
    0x2b,0x63,0xbe,0xb5,0xf3,0x5c,0xc8,0x43,0xef,0x93,0x3b,0xb8,0xf0,0xff,0xbe,0x5a,
    0xec,0x65,0x9c,0x82,0xe5,0x99,0xef,0xed,0x7f,0x01,0x53,0x20,0xca,0x0a,0xc4,0x19,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint destOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * 4 + params . destOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       float loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//     if(valueBits < 32)
//     {
//         bool isNegative =(valueAsUint &(1 <<(valueBits - 1)))!= 0;
//         uint signExtension = isNegative ? 0xFFFFFFFF << valueBits : 0;
//         valueAsUint |= signExtension;
//     }
//     int valueAsInt = int(valueAsUint);
//           float value = float(valueAsInt)/(valueMask >> 1);
//     value = max(value, float(- 1));
//
//     return value;
// }
//
//        float convertComponent(float srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint = floatBitsToInt(value);
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . destOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < 1;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * 1 + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               float srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
