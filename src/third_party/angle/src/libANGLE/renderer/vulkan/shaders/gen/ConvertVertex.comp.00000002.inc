// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x98,0x79,0x94,0x8f,0x65,
    0x14,0xc7,0xdf,0x77,0x66,0xfc,0x66,0xcc,0x82,0xb1,0xcc,0xa0,0x09,0x63,0xec,0xc6,
    0x18,0x6b,0x3a,0x9a,0x70,0x8e,0x90,0x28,0xa5,0x54,0xe6,0x90,0x42,0xa5,0x52,0x42,
    0x9b,0x28,0x2a,0x24,0x65,0x09,0x59,0xda,0x37,0x64,0x24,0x6d,0xb2,0xb4,0x2a,0xa4,
    0xa6,0xb4,0xa1,0x45,0x94,0x73,0xea,0x9c,0xb6,0x73,0x48,0x21,0x59,0x7a,0xee,0xfb,
    0x7e,0x6e,0x73,0x3d,0xcd,0x5f,0xfd,0xce,0x79,0xce,0xef,0xbd,0xdf,0xbb,0xdf,0xe7,
    0x3e,0xcb,0xfb,0x26,0x27,0x15,0xa4,0x06,0x41,0x18,0xa4,0x07,0x69,0x41,0xc7,0x30,
    0x88,0x7e,0xd9,0x41,0x52,0x20,0x8f,0x19,0x41,0x22,0xfa,0xef,0xdd,0x6f,0x60,0xbf,
    0xa2,0x71,0xe3,0x47,0x14,0x75,0xec,0x54,0x2c,0xfc,0x6a,0x41,0x72,0x24,0x27,0xbc,
    0xea,0x4e,0xa6,0x8a,0xfb,0x4f,0x71,0x63,0xf4,0xe5,0xa3,0xae,0x17,0xfc,0xa0,0x1b,
    0x35,0x1c,0x9e,0x12,0xd9,0x0a,0x82,0xee,0xc8,0xca,0xe8,0xe3,0xa4,0x9b,0xc7,0x6e,
    0x82,0x02,0xfe,0x15,0x0b,0xc1,0x52,0x0c,0x96,0x04,0x96,0x66,0xb0,0x64,0xb0,0x4c,
    0x83,0xa5,0x80,0xd5,0x30,0x58,0x15,0xb0,0xda,0x06,0x4b,0x80,0xd5,0x35,0x58,0x2a,
    0x58,0x9e,0xc1,0xd2,0xc0,0x1a,0x19,0xac,0x2a,0x58,0x13,0x83,0xa5,0x83,0xb5,0x30,
    0x58,0x06,0x58,0xa1,0xc1,0x32,0xc1,0x8a,0x0d,0x96,0x05,0xd6,0xd1,0x60,0xd5,0xc0,
    0xba,0x48,0xdd,0x5d,0xa6,0x5a,0x83,0xde,0x2e,0xc3,0x11,0xc4,0xaf,0xf5,0x19,0xe9,
    0xd5,0x51,0xe4,0x47,0x52,0x1f,0x91,0xbf,0xca,0xfd,0x37,0xfe,0x97,0x17,0xd3,0xf9,
    0xd4,0x59,0xe8,0x7d,0x9e,0xbd,0xfd,0x95,0xd8,0xdb,0x6f,0xec,0x1d,0xf0,0xec,0x1d,
    0xc0,0x9e,0xd2,0x07,0xc9,0x3d,0x0f,0xba,0x43,0x18,0xd3,0xf5,0xdc,0xa8,0xe5,0xb2,
    0x48,0x8a,0xe4,0x93,0x23,0x7b,0xf2,0x5c,0xc7,0xc9,0x24,0xa8,0x71,0x10,0xfd,0xa7,
    0x44,0x73,0x91,0x4a,0x5c,0xf9,0x2e,0xa6,0x34,0x9e,0x15,0x17,0x9d,0x6c,0x74,0xc2,
    0x48,0x26,0x25,0xa8,0x49,0x9f,0xa5,0x62,0x23,0x87,0x67,0xc1,0x72,0x9c,0xb7,0x5c,
    0xe4,0x45,0x56,0xe6,0x3d,0x37,0xc2,0x63,0xd9,0x3c,0x64,0x73,0xf1,0x77,0xaa,0xf1,
    0x97,0x87,0x4e,0x63,0xe2,0x15,0xac,0x81,0xb3,0xaa,0x7d,0xf4,0x7f,0x87,0xf8,0x6d,
    0x41,0x3f,0x89,0xad,0xae,0xd0,0x2d,0xc1,0x5a,0x93,0x63,0x2b,0x23,0xdf,0x1a,0x5e,
    0xc2,0xf0,0x8b,0xe9,0x71,0xa5,0x3b,0x11,0x67,0x6b,0xea,0x5a,0xc2,0xdc,0x2a,0xdd,
    0x8d,0xbe,0x56,0xf9,0x5e,0x1e,0x3d,0x00,0xf9,0xda,0xce,0xca,0x40,0xa3,0x37,0x88,
    0x1e,0x50,0xb9,0x52,0xe6,0xeb,0x54,0x87,0x6a,0x4f,0x36,0xa0,0xf7,0x46,0x10,0xef,
    0x95,0xc4,0x32,0x92,0xfc,0x84,0xbe,0x0a,0x4c,0xf8,0xd7,0xf0,0x6c,0xf3,0x19,0xcd,
    0x9a,0x50,0xbf,0x63,0xf0,0xa3,0xfc,0x5b,0x58,0x6f,0x4a,0x4f,0xf2,0xe2,0xba,0xc3,
    0x8d,0x13,0xc9,0x15,0xf4,0x14,0xd6,0x93,0xda,0xbb,0xd7,0xe8,0x0b,0x3d,0xcf,0xab,
    0xd7,0x33,0xf4,0x89,0xea,0x3f,0x27,0xf6,0xdc,0x4f,0xe9,0x32,0x7a,0x4e,0xe9,0x0d,
    0xac,0x6b,0xc9,0xe7,0x7d,0xfa,0xc3,0xd6,0xad,0x1c,0x79,0xa9,0xd3,0x3e,0x53,0x27,
    0x59,0x53,0xfb,0xd0,0xfb,0x9d,0x18,0xf6,0x53,0x27,0xa1,0x0f,0x80,0xe5,0x3a,0xfa,
    0x0f,0xf4,0x92,0x91,0xff,0x13,0x9b,0x7f,0x20,0xff,0x27,0xfb,0x6d,0x08,0xff,0x10,
    0xcf,0x09,0x13,0x47,0xfb,0x30,0xde,0x83,0x0b,0x1d,0x25,0x7a,0xb2,0x2e,0x05,0x2b,
    0x27,0xc6,0xce,0xae,0x8b,0x92,0x98,0xfb,0x00,0x5f,0x87,0x1d,0x52,0x05,0x1f,0x92,
    0x57,0x5a,0x18,0xe7,0xa7,0x74,0x55,0x8f,0xce,0x36,0xb4,0xac,0xad,0x06,0x1e,0xbf,
    0xa1,0xa1,0x65,0x5d,0x35,0xf6,0xe4,0x0b,0x3c,0xf9,0x66,0x9e,0x7c,0x0b,0x8f,0xdf,
    0x16,0xba,0x87,0x8b,0xf2,0x10,0x87,0xd1,0x41,0x7a,0xa6,0x84,0xbc,0x43,0x0e,0x1d,
    0x91,0x91,0xf5,0x93,0x14,0xc6,0x6b,0xac,0xd4,0xc8,0x24,0x87,0x31,0xbe,0xca,0xc9,
    0xc8,0xdc,0xa5,0x84,0xb1,0x9e,0xe0,0x87,0x5c,0x25,0x12,0x9c,0x89,0x47,0x9c,0xbc,
    0xf0,0xaa,0xb8,0x21,0x58,0x54,0x1f,0xf7,0x7f,0xcc,0x39,0x90,0x67,0xc1,0xce,0x74,
    0xf2,0x52,0x27,0x89,0x41,0x9e,0xab,0xf2,0xfc,0x97,0xe3,0xa7,0xa3,0x93,0x1e,0xc5,
    0x99,0x12,0x64,0xba,0xff,0x2c,0x6c,0x0b,0xbf,0x1a,0x7c,0xf9,0xd7,0xd8,0xaa,0x87,
    0x71,0x9d,0x57,0x13,0x5b,0x8d,0x30,0xc6,0xca,0x89,0x47,0xe8,0x0c,0x37,0x32,0xd1,
    0xcd,0x08,0x2b,0xea,0x51,0xb3,0x92,0x7a,0xd4,0x0a,0x63,0xfc,0x1e,0x27,0x23,0x74,
    0xed,0x30,0xc6,0xca,0x8d,0x4c,0x1d,0x7c,0x4e,0x46,0x26,0x27,0x8c,0xe5,0xea,0x90,
    0x9f,0xcc,0x73,0x8e,0x89,0x31,0x37,0x8c,0xe7,0x5e,0x6b,0x5c,0x97,0x1a,0x97,0x19,
    0x9b,0xf5,0xc2,0x18,0xd7,0x1a,0xd7,0x0f,0x63,0xbd,0x7a,0xd4,0x38,0xcf,0xd4,0x58,
    0x78,0xa7,0xb8,0x91,0x47,0x4e,0xf2,0x2c,0xf5,0xd1,0x1c,0xf3,0x8c,0xef,0x46,0xf8,
    0x96,0xb8,0xa4,0xbf,0x84,0x3e,0xdd,0xf9,0x90,0xb5,0x99,0x1f,0xc6,0xe7,0x7e,0x43,
    0xf8,0xd2,0x8f,0xf9,0xe8,0x0a,0xbf,0x49,0x18,0xf7,0xa8,0xf0,0xa4,0xf7,0x9a,0xa0,
    0x2b,0xe7,0x40,0x53,0xf7,0x5c,0x9f,0x9e,0x14,0xbe,0xf4,0x6a,0x53,0xe3,0xb7,0xb9,
    0xf1,0x2b,0x7d,0xda,0x1c,0x9e,0xe8,0xb6,0x0c,0xe3,0xde,0x16,0x9e,0xf4,0x6c,0xcb,
    0xc8,0x6e,0x22,0xd2,0x6b,0x15,0xc6,0xfb,0x8b,0xe8,0xb4,0x30,0xf6,0x5a,0x87,0xf1,
    0xfa,0xda,0x44,0xcd,0x0b,0xc3,0x18,0x6b,0x65,0x7a,0xaa,0x90,0x3a,0x64,0x51,0x87,
    0x2c,0xa3,0xdf,0xc6,0x9b,0xb3,0xa2,0x30,0xc6,0xca,0x4c,0x1f,0x16,0x85,0x27,0xf7,
    0x61,0xa6,0xd1,0x2f,0xc6,0xbf,0xc8,0xca,0xba,0x2a,0xa6,0x16,0xb2,0x27,0xb4,0x0b,
    0xe3,0xfb,0x4e,0x5b,0x7a,0xbd,0x8b,0x1b,0x9d,0xf1,0x93,0xc1,0x7e,0x21,0x67,0xc8,
    0x69,0x4e,0x37,0x95,0x33,0x4a,0x9f,0xd3,0xd9,0x47,0x32,0x4d,0x2f,0x34,0x43,0x46,
    0xfb,0xa5,0x90,0x73,0xaf,0x95,0x91,0x69,0x03,0xae,0x7d,0x5a,0x84,0x5e,0x1b,0x23,
    0xd3,0x16,0xfb,0x6a,0xa7,0x1d,0x76,0x8a,0x8d,0x4c,0x7b,0x70,0xb5,0xd3,0x01,0x3d,
    0xc1,0xb5,0x56,0x1d,0xb1,0xdf,0xc1,0xd8,0xea,0x8c,0xad,0x4e,0xc6,0xd6,0x69,0xe0,
    0xaa,0xd7,0x05,0x5d,0xc1,0x8f,0xbb,0x1c,0xbb,0x44,0x58,0x45,0x6d,0xaa,0x57,0x52,
    0x9b,0x2c,0xf3,0x5c,0x8d,0xda,0xd4,0x30,0x7b,0x5a,0x57,0xce,0x10,0xf5,0x79,0x06,
    0x3a,0x33,0xb0,0x79,0x26,0x58,0x89,0xc9,0xa9,0x3b,0x78,0x37,0xe6,0xba,0x2b,0x98,
    0xda,0xe8,0x81,0x5d,0x89,0xb1,0x87,0x89,0x31,0x9b,0x7b,0xb1,0xfc,0x6a,0x9a,0xb8,
    0x6a,0x11,0x57,0x1d,0x13,0x57,0xcf,0xe0,0xe4,0xbd,0xb7,0xaf,0x47,0x0f,0xf1,0xe8,
    0xa1,0x1e,0x3d,0xcc,0xa3,0x87,0x7b,0xf4,0x78,0x8f,0x9e,0xe0,0xd1,0xd3,0x3d,0x7a,
    0x96,0x47,0x2f,0xf1,0xe8,0x47,0x82,0x93,0xcf,0x96,0xa5,0x1e,0x7f,0xbd,0xa1,0xe5,
    0xdc,0xde,0xea,0xf1,0x3f,0xf3,0xf4,0xbf,0xf0,0xe8,0x3d,0xde,0x3c,0x9d,0x45,0xdd,
    0xb4,0x7f,0x7a,0xd3,0x3f,0xbd,0x8c,0x4c,0x1f,0xf0,0x69,0xcc,0xdb,0xd9,0xe8,0xf5,
    0x61,0xde,0x7a,0x82,0xa9,0xfc,0x39,0x9e,0xcd,0x7e,0x95,0xd8,0xec,0x0f,0xae,0xfd,
    0x71,0x2e,0x7a,0xfd,0xb1,0xd9,0x17,0x4c,0xe5,0xcf,0x63,0xee,0xd4,0xe6,0xf9,0xd8,
    0x1c,0x60,0x64,0x2e,0x00,0xd7,0xbd,0xfa,0x42,0xf4,0x2e,0x30,0x32,0x17,0x61,0x47,
    0xcf,0xa5,0x8b,0xc1,0xe4,0x9e,0xb8,0x0c,0xec,0x12,0x74,0x85,0x27,0x7b,0xfc,0xe0,
    0xa0,0x62,0x8f,0x17,0xde,0xa5,0x6e,0x0c,0xa6,0xd7,0x2e,0xa5,0x3f,0x4b,0xa1,0x07,
    0x1b,0x5f,0x97,0xd1,0x7f,0x92,0xcf,0x50,0x68,0xe5,0x5d,0x4e,0x1c,0xc2,0x1b,0x06,
    0xad,0x7b,0xed,0x15,0xec,0x4f,0x43,0xe9,0x3f,0x91,0x19,0x02,0xae,0xfa,0x57,0xd3,
    0xbb,0x3a,0x27,0xa3,0xc0,0x4a,0xa2,0x1a,0x25,0xa2,0x3b,0xea,0xb5,0xdc,0x5b,0x4b,
    0xe1,0xab,0xee,0x75,0xf0,0xc4,0xee,0x70,0x68,0xad,0xeb,0xf5,0xd4,0x75,0xb4,0x91,
    0xbf,0x01,0xbc,0x8c,0xfa,0xdc,0x08,0x36,0x86,0xfa,0x8c,0x33,0xf5,0x11,0xde,0x58,
    0x37,0x16,0x53,0x8f,0xb1,0xc6,0xce,0x4d,0xe4,0xbc,0x02,0x3b,0x37,0x83,0x0d,0x8a,
    0xee,0xab,0x89,0x68,0x5d,0xdf,0x0a,0xde,0x89,0x3b,0xf3,0x44,0x74,0x6f,0x83,0x27,
    0x31,0x8f,0x87,0x56,0xbb,0xb7,0x7b,0x76,0x27,0x82,0x59,0xbb,0x77,0x82,0x4f,0xe2,
    0xae,0xad,0x76,0x27,0xc3,0x13,0xbb,0x13,0xa0,0xb5,0x16,0x77,0x51,0x8b,0x29,0xc6,
    0xd7,0xdd,0xe0,0x5a,0x8b,0x7b,0xc0,0xb4,0x16,0xd3,0x4c,0x2d,0x84,0x37,0xd5,0x8d,
    0x99,0xd4,0x62,0xaa,0xb1,0x33,0x83,0x98,0x75,0x2f,0xbc,0x8f,0x3b,0xfe,0x0c,0x62,
    0x99,0x0e,0x26,0xe7,0xde,0x34,0xf4,0x67,0x1a,0xfd,0xfb,0xbd,0x9c,0x1f,0x00,0x1b,
    0x44,0x1c,0x73,0x4c,0x1c,0xc2,0x9b,0xed,0xc6,0x5c,0xec,0xcc,0xc6,0xc7,0xac,0xa0,
    0xe2,0x8e,0x37,0x07,0xde,0x5c,0xe3,0xe3,0x41,0xf6,0x37,0xa5,0xe7,0xe3,0xf3,0x2e,
    0x62,0x5e,0xc0,0x7b,0xc8,0x7c,0x93,0xc7,0x43,0xe8,0x2d,0x30,0xe7,0xcd,0x42,0xf0,
    0x79,0xc6,0xef,0x42,0xcf,0xef,0x1c,0xe3,0x67,0x11,0xfb,0xa4,0xd6,0x61,0x91,0x57,
    0x87,0x69,0xd0,0xe3,0xa0,0x17,0x1b,0xdd,0x87,0x59,0x17,0xa2,0xbb,0x04,0x5a,0xe7,
    0xf3,0xd1,0x4a,0xce,0xd9,0xc7,0xc0,0x45,0xfe,0x11,0x68,0x5d,0x87,0x8f,0x73,0x16,
    0x2e,0x61,0x5f,0xd6,0x78,0x1e,0x37,0x36,0x9f,0xa8,0xc4,0xe6,0x93,0xe0,0x5a,0x93,
    0xa7,0xc0,0xba,0x99,0xfe,0x7d,0xca,0xc8,0x3f,0x4d,0x9d,0x75,0x2e,0x9f,0x05,0x7b,
    0x86,0xb9,0x5c,0x6e,0xe6,0xf2,0xd9,0x68,0x9f,0x12,0xd9,0x38,0xf7,0x65,0xd8,0x5c,
    0xca,0x3b,0x9f,0xd4,0x65,0x39,0xbc,0x15,0xc6,0xc7,0x4a,0x7c,0xbc,0xc7,0xf9,0xf9,
    0x3c,0xf7,0xdc,0x95,0xcc,0x67,0x76,0xb4,0x6f,0x56,0xe0,0x6a,0x73,0x95,0x67,0x73,
    0x79,0x50,0x71,0x0f,0x7d,0x81,0xf3,0x49,0xd7,0xd2,0x6a,0x30,0x5d,0x4b,0xab,0xbd,
    0x79,0x1a,0x67,0xe2,0x79,0xd1,0xdb,0xcf,0x5f,0xaa,0x64,0x3f,0x7f,0x19,0x5c,0xf7,
    0xf3,0x57,0xd0,0x7b,0xd9,0xc8,0xbc,0xea,0xad,0x83,0x35,0x60,0x76,0x3f,0x7f,0x0d,
    0xdd,0x35,0xd4,0x73,0x9d,0xa9,0xa7,0xf0,0xd6,0xba,0xf1,0x26,0x31,0xae,0x35,0x31,
    0xbd,0x4e,0x4c,0x1b,0x8c,0xbf,0x37,0xc0,0x25,0xc7,0xf5,0xd0,0x92,0xe3,0x3a,0xf4,
    0xdf,0x34,0xb2,0x6f,0x71,0x5f,0x50,0xfa,0x6d,0xee,0x03,0x1b,0xe9,0x8b,0x77,0x90,
    0x79,0xdb,0xc8,0x6c,0xe4,0x0e,0xb1,0x05,0x99,0x77,0x91,0xdb,0x68,0x7c,0xbe,0xeb,
    0xf9,0x5c,0x67,0xf4,0xdf,0x63,0x9e,0xf5,0x7c,0xdb,0x04,0xa6,0xbd,0xb4,0xc5,0xe4,
    0x2e,0xbc,0xcd,0x91,0xaf,0xd8,0xce,0x66,0x63,0xe7,0x03,0xee,0x1a,0x4a,0x7f,0x88,
    0x5d,0x5d,0xfb,0x1f,0x81,0x95,0x9b,0x9e,0xfa,0x98,0xde,0xf9,0xc8,0xf4,0xc4,0x36,
    0x70,0xcd,0xe7,0x13,0x6c,0x6f,0x33,0x7b,0xe8,0xa7,0xe0,0xfa,0xee,0xb9,0x15,0x4c,
    0x7c,0x0b,0xff,0x73,0xee,0x39,0x12,0xff,0x0e,0x13,0xbf,0xe0,0xdb,0xdd,0xf8,0x8a,
    0xf8,0xb7,0x9b,0x78,0x77,0x7a,0xfd,0xfe,0x25,0xeb,0x63,0x27,0x3e,0xbe,0x00,0x93,
    0x3a,0xee,0x40,0xff,0x2b,0xc3,0x2b,0xf5,0x78,0x3b,0x4c,0xdf,0x7f,0xcd,0xbd,0x4a,
    0x73,0xfc,0x06,0x4c,0x74,0x3f,0x83,0xd6,0x38,0x76,0x71,0x27,0x53,0xfa,0x5b,0xea,
    0xaa,0xef,0x4b,0xbb,0xc1,0x76,0x99,0xf9,0xdd,0x8d,0x6f,0x9d,0x97,0x2d,0x46,0xff,
    0x3b,0xf4,0x27,0x12,0xcb,0xf7,0x60,0xa2,0xbb,0x07,0x5a,0xe3,0xdc,0xcb,0x7d,0x4f,
    0xee,0x27,0x7b,0xcd,0xfd,0x59,0xde,0xf5,0xea,0x53,0xc7,0xba,0xdc,0x9f,0x73,0xf8,
    0xd6,0x19,0xbd,0xb7,0x1a,0x1b,0x3f,0x80,0xdf,0xc0,0x3b,0xe2,0x8f,0x60,0x62,0xf3,
    0x47,0xef,0xbd,0xa1,0xd1,0xbf,0xdf,0xd6,0x2a,0xee,0xe4,0x0d,0x78,0x96,0xef,0x20,
    0x0d,0xb1,0x9f,0x6f,0xee,0xab,0x3f,0x99,0xfb,0xa8,0xd8,0xff,0x19,0x39,0xcd,0xef,
    0x17,0x30,0xad,0xf5,0xaf,0x60,0x92,0xef,0x4f,0xd0,0x5a,0x9b,0xdf,0xb0,0x27,0xb1,
    0xfd,0x66,0x62,0x4b,0xe2,0xbb,0x77,0xc0,0x37,0x60,0x8d,0xad,0x80,0x78,0x9a,0x9a,
    0x6f,0x31,0x87,0x83,0xff,0x7e,0x7b,0xf8,0x0b,0x5c,0xf7,0x85,0x23,0xec,0x0b,0x93,
    0x8c,0xcc,0xdf,0xe0,0x7a,0x1f,0x3b,0x0a,0x56,0x62,0xce,0xc1,0x63,0xd8,0x3a,0x6a,
    0xf4,0x8e,0x13,0x87,0xde,0xd9,0x4e,0xf0,0x0d,0xad,0x14,0x79,0xc9,0xf3,0x04,0x72,
    0xfa,0x0e,0xfb,0x0f,0xe2,0x7e,0x48,0xa9,0xf8,0x18,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint destOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * 4 + params . destOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       int loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//     if(valueBits < 32)
//     {
//         bool isNegative =(valueAsUint &(1 <<(valueBits - 1)))!= 0;
//
//         uint signExtension = isNegative ? 0xFFFFFFFF << valueBits : 0;
//         valueAsUint |= signExtension;
//     }
//           int value = int(valueAsUint);
//
//     return value;
// }
//
//        float convertComponent(int srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint = floatBitsToInt(value);
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . destOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < 1;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * 1 + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               int srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
