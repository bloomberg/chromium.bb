// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000007.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000007[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x98,0x79,0x94,0x8f,0x65,
    0x14,0xc7,0xdf,0x77,0x96,0xdf,0x8c,0x99,0x31,0x66,0x2c,0x23,0x59,0x22,0xaa,0x11,
    0x19,0x09,0x91,0x74,0x90,0x2c,0x35,0xa9,0x08,0x87,0x14,0x32,0x2d,0x94,0x2d,0x4a,
    0x49,0x2a,0x24,0xb2,0x84,0x2c,0xa1,0x42,0x48,0x96,0xec,0x25,0xa1,0x9c,0x94,0xca,
    0x39,0x64,0x69,0x53,0xda,0x38,0x64,0x49,0x2a,0x65,0x3b,0xa4,0xe7,0xbe,0xbf,0xcf,
    0x6d,0xae,0xe7,0xcc,0x5f,0xcd,0x39,0xef,0x79,0xdf,0xfb,0xbd,0xeb,0xf3,0x7d,0xee,
    0xb3,0xfc,0x26,0x31,0xa1,0x6a,0x4a,0x10,0x84,0x41,0x5a,0x90,0x1a,0x94,0x0c,0x83,
    0xe8,0x2f,0x3b,0x48,0x08,0xe4,0x33,0x3d,0x88,0x45,0xef,0x96,0xf9,0xed,0xf2,0x6b,
    0x0d,0x18,0x58,0x50,0xab,0x6e,0xbd,0xda,0xa2,0xcf,0x0c,0x12,0x23,0x3b,0xd1,0x95,
    0x70,0x36,0xc9,0xee,0x9d,0xe4,0x9e,0xde,0xdd,0x7b,0xf6,0x11,0x7c,0x97,0x7b,0xb2,
    0x1c,0x9e,0x14,0xc5,0x0a,0x82,0x26,0xd8,0xca,0xd3,0xca,0x59,0x5f,0x16,0x4f,0x13,
    0x54,0xe5,0xad,0x58,0x08,0x96,0x64,0xb0,0x04,0xb0,0x54,0x83,0x25,0x82,0x65,0x18,
    0x2c,0x09,0x2c,0xcb,0x60,0xc9,0x60,0xa5,0x0d,0x16,0x03,0xbb,0xc8,0x60,0x29,0x60,
    0x15,0x0c,0x96,0x0a,0x56,0xd9,0x60,0xc5,0xc0,0xaa,0x19,0x2c,0x0d,0x2c,0xd7,0x60,
    0xe9,0x60,0x35,0x0d,0x96,0x01,0x56,0xdb,0x60,0xc5,0xc1,0xea,0x1a,0x2c,0x13,0xac,
    0x81,0xf0,0xee,0x46,0xaa,0x1c,0xb4,0x74,0x23,0xec,0x46,0xfd,0xca,0x4f,0x77,0x8f,
    0x47,0xb1,0xef,0x0e,0x3f,0x62,0xdf,0xc3,0xbd,0x2f,0xfd,0x4f,0x17,0x97,0xab,0xc0,
    0xb3,0xc8,0x5b,0xbd,0x78,0xdb,0x8a,0x88,0xb7,0xcd,0xc4,0xdb,0xee,0xc5,0xdb,0x4e,
    0x3c,0x95,0x77,0x31,0xf6,0x0a,0xc8,0xd9,0x61,0x5c,0x2e,0xe7,0x9e,0x52,0x6e,0x14,
    0x09,0x91,0x7d,0x62,0x14,0x4f,0xbe,0xcb,0x38,0x9b,0x18,0x1c,0x07,0xd1,0x3b,0x29,
    0x9a,0x8b,0x14,0xea,0xaa,0xe2,0x6a,0x4a,0xe5,0x5b,0xf1,0x1c,0xe7,0x9d,0x8d,0x4f,
    0x15,0x67,0x5f,0x92,0x1e,0x4b,0xc1,0x3f,0x87,0xef,0x6c,0xf4,0x65,0xf9,0xce,0x21,
    0x5e,0x79,0x13,0x2f,0x07,0x9b,0xca,0xd4,0x23,0x58,0x25,0x67,0xad,0x7d,0xf2,0x7f,
    0x1f,0xa9,0xe3,0x72,0xfa,0x45,0x62,0x35,0x42,0xbe,0x02,0x4c,0xc6,0x9d,0xcb,0x18,
    0x64,0x2e,0x6a,0x20,0x57,0x37,0xfe,0x57,0x62,0x1b,0x43,0x2f,0xef,0x3c,0xe6,0x4a,
    0xed,0xeb,0x50,0xb7,0xea,0x1b,0xd1,0xb7,0xaa,0x6f,0xe6,0xc9,0xf9,0xf8,0x97,0x76,
    0x5e,0xb7,0x19,0xbf,0xb6,0xcc,0xb1,0xc8,0xc2,0x55,0x47,0xe6,0xa3,0xa2,0x43,0xb5,
    0xe7,0x2a,0xd1,0x5b,0xdd,0xa8,0xef,0x5e,0x72,0x77,0x67,0x7c,0x22,0xf7,0x30,0xf5,
    0x48,0xbe,0x02,0x33,0xaf,0x0f,0xa0,0x8b,0x19,0x7d,0x2f,0xd6,0x80,0xd6,0xd1,0x1b,
    0x7b,0xd5,0x0f,0x64,0x7d,0xa9,0x3c,0xd8,0xd4,0x29,0xf2,0x93,0xee,0x39,0x9f,0x58,
    0x28,0x0f,0x65,0xfd,0x68,0xbc,0xe7,0x8c,0xbf,0xc8,0x13,0x3c,0xbe,0x66,0x32,0x07,
    0x52,0xdf,0x6b,0xcc,0x7f,0xae,0x89,0xff,0xba,0xc4,0x77,0x7f,0x2a,0xcf,0xf3,0xe6,
    0x6b,0x35,0xeb,0x5a,0x78,0xda,0x6a,0x78,0x92,0x35,0xb3,0x95,0xb8,0x9f,0x93,0x73,
    0x1b,0x3c,0x89,0xbc,0x1d,0xac,0xac,0x93,0x77,0xe0,0x97,0x88,0xfd,0x4e,0x72,0xec,
    0xc0,0x7e,0x27,0xfb,0x69,0x88,0xfe,0x0b,0xbe,0x6d,0x5f,0x1c,0x35,0x75,0x89,0x9c,
    0x15,0xc6,0xf7,0xdc,0x9a,0x4e,0x92,0x38,0xb2,0x0e,0x05,0x3b,0x8a,0x6d,0x7d,0xb7,
    0x0e,0x12,0xe8,0x85,0x80,0xdc,0xa7,0x1c,0x92,0x4c,0x4e,0xe1,0x61,0x3f,0x7c,0xa8,
    0x7c,0xc0,0x93,0x8f,0x19,0x59,0xd6,0xd1,0x59,0x4f,0x7f,0xce,0xd3,0x4b,0x81,0x56,
    0x0e,0xc3,0x0b,0xed,0x93,0x3c,0x7d,0xcc,0xd3,0x17,0x47,0x6e,0xea,0xaa,0x14,0x0e,
    0xbe,0x87,0x17,0xe9,0x99,0xc6,0x8c,0xfb,0x07,0x70,0xb1,0x91,0xf5,0xf3,0x23,0x6b,
    0xae,0xc0,0xd8,0xfc,0x04,0xbe,0xd4,0xd9,0xc8,0x1a,0xf8,0x19,0x3f,0xc1,0x4f,0x3a,
    0x26,0xf6,0xc1,0xc9,0x19,0x67,0x2f,0xba,0xbd,0xee,0xd9,0x07,0x3f,0x7b,0xa3,0x71,
    0x85,0xd1,0xb7,0x60,0x37,0x38,0xfb,0xfd,0xd4,0x20,0xdf,0x07,0xf8,0x3e,0xed,0xf4,
    0xbf,0xe0,0x23,0xef,0x13,0x2e,0xd6,0x21,0xf7,0x3e,0x4c,0x6c,0xd1,0x1f,0x41,0x7f,
    0xc4,0xd4,0xf6,0x2b,0x3c,0x2f,0xa7,0xb6,0xdf,0xc0,0x8e,0x52,0x8f,0xc8,0x07,0xdd,
    0x73,0x08,0xdf,0x83,0x86,0x8f,0xdf,0x8b,0xe0,0xe3,0x0f,0xf0,0x11,0xce,0x46,0xe4,
    0x3f,0xc1,0x8e,0x1a,0x9b,0xe3,0xe4,0x7c,0x06,0x9b,0xbf,0xb0,0x3b,0xce,0x98,0x8e,
    0x81,0xa9,0xfd,0xdf,0xcc,0xbd,0x72,0x7c,0x02,0x8e,0xe7,0x19,0x9b,0x93,0xe0,0xca,
    0xf1,0x29,0xfc,0x4e,0xc2,0xf1,0x19,0xc3,0xf1,0xa9,0x88,0x8f,0x20,0xc2,0x64,0x4c,
    0xa7,0xe1,0x47,0xc7,0x78,0xc6,0xc4,0xfd,0x87,0xdc,0x52,0xd7,0x39,0xe4,0x86,0x2e,
    0x87,0xec,0x59,0xe7,0x39,0xe7,0xcf,0xa1,0x3f,0x0b,0xd6,0x98,0x3d,0x2d,0x21,0x8c,
    0xf7,0xa8,0xe8,0xa4,0xf7,0x44,0x56,0xdf,0xc4,0x30,0x7e,0x46,0x09,0x2e,0x7a,0xe9,
    0x55,0xc1,0x34,0x6f,0x72,0x58,0x98,0x57,0xfa,0x34,0x39,0x2c,0x8c,0x9b,0xc2,0xc5,
    0x46,0x74,0x51,0xcf,0x46,0x71,0x63,0x91,0x5f,0x6a,0x28,0xfb,0x41,0xbc,0xb7,0x63,
    0x26,0x5e,0xb1,0x30,0xbe,0xbe,0x3e,0x86,0xf3,0xb4,0x30,0x8e,0xa5,0x86,0x85,0x3d,
    0x25,0x98,0xf0,0x70,0x18,0x1e,0x0e,0x1b,0x1e,0xd2,0xc3,0x0b,0xe7,0x2c,0x23,0x8c,
    0x63,0xf3,0x4c,0x1f,0x66,0x84,0x17,0xf6,0xe1,0x21,0xe3,0x9f,0x49,0x7e,0xb1,0x95,
    0x75,0x95,0x09,0x17,0xb2,0x27,0x94,0x08,0xe3,0x67,0xbc,0xe0,0xd2,0xeb,0x0d,0xdc,
    0x53,0x9f,0x3c,0xe9,0xcc,0x9b,0x9c,0x29,0xd7,0x3a,0xdf,0x14,0xce,0x28,0xfd,0x4e,
    0x23,0x57,0x86,0xc9,0x55,0x0d,0x1b,0xed,0x97,0x1a,0xf4,0x4b,0x75,0x63,0x53,0x13,
    0x5c,0xfb,0xf4,0x2a,0xfc,0x6a,0x1a,0x9b,0x5a,0xc4,0x57,0x9b,0xda,0x60,0x79,0x86,
    0x87,0xab,0xf1,0xad,0x6d,0xf2,0x5d,0x43,0xbe,0x3a,0x26,0x56,0x5d,0x70,0xf5,0xab,
    0x87,0x6f,0xdd,0xa8,0xa7,0x12,0x22,0xd9,0x8e,0xbb,0x44,0x11,0xe3,0x2e,0x6e,0xbe,
    0x33,0x19,0x77,0x96,0xd9,0xaf,0x1a,0xb0,0xff,0x69,0xce,0x86,0xf8,0x8c,0x26,0xe6,
    0x75,0x60,0x79,0x66,0x4c,0xd7,0x83,0x37,0x62,0x6e,0x1a,0x80,0x69,0x8c,0xc6,0xc4,
    0x95,0x1a,0x1b,0x9b,0x1a,0xb3,0xe9,0x7d,0xf9,0x2b,0x69,0xea,0x2a,0x45,0x5d,0x65,
    0x4c,0x5d,0x4d,0xbc,0x7d,0xba,0x85,0x27,0x77,0xf2,0xe4,0xce,0x9e,0xdc,0xc5,0x93,
    0xbb,0x7a,0x72,0x7f,0x4f,0x1e,0xe4,0xc9,0x23,0x3c,0x79,0x8c,0x27,0x4f,0xf3,0xe4,
    0xe9,0x46,0x96,0x33,0x7a,0x96,0xa7,0x5f,0xe5,0x9d,0x33,0x1b,0x3c,0xde,0x9b,0xc2,
    0x83,0xf6,0xc3,0x8d,0xf4,0x43,0x33,0x63,0xd3,0x1c,0x7c,0x24,0xf3,0x70,0x13,0x7e,
    0xcd,0x99,0x87,0x26,0x60,0x6a,0xdf,0xd2,0x8b,0xd9,0xaa,0x88,0x98,0xad,0xc1,0x75,
    0xbe,0x6f,0xc6,0xaf,0x35,0x31,0x5b,0x80,0xa9,0xfd,0x2d,0xcc,0x85,0xc6,0xbc,0x95,
    0x98,0xf9,0xc6,0xa6,0x0d,0xb8,0xee,0xab,0xb7,0xe3,0xd7,0xc6,0xd8,0xdc,0x41,0x1c,
    0x3d,0x43,0xda,0x81,0xc9,0x1d,0x6f,0x01,0xd8,0x9d,0xf8,0xb6,0x63,0x3f,0xee,0x60,
    0xf6,0x63,0xd1,0xb5,0x77,0x4f,0x07,0x7a,0xa7,0x3d,0xfd,0xd6,0x11,0xb9,0x83,0xc9,
    0x75,0x17,0xfd,0x24,0xe3,0xe9,0x8c,0xac,0xba,0xbb,0xa9,0x43,0x74,0x5d,0x90,0x75,
    0x5f,0xbc,0x87,0xbd,0xa4,0x33,0xfd,0x24,0x36,0x9d,0xc0,0xd5,0xff,0x3e,0x7a,0x51,
    0xe7,0xe4,0x7e,0xb0,0xbc,0x88,0xa3,0x58,0x74,0x9f,0x7c,0x90,0x3b,0x67,0x01,0x7a,
    0xf5,0xed,0x89,0x4e,0xe2,0x76,0x45,0x56,0x5e,0x1f,0x82,0xd7,0x5e,0xc6,0xfe,0x61,
    0xf0,0xc5,0xf0,0xd3,0x07,0xac,0x37,0xfc,0xf4,0x33,0xfc,0x88,0xae,0xaf,0x7b,0xa6,
    0xc2,0x47,0x5f,0x13,0xe7,0x11,0xc6,0xbc,0x88,0x38,0x03,0xc0,0x84,0xfb,0x85,0xce,
    0x42,0xee,0x8c,0x8f,0x82,0xd7,0xe1,0x7e,0x3b,0x04,0xdf,0xc7,0xd0,0x49,0xcd,0xfd,
    0x91,0x35,0xee,0xe3,0x5e,0xdc,0x27,0xc0,0x6c,0xdc,0x21,0xe0,0x83,0xb9,0x17,0x6b,
    0xdc,0xa7,0xd0,0x49,0xdc,0x41,0xc8,0xca,0xc5,0xd3,0x70,0x31,0xd4,0xe4,0x7a,0x06,
    0x5c,0xb9,0x78,0x16,0x4c,0xb9,0x18,0x6e,0xb8,0x10,0xdd,0x30,0xf7,0x8c,0x82,0x8b,
    0x61,0x26,0xce,0x48,0x6a,0xd6,0xbd,0xed,0x79,0xee,0xe3,0x23,0xa9,0x65,0x04,0x98,
    0x9c,0x51,0xc3,0xf1,0x1f,0x65,0xfc,0x47,0x7b,0x63,0x7e,0x01,0xac,0x2d,0x75,0x8c,
    0x33,0x75,0x88,0x6e,0xac,0x7b,0xc6,0x13,0x67,0x2c,0x39,0xc6,0x98,0xfb,0xd8,0x38,
    0x74,0xe3,0x4d,0x8e,0x17,0xd9,0xaf,0x54,0x9e,0x48,0xce,0x61,0xd4,0x3c,0x89,0xdf,
    0x0c,0x13,0xcd,0x38,0x5e,0xc2,0x6f,0x92,0x39,0x3f,0x26,0x83,0x4f,0x30,0x79,0x27,
    0x7b,0x79,0xc7,0x99,0x3c,0x53,0xd8,0xf7,0x94,0x87,0x29,0x1e,0x0f,0xc3,0x91,0xfb,
    0x21,0x4f,0x35,0xbe,0x2f,0xb3,0x2e,0xc4,0x77,0x1a,0xb2,0x7c,0x4f,0x67,0x6d,0xe8,
    0x1a,0x9b,0xc1,0xb9,0x35,0x8d,0x3d,0x54,0x73,0xcd,0x30,0x3d,0x36,0xd3,0xc4,0x7d,
    0x05,0x2e,0x94,0xef,0x57,0xc1,0x66,0xc2,0xf7,0x1c,0xc3,0xb7,0xe8,0x66,0xbb,0x67,
    0x2e,0xf5,0xcd,0x26,0xe6,0x2c,0x7e,0x33,0x49,0xed,0x73,0xd0,0xcd,0x35,0x39,0xe6,
    0x93,0xe3,0x23,0x97,0x43,0x7a,0xf6,0x0d,0xee,0x8d,0xf3,0xe1,0x3c,0x37,0xda,0xa3,
    0x0a,0x71,0x8d,0xb9,0xc0,0x8b,0x39,0x87,0x98,0x62,0xff,0x26,0x67,0x82,0xf6,0xfb,
    0x42,0x30,0xed,0xf7,0x85,0x1e,0x97,0xfd,0x4c,0x3d,0x8b,0xbc,0x3d,0x77,0x71,0x11,
    0x7b,0xee,0x12,0x70,0xdd,0x73,0xdf,0xc2,0x6f,0x89,0xb1,0x59,0xea,0xf5,0xea,0x32,
    0x30,0xbb,0xe7,0x2e,0xc7,0x77,0x19,0x7c,0xae,0x34,0x7c,0x8a,0x6e,0x85,0x7b,0xd6,
    0x50,0xe3,0x0a,0x53,0xd3,0xdb,0xd4,0xb4,0xda,0xe4,0x7b,0x07,0x5c,0xc6,0xb8,0x0a,
    0x59,0xc6,0xb8,0x12,0xff,0x35,0xc6,0xf6,0x5d,0xce,0x68,0x95,0xd7,0x72,0x06,0x7f,
    0x48,0xef,0xbe,0x87,0xcd,0x5a,0x63,0xb3,0x8e,0x73,0xfb,0x13,0x6c,0xd6,0x63,0xb7,
    0xce,0xe4,0x5c,0xef,0xe5,0x5c,0x69,0xfc,0xdf,0xe7,0x5c,0x1e,0xc2,0x1d,0xf9,0x03,
    0x30,0xf1,0xdd,0x80,0xac,0xf7,0xe7,0x8d,0x9c,0xd9,0x72,0xc6,0x6c,0xf4,0xee,0x34,
    0xe5,0xe0,0xa8,0x2c,0x77,0x9a,0x1c,0xfe,0x6f,0x27,0xf9,0x2e,0x36,0x31,0x36,0x81,
    0x4b,0x8c,0x4d,0xde,0xdd,0xad,0x12,0x31,0xca,0x9b,0x7b,0x51,0x05,0x13,0xaf,0x22,
    0xf1,0x2e,0x31,0x77,0x8a,0xcd,0xe6,0x0e,0x91,0x1d,0xf1,0x10,0xb7,0x1b,0x42,0xcf,
    0x7d,0x0a,0xa6,0x3d,0xf7,0x19,0x98,0x8c,0x6f,0x33,0xb2,0x72,0xb1,0x85,0x78,0x52,
    0xdb,0x16,0x53,0x5b,0x82,0xf9,0x5f,0x5a,0x65,0x53,0x5b,0x15,0xea,0xa9,0x6a,0x7e,
    0xdb,0x7d,0x59,0xc4,0x6f,0xbb,0xaf,0xc0,0xb5,0x4f,0xbe,0xa6,0x4f,0x06,0x1b,0x9b,
    0x6f,0xc0,0xf5,0x0c,0xdd,0x0d,0x66,0xef,0xcc,0xdf,0x12,0x6b,0xb7,0xf1,0xfb,0x8e,
    0x3a,0xf4,0x9c,0xdd,0xc3,0xff,0x2c,0x0a,0xb0,0x97,0x71,0xee,0xc1,0x4e,0x7f,0x23,
    0xfc,0x0b,0x37,0xe8,0x11,0x57,0x48,0x16,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint destOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * 4 + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * 4 + params . destOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       float loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, 4);
//         valueBits = 4 * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//           float value = uintBitsToFloat(valueAsUint);
//
//     return value;
// }
//
//        float convertComponent(float srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint = floatBitsToInt(value);
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . destOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < 1;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * 1 + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               float srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
