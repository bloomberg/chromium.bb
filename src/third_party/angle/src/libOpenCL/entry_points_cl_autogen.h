// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from cl.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// entry_points_cl_autogen.h:
//   Defines the CL entry points.

#ifndef LIBOPENCL_ENTRY_POINTS_CL_AUTOGEN_H_
#define LIBOPENCL_ENTRY_POINTS_CL_AUTOGEN_H_

#include "export.h"

#include <CL/cl.h>

extern "C" {

// CL 1.0
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetPlatformIDs(cl_uint num_entries,
                                                   cl_platform_id *platforms,
                                                   cl_uint *num_platforms);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetPlatformInfo(cl_platform_id platform,
                                                    cl_platform_info param_name,
                                                    size_t param_value_size,
                                                    void *param_value,
                                                    size_t *param_value_size_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetDeviceIDs(cl_platform_id platform,
                                                 cl_device_type device_type,
                                                 cl_uint num_entries,
                                                 cl_device_id *devices,
                                                 cl_uint *num_devices);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetDeviceInfo(cl_device_id device,
                                                  cl_device_info param_name,
                                                  size_t param_value_size,
                                                  void *param_value,
                                                  size_t *param_value_size_ret);
ANGLE_EXPORT cl_context CL_API_ENTRY
CL_CreateContext(const cl_context_properties *properties,
                 cl_uint num_devices,
                 const cl_device_id *devices,
                 void(CL_CALLBACK *pfn_notify)(const char *errinfo,
                                               const void *private_info,
                                               size_t cb,
                                               void *user_data),
                 void *user_data,
                 cl_int *errcode_ret);
ANGLE_EXPORT cl_context CL_API_ENTRY
CL_CreateContextFromType(const cl_context_properties *properties,
                         cl_device_type device_type,
                         void(CL_CALLBACK *pfn_notify)(const char *errinfo,
                                                       const void *private_info,
                                                       size_t cb,
                                                       void *user_data),
                         void *user_data,
                         cl_int *errcode_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_RetainContext(cl_context context);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_ReleaseContext(cl_context context);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetContextInfo(cl_context context,
                                                   cl_context_info param_name,
                                                   size_t param_value_size,
                                                   void *param_value,
                                                   size_t *param_value_size_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_RetainCommandQueue(cl_command_queue command_queue);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_ReleaseCommandQueue(cl_command_queue command_queue);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetCommandQueueInfo(cl_command_queue command_queue,
                                                        cl_command_queue_info param_name,
                                                        size_t param_value_size,
                                                        void *param_value,
                                                        size_t *param_value_size_ret);
ANGLE_EXPORT cl_mem CL_API_ENTRY CL_CreateBuffer(cl_context context,
                                                 cl_mem_flags flags,
                                                 size_t size,
                                                 void *host_ptr,
                                                 cl_int *errcode_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_RetainMemObject(cl_mem memobj);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_ReleaseMemObject(cl_mem memobj);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetSupportedImageFormats(cl_context context,
                                                             cl_mem_flags flags,
                                                             cl_mem_object_type image_type,
                                                             cl_uint num_entries,
                                                             cl_image_format *image_formats,
                                                             cl_uint *num_image_formats);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetMemObjectInfo(cl_mem memobj,
                                                     cl_mem_info param_name,
                                                     size_t param_value_size,
                                                     void *param_value,
                                                     size_t *param_value_size_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetImageInfo(cl_mem image,
                                                 cl_image_info param_name,
                                                 size_t param_value_size,
                                                 void *param_value,
                                                 size_t *param_value_size_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_RetainSampler(cl_sampler sampler);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_ReleaseSampler(cl_sampler sampler);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetSamplerInfo(cl_sampler sampler,
                                                   cl_sampler_info param_name,
                                                   size_t param_value_size,
                                                   void *param_value,
                                                   size_t *param_value_size_ret);
ANGLE_EXPORT cl_program CL_API_ENTRY CL_CreateProgramWithSource(cl_context context,
                                                                cl_uint count,
                                                                const char **strings,
                                                                const size_t *lengths,
                                                                cl_int *errcode_ret);
ANGLE_EXPORT cl_program CL_API_ENTRY CL_CreateProgramWithBinary(cl_context context,
                                                                cl_uint num_devices,
                                                                const cl_device_id *device_list,
                                                                const size_t *lengths,
                                                                const unsigned char **binaries,
                                                                cl_int *binary_status,
                                                                cl_int *errcode_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_RetainProgram(cl_program program);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_ReleaseProgram(cl_program program);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_BuildProgram(cl_program program,
                                                 cl_uint num_devices,
                                                 const cl_device_id *device_list,
                                                 const char *options,
                                                 void(CL_CALLBACK *pfn_notify)(cl_program program,
                                                                               void *user_data),
                                                 void *user_data);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetProgramInfo(cl_program program,
                                                   cl_program_info param_name,
                                                   size_t param_value_size,
                                                   void *param_value,
                                                   size_t *param_value_size_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetProgramBuildInfo(cl_program program,
                                                        cl_device_id device,
                                                        cl_program_build_info param_name,
                                                        size_t param_value_size,
                                                        void *param_value,
                                                        size_t *param_value_size_ret);
ANGLE_EXPORT cl_kernel CL_API_ENTRY CL_CreateKernel(cl_program program,
                                                    const char *kernel_name,
                                                    cl_int *errcode_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_CreateKernelsInProgram(cl_program program,
                                                           cl_uint num_kernels,
                                                           cl_kernel *kernels,
                                                           cl_uint *num_kernels_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_RetainKernel(cl_kernel kernel);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_ReleaseKernel(cl_kernel kernel);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_SetKernelArg(cl_kernel kernel,
                                                 cl_uint arg_index,
                                                 size_t arg_size,
                                                 const void *arg_value);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetKernelInfo(cl_kernel kernel,
                                                  cl_kernel_info param_name,
                                                  size_t param_value_size,
                                                  void *param_value,
                                                  size_t *param_value_size_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetKernelWorkGroupInfo(cl_kernel kernel,
                                                           cl_device_id device,
                                                           cl_kernel_work_group_info param_name,
                                                           size_t param_value_size,
                                                           void *param_value,
                                                           size_t *param_value_size_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_WaitForEvents(cl_uint num_events, const cl_event *event_list);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetEventInfo(cl_event event,
                                                 cl_event_info param_name,
                                                 size_t param_value_size,
                                                 void *param_value,
                                                 size_t *param_value_size_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_RetainEvent(cl_event event);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_ReleaseEvent(cl_event event);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_GetEventProfilingInfo(cl_event event,
                                                          cl_profiling_info param_name,
                                                          size_t param_value_size,
                                                          void *param_value,
                                                          size_t *param_value_size_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_Flush(cl_command_queue command_queue);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_Finish(cl_command_queue command_queue);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueReadBuffer(cl_command_queue command_queue,
                                                      cl_mem buffer,
                                                      cl_bool blocking_read,
                                                      size_t offset,
                                                      size_t size,
                                                      void *ptr,
                                                      cl_uint num_events_in_wait_list,
                                                      const cl_event *event_wait_list,
                                                      cl_event *event);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueWriteBuffer(cl_command_queue command_queue,
                                                       cl_mem buffer,
                                                       cl_bool blocking_write,
                                                       size_t offset,
                                                       size_t size,
                                                       const void *ptr,
                                                       cl_uint num_events_in_wait_list,
                                                       const cl_event *event_wait_list,
                                                       cl_event *event);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueCopyBuffer(cl_command_queue command_queue,
                                                      cl_mem src_buffer,
                                                      cl_mem dst_buffer,
                                                      size_t src_offset,
                                                      size_t dst_offset,
                                                      size_t size,
                                                      cl_uint num_events_in_wait_list,
                                                      const cl_event *event_wait_list,
                                                      cl_event *event);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueReadImage(cl_command_queue command_queue,
                                                     cl_mem image,
                                                     cl_bool blocking_read,
                                                     const size_t *origin,
                                                     const size_t *region,
                                                     size_t row_pitch,
                                                     size_t slice_pitch,
                                                     void *ptr,
                                                     cl_uint num_events_in_wait_list,
                                                     const cl_event *event_wait_list,
                                                     cl_event *event);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueWriteImage(cl_command_queue command_queue,
                                                      cl_mem image,
                                                      cl_bool blocking_write,
                                                      const size_t *origin,
                                                      const size_t *region,
                                                      size_t input_row_pitch,
                                                      size_t input_slice_pitch,
                                                      const void *ptr,
                                                      cl_uint num_events_in_wait_list,
                                                      const cl_event *event_wait_list,
                                                      cl_event *event);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueCopyImage(cl_command_queue command_queue,
                                                     cl_mem src_image,
                                                     cl_mem dst_image,
                                                     const size_t *src_origin,
                                                     const size_t *dst_origin,
                                                     const size_t *region,
                                                     cl_uint num_events_in_wait_list,
                                                     const cl_event *event_wait_list,
                                                     cl_event *event);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueCopyImageToBuffer(cl_command_queue command_queue,
                                                             cl_mem src_image,
                                                             cl_mem dst_buffer,
                                                             const size_t *src_origin,
                                                             const size_t *region,
                                                             size_t dst_offset,
                                                             cl_uint num_events_in_wait_list,
                                                             const cl_event *event_wait_list,
                                                             cl_event *event);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueCopyBufferToImage(cl_command_queue command_queue,
                                                             cl_mem src_buffer,
                                                             cl_mem dst_image,
                                                             size_t src_offset,
                                                             const size_t *dst_origin,
                                                             const size_t *region,
                                                             cl_uint num_events_in_wait_list,
                                                             const cl_event *event_wait_list,
                                                             cl_event *event);
ANGLE_EXPORT void *CL_API_ENTRY CL_EnqueueMapBuffer(cl_command_queue command_queue,
                                                    cl_mem buffer,
                                                    cl_bool blocking_map,
                                                    cl_map_flags map_flags,
                                                    size_t offset,
                                                    size_t size,
                                                    cl_uint num_events_in_wait_list,
                                                    const cl_event *event_wait_list,
                                                    cl_event *event,
                                                    cl_int *errcode_ret);
ANGLE_EXPORT void *CL_API_ENTRY CL_EnqueueMapImage(cl_command_queue command_queue,
                                                   cl_mem image,
                                                   cl_bool blocking_map,
                                                   cl_map_flags map_flags,
                                                   const size_t *origin,
                                                   const size_t *region,
                                                   size_t *image_row_pitch,
                                                   size_t *image_slice_pitch,
                                                   cl_uint num_events_in_wait_list,
                                                   const cl_event *event_wait_list,
                                                   cl_event *event,
                                                   cl_int *errcode_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueUnmapMemObject(cl_command_queue command_queue,
                                                          cl_mem memobj,
                                                          void *mapped_ptr,
                                                          cl_uint num_events_in_wait_list,
                                                          const cl_event *event_wait_list,
                                                          cl_event *event);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueNDRangeKernel(cl_command_queue command_queue,
                                                         cl_kernel kernel,
                                                         cl_uint work_dim,
                                                         const size_t *global_work_offset,
                                                         const size_t *global_work_size,
                                                         const size_t *local_work_size,
                                                         cl_uint num_events_in_wait_list,
                                                         const cl_event *event_wait_list,
                                                         cl_event *event);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueNativeKernel(cl_command_queue command_queue,
                                                        void(CL_CALLBACK *user_func)(void *),
                                                        void *args,
                                                        size_t cb_args,
                                                        cl_uint num_mem_objects,
                                                        const cl_mem *mem_list,
                                                        const void **args_mem_loc,
                                                        cl_uint num_events_in_wait_list,
                                                        const cl_event *event_wait_list,
                                                        cl_event *event);
ANGLE_EXPORT cl_int CL_API_ENTRY
CL_SetCommandQueueProperty(cl_command_queue command_queue,
                           cl_command_queue_properties properties,
                           cl_bool enable,
                           cl_command_queue_properties *old_properties);
ANGLE_EXPORT cl_mem CL_API_ENTRY CL_CreateImage2D(cl_context context,
                                                  cl_mem_flags flags,
                                                  const cl_image_format *image_format,
                                                  size_t image_width,
                                                  size_t image_height,
                                                  size_t image_row_pitch,
                                                  void *host_ptr,
                                                  cl_int *errcode_ret);
ANGLE_EXPORT cl_mem CL_API_ENTRY CL_CreateImage3D(cl_context context,
                                                  cl_mem_flags flags,
                                                  const cl_image_format *image_format,
                                                  size_t image_width,
                                                  size_t image_height,
                                                  size_t image_depth,
                                                  size_t image_row_pitch,
                                                  size_t image_slice_pitch,
                                                  void *host_ptr,
                                                  cl_int *errcode_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueMarker(cl_command_queue command_queue, cl_event *event);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueWaitForEvents(cl_command_queue command_queue,
                                                         cl_uint num_events,
                                                         const cl_event *event_list);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueBarrier(cl_command_queue command_queue);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_UnloadCompiler();
ANGLE_EXPORT void *CL_API_ENTRY CL_GetExtensionFunctionAddress(const char *func_name);
ANGLE_EXPORT cl_command_queue CL_API_ENTRY
CL_CreateCommandQueue(cl_context context,
                      cl_device_id device,
                      cl_command_queue_properties properties,
                      cl_int *errcode_ret);
ANGLE_EXPORT cl_sampler CL_API_ENTRY CL_CreateSampler(cl_context context,
                                                      cl_bool normalized_coords,
                                                      cl_addressing_mode addressing_mode,
                                                      cl_filter_mode filter_mode,
                                                      cl_int *errcode_ret);
ANGLE_EXPORT cl_int CL_API_ENTRY CL_EnqueueTask(cl_command_queue command_queue,
                                                cl_kernel kernel,
                                                cl_uint num_events_in_wait_list,
                                                const cl_event *event_wait_list,
                                                cl_event *event);
}  // extern "C"

#endif  // LIBOPENCL_ENTRY_POINTS_CL_AUTOGEN_H_
