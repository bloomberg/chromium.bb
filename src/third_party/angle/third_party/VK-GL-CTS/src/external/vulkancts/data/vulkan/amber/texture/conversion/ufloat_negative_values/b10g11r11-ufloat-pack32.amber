#!amber
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SHADER compute compute_shader GLSL
#version 430
layout(local_size_x=10, local_size_y=10) in;
uniform layout (set=0, binding=0, r11f_g11f_b10f) image2D texture;

void main ()
{
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    vec4 color = vec4(uv.x - uv.y, uv.y, -uv.y, 1);
    imageStore(texture, uv, color);
}
END

SHADER compute compute_shader_verify GLSL
#version 430
layout(local_size_x=1, local_size_y=1) in;
uniform layout (set=0, binding=0, r11f_g11f_b10f) image2D texture;
layout(binding = 1) buffer Buf1
{
    int result;
};

void main ()
{
  result = 1;

  for (int y = 0; y < 50; y++)
      for (int x = 0; x < 50; x++)
      {
          ivec2 uv = ivec2(x, y);
          vec4 color = imageLoad(texture, uv);
          // Conversion to tiny float should clamp negative values to zero,
          // thus the max operation here.
          vec4 ref = max(vec4(uv.x - uv.y, uv.y, -uv.y, 1), vec4(0));

          if (color != ref)
              result = 0;
      }
}
END

IMAGE texture FORMAT B10G11R11_UFLOAT_PACK32 DIM_2D WIDTH 50 HEIGHT 50 FILL 0
BUFFER result DATA_TYPE int32 SIZE 1 FILL 0

PIPELINE compute pipeline
  ATTACH compute_shader
  BIND BUFFER texture AS storage_image DESCRIPTOR_SET 0 BINDING 0
END

PIPELINE compute verify
  ATTACH compute_shader_verify
  BIND BUFFER texture AS storage_image DESCRIPTOR_SET 0 BINDING 0
  BIND BUFFER result AS storage DESCRIPTOR_SET 0 BINDING 1
END

RUN pipeline 5 5 1
RUN verify 1 1 1
EXPECT result IDX 0 EQ 1
