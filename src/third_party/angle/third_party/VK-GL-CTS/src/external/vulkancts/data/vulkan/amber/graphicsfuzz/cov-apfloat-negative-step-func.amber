#!amber

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by the GraphicsFuzz project.

# Short description: A fragment shader that covers a specific floating point code path

# The test passes because the shader always writes red.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
# #define _int_1 _GLF_uniform_int_values[0]
# #define _int_0 _GLF_uniform_int_values[1]
# #define _float_0_0 _GLF_uniform_float_values[0]
#
# precision highp float;
# precision highp int;
#
# // Contents of _GLF_uniform_int_values: [1, 0]
# layout(set = 0, binding = 0) uniform buf0
# {
#     int _GLF_uniform_int_values[2];
# };
#
# // Contents of _GLF_uniform_float_values: 0.0
# layout(set = 0, binding = 1) uniform buf1
# {
#     float _GLF_uniform_float_values[1];
# };
#
# layout(location = 0) out vec4 _GLF_color;
#
# void main()
# {
#     float edge = determinant(mat3(1));
#     if (step(edge, vec4(-3.0)) == vec4(_float_0_0))
#     {
#         _GLF_color = vec4(_int_1, _int_0, _int_0, _int_1);
#     }
#     else
#     {
#         _GLF_color = vec4(_int_0);
#     }
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 8
; Bound: 69
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %43
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %8 "edge"
               OpName %27 "buf1"
               OpMemberName %27 0 "_GLF_uniform_float_values"
               OpName %29 ""
               OpName %43 "_GLF_color"
               OpName %46 "buf0"
               OpMemberName %46 0 "_GLF_uniform_int_values"
               OpName %48 ""
               OpDecorate %26 ArrayStride 16
               OpMemberDecorate %27 0 Offset 0
               OpDecorate %27 Block
               OpDecorate %29 DescriptorSet 0
               OpDecorate %29 Binding 1
               OpDecorate %43 Location 0
               OpDecorate %45 ArrayStride 16
               OpMemberDecorate %46 0 Offset 0
               OpDecorate %46 Block
               OpDecorate %48 DescriptorSet 0
               OpDecorate %48 Binding 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypePointer Function %6
          %9 = OpTypeVector %6 3
         %10 = OpTypeMatrix %9 3
         %11 = OpConstant %6 1
         %12 = OpConstant %6 0
         %13 = OpConstantComposite %9 %11 %12 %12
         %14 = OpConstantComposite %9 %12 %11 %12
         %15 = OpConstantComposite %9 %12 %12 %11
         %16 = OpConstantComposite %10 %13 %14 %15
         %19 = OpTypeVector %6 4
         %20 = OpConstant %6 -3
         %21 = OpConstantComposite %19 %20 %20 %20 %20
         %24 = OpTypeInt 32 0
         %25 = OpConstant %24 1
         %26 = OpTypeArray %6 %25
         %27 = OpTypeStruct %26
         %28 = OpTypePointer Uniform %27
         %29 = OpVariable %28 Uniform
         %30 = OpTypeInt 32 1
         %31 = OpConstant %30 0
         %32 = OpTypePointer Uniform %6
         %36 = OpTypeBool
         %37 = OpTypeVector %36 4
         %42 = OpTypePointer Output %19
         %43 = OpVariable %42 Output
         %44 = OpConstant %24 2
         %45 = OpTypeArray %30 %44
         %46 = OpTypeStruct %45
         %47 = OpTypePointer Uniform %46
         %48 = OpVariable %47 Uniform
         %49 = OpTypePointer Uniform %30
         %53 = OpConstant %30 1
          %4 = OpFunction %2 None %3
          %5 = OpLabel
          %8 = OpVariable %7 Function
         %17 = OpExtInst %6 %1 Determinant %16
               OpStore %8 %17
         %18 = OpLoad %6 %8
         %22 = OpCompositeConstruct %19 %18 %18 %18 %18
         %23 = OpExtInst %19 %1 Step %22 %21
         %33 = OpAccessChain %32 %29 %31 %31
         %34 = OpLoad %6 %33
         %35 = OpCompositeConstruct %19 %34 %34 %34 %34
         %38 = OpFOrdEqual %37 %23 %35
         %39 = OpAll %36 %38
               OpSelectionMerge %41 None
               OpBranchConditional %39 %40 %64
         %40 = OpLabel
         %50 = OpAccessChain %49 %48 %31 %31
         %51 = OpLoad %30 %50
         %52 = OpConvertSToF %6 %51
         %54 = OpAccessChain %49 %48 %31 %53
         %55 = OpLoad %30 %54
         %56 = OpConvertSToF %6 %55
         %57 = OpAccessChain %49 %48 %31 %53
         %58 = OpLoad %30 %57
         %59 = OpConvertSToF %6 %58
         %60 = OpAccessChain %49 %48 %31 %31
         %61 = OpLoad %30 %60
         %62 = OpConvertSToF %6 %61
         %63 = OpCompositeConstruct %19 %52 %56 %59 %62
               OpStore %43 %63
               OpBranch %41
         %64 = OpLabel
         %65 = OpAccessChain %49 %48 %31 %53
         %66 = OpLoad %30 %65
         %67 = OpConvertSToF %6 %66
         %68 = OpCompositeConstruct %19 %67 %67 %67 %67
               OpStore %43 %68
               OpBranch %41
         %41 = OpLabel
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# _GLF_uniform_float_values
BUFFER variant__GLF_uniform_float_values DATA_TYPE float[] STD140 DATA
 0.0
END
# _GLF_uniform_int_values
BUFFER variant__GLF_uniform_int_values DATA_TYPE int32[] STD140 DATA
 1 0
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant__GLF_uniform_float_values AS uniform DESCRIPTOR_SET 0 BINDING 1
  BIND BUFFER variant__GLF_uniform_int_values AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
