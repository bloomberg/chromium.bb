#!amber

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# A test for a coverage-gap found by the GraphicsFuzz project.

# Short description: A fragment shader that covers a specific const folding path

# The test passes because the shader always writes red.

SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 310 es
# #define _int_0 _GLF_uniform_int_values[0]
# #define _int_1 _GLF_uniform_int_values[1]
#
# precision highp float;
# precision highp int;
#
# // Contents of _GLF_uniform_int_values: [0, 1]
# layout(set = 0, binding = 0) uniform buf0
# {
#     int _GLF_uniform_int_values[2];
# };
#
# layout(location = 0) out vec4 _GLF_color;
#
# void main()
# {
#     if (mod(1.0, 1.0) <= 0.01)
#     {
#         _GLF_color = vec4(1, _int_0, _int_0, _int_1);
#     }
#     else
#     {
#         _GLF_color = vec4(_int_0);
#     }
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 8
; Bound: 42
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %16
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 310
               OpName %4 "main"
               OpName %16 "_GLF_color"
               OpName %21 "buf0"
               OpMemberName %21 0 "_GLF_uniform_int_values"
               OpName %23 ""
               OpDecorate %16 Location 0
               OpDecorate %20 ArrayStride 16
               OpMemberDecorate %21 0 Offset 0
               OpDecorate %21 Block
               OpDecorate %23 DescriptorSet 0
               OpDecorate %23 Binding 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpConstant %6 1
          %9 = OpConstant %6 0.00999999978
         %10 = OpTypeBool
         %14 = OpTypeVector %6 4
         %15 = OpTypePointer Output %14
         %16 = OpVariable %15 Output
         %17 = OpTypeInt 32 1
         %18 = OpTypeInt 32 0
         %19 = OpConstant %18 2
         %20 = OpTypeArray %17 %19
         %21 = OpTypeStruct %20
         %22 = OpTypePointer Uniform %21
         %23 = OpVariable %22 Uniform
         %24 = OpConstant %17 0
         %25 = OpTypePointer Uniform %17
         %32 = OpConstant %17 1
          %4 = OpFunction %2 None %3
          %5 = OpLabel
          %8 = OpFMod %6 %7 %7
         %11 = OpFOrdLessThanEqual %10 %8 %9
               OpSelectionMerge %13 None
               OpBranchConditional %11 %12 %37
         %12 = OpLabel
         %26 = OpAccessChain %25 %23 %24 %24
         %27 = OpLoad %17 %26
         %28 = OpConvertSToF %6 %27
         %29 = OpAccessChain %25 %23 %24 %24
         %30 = OpLoad %17 %29
         %31 = OpConvertSToF %6 %30
         %33 = OpAccessChain %25 %23 %24 %32
         %34 = OpLoad %17 %33
         %35 = OpConvertSToF %6 %34
         %36 = OpCompositeConstruct %14 %7 %28 %31 %35
               OpStore %16 %36
               OpBranch %13
         %37 = OpLabel
         %38 = OpAccessChain %25 %23 %24 %24
         %39 = OpLoad %17 %38
         %40 = OpConvertSToF %6 %39
         %41 = OpCompositeConstruct %14 %40 %40 %40 %40
               OpStore %16 %41
               OpBranch %13
         %13 = OpLabel
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# _GLF_uniform_int_values
BUFFER variant__GLF_uniform_int_values DATA_TYPE int32[] STD140 DATA
 0 1
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER variant__GLF_uniform_int_values AS uniform DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT variant_framebuffer IDX 0 0 SIZE 256 256 EQ_RGBA 255 0 0 255
