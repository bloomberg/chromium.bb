This is a testharness.js-based test.
PASS Same-origin prerequisite check: the original prototype is accessible
FAIL Same-origin: setting the prototype to an empty object via Object.setPrototypeOf should throw a TypeError assert_throws_js: function "() => {
      Object.setPrototypeOf(target, newValue);
    }" did not throw
FAIL Same-origin: setting the prototype to an empty object via __proto__ should throw a TypeError assert_throws_js: function "function() {
      target.__proto__ = newValue;
    }" did not throw
FAIL Same-origin: setting the prototype to an empty object via Reflect.setPrototypeOf should return false assert_false: expected false got true
FAIL Same-origin: the prototype must still be its original value assert_equals: expected object "[object Location]" but got object "[object Object]"
PASS Same-origin: setting the prototype to its original value via Object.setPrototypeOf should not throw
PASS Same-origin: setting the prototype to its original value via __proto__ should not throw
PASS Same-origin: setting the prototype to its original value via Reflect.setPrototypeOf should return true
Harness: the test ran to completion.

