This is a testharness.js-based test.
FAIL Test AbsoluteOrientationSensor.quaternion return a four-element FrozenArray. assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL Test RelativeOrientationSensor.quaternion return a four-element FrozenArray. assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL Test AbsoluteOrientationSensor.populateMatrix() method works correctly. assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL Test RelativeOrientationSensor.populateMatrix() method works correctly. assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL AbsoluteOrientationSensor: Test that 'onreading' is called and sensor reading is valid assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL AbsoluteOrientationSensor: sensor reading is correct assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL AbsoluteOrientationSensor: sensor timestamp is updated when time passes assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL AbsoluteOrientationSensor: Test that sensor can be successfully created and its states are correct. assert_equals: Expected activate event, but got error event instead expected "activate" but got "error"
FAIL AbsoluteOrientationSensor: sensor.start() returns undefined assert_equals: Expected activate event, but got error event instead expected "activate" but got "error"
FAIL AbsoluteOrientationSensor: no exception is thrown when calling start() on already started sensor assert_equals: Expected activate event, but got error event instead expected "activate" but got "error"
FAIL AbsoluteOrientationSensor: sensor.stop() returns undefined assert_equals: Expected activate event, but got error event instead expected "activate" but got "error"
FAIL AbsoluteOrientationSensor: no exception is thrown when calling stop() on already stopped sensor assert_equals: Expected activate event, but got error event instead expected "activate" but got "error"
FAIL AbsoluteOrientationSensor: Test that fresh reading is fetched on start() assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL AbsoluteOrientationSensor: sensor readings can not be fired on the background tab assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL AbsoluteOrientationSensor: frequency hint works promise_test: Unhandled rejection with value: object "[object SensorErrorEvent]"
FAIL AbsoluteOrientationSensor: sensor receives suspend / resume notifications when  cross-origin subframe is focused assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL AbsoluteOrientationSensor: throw 'NotSupportedError' for an unsupported sensor option assert_throws: function "() => { new sensorType({invalid: 1}) }" did not throw
FAIL AbsoluteOrientationSensor: throw 'TypeError' if frequency is invalid assert_throws: when freq is undefined function "() => { new sensorType({frequency: freq}) }" did not throw
FAIL AbsoluteOrientationSensor: sensor reading is correct when options.referenceFrame is 'screen' assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL AbsoluteOrientationSensor: throw 'TypeError' if referenceFrame is not one of enumeration values assert_throws: when refFrame is undefined function "() => { new sensorType({referenceFrame: refFrame}) }" did not throw
FAIL RelativeOrientationSensor: Test that 'onreading' is called and sensor reading is valid assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL RelativeOrientationSensor: sensor reading is correct assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL RelativeOrientationSensor: sensor timestamp is updated when time passes assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL RelativeOrientationSensor: Test that sensor can be successfully created and its states are correct. assert_equals: Expected activate event, but got error event instead expected "activate" but got "error"
FAIL RelativeOrientationSensor: sensor.start() returns undefined assert_equals: Expected activate event, but got error event instead expected "activate" but got "error"
FAIL RelativeOrientationSensor: no exception is thrown when calling start() on already started sensor assert_equals: Expected activate event, but got error event instead expected "activate" but got "error"
FAIL RelativeOrientationSensor: sensor.stop() returns undefined assert_equals: Expected activate event, but got error event instead expected "activate" but got "error"
FAIL RelativeOrientationSensor: no exception is thrown when calling stop() on already stopped sensor assert_equals: Expected activate event, but got error event instead expected "activate" but got "error"
FAIL RelativeOrientationSensor: Test that fresh reading is fetched on start() assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL RelativeOrientationSensor: sensor readings can not be fired on the background tab assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL RelativeOrientationSensor: frequency hint works promise_test: Unhandled rejection with value: object "[object SensorErrorEvent]"
FAIL RelativeOrientationSensor: sensor receives suspend / resume notifications when  cross-origin subframe is focused assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL RelativeOrientationSensor: throw 'NotSupportedError' for an unsupported sensor option assert_throws: function "() => { new sensorType({invalid: 1}) }" did not throw
FAIL RelativeOrientationSensor: throw 'TypeError' if frequency is invalid assert_throws: when freq is undefined function "() => { new sensorType({frequency: freq}) }" did not throw
FAIL RelativeOrientationSensor: sensor reading is correct when options.referenceFrame is 'screen' assert_equals: Expected reading event, but got error event instead expected "reading" but got "error"
FAIL RelativeOrientationSensor: throw 'TypeError' if referenceFrame is not one of enumeration values assert_throws: when refFrame is undefined function "() => { new sensorType({referenceFrame: refFrame}) }" did not throw
Harness: the test ran to completion.

