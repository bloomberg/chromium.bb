This is a testharness.js-based test.
PASS Can get the ReadableStreamDefaultReader constructor indirectly
PASS Can get the ReadableStreamDefaultController constructor indirectly
FAIL Can get ReadableStreamAsyncIteratorPrototype object indirectly rs.getIterator is not a function
PASS ReadableStream.prototype.cancel enforces a brand check
FAIL ReadableStream.prototype.getIterator enforces a brand check assert_equals: getIterator should exist expected "function" but got "undefined"
PASS ReadableStream.prototype.getReader enforces a brand check
PASS ReadableStream.prototype.locked enforces a brand check
PASS ReadableStream.prototype.tee enforces a brand check
PASS ReadableStreamDefaultReader enforces a brand check on its argument
PASS ReadableStreamDefaultReader.prototype.closed enforces a brand check
PASS ReadableStreamDefaultReader.prototype.cancel enforces a brand check
PASS ReadableStreamDefaultReader.prototype.read enforces a brand check
PASS ReadableStreamDefaultReader.prototype.releaseLock enforces a brand check
PASS ReadableStreamDefaultController enforces a brand check on its argument
PASS ReadableStreamDefaultController can't be given a fully-constructed ReadableStream
PASS ReadableStreamDefaultController.prototype.desiredSize enforces a brand check
PASS ReadableStreamDefaultController.prototype.close enforces a brand check
PASS ReadableStreamDefaultController.prototype.enqueue enforces a brand check
PASS ReadableStreamDefaultController.prototype.error enforces a brand check
FAIL ReadableStreamAsyncIteratorPrototype.next enforces a brand check Object prototype may only be an Object or null: undefined
FAIL ReadableStreamAsyncIteratorPrototype.return enforces a brand check Object prototype may only be an Object or null: undefined
Harness: the test ran to completion.

