This is a testharness.js-based test.
FAIL 'calc(100px * 0 / 0)' as a specified value should serialize as 'calc(NaN * 1px)'. assert_not_equals: 'calc(100px * 0 / 0)' should be valid in width. got disallowed value ""
FAIL 'calc(100px / 0)' as a specified value should serialize as 'calc(infinity * 1px)'. assert_not_equals: 'calc(100px / 0)' should be valid in width. got disallowed value ""
FAIL 'calc(100px / (0))' as a specified value should serialize as 'calc(infinity * 1px)'. assert_not_equals: 'calc(100px / (0))' should be valid in width. got disallowed value ""
FAIL 'calc(100px / (2 - 2))' as a specified value should serialize as 'calc(infinity * 1px)'. assert_not_equals: 'calc(100px / (2 - 2))' should be valid in width. got disallowed value ""
FAIL 'calc(100px / (2 - (-62 + 64)))' as a specified value should serialize as 'calc(infinity * 1px)'. assert_not_equals: 'calc(100px / (2 - (-62 + 64)))' should be valid in width. got disallowed value ""
FAIL 'calc(100px * (1 / 0))' as a specified value should serialize as 'calc(infinity * 1px)'. assert_not_equals: 'calc(100px * (1 / 0))' should be valid in width. got disallowed value ""
FAIL 'calc(100px * (1 / (0)))' as a specified value should serialize as 'calc(infinity * 1px)'. assert_not_equals: 'calc(100px * (1 / (0)))' should be valid in width. got disallowed value ""
FAIL 'calc(100px * (1 / (2 - 2)))' as a specified value should serialize as 'calc(infinity * 1px)'. assert_not_equals: 'calc(100px * (1 / (2 - 2)))' should be valid in width. got disallowed value ""
FAIL 'calc(100px * (1 / (2 - (-62 + 64))))' as a specified value should serialize as 'calc(infinity * 1px)'. assert_not_equals: 'calc(100px * (1 / (2 - (-62 + 64))))' should be valid in width. got disallowed value ""
FAIL 'calc(1px * max(1/0, 0))' as a specified value should serialize as 'calc(infinity * 1px)'. assert_not_equals: 'calc(1px * max(1/0, 0))' should be valid in width. got disallowed value ""
FAIL 'calc(1px * min(1/0, 0))' as a specified value should serialize as 'calc(0px)'. assert_not_equals: 'calc(1px * min(1/0, 0))' should be valid in width. got disallowed value ""
FAIL 'calc(1px * max(0/0, 0))' as a specified value should serialize as 'calc(NaN * 1px)'. assert_not_equals: 'calc(1px * max(0/0, 0))' should be valid in width. got disallowed value ""
FAIL 'calc(1px * min(0/0, 0))' as a specified value should serialize as 'calc(NaN * 1px)'. assert_not_equals: 'calc(1px * min(0/0, 0))' should be valid in width. got disallowed value ""
FAIL 'calc(1px * max(0/0, min(0,10)))' as a specified value should serialize as 'calc(NaN * 1px)'. assert_not_equals: 'calc(1px * max(0/0, min(0,10)))' should be valid in width. got disallowed value ""
FAIL 'calc(1px * clamp(0/0, 0, 10))' as a specified value should serialize as 'calc(NaN * 1px)'. assert_not_equals: 'calc(1px * clamp(0/0, 0, 10))' should be valid in width. got disallowed value ""
FAIL 'calc(1px * max(0, min(10, 0/0)))' as a specified value should serialize as 'calc(NaN * 1px)'. assert_not_equals: 'calc(1px * max(0, min(10, 0/0)))' should be valid in width. got disallowed value ""
FAIL 'calc(1px * clamp(0, 10, 0/0))' as a specified value should serialize as 'calc(NaN * 1px)'. assert_not_equals: 'calc(1px * clamp(0, 10, 0/0))' should be valid in width. got disallowed value ""
FAIL 'calc(1px * max(0, min(0/0, 10)))' as a specified value should serialize as 'calc(NaN * 1px)'. assert_not_equals: 'calc(1px * max(0, min(0/0, 10)))' should be valid in width. got disallowed value ""
FAIL 'calc(1px * clamp(0, 0/0, 10))' as a specified value should serialize as 'calc(NaN * 1px)'. assert_not_equals: 'calc(1px * clamp(0, 0/0, 10))' should be valid in width. got disallowed value ""
FAIL 'calc(1px * clamp(-1/0, 0, 1/0))' as a specified value should serialize as 'calc(0px)'. assert_not_equals: 'calc(1px * clamp(-1/0, 0, 1/0))' should be valid in width. got disallowed value ""
FAIL 'calc(1px * clamp(-1/0, 1/0, 10))' as a specified value should serialize as 'calc(10px)'. assert_not_equals: 'calc(1px * clamp(-1/0, 1/0, 10))' should be valid in width. got disallowed value ""
Harness: the test ran to completion.

