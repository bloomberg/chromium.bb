// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "mojo/public/mojom/base/time.mojom";
import "url/mojom/origin.mojom";
import "url/mojom/url.mojom";

// An advertisement to display for an interest group.
// https://github.com/WICG/turtledove/blob/main/FLEDGE.md#12-interest-group-attributes
struct InterestGroupAd {
  // Must use https.
  url.mojom.Url render_url;
  // Opaque JSON data, persisted, then passed as object to auction worklet.
  string? metadata;
};

// The maximum size of a valid interest group in bytes.
const uint32 kMaxInterestGroupSize = 51200; // 50 * 1024

// Interest group description, passed to JoinInterestGroup(). If an entry keyed
// by (owner, name) already exists, we "merge" by overwriting specified fields,
// leaving other existing fields intact.
//
// All URLs and origins must use https.
//
// https://github.com/WICG/turtledove/blob/main/FLEDGE.md#11-joining-interest-groups
struct InterestGroup {
  mojo_base.mojom.Time expiry;
  // `owner` must match the current frame URL's origin.
  url.mojom.Origin owner;
  string name;
  // `bidding_url` must match the current frame URL's origin.
  url.mojom.Url? bidding_url;
  // `bidding_wasm_helper_url` must match the current frame URL's origin.
  url.mojom.Url? bidding_wasm_helper_url;
  // `update_url` must match the current frame URL's origin.
  url.mojom.Url? update_url;
  // `trusted_bidding_signals_url` must match the current frame URL's origin.
  url.mojom.Url? trusted_bidding_signals_url;
  array<string>? trusted_bidding_signals_keys;
  // Opaque JSON data, persisted, then passed as object to auction worklet.
  string?        user_bidding_signals;
  array<InterestGroupAd>? ads;
  array<InterestGroupAd>? ad_components;
};

// Represents all buyers, the "*" wildcard in JavaScript.
// For use only with InterestGroupBuyers.
struct AllBuyers {
};

// For use only with AuctionAdConfig.
//
// All origins must use https.
union InterestGroupBuyers {
  array<url.mojom.Origin> buyers;
  AllBuyers all_buyers;
};

// Subset of AuctionAdConfig that is not shared by all auctions that are
// using the same SellerWorklet object (so it's "not shared" between
// AuctionConfigs that share the same SellerWorklet). Other AuctionAdConfig
// parameters all must be the same for two auctions to share a Sellerworklet.
struct AuctionAdConfigNonSharedParams {
  // Owners of interest groups allowed to participate in the auction.
  blink.mojom.InterestGroupBuyers? interest_group_buyers;

  // Opaque JSON data, passed as object to auction worklet.
  string? auction_signals;

  // Opaque JSON data, passed as object to auction worklet.
  string? seller_signals;

  // Keys of `per_buyer_signals` must be a subset of origins specified by
  // `interest_group_buyers`. Value is opaque JSON data, passed as object to
  // auction worklet.
  map<url.mojom.Origin, string>?
      per_buyer_signals;
};

// Configuration to pass to RunAdAuction().
//
// All URLs and origins must use https.
//
// https://github.com/WICG/turtledove/blob/main/FLEDGE.md#21-initiating-an-on-device-auction
struct AuctionAdConfig {
  // The entity running the ad auction. Unlike for interest groups, `seller`
  // *doesn't* need to match the the current frame URL's origin since the
  // `decision_logic_url` determines the behavior of the auction. This allows
  // the publisher page embedding the ad to call runAdAuction() directly if it
  // desires, rather than requiring the runAdAuction() call to be made inside a
  // seller-hosted iframe -- the decision logic has to be hosted by the seller
  // though, even though signals from the page can come from the publisher. The
  // seller and publisher could be different entities, or the same entity.
  url.mojom.Origin seller;

  // `decision_logic_url`'s origin must match the the seller's origin.
  url.mojom.Url decision_logic_url;

  // Base URL for per-bid data passed to the seller worklet. Must be same
  // origin with `seller`.
  url.mojom.Url? trusted_scoring_signals_url;

  // Other parameters are grouped in a struct that is passed to SellerWorklets.
  AuctionAdConfigNonSharedParams auction_ad_config_non_shared_params;
};
