// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "mojo/public/mojom/base/time.mojom";
import "third_party/blink/public/mojom/conversions/attribution_data_host.mojom";
import "third_party/blink/public/mojom/tokens/tokens.mojom";
import "url/mojom/origin.mojom";

// Mojo struct to represent blink::Impression native struct.
struct Impression {
  // Intended committed top-level origin of the resulting navigation. Must match
  // the committed navigation's origin to be a valid impression. Declared by
  // the impression tag.
  url.mojom.Origin conversion_destination;

  // Optional origin that will receive all conversion measurement reports
  // associated with this impression. Declared by the impression tag.
  url.mojom.Origin? reporting_origin;

  // Data that will be sent in conversion reports to identify this impression.
  // Declared by the impression tag.
  uint64 impression_data;

  // Optional expiry specifying the amount of time this impression can convert.
  // Declared by the impression tag.
  mojo_base.mojom.TimeDelta? expiry;

  // Priority for the attribution source. 0 is used as a default if none is
  // provided.
  int64 priority = 0;

  // Indicates the attributionsrc request associated with `this`, if any. If
  // provided, API parameters should be used from the the `AttributionDataHost`
  // that is associated with `attribution_src_token` rather than from `this`.
  AttributionSrcToken? attribution_src_token;
};

// Sent from renderer to browser process when a resource request matching the
// .well-known conversion registration path is intercepted.
interface ConversionHost {
  // Registers a new data host which can register a source or trigger.
  // Called when an attributionsrc attribute is registered, e.g. via an img
  // element. Information will be passed at a later point when the renderer
  // is done fetching the config.
  RegisterDataHost(pending_receiver<AttributionDataHost> data_host);

  // Registers a new data host which can register a source associated with a
  // navigation. Called when attributionsrc is registered on a navigation API.
  // Information will be passed at a later point when the renderer has finished
  // processing the attribution source config returned from the request.
  // `attribution_src_token` can be used to associate `data_host` with an
  // `Impression` object in the browser process.
  RegisterNavigationDataHost(pending_receiver<AttributionDataHost> data_host,
    AttributionSrcToken attribution_src_token);
};
