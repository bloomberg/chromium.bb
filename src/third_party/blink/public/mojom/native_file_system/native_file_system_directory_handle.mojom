// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "third_party/blink/public/mojom/native_file_system/native_file_system_file_handle.mojom";
import "third_party/blink/public/mojom/native_file_system/native_file_system_error.mojom";
import "third_party/blink/public/mojom/native_file_system/native_file_system_transfer_token.mojom";
import "third_party/blink/public/mojom/permissions/permission_status.mojom";

// Union representing either a file or a directory handle. Used in APIs that
// can return arbitrary handles.
union NativeFileSystemHandle {
  pending_remote<NativeFileSystemFileHandle> file;
  pending_remote<NativeFileSystemDirectoryHandle> directory;
};

struct NativeFileSystemEntry {
  NativeFileSystemHandle entry_handle;
  string name;
};

interface NativeFileSystemDirectoryEntriesListener {
  // Called by NativeFileSystemDirectoryHandle.GetEntries when some entries
  // have been obtained. |has_more_entries| is false when all the entries have
  // been obtained, and  indicates that the callback will not be called again.
  DidReadDirectory(NativeFileSystemError result,
                   array<NativeFileSystemEntry> entries,
                   bool has_more_entries);
};

// This interface represents a handle to a directory in the Native File System
// API.
//
// TODO(mek): Using something similar to (but probably not the same as)
// mojo_base.mojom.Basename (https://crbug.com/779196) to represent names of
// children could help us defend against directory traversal bugs at the IPC
// layer (not the same type though because of https://crbug.com/956231 and the
// fact that our paths really aren't base::FilePath, but instead are virtual
// paths).
interface NativeFileSystemDirectoryHandle {
  // Queries the current permission status for this handle.
  GetPermissionStatus(bool writable) => (PermissionStatus status);

  // Requests read and/or write permission for this handle. Returns the new
  // permission status for this handle.
  RequestPermission(bool writable) => (NativeFileSystemError result, PermissionStatus status);

  // Returns a file with the given |basename| that is a child of this
  // directory. If no such file exists, and |create| is true, the file is first
  // created. Returns an error if the operation fails, or a handle to the newly
  // created file if the operation succeeds.
  GetFile(string basename, bool create) =>
      (NativeFileSystemError result, pending_remote<NativeFileSystemFileHandle>? file);

  // Returns a directory with the given |basename| that is a child of this
  // directory. If no such directory exists, and |create| is true, the directory
  // is first created.
  // Returns an error if the operation fails, or a handle to the newly created
  // directory if the operation succeeds.
  GetDirectory(string basename, bool create) =>
      (NativeFileSystemError result,
       pending_remote<NativeFileSystemDirectoryHandle>? directory);

  // Returns all the direct children of this directory.
  GetEntries(pending_remote<NativeFileSystemDirectoryEntriesListener> listener);

  // Deletes an entry which is a child of this directory.
  // To delete recursively, set |recurse| to true.
  RemoveEntry(string basename, bool recurse) => (NativeFileSystemError result);

  // Create a TransferToken for this directory. This token can be used to pass
  // a reference to this directory to other methods, for example to copy or move
  // the directory, or when transferring the handle over postMessage.
  Transfer(pending_receiver<NativeFileSystemTransferToken> token);
};
