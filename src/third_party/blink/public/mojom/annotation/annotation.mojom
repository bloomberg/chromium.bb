// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "ui/gfx/geometry/mojom/geometry.mojom";

enum AnnotationType {
  // Shared highlights are content-less highlights of a document. They are
  // produced using the :~:text= directive in a URL. See also,
  // text_fragment_anchor.cc in Blink and //components/shared_highlighting
  kSharedHighlight,

  // User notes are private notes that a user can make and save on pages they
  // browse. See //components/user_notes
  kUserNote,
};

// RAII wrapper for managing a single annotation in the renderer from the
// browser process. Closing the message pipe removes the corresponding
// annotation (and host in the browser) from the document.
interface AnnotationAgent {
  // Ensures the content that the agent is attached to is visible and centered
  // in the viewport.
  ScrollIntoView();
};

// Allows the browser process to receive events for a single annotation in the
// renderer.
interface AnnotationAgentHost {
  // Called when the agent finishes an attachment attempt. If the agent was
  // able to find a Range of DOM matching the specified selector,
  // `document_relative_rect` will contain its bounding box, in the document
  // coordinate space. If attachment fails, the rect will be empty.
  DidFinishAttachment(gfx.mojom.Rect document_relative_rect);
};

// Allows the browser process to request creation of an annotation in the
// renderer.
interface AnnotationAgentContainer {
  // Instantiates a new agent in the renderer. The new agent will immediately
  // attempt attachment. Currently, an AnnotationAgent can only perform
  // attachment on creation and if it fails it cannot retry.
  // `host_remote` - A binding to an object in the caller which will receive
  //                 events for the agent.
  // `agent_receiver` - A binding that the caller will use to send messages to
  //                    and control the life time of the agent.
  // `type` - The use case the annotation agent is being used for.
  // `serialized_selector` - A selector that will be used to attach the agent
  //                         to a Range of DOM in the Document.
  CreateAgent(pending_remote<blink.mojom.AnnotationAgentHost> host_remote,
              pending_receiver<blink.mojom.AnnotationAgent> agent_receiver,
              AnnotationType type,
              string serialized_selector);
};
