# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//testing/libfuzzer/fuzzer_test.gni")
import("//third_party/blink/renderer/bindings/bindings.gni")
import("//third_party/blink/renderer/bindings/core/v8/generated.gni")
import("//third_party/blink/renderer/bindings/generated_in_core.gni")
import("//third_party/blink/renderer/bindings/scripts/scripts.gni")
import("//third_party/blink/renderer/core/core.gni")
import("//third_party/blink/renderer/core/core_idl_files.gni")

visibility = [ "//third_party/blink/renderer/*" ]

blink_core_sources("generated") {
  sources = generated_enumeration_sources_in_core
  deps =
      [ "//third_party/blink/renderer/bindings:generate_bindings_enumeration" ]
}

blink_core_sources("generated_for_testing") {
  sources = generated_enumeration_sources_for_testing_in_core
  deps =
      [ "//third_party/blink/renderer/bindings:generate_bindings_enumeration" ]
}

generate_origin_trial_features("bindings_core_origin_trial_features") {
  sources =
      core_idl_files + core_idl_with_modules_dependency_files +
      core_global_constructors_generated_idl_files + core_dependency_idl_files
  component = "core"
  output_dir = bindings_core_output_dir + "/v8"
  deps = [
    "//third_party/blink/renderer/bindings/core:core_global_constructors_idls",
    "//third_party/blink/renderer/bindings/core:interfaces_info_core",
  ]
}

group("bindings_core_v8_generated") {
  public_deps = [
    ":bindings_core_impl_generated",
    "//third_party/blink/renderer/bindings:generate_v8_bindings",
  ]
  if (is_win && is_official_build) {
    public_deps += [ ":generate_bindings_core_v8_all_interfaces" ]
  } else {
    public_deps += [ ":generate_bindings_core_v8_interfaces" ]
  }
}

# IDL file lists; see: http://www.chromium.org/developers/web-idl-interfaces
# Interface IDL files: generate individual bindings (includes testing)
idl_compiler("generate_bindings_core_v8_interfaces") {
  sources = core_definition_idl_files + core_testing_definition_idl_files +
            generated_webcore_testing_idl_files
  if (use_v8_bind_gen_for_dictionary) {
    sources -= core_dictionary_idl_files
    sources -= core_testing_dictionary_idl_files
  }
  output_dir = bindings_core_v8_output_dir
  output_name_suffix = ""
  target_component = "core"
}

aggregate_generated_bindings("generate_bindings_core_v8_all_interfaces") {
  sources = core_definition_idl_files
  if (use_v8_bind_gen_for_dictionary) {
    sources -= core_dictionary_idl_files
  }
  outputs = [ "$bindings_core_v8_output_dir/v8_generated_core_bindings.cc" ]
  component = "core"
  public_deps = [ ":generate_bindings_core_v8_interfaces" ]
}

idl_impl("bindings_core_impl_generated") {
  if (use_v8_bind_gen_for_dictionary) {
    dict_idls = []
  } else {
    dict_idls = core_dictionary_idl_files + core_testing_dictionary_idl_files
  }
  non_dict_outputs = bindings_core_generated_union_type_files +
                     generated_core_testing_callback_function_files +
                     generated_core_callback_function_files
  non_dict_output_dir = bindings_core_v8_output_dir
  target_component = "core"
}

# Compile the non-test sources generated above.
blink_core_sources("bindings_core_impl") {
  _non_testing_sources = get_target_outputs(":bindings_core_impl_generated") -
                         generated_core_testing_callback_function_files

  _non_testing_sources += generated_core_dictionary_files
  if (!use_v8_bind_gen_for_dictionary) {
    _non_testing_sources -= generated_core_testing_dictionary_files
  }

  sources = _non_testing_sources + bindings_core_generated_interface_files +
            get_target_outputs(":bindings_core_origin_trial_features")

  deps = [
    ":bindings_core_origin_trial_features",
    ":bindings_core_v8_generated",
    "//third_party/blink/renderer/bindings:generate_v8_bindings",
  ]
}

# Compile the test sources generated above. This test target doesn't count
# as part of the "core" component so shouldn't use the blink_core_sources for
# linking on Windows.
jumbo_source_set("testing") {
  sources = generated_core_testing_dictionary_files +
            generated_core_testing_callback_function_files

  testing_idl_interface_files =
      webcore_testing_idl_files + generated_webcore_testing_idl_files +
      webcore_testing_idl_with_modules_dependency_files
  if (!use_v8_bind_gen_for_dictionary) {
    testing_idl_interface_files += core_testing_dictionary_idl_files
  }
  sources += process_file_template(
          testing_idl_interface_files,
          [
            "$bindings_core_v8_output_dir/v8_{{source_name_part}}.cc",
            "$bindings_core_v8_output_dir/v8_{{source_name_part}}.h",
          ])

  configs -= core_config_remove
  configs += core_config_add + [ "//third_party/blink/renderer:inside_blink" ] -
             [ "//third_party/blink/renderer/core:config" ]

  deps = [
    ":bindings_core_v8_generated",
    "//skia",
    "//third_party/blink/renderer/bindings:generate_v8_bindings",
    "//third_party/blink/renderer/core:all_generators",
    "//third_party/blink/renderer/platform",
    "//v8",
  ]
}

fuzzer_test("v8_serialized_script_value_fuzzer") {
  sources = [ "serialization/serialized_script_value_fuzzer.cc" ]
  seed_corpus = "serialization/fuzz_corpus"
  deps = [
    "//third_party/blink/public/common",
    "//third_party/blink/renderer/core",
    "//third_party/blink/renderer/platform:blink_fuzzer_test_support",
  ]
}
