/*
 * Copyright (C) 2013 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// Test for interface extended attributes and special operations.
// Also used as a target by TestObject

typedef [StringContext=TrustedHTML] DOMString TrustedHTMLString;
typedef [StringContext=TrustedScript] DOMString TrustedScriptString;
typedef [StringContext=TrustedScriptURL] USVString TrustedScriptURLString;

[
    ActiveScriptWrappable,
    Custom=LegacyCallAsFunction,
    DoNotCheckConstants,
    ImplementedAs=TestInterfaceImplementation,
    RuntimeEnabled=RuntimeFeature,
    ContextEnabled=RuntimeFeature,
    Exposed=(Worker,Window)
] interface TestInterface : TestInterfaceEmpty {
    // members needed to test [ImplementedAs], as this affect attribute
    // configuration and method configuration
    const unsigned long UNSIGNED_LONG = 0;
    [Reflect=CONST_CPP] const short CONST_JAVASCRIPT = 1;

    [Measure] attribute TestInterface testInterfaceAttribute; // Self-referential interface type with [ImplementedAs]
    attribute TestInterfaceConstructor testInterfaceConstructorAttribute;
    attribute TestInterfaceConstructor TestInterface;
    attribute TestInterface2Constructor TestInterface2;
    attribute double doubleAttribute;
    attribute float floatAttribute;
    attribute unrestricted double unrestrictedDoubleAttribute;
    attribute unrestricted float unrestrictedFloatAttribute;
    attribute TestEnum testEnumAttribute;
    attribute TestEnum? testEnumOrNullAttribute;
    attribute DOMStringOrDouble stringOrDoubleAttribute;
    attribute [EnforceRange] long withExtendedAttributeStringAttribute;
    [ImplementedAs=CapitalImplementation] attribute Implementation uncapitalAttribute;
    [RuntimeEnabled=RuntimeFeature] attribute long conditionalLongAttribute;
    [RuntimeEnabled=RuntimeFeature] readonly attribute long conditionalReadOnlyLongAttribute;
    static attribute DOMString staticStringAttribute;
    static attribute TestInterface staticReturnDOMWrapperAttribute;
    static readonly attribute DOMString staticReadOnlyStringAttribute;
    static readonly attribute TestInterface staticReadOnlyReturnDOMWrapperAttribute;
    [RuntimeEnabled=RuntimeFeature] static readonly attribute long staticConditionalReadOnlyLongAttribute;

    attribute [TreatNullAs=EmptyString] DOMString stringNullAsEmptyAttribute;
    attribute USVString? usvStringOrNullAttribute;

    void voidMethodTestInterfaceEmptyArg(TestInterfaceEmpty testInterfaceEmptyArg);
    void voidMethodDoubleArgFloatArg(double doubleArg, float floatArg);
    void voidMethodNullableAndOptionalObjectArgs(object objectArg, object? nullableObjectArg, optional object optionalObjectArg);
    void voidMethodUnrestrictedDoubleArgUnrestrictedFloatArg(unrestricted double unrestrictedDoubleArg, unrestricted float unrestrictedFloatArg);
    void voidMethodTestEnumArg(TestEnum testEnumArg);
    void voidOptionalDictArgWithEmptyDefault(optional TestDictionary testDict={});
    void voidOptionalUnionArgWithEmptyDefault(optional (DOMString or TestDictionary) arg={});
    [PerWorldBindings] void voidMethod();

    // Anonymous indexed property operations
    [CrossOrigin] getter DOMString (unsigned long index);
    setter DOMString (unsigned long index, DOMString value);
    deleter boolean (unsigned long index);

    // Anonymous named property operations
    [CrossOrigin] getter DOMString (DOMString name);
    setter DOMString (DOMString name, DOMString value);
    deleter boolean (DOMString name);

    // Per-method [Exposed] annotation support.
    void alwaysExposedMethod();
    [Exposed=Worker] void workerExposedMethod();
    [Exposed=Window] void windowExposedMethod();
    [Exposed=Window,RuntimeEnabled=TestFeature] void originTrialWindowExposedMethod();

    static void alwaysExposedStaticMethod();
    [Exposed=Worker] static void workerExposedStaticMethod();
    [Exposed=Window] static void windowExposedStaticMethod();
    static TestInterface staticReturnDOMWrapperMethod();

    attribute long alwaysExposedAttribute;
    [Exposed=Worker] attribute long workerExposedAttribute;
    [Exposed=Window] attribute long windowExposedAttribute;

    [Exposed=Window, RuntimeEnabled=RuntimeFeature] void methodWithExposedAndRuntimeEnabledFlag();
    [Exposed=Window] void overloadMethodWithExposedAndRuntimeEnabledFlag(long longArg);
    [Exposed=Window, RuntimeEnabled=RuntimeFeature] void overloadMethodWithExposedAndRuntimeEnabledFlag(DOMString string);
    [Exposed=Window, RuntimeEnabled=RuntimeFeature2] void overloadMethodWithExposedAndRuntimeEnabledFlag(Window window);

    [Exposed(Window FeatureName, Worker FeatureName2)] void methodWithExposedHavingRuntimeEnabldFlag();

    [Exposed=(Window,ServiceWorker)] void windowAndServiceWorkerExposedMethod();

    void voidMethodPartialOverload();
    void voidMethodPartialOverload(double doubleArg);
    static void staticVoidMethodPartialOverload();

    Promise<any> promiseMethodPartialOverload();
    Promise<any> promiseMethodPartialOverload(Window window);
    static Promise<any> staticPromiseMethodPartialOverload();

    void overloadMethodWithUnionTypeWithStringMember((double or DOMString) unionArg);
    void overloadMethodWithUnionTypeWithStringMember(boolean boolArg);

    iterable<ByteString, long>;

    [LenientThis] attribute any lenientThisAttribute;

    [Affects=Nothing] void sideEffectFreeMethod();
    [Affects=Nothing] attribute boolean attributeWithSideEffectFreeGetter;

    [SecureContext] void secureContextMethod();
    [SecureContext] attribute boolean secureContextAttribute;
    [SecureContext,RuntimeEnabled=SecureFeature] void secureContextRuntimeEnabledMethod();
    [SecureContext,RuntimeEnabled=SecureFeature] attribute boolean secureContextRuntimeEnabledAttribute;
    [SecureContext=SecureContextnessFeature] void secureContextnessRuntimeEnabledMethod();
    [SecureContext=SecureContextnessFeature] attribute boolean secureContextnessRuntimeEnabledAttribute;
    [SecureContext,Exposed=Window] void secureContextWindowExposedMethod();
    [SecureContext,Exposed=Window] attribute boolean secureContextWindowExposedAttribute;
    [SecureContext,Exposed=Worker] void secureContextWorkerExposedMethod();
    [SecureContext,Exposed=Worker] attribute boolean secureContextWorkerExposedAttribute;
    [SecureContext,Exposed=Window,RuntimeEnabled=SecureFeature] void secureContextWindowExposedRuntimeEnabledMethod();
    [SecureContext,Exposed=Window,RuntimeEnabled=SecureFeature] attribute boolean secureContextWindowExposedRuntimeEnabledAttribute;
    [SecureContext,Exposed=Worker,RuntimeEnabled=SecureFeature] void secureContextWorkerExposedRuntimeEnabledMethod();
    [SecureContext,Exposed=Worker,RuntimeEnabled=SecureFeature] attribute boolean secureContextWorkerExposedRuntimeEnabledAttribute;

    // Arguments that are sequences or records of nullable types.
    void methodWithNullableSequences(sequence<double?> numbers, sequence<DOMString?> strings, sequence<Element?> elements, sequence<(double or DOMString)?> unions);
    void methodWithNullableRecords(record<DOMString, double?> numbers, record<DOMString, DOMString?> strings, record<DOMString, Element?> elements, record<DOMString, (double or DOMString)?> unions);

    // Trusted Types
    [RaisesException=Setter] attribute TrustedScriptString scriptString;
    [CallWith=ScriptState, RaisesException] long setTimeoutForScript(TrustedScriptString handler);
    [RaisesException=Setter] attribute TrustedHTMLString htmlString;
    [CallWith=ScriptState, RaisesException] long setTimeoutForHTML(TrustedHTMLString handler);
    [RaisesException=Setter] attribute TrustedScriptURLString scriptURLString;
    [CallWith=ScriptState, RaisesException] long setTimeoutForScriptURL(TrustedScriptURLString handler);
    [RaisesException=Setter] attribute TrustedScriptString? optionalScriptString;
    [RaisesException=Setter] attribute [StringContext=TrustedHTML, TreatNullAs=EmptyString] DOMString treatNullAsEmptyStringHTMLString;
};

TestInterface includes TestInterfaceMixin;
TestInterface includes TestInterfaceMixin3;
