// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://immersive-web.github.io/webxr/#xrsession-interface

enum XRSessionMode {
  "inline",
  "immersive-vr",
  "immersive-ar",
};

enum XREnvironmentBlendMode {
  "opaque",
  "additive",
  "alpha-blend",
};

enum XRVisibilityState {
  "visible",
  "visible-blurred",
  "hidden",
};

[
    ActiveScriptWrappable,
    SecureContext,
    Exposed=Window,
    RuntimeEnabled=WebXR
] interface XRSession : EventTarget {
  [RuntimeEnabled=WebXRARModule] readonly attribute XREnvironmentBlendMode environmentBlendMode;
  readonly attribute XRVisibilityState visibilityState;
  [SameObject] readonly attribute XRRenderState renderState;
  [MeasureAs=XRSessionGetInputSources, SameObject] readonly attribute XRInputSourceArray inputSources;

  attribute EventHandler onend;
  attribute EventHandler onselect;
  attribute EventHandler oninputsourceschange;
  attribute EventHandler onselectstart;
  attribute EventHandler onselectend;
  attribute EventHandler onvisibilitychange;

  [RaisesException] void updateRenderState(optional XRRenderStateInit init);

  [CallWith=ScriptState, RaisesException] Promise<XRReferenceSpace> requestReferenceSpace(XRReferenceSpaceType type);

  long requestAnimationFrame(XRFrameRequestCallback callback);
  void cancelAnimationFrame(long handle);

  [RuntimeEnabled=WebXRHitTest, CallWith=ScriptState, RaisesException] Promise<FrozenArray<XRHitResult>> requestHitTest(XRRay ray, XRSpace space);

  // https://github.com/immersive-web/real-world-geometry/blob/master/plane-detection-explainer.md
  [RuntimeEnabled=WebXRPlaneDetection] readonly attribute XRWorldTrackingState worldTrackingState;
  [RuntimeEnabled=WebXRPlaneDetection, RaisesException] void updateWorldTrackingState(optional XRWorldTrackingStateInit state);

  [RuntimeEnabled=WebXRAnchors] readonly attribute XRAnchorSet trackedAnchors;
  [RuntimeEnabled=WebXRAnchors, CallWith=ScriptState, RaisesException] Promise<XRAnchor> createAnchor(XRRigidTransform initial_pose, XRSpace space);

  [CallWith=ScriptState, Measure, RaisesException] Promise<void> end();

  // https://github.com/immersive-web/hit-test/blob/master/hit-testing-explainer.md
  [RuntimeEnabled=WebXRHitTest, CallWith=ScriptState, RaisesException]
  Promise<XRHitTestSource> requestHitTestSource(XRHitTestOptionsInit options);
  [RuntimeEnabled=WebXRHitTest, CallWith=ScriptState, RaisesException]
  Promise<XRTransientInputHitTestSource> requestHitTestSourceForTransientInput(XRTransientInputHitTestOptionsInit options);
};
