// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

interface mixin WebGL2ComputeRenderingContextBase {
    // TODO(jiajia.qin@intel.com): add more enums and apis
    const GLenum COMPUTE_SHADER                         = 0x91B9;
    const GLenum DISPATCH_INDIRECT_BUFFER               = 0x90EE;
    const GLenum DISPATCH_INDIRECT_BUFFER_BINDING       = 0x90EF;
    const GLenum DRAW_INDIRECT_BUFFER                   = 0x8F3F;
    const GLenum DRAW_INDIRECT_BUFFER_BINDING           = 0x8F43;
    const GLenum UNIFORM                                = 0x92E1;
    const GLenum UNIFORM_BLOCK                          = 0x92E2;
    const GLenum PROGRAM_INPUT                          = 0x92E3;
    const GLenum PROGRAM_OUTPUT                         = 0x92E4;
    const GLenum BUFFER_VARIABLE                        = 0x92E5;
    const GLenum SHADER_STORAGE_BLOCK                   = 0x92E6;
    const GLenum TRANSFORM_FEEDBACK_VARYING             = 0x92F4;
    const GLenum ACTIVE_RESOURCES                       = 0x92F5;
    const GLenum MAX_NAME_LENGTH                        = 0x92F6;
    const GLenum MAX_NUM_ACTIVE_VARIABLES               = 0x92F7;
    const GLenum NAME_LENGTH                            = 0x92F9;
    const GLenum TYPE                                   = 0x92FA;
    const GLenum ARRAY_SIZE                             = 0x92FB;
    const GLenum OFFSET                                 = 0x92FC;
    const GLenum BLOCK_INDEX                            = 0x92FD;
    const GLenum ARRAY_STRIDE                           = 0x92FE;
    const GLenum MATRIX_STRIDE                          = 0x92FF;
    const GLenum IS_ROW_MAJOR                           = 0x9300;
    const GLenum BUFFER_BINDING                         = 0x9302;
    const GLenum BUFFER_DATA_SIZE                       = 0x9303;
    const GLenum NUM_ACTIVE_VARIABLES                   = 0x9304;
    const GLenum ACTIVE_VARIABLES                       = 0x9305;
    const GLenum REFERENCED_BY_VERTEX_SHADER            = 0x9306;
    const GLenum REFERENCED_BY_FRAGMENT_SHADER          = 0x930A;
    const GLenum REFERENCED_BY_COMPUTE_SHADER           = 0x930B;
    const GLenum TOP_LEVEL_ARRAY_SIZE                   = 0x930C;
    const GLenum TOP_LEVEL_ARRAY_STRIDE                 = 0x930D;
    const GLenum LOCATION                               = 0x930E;
    const GLenum VERTEX_ATTRIB_ARRAY_BARRIER_BIT        = 0x00000001;
    const GLenum ELEMENT_ARRAY_BARRIER_BIT              = 0x00000002;
    const GLenum UNIFORM_BARRIER_BIT                    = 0x00000004;
    const GLenum TEXTURE_FETCH_BARRIER_BIT              = 0x00000008;
    const GLenum SHADER_IMAGE_ACCESS_BARRIER_BIT        = 0x00000020;
    const GLenum COMMAND_BARRIER_BIT                    = 0x00000040;
    const GLenum PIXEL_BUFFER_BARRIER_BIT               = 0x00000080;
    const GLenum TEXTURE_UPDATE_BARRIER_BIT             = 0x00000100;
    const GLenum BUFFER_UPDATE_BARRIER_BIT              = 0x00000200;
    const GLenum FRAMEBUFFER_BARRIER_BIT                = 0x00000400;
    const GLenum TRANSFORM_FEEDBACK_BARRIER_BIT         = 0x00000800;
    const GLenum ATOMIC_COUNTER_BARRIER_BIT             = 0x00001000;
    const GLenum SHADER_STORAGE_BARRIER_BIT             = 0x00002000;
    const GLenum ALL_BARRIER_BITS                       = 0xFFFFFFFF;
    const GLenum READ_ONLY                              = 0x88B8;
    const GLenum WRITE_ONLY                             = 0x88B9;
    const GLenum READ_WRITE                             = 0x88BA;
    const GLenum SHADER_STORAGE_BUFFER                  = 0x90D2;
    const GLenum SHADER_STORAGE_BUFFER_BINDING          = 0x90D3;
    const GLenum SHADER_STORAGE_BUFFER_START            = 0x90D4;
    const GLenum SHADER_STORAGE_BUFFER_SIZE             = 0x90D5;
    const GLenum MAX_VERTEX_SHADER_STORAGE_BLOCKS       = 0x90D6;
    const GLenum MAX_FRAGMENT_SHADER_STORAGE_BLOCKS     = 0x90DA;
    const GLenum MAX_COMPUTE_SHADER_STORAGE_BLOCKS      = 0x90DB;
    const GLenum MAX_COMBINED_SHADER_STORAGE_BLOCKS     = 0x90DC;
    const GLenum MAX_SHADER_STORAGE_BUFFER_BINDINGS     = 0x90DD;
    const GLenum MAX_SHADER_STORAGE_BLOCK_SIZE          = 0x90DE;
    const GLenum SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
    const GLenum MAX_COMPUTE_SHARED_MEMORY_SIZE         = 0x8262;
    const GLenum MAX_COMPUTE_UNIFORM_COMPONENTS         = 0x8263;
    const GLenum MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS     = 0x8264;
    const GLenum MAX_COMPUTE_ATOMIC_COUNTERS            = 0x8265;
    const GLenum MAX_COMPUTE_WORK_GROUP_INVOCATIONS     = 0x90EB;
    const GLenum MAX_COMPUTE_UNIFORM_BLOCKS             = 0x91BB;
    const GLenum MAX_COMPUTE_TEXTURE_IMAGE_UNITS        = 0x91BC;
    const GLenum MAX_COMPUTE_IMAGE_UNIFORMS             = 0x91BD;
    const GLenum MAX_COMPUTE_WORK_GROUP_COUNT           = 0x91BE;
    const GLenum MAX_COMPUTE_WORK_GROUP_SIZE            = 0x91BF;
    const GLenum ATOMIC_COUNTER_BUFFER_INDEX            = 0x9301;
    const GLenum ATOMIC_COUNTER_BUFFER                  = 0x92C0;
    const GLenum ATOMIC_COUNTER_BUFFER_BINDING          = 0x92C1;
    const GLenum ATOMIC_COUNTER_BUFFER_START            = 0x92C2;
    const GLenum ATOMIC_COUNTER_BUFFER_SIZE             = 0x92C3;
    const GLenum MAX_VERTEX_ATOMIC_COUNTER_BUFFERS      = 0x92CC;
    const GLenum MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS    = 0x92D0;
    const GLenum MAX_COMBINED_ATOMIC_COUNTER_BUFFERS    = 0x92D1;
    const GLenum MAX_VERTEX_ATOMIC_COUNTERS             = 0x92D2;
    const GLenum MAX_FRAGMENT_ATOMIC_COUNTERS           = 0x92D6;
    const GLenum MAX_COMBINED_ATOMIC_COUNTERS           = 0x92D7;
    const GLenum MAX_ATOMIC_COUNTER_BUFFER_SIZE         = 0x92D8;
    const GLenum MAX_ATOMIC_COUNTER_BUFFER_BINDINGS     = 0x92DC;
    const GLenum ACTIVE_ATOMIC_COUNTER_BUFFERS          = 0x92D9;
    const GLenum UNSIGNED_INT_ATOMIC_COUNTER            = 0x92DB;

    void dispatchCompute(GLuint numGroupsX, GLuint numGroupsY, GLuint numGroupsZ);
    void dispatchComputeIndirect(GLintptr offset);

    /* Draw indirect */
    void drawArraysIndirect(GLenum mode, GLintptr offset);
    void drawElementsIndirect(GLenum mode, GLenum type, GLintptr offset);

    /* Program interface query */
    [CallWith=ScriptState] any getProgramInterfaceParameter(WebGLProgram program, GLenum programInterface, GLenum pname);
    GLuint getProgramResourceIndex(WebGLProgram program, GLenum programInterface, DOMString name);
    DOMString? getProgramResourceName(WebGLProgram program, GLenum programInterface, GLuint index);
    [CallWith=ScriptState] sequence<any>? getProgramResource(WebGLProgram program, GLenum programInterface, GLuint index, sequence<GLenum> props);
    [CallWith=ScriptState] any getProgramResourceLocation(WebGLProgram program, GLenum programInterface, DOMString name);

    void bindImageTexture(GLuint unit, WebGLTexture ? texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
    void memoryBarrier(GLbitfield barriers);
    void memoryBarrierByRegion(GLbitfield barriers);
};
WebGL2ComputeRenderingContextBase includes WebGLRenderingContextBase;
WebGL2ComputeRenderingContextBase includes WebGL2RenderingContextBase;
