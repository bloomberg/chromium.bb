{% from 'templates/macros.tmpl' import license %}
{{license()}}

#ifndef THIRD_PARTY_BLINK_RENDERER_CORE_CSS_CSS_PROPERTY_NAMES_H_
#define THIRD_PARTY_BLINK_RENDERER_CORE_CSS_CSS_PROPERTY_NAMES_H_

#include <stddef.h>
#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/platform/wtf/assertions.h"

namespace WTF {
class AtomicString;
class String;
}

namespace blink {

enum CSSPropertyID {
    CSSPropertyInvalid = 0,
    CSSPropertyVariable = 1,
{{property_enums}}
};

const CSSPropertyID kCSSPropertyAliasList[] = {
{{property_aliases}}
};

const CSSPropertyID firstCSSProperty = static_cast<CSSPropertyID>({{first_property_id}});
const int numCSSProperties = {{properties_count}};
const CSSPropertyID lastCSSProperty = static_cast<CSSPropertyID>({{last_property_id}});
const CSSPropertyID lastUnresolvedCSSProperty = static_cast<CSSPropertyID>({{last_unresolved_property_id}});
const int numCSSPropertyIDs = lastUnresolvedCSSProperty + 1;
const size_t maxCSSPropertyNameLength = {{max_name_length}};

inline bool isCSSPropertyIDWithName(int id)
{
    return id >= firstCSSProperty && id <= lastUnresolvedCSSProperty;
}

inline bool isValidCSSPropertyID(CSSPropertyID id)
{
    return id != CSSPropertyInvalid;
}

inline CSSPropertyID convertToCSSPropertyID(int value)
{
    DCHECK_GE(value, CSSPropertyInvalid);
    DCHECK_LE(value, lastCSSProperty);
    return static_cast<CSSPropertyID>(value);
}

inline CSSPropertyID resolveCSSPropertyID(CSSPropertyID id)
{
    return convertToCSSPropertyID(id & ~{{alias_offset}});
}

inline bool isPropertyAlias(CSSPropertyID id) { return id & {{alias_offset}}; }

CSSPropertyID unresolvedCSSPropertyID(const WTF::String&);

CSSPropertyID CORE_EXPORT cssPropertyID(const WTF::String&);

}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_CORE_CSS_CSS_PROPERTY_NAMES_H_
