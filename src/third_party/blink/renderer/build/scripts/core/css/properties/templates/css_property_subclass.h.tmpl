// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

{% from 'templates/macros.tmpl' import source_files_for_generated_file %}
{% from 'core/css/properties/templates/style_builder_functions.tmpl' import style_builder_functions %}
{{source_files_for_generated_file(template_file, input_files)}}

#ifndef THIRD_PARTY_BLINK_RENDERER_CORE_CSS_PROPERTIES_{{property.namespace_group.upper()}}_{{property_filename|upper}}_H_
#define THIRD_PARTY_BLINK_RENDERER_CORE_CSS_PROPERTIES_{{property.namespace_group.upper()}}_{{property_filename|upper}}_H_

{% for include in includes %}
#include "{{include}}"
{% endfor %}

namespace blink {
namespace css_{{property.namespace_group.lower()}} {

{% if property.is_property %}
// Implements the '{{property.name}}' CSS property
{% else %}
// Implements the '{{property.name}}' CSS descriptor
{% endif %}
// See src/third_party/blink/renderer/core/css/properties/README.md
  {% if property.alias_for != None%}
class {{property_classname}} final : public CSSUnresolvedProperty {
 public:
  constexpr {{property_classname}}() : CSSUnresolvedProperty() {}
  {% else %}
class {{property_classname}} final : public {{property.namespace_group}} {
 public:
  constexpr {{property_classname}}() : {{property.namespace_group}}(CSSPropertyID::{{property.enum_key}},
    0
  {% if property.interpolable %}
    | kInterpolable
  {% endif %}
  {% if property.compositable %}
    | kCompositableProperty
  {% endif %}
  {% if property.is_descriptor %}
    | kDescriptor
  {% endif %}
  {% if 'Percent' in property.typedom_types %}
    | kSupportsPercentage
  {% endif %}
  {% if property.is_property %}
    | kProperty
  {% endif %}
  {% if property.valid_for_visited_link %}
    | kValidForVisitedLink
  {% endif %}
  {% if property.inherited %}
    | kInherited
  {% endif %}
    ,
  {% if property.separator != None %}
    '{{property.separator}}'
  {% else %}
    '\0'
  {% endif %}
    ) {}
  {% endif %}

  {% if property.is_internal %}
  bool IsEnabled() const override { return false; }
  {% elif property.runtime_flag %}
  bool IsEnabled() const override {
    return RuntimeEnabledFeatures::{{property.runtime_flag}}Enabled();
  }
  {% endif %}
  const char* GetPropertyName() const override { return "{{property.name}}"; }
  const WTF::AtomicString& GetPropertyNameAtomicString() const override {
    DEFINE_STATIC_LOCAL(const AtomicString, name, ("{{property.name}}"));
    return name;
  }
  const char* GetJSPropertyName() const override {
    return "{{property_classname[0].lower() + property_classname[1:]}}";
  }
  {% if property.alias_for == None %}
  {%if property.layout_dependent %}
  bool IsLayoutDependentProperty() const override { return true; }
  bool IsLayoutDependent(const ComputedStyle*, LayoutObject*) const override;
  {% endif %}
  {% for property_method in property.property_methods %}
  {{property_method.return_type}} {{property_method.name}}{{property_method.parameters}} const override;
  {% endfor %}
  {% if property.separator != None %}
  {% endif %}
  {% if not property.affected_by_all %}
  bool IsAffectedByAll() const override { return false; }
  {% endif %}
  {% if property.direction_aware_options %}
  const CSSValue* CSSValueFromComputedStyleInternal(
      const ComputedStyle& ,
      const SVGComputedStyle&,
      const LayoutObject*,
      Node*,
      bool allow_visited_style) const override {
    // Directional properties are resolved by CSSDirectionAwareResolver
    // before calling CSSValueFromComputedStyleInternal.
    NOTREACHED();
    return nullptr;
  }
    {% set options = property.direction_aware_options %}
    {% set resolver_name = options.resolver_name.to_upper_camel_case() %}
    {% set physical_group_name = options.physical_group_name.to_upper_camel_case() %}
  const CSSProperty& ResolveDirectionAwareProperty(
      TextDirection direction,
      blink::WritingMode writing_mode) const override {
    return CSSDirectionAwareResolver::Resolve{{resolver_name}}(direction, writing_mode,
        CSSDirectionAwareResolver::{{physical_group_name}}Group());
  }
  {% endif %}
  {% if property.style_builder_declare %}

  // Style builder functions
{{style_builder_functions(property, true)}}
  {%- endif %}
  {% endif %}
};

}  // namespace css_{{property.namespace_group.lower()}}
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_CORE_CSS_PROPERTIES_{{property.namespace_group.upper()}}_{{property_filename|upper}}_H_
