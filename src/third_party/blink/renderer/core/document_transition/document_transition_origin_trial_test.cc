// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <vector>
#include "base/bind.h"
#include "base/stl_util.h"
#include "base/test/scoped_feature_list.h"
#include "testing/gtest/include/gtest/gtest.h"
#include "third_party/blink/public/common/features.h"
#include "third_party/blink/public/common/origin_trials/origin_trial_policy.h"
#include "third_party/blink/public/common/origin_trials/trial_token_validator.h"
#include "third_party/blink/renderer/bindings/core/v8/script_source_code.h"
#include "third_party/blink/renderer/core/document_transition/document_transition_supplement.h"
#include "third_party/blink/renderer/core/frame/local_dom_window.h"
#include "third_party/blink/renderer/core/frame/local_frame.h"
#include "third_party/blink/renderer/core/frame/settings.h"
#include "third_party/blink/renderer/core/html/html_head_element.h"
#include "third_party/blink/renderer/core/html/html_meta_element.h"
#include "third_party/blink/renderer/core/html/html_script_element.h"
#include "third_party/blink/renderer/core/html_names.h"
#include "third_party/blink/renderer/core/script/classic_script.h"
#include "third_party/blink/renderer/core/testing/dummy_page_holder.h"
#include "third_party/blink/renderer/platform/wtf/functional.h"

namespace blink {
namespace {

constexpr char kOriginTrialPublicKey[] = {
    0x75, 0x10, 0xac, 0xf9, 0x3a, 0x1c, 0xb8, 0xa9, 0x28, 0x70, 0xd2,
    0x9a, 0xd0, 0x0b, 0x59, 0xe1, 0xac, 0x2b, 0xb7, 0xd5, 0xca, 0x1f,
    0x64, 0x90, 0x08, 0x8e, 0xa8, 0xe0, 0x56, 0x3a, 0x04, 0xd0,
};

// Generated by:
//  tools/origin_trials/generate_token.py --version 3 --expire-days 3650 \
//      https://documenttransition.test DocumentTransition
// Token details:
//   Version: 3
//   Origin: https://documenttransition.test:443
//   Is Subdomain: None
//   Is Third Party: None
//   Usage Restriction: None
//   Feature: DocumentTransition
//   Expiry: 1935769331 (2031-05-05 17:42:11 UTC)
//   Signature (Base64):
//   E22eLb6pyd0TWZLONxJOIxUa86AFkIFgijoM1ZKA2k9440xSvhBC5rzyhGjDUNWUQuaIE1yE4811ogD7ZNaFDA==

constexpr char kDocumentTransitionToken[] =
    "AxNtni2+qcndE1mSzjcSTiMVGvOgBZCBYIo6DNWSgNpPeONMUr4QQua88oRow1DVlE"
    "LmiBNchOPNdaIA+2TWhQwAAABoeyJvcmlnaW4iOiAiaHR0cHM6Ly9kb2N1bWVudHRy"
    "YW5zaXRpb24udGVzdDo0NDMiLCAiZmVhdHVyZSI6ICJEb2N1bWVudFRyYW5zaXRpb2"
    "4iLCAiZXhwaXJ5IjogMTkzNTc2OTMzMX0=";

class ScopedOriginTrialPolicy : public OriginTrialPolicy {
 public:
  ScopedOriginTrialPolicy() {
    TrialTokenValidator::SetOriginTrialPolicyGetter(WTF::BindRepeating(
        [](OriginTrialPolicy* self) { return self; }, base::Unretained(this)));
  }
  ~ScopedOriginTrialPolicy() override {
    TrialTokenValidator::ResetOriginTrialPolicyGetter();
  }
  bool IsOriginTrialsSupported() const override { return true; }
  std::vector<base::StringPiece> GetPublicKeys() const override {
    return {{kOriginTrialPublicKey, base::size(kOriginTrialPublicKey)}};
  }
  bool IsOriginSecure(const GURL& url) const override { return true; }
};

::testing::AssertionResult CheckTokenControlsFeature(const char* trial_token) {
  ScopedOriginTrialPolicy using_test_keys;

  DummyPageHolder page_holder;
  Document& document = page_holder.GetDocument();

  // Clear the security origin and set a secure one, recomputing the security
  // state.
  SecurityContext& security_context =
      page_holder.GetFrame().DomWindow()->GetSecurityContext();
  security_context.SetSecurityOriginForTesting(nullptr);
  security_context.SetSecurityOrigin(
      SecurityOrigin::CreateFromString("https://documenttransition.test"));
  EXPECT_EQ(security_context.GetSecureContextMode(),
            SecureContextMode::kSecureContext);

  // Enable scripts so that <script> is not ignored.
  page_holder.GetFrame().GetSettings()->SetScriptEnabled(true);

  EXPECT_FALSE(RuntimeEnabledFeatures::DocumentTransitionEnabled(
      document.GetExecutionContext()));

  HTMLMetaElement* meta = MakeGarbageCollected<HTMLMetaElement>(document);
  meta->setAttribute(html_names::kHttpEquivAttr, "Origin-Trial");
  meta->setAttribute(html_names::kContentAttr, trial_token);
  document.head()->appendChild(meta);

  v8::HandleScope scope(v8::Isolate::GetCurrent());
  auto value = ClassicScript::CreateUnspecifiedScript(
                   ScriptSourceCode("!!document.documentTransition"))
                   ->RunScriptAndReturnValue(document.domWindow());

  NonThrowableExceptionState exceptionState;
  bool enabled = ToBoolean(scope.GetIsolate(), value, exceptionState);

  EXPECT_EQ(RuntimeEnabledFeatures::DocumentTransitionEnabled(
                document.GetExecutionContext()),
            enabled);

  return enabled
             ? ::testing::AssertionSuccess() << "feature enabled by token"
             : ::testing::AssertionFailure() << "feature not enabled by token";
}

TEST(DocumentTransitionOriginTrialTest, ValidTokenControlsFeature) {
  EXPECT_TRUE(CheckTokenControlsFeature(kDocumentTransitionToken));
}

TEST(DocumentTransitionOriginTrialTest, InvalidTokenIsIgnored) {
  EXPECT_FALSE(CheckTokenControlsFeature("invalid token"));
}

}  // namespace
}  // namespace blink
