// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <vector>
#include "base/bind.h"
#include "base/cxx17_backports.h"
#include "base/test/scoped_feature_list.h"
#include "testing/gtest/include/gtest/gtest.h"
#include "third_party/blink/public/common/features.h"
#include "third_party/blink/public/common/origin_trials/scoped_test_origin_trial_policy.h"
#include "third_party/blink/renderer/bindings/core/v8/script_evaluation_result.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_binding_for_core.h"
#include "third_party/blink/renderer/core/document_transition/document_transition_supplement.h"
#include "third_party/blink/renderer/core/frame/local_dom_window.h"
#include "third_party/blink/renderer/core/frame/local_frame.h"
#include "third_party/blink/renderer/core/frame/settings.h"
#include "third_party/blink/renderer/core/html/html_head_element.h"
#include "third_party/blink/renderer/core/html/html_meta_element.h"
#include "third_party/blink/renderer/core/html/html_script_element.h"
#include "third_party/blink/renderer/core/html_names.h"
#include "third_party/blink/renderer/core/script/classic_script.h"
#include "third_party/blink/renderer/core/testing/dummy_page_holder.h"
#include "third_party/blink/renderer/platform/wtf/functional.h"

namespace blink {
namespace {

// Generated by:
//  tools/origin_trials/generate_token.py --version 3 --expire-days 3650 \
//      https://documenttransition.test DocumentTransitionV2
// Token details:
// Version: 3
// Origin: https://documenttransition.test:443
// Is Subdomain: None
// Is Third Party: None
// Usage Restriction: None
// Feature: DocumentTransitionV2
// Expiry: 1970236337 (2032-06-07 15:52:17 UTC)
// Signature (Base64):
// hd9Rr7VpeHWzSLxUEoFYIyZ6jJNN9t70VD+V/59GwPRPdrYwP62+5EM2MwXMneqhiMbSU29uKVhofnx/l6veDQ==

constexpr char kDocumentTransitionToken[] =
    "A4XfUa+1aXh1s0i8VBKBWCMmeoyTTfbe9FQ/"
    "lf+fRsD0T3a2MD+"
    "tvuRDNjMFzJ3qoYjG0lNvbilYaH58f5er3g0AAABqeyJvcmlnaW4iOiAiaHR0cHM6Ly9kb2N1b"
    "WVudHRyYW5zaXRpb24udGVzdDo0NDMiLCAiZmVhdHVyZSI6ICJEb2N1bWVudFRyYW5zaXRpb25"
    "WMiIsICJleHBpcnkiOiAxOTcwMjM2MzM3fQ==";

::testing::AssertionResult CheckTokenControlsFeature(const char* trial_token) {
  blink::ScopedTestOriginTrialPolicy using_test_keys;

  DummyPageHolder page_holder;
  Document& document = page_holder.GetDocument();

  // Clear the security origin and set a secure one, recomputing the security
  // state.
  SecurityContext& security_context =
      page_holder.GetFrame().DomWindow()->GetSecurityContext();
  security_context.SetSecurityOriginForTesting(nullptr);
  security_context.SetSecurityOrigin(
      SecurityOrigin::CreateFromString("https://documenttransition.test"));
  EXPECT_EQ(security_context.GetSecureContextMode(),
            SecureContextMode::kSecureContext);

  // Enable scripts so that <script> is not ignored.
  page_holder.GetFrame().GetSettings()->SetScriptEnabled(true);

  EXPECT_FALSE(RuntimeEnabledFeatures::DocumentTransitionEnabled(
      document.GetExecutionContext()));

  HTMLMetaElement* meta =
      MakeGarbageCollected<HTMLMetaElement>(document, CreateElementFlags());
  meta->setAttribute(html_names::kHttpEquivAttr, "Origin-Trial");
  meta->setAttribute(html_names::kContentAttr, trial_token);
  document.head()->appendChild(meta);

  v8::HandleScope scope(v8::Isolate::GetCurrent());
  auto value = ClassicScript::CreateUnspecifiedScript(
                   "!!document.createDocumentTransition")
                   ->RunScriptAndReturnValue(document.domWindow());
  EXPECT_EQ(value.GetResultType(),
            ScriptEvaluationResult::ResultType::kSuccess);

  NonThrowableExceptionState exceptionState;
  bool enabled =
      ToBoolean(scope.GetIsolate(), value.GetSuccessValue(), exceptionState);

  EXPECT_EQ(RuntimeEnabledFeatures::DocumentTransitionEnabled(
                document.GetExecutionContext()),
            enabled);

  return enabled
             ? ::testing::AssertionSuccess() << "feature enabled by token"
             : ::testing::AssertionFailure() << "feature not enabled by token";
}

TEST(DocumentTransitionOriginTrialTest, ValidTokenControlsFeature) {
  EXPECT_TRUE(CheckTokenControlsFeature(kDocumentTransitionToken));
}

TEST(DocumentTransitionOriginTrialTest, InvalidTokenIsIgnored) {
  EXPECT_FALSE(CheckTokenControlsFeature("invalid token"));
}

}  // namespace
}  // namespace blink
