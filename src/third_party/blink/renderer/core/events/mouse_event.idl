/*
 * Copyright (C) 2006, 2007 Apple Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

// https://w3c.github.io/uievents/#interface-MouseEvent

[
    Constructor(DOMString type, optional MouseEventInit eventInitDict),
    ConstructorCallWith=ScriptState,
    Exposed=Window
] interface MouseEvent : UIEvent {
    readonly attribute double           screenX;
    readonly attribute double           screenY;
    readonly attribute double           clientX;
    readonly attribute double           clientY;
    readonly attribute boolean          ctrlKey;
    readonly attribute boolean          shiftKey;
    readonly attribute boolean          altKey;
    readonly attribute boolean          metaKey;
    readonly attribute short            button;
    readonly attribute unsigned short   buttons;
    readonly attribute EventTarget?     relatedTarget;
    boolean getModifierState(DOMString keyArg);

    // https://w3c.github.io/uievents/#idl-interface-MouseEvent-initializers
    // TODO(foolip): None of the initMouseEvent() arguments should be optional.
    [CallWith=ScriptState, Measure] void initMouseEvent([DefaultValue=Undefined] optional DOMString type,
                                                        [DefaultValue=Undefined] optional boolean bubbles,
                                                        [DefaultValue=Undefined] optional boolean cancelable,
                                                        [DefaultValue=Undefined] optional Window? view,
                                                        [DefaultValue=Undefined] optional long detail,
                                                        [DefaultValue=Undefined] optional long screenX,
                                                        [DefaultValue=Undefined] optional long screenY,
                                                        [DefaultValue=Undefined] optional long clientX,
                                                        [DefaultValue=Undefined] optional long clientY,
                                                        [DefaultValue=Undefined] optional boolean ctrlKey,
                                                        [DefaultValue=Undefined] optional boolean altKey,
                                                        [DefaultValue=Undefined] optional boolean shiftKey,
                                                        [DefaultValue=Undefined] optional boolean metaKey,
                                                        [DefaultValue=Undefined] optional unsigned short button,
                                                        [DefaultValue=Undefined] optional EventTarget? relatedTarget);

    readonly attribute double pageX;
    readonly attribute double pageY;
    [MeasureAs=MouseEventX] readonly attribute double x;
    [MeasureAs=MouseEventY] readonly attribute double y;
    [MeasureAs=MouseEventOffsetX] readonly attribute double offsetX;
    [MeasureAs=MouseEventOffsetY] readonly attribute double offsetY;

    // Pointer Lock
    // https://w3c.github.io/pointerlock/#extensions-to-the-mouseevent-interface
    [MeasureAs=MouseEventMovementX] readonly attribute long movementX;
    [MeasureAs=MouseEventMovementY] readonly attribute long movementY;

    // Canvas Hit Regions
    // https://html.spec.whatwg.org/C/#MouseEvent-partial
    [RuntimeEnabled=CanvasHitRegion] readonly attribute DOMString? region;

    // Non-standard
    [MeasureAs=MouseEventFromElement] readonly attribute Node fromElement;
    [MeasureAs=MouseEventToElement] readonly attribute Node toElement;
    [Measure] readonly attribute long layerX;
    [Measure] readonly attribute long layerY;
};
