// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/common/client_hints/enabled_client_hints.h"

#include "base/memory/scoped_refptr.h"
#include "base/test/scoped_feature_list.h"
#include "net/http/http_response_headers.h"
#include "testing/gmock/include/gmock/gmock.h"
#include "testing/gtest/include/gtest/gtest.h"
#include "third_party/blink/public/common/features.h"
#include "third_party/blink/public/common/origin_trials/origin_trial_policy.h"
#include "third_party/blink/public/common/origin_trials/origin_trial_public_key.h"
#include "third_party/blink/public/common/origin_trials/trial_token_validator.h"

namespace blink {

using ::network::mojom::WebClientHintsType;
using ::testing::ElementsAre;

static constexpr char kOriginUrl[] = "https://127.0.0.1:44444";
static const OriginTrialPublicKey kTestPublicKey = {
    0x75, 0x10, 0xac, 0xf9, 0x3a, 0x1c, 0xb8, 0xa9, 0x28, 0x70, 0xd2,
    0x9a, 0xd0, 0x0b, 0x59, 0xe1, 0xac, 0x2b, 0xb7, 0xd5, 0xca, 0x1f,
    0x64, 0x90, 0x08, 0x8e, 0xa8, 0xe0, 0x56, 0x3a, 0x04, 0xd0,
};
// Generated by running (in tools/origin_trials):
// generate_token.py https://127.0.0.1:44444 UserAgentReduction
// --expire-timestamp=2000000000
//
// The Origin Trial token expires in 2033.  Generate a new token by then, or
// find a better way to re-generate a test trial token.
static constexpr char kValidOriginTrialToken[] =
    "A93QtcQ0CRKf5ioPasUwNbweXQWgbI4ZEshiz+"
    "YS7dkQEWVfW9Ua2pTnA866sZwRzuElkPwsUdGdIaW0fRUP8AwAAABceyJvcmlnaW4iOiAiaHR0"
    "cHM6Ly8xMjcuMC4wLjE6NDQ0NDQiLCAiZmVhdHVyZSI6ICJVc2VyQWdlbnRSZWR1Y3Rpb24iLC"
    "AiZXhwaXJ5IjogMjAwMDAwMDAwMH0=";
// A slight corruption (changing a character) of kValidOriginTrialToken.
static constexpr char kInvalidOriginTrialToken[] =
    "A93QtcQ0CRKf5ioPasUwNbweXQWgbI4ZEshiz+"
    "YS7dkQEWVfW9Ua2pTnA866sZwRzuElkPwsUdGdIaW0fRUP8AwAAABceyJvcmlnaW4iOiAiaHR0"
    "cHM6Ly8xMjcuMC4wLjE6NDQ0NDQiLCAiZmVhdHVyzSI6ICJVc2VyQWdlbnRSZWR1Y3Rpb24iLC"
    "AiZXhwaXJ5IjogMjAwMDAwMDAwMH0=";

class EnabledClientHintsTest : public testing::Test {
 public:
  EnabledClientHintsTest()
      : response_headers_(base::MakeRefCounted<net::HttpResponseHeaders>("")) {
    // The UserAgentClientHint feature is enabled, and the LangClientHintHeader
    // feature is disabled.
    scoped_feature_list_.InitWithFeatures(
        /*enabled_features=*/{blink::features::kUserAgentClientHint},
        /*disabled_features=*/{blink::features::kLangClientHintHeader});
    TrialTokenValidator::SetOriginTrialPolicyGetter(
        base::BindRepeating([](OriginTrialPolicy* policy) { return policy; },
                            base::Unretained(&policy_)));
    policy_.SetPublicKeys({kTestPublicKey});
  }

  ~EnabledClientHintsTest() override {
    TrialTokenValidator::ResetOriginTrialPolicyGetter();
  }

  const net::HttpResponseHeaders* response_headers() const {
    return response_headers_.get();
  }

  void AddHeader(const std::string& header, const std::string& value) {
    response_headers_->AddHeader(header, value);
  }

 private:
  class TestOriginTrialPolicy : public OriginTrialPolicy {
   public:
    bool IsOriginTrialsSupported() const override { return true; }
    bool IsOriginSecure(const GURL& url) const override {
      return url.SchemeIs("https");
    }
    const std::vector<OriginTrialPublicKey>& GetPublicKeys() const override {
      return keys_;
    }
    void SetPublicKeys(const std::vector<OriginTrialPublicKey>& keys) {
      keys_ = keys;
    }

   private:
    std::vector<OriginTrialPublicKey> keys_;
  };

  base::test::ScopedFeatureList scoped_feature_list_;
  TestOriginTrialPolicy policy_;
  scoped_refptr<net::HttpResponseHeaders> response_headers_;
};

TEST_F(EnabledClientHintsTest, EnabledClientHint) {
  EnabledClientHints hints;
  hints.SetIsEnabled(WebClientHintsType::kUAFullVersion, true);
  hints.SetIsEnabled(WebClientHintsType::kRtt_DEPRECATED, true);
  EXPECT_TRUE(hints.IsEnabled(WebClientHintsType::kUAFullVersion));
  EXPECT_TRUE(hints.IsEnabled(WebClientHintsType::kRtt_DEPRECATED));
}

TEST_F(EnabledClientHintsTest, DisabledClientHint) {
  EnabledClientHints hints;
  hints.SetIsEnabled(WebClientHintsType::kUAFullVersion, false);
  hints.SetIsEnabled(WebClientHintsType::kRtt_DEPRECATED, false);
  EXPECT_FALSE(hints.IsEnabled(WebClientHintsType::kUAFullVersion));
  EXPECT_FALSE(hints.IsEnabled(WebClientHintsType::kRtt_DEPRECATED));
}

TEST_F(EnabledClientHintsTest, EnabledClientHintOnDisabledFeature) {
  EnabledClientHints hints;
  // Attempting to enable the lang client hint, but the runtime flag for it is
  // disabled.
  hints.SetIsEnabled(WebClientHintsType::kLang, true);
  EXPECT_FALSE(hints.IsEnabled(WebClientHintsType::kLang));
}

TEST_F(EnabledClientHintsTest,
       EnabledUaReducedClientHintWithValidOriginTrialToken) {
  AddHeader("Origin-Trial", kValidOriginTrialToken);
  EnabledClientHints hints;
  hints.SetIsEnabled(GURL(kOriginUrl), response_headers(),
                     WebClientHintsType::kUAReduced, true);
  EXPECT_TRUE(hints.IsEnabled(WebClientHintsType::kUAReduced));
}

TEST_F(EnabledClientHintsTest,
       EnabledUaReducedClientHintWithInvalidOriginTrialToken) {
  AddHeader("Origin-Trial", kInvalidOriginTrialToken);
  EnabledClientHints hints;
  hints.SetIsEnabled(GURL(kOriginUrl), response_headers(),
                     WebClientHintsType::kUAReduced, true);
  EXPECT_FALSE(hints.IsEnabled(WebClientHintsType::kUAReduced));
}

TEST_F(EnabledClientHintsTest, GetEnabledHints) {
  EnabledClientHints hints;
  hints.SetIsEnabled(WebClientHintsType::kUAFullVersion, true);
  hints.SetIsEnabled(WebClientHintsType::kRtt_DEPRECATED, true);
  EXPECT_THAT(hints.GetEnabledHints(),
              ElementsAre(WebClientHintsType::kRtt_DEPRECATED,
                          WebClientHintsType::kUAFullVersion));
}

}  // namespace blink
