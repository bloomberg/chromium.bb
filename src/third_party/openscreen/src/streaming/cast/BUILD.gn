# Copyright 2019 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build_overrides/build.gni")

source_set("common") {
  sources = [
    "clock_drift_smoother.cc",
    "clock_drift_smoother.h",
    "constants.h",
    "encoded_frame.cc",
    "encoded_frame.h",
    "expanded_value_base.h",
    "frame_crypto.cc",
    "frame_crypto.h",
    "frame_id.cc",
    "frame_id.h",
    "ntp_time.cc",
    "ntp_time.h",
    "packet_util.cc",
    "packet_util.h",
    "rtcp_common.cc",
    "rtcp_common.h",
    "rtcp_session.cc",
    "rtcp_session.h",
    "rtp_defines.cc",
    "rtp_defines.h",
    "rtp_time.cc",
    "rtp_time.h",
    "ssrc.cc",
    "ssrc.h",
  ]

  public_deps = [
    "../../third_party/abseil",
    "../../third_party/boringssl",
  ]

  deps = [
    "../../platform",
  ]
}

source_set("receiver") {
  sources = [
    "rtp_packet_parser.cc",
    "rtp_packet_parser.h",
    "sender_report_parser.cc",
    "sender_report_parser.h",
  ]

  public_deps = [
    ":common",
  ]
}

source_set("sender") {
  sources = [
    "rtp_packetizer.cc",
    "rtp_packetizer.h",
    "sender_report_builder.cc",
    "sender_report_builder.h",
  ]

  public_deps = [
    ":common",
  ]
}

source_set("cast_unittests") {
  testonly = true

  sources = [
    "expanded_value_base_unittest.cc",
    "frame_crypto_unittest.cc",
    "ntp_time_unittest.cc",
    "packet_util_unittest.cc",
    "rtcp_common_unittest.cc",
    "rtp_packet_parser_unittest.cc",
    "rtp_packetizer_unittest.cc",
    "rtp_time_unittest.cc",
    "sender_report_unittest.cc",
    "ssrc_unittest.cc",
  ]

  deps = [
    ":receiver",
    ":sender",
    "../../third_party/googletest:gtest",
  ]
}

if (build_with_chromium) {
  import("//testing/libfuzzer/fuzzer_test.gni")

  fuzzer_test("rtp_packet_parser_fuzzer") {
    sources = [
      "rtp_packet_parser_fuzzer.cc",
    ]

    deps = [
      ":receiver",
      "../../third_party/abseil",
    ]

    seed_corpus = "rtp_packet_parser_fuzzer_seeds"

    # Note: 1500 is approx. kMaxRtpPacketSize in rtp_defines.h.
    libfuzzer_options = [ "max_len=1500" ]
  }

  fuzzer_test("sender_report_parser_fuzzer") {
    sources = [
      "sender_report_parser_fuzzer.cc",
    ]

    deps = [
      ":receiver",
      "../../third_party/abseil",
    ]

    seed_corpus = "sender_report_parser_fuzzer_seeds"

    # Note: 1500 is approx. kMaxRtpPacketSize in rtp_defines.h.
    libfuzzer_options = [ "max_len=1500" ]
  }
} else {
  # Note: The following is commented out because, as of this writing, the LLVM
  # toolchain we pull does not include libclang_rt.fuzzer-x86_64.a, the
  # libFuzzer library *with* a main() to drive everything. Thus, the only way to
  # get things working is to specify an exact path to the fuzzer_no_main variant
  # of the library that *is* avalable, and then provide our own main(). In
  # summary, what you see below demonstrates how to get it working specifically
  # for Clang 9.0.0 on Linux x86_64. One need only modify the "libs = [...]" for
  # a different Clang, OS, or architecture.
  # if (is_clang) {
  #   executable("rtp_packet_parser_fuzzer") {
  #     testonly = true
  #     defines = [ "NEEDS_MAIN_TO_CALL_FUZZER_DRIVER" ]
  #     sources = [
  #       "rtp_packet_parser_fuzzer.cc",
  #     ]
  #     cflags_cc = [ "-fsanitize=address,fuzzer-no-link,undefined" ]
  #     ldflags = [ "-fsanitize=address,undefined" ]
  #     libs = [ "$clang_base_path/lib/clang/9.0.0/lib/linux/libclang_rt.fuzzer_no_main-x86_64.a" ]
  #     deps = [
  #       ":receiver",
  #       "../../third_party/abseil",
  #     ]
  #   }
  # }
}
