# Simple replacement with context
table: |
  include tables/unicode.dis
  include tables/latinLetterDef8Dots.uti
  punctuation - 36
  noback context "oo"["b"] @36-12
  nofor context @135-135[@36-12] "b"

flags: {testmode: bothDirections}
tests:
  # - |f|o|o|b|a|r|
  # - |⠋|⠕|⠕|⠤⠃|⠁|⠗|
  - - foobar
    - ⠋⠕⠕⠤⠃⠁⠗
    - outputPos: [0,1,2,3,5,6]
      inputPos: [0,1,2,3,3,4,5]

table: |
  include tables/unicode.dis
  include tables/latinLetterDef8Dots.uti
  include tables/loweredDigits6Dots.uti
  space \s 0
  punctuation . 46
  punctuation , 6
  punctuation - 36
  include tables/braille-patterns.cti
  noback correct "f,"[]"o" "-"
  nofor correct "f,"["-"]"o" ?
  noback correct "f,"["."]"o" ?
  nofor correct "f,"[]"o" "."
  word above 1-12-1236
  word below 23-123
  partword en 26
  noback context "o,"[]"o" @36
  nofor context @135-6[@36]@135 ?
  noback context "o,"["."]"o" ?
  nofor context @135-6[]@135 "."
  noback pass2 @135-6[]@12 @36
  nofor pass2 @135-6[@36]@12 ?
  noback pass2 @135-6[@46]@12 ?
  nofor pass2 @135-6[]@12 @46
  noback pass3 @12-6[]@1 @36
  nofor pass3 @12-6[@36]@1 ?
  noback pass3 @12-6[@46]@1 ?
  nofor pass3 @12-6[]@1 @46
  noback pass4 @1-6[]@1235 @36
  nofor pass4 @1-6[@36]@1235 ?
  noback pass4 @1-6[@46]@1235 ?
  nofor pass4 @1-6[]@1235 @46

# Simple test using regular pass 1 rules
flags: {testmode: bothDirections}
tests:
  # - |h|e| |w|en|t| |above|
  # - |⠓|⠑| |⠺|⠢|⠞| |⠁⠃⠧|
  - - he went above
    - ⠓⠑ ⠺⠢⠞ ⠁⠃⠧
    - inputPos: [0,1,2,3,4,6,7,8,8,8]
      outputPos: [0,1,2,3,4,4,5,6,7,7,7,7,7]

# Insertion with correct rule: prepend to next
flags: {testmode: bothDirections}
tests:
  # - |f|,|o|o|b|a|r|
  # - |⠋|⠠|⠤⠕|⠕|⠃|⠁|⠗|
  - - f,oobar
    - ⠋⠠⠤⠕⠕⠃⠁⠗
    - inputPos: [0,1,2,2,3,4,5,6]
      outputPos: [0,1,2,4,5,6,7]

# Deletion with correct rule: append to previous
flags: {testmode: bothDirections}
tests:
  # - |f|,.|o|o|b|a|r|
  # - |⠋|⠠|⠕|⠕|⠃|⠁|⠗|
  - - f,.oobar
    - ⠋⠠⠕⠕⠃⠁⠗
    - inputPos: [0,1,3,4,5,6,7]
      outputPos: [0,1,1,2,3,4,5,6]

# Insertion with context rule: prepend to next
flags: {testmode: bothDirections}
tests:
  # - |f|o|,|o|b|a|r|
  # - |⠋|⠕|⠠|⠤⠕|⠃|⠁|⠗|
  - - fo,obar
    - ⠋⠕⠠⠤⠕⠃⠁⠗
    - inputPos: [0,1,2,3,3,4,5,6]
      outputPos: [0,1,2,3,5,6,7]

# Deletion with context rule: append to previous
flags: {testmode: bothDirections}
tests:
  # - |f|o|,.|o|b|a|r|
  # - |⠋|⠕|⠠|⠕|⠃|⠁|⠗|
  - - fo,.obar
    - ⠋⠕⠠⠕⠃⠁⠗
    - inputPos: [0,1,2,4,5,6,7]
      outputPos: [0,1,2,2,3,4,5,6]

# Insertion with pass2 rule: prepend to next
flags: {testmode: bothDirections}
tests:
  # - |f|o|o|,|b|a|r|
  # - |⠋|⠕|⠕|⠠|⠤⠃|⠁|⠗|
  - - foo,bar
    - ⠋⠕⠕⠠⠤⠃⠁⠗
    - inputPos: [0,1,2,3,4,4,5,6]
      outputPos: [0,1,2,3,4,6,7]

# Deletion with pass2 rule: append to previous
flags: {testmode: bothDirections}
tests:
  # - |f|o|o|,.|b|a|r
  # - |⠋|⠕|⠕|⠠|⠃|⠁|⠗|
  - - foo,.bar
    - ⠋⠕⠕⠠⠃⠁⠗
    - inputPos: [0,1,2,3,5,6,7]
      outputPos: [0,1,2,3,3,4,5,6]

# Insertion with pass3 rule: prepend to next
flags: {testmode: bothDirections}
tests:
  # - |f|o|o|b|,|a|r|
  # - |⠋|⠕|⠕|⠃|⠠|⠤⠁|⠗|
  - - foob,ar
    - ⠋⠕⠕⠃⠠⠤⠁⠗
    - inputPos: [0,1,2,3,4,5,5,6]
      outputPos: [0,1,2,3,4,5,7]

# Deletion with pass3 rule: append to previous
flags: {testmode: bothDirections}
tests:
  # - |f|o|o|b|,.|a|r|
  # - |⠋|⠕|⠕|⠃|⠠|⠁|⠗|
  - - foob,.ar
    - ⠋⠕⠕⠃⠠⠁⠗
    - inputPos: [0,1,2,3,4,6,7]
      outputPos: [0,1,2,3,4,4,5,6]

# Insertion with pass4 rule: prepend to next
flags: {testmode: bothDirections}
tests:
  # - |f|o|o|b|a|,|r|
  # - |⠋|⠕|⠕|⠃|⠁|⠠|⠤⠗|
  - - fooba,r
    - ⠋⠕⠕⠃⠁⠠⠤⠗
    - inputPos: [0,1,2,3,4,5,6,6]
      outputPos: [0,1,2,3,4,5,6]

# Deletion with pass4 rule: append to previous
flags: {testmode: bothDirections}
tests:
  # - |f|o|o|b|a|,.|r|
  # - |⠋|⠕|⠕|⠃|⠁|⠠|⠗|
  - - fooba,.r
    - ⠋⠕⠕⠃⠁⠠⠗
    - inputPos: [0,1,2,3,4,5,7]
      outputPos: [0,1,2,3,4,5,5,6]

# Using all passes!
flags: {testmode: bothDirections}
tests:
  # - |f|,|o|,|o|,|b|,|a|,|r|
  # - |⠋|⠠|⠤⠕|⠠|⠤⠕|⠠|⠤⠃|⠠|⠤⠁|⠠|⠤⠗|
  - - f,o,o,b,a,r
    - ⠋⠠⠤⠕⠠⠤⠕⠠⠤⠃⠠⠤⠁⠠⠤⠗
    - inputPos: [0,1,2,2,3,4,4,5,6,6,7,8,8,9,10,10]
      outputPos: [0,1,2,4,5,7,8,10,11,13,14]
  # - |f|,.|o|,.|o|,.|b|,.|a|,.|r|
  # - |⠋|⠠|⠕|⠠|⠕|⠠|⠃|⠠|⠁|⠠|⠗|
  - - f,.o,.o,.b,.a,.r
    - ⠋⠠⠕⠠⠕⠠⠃⠠⠁⠠⠗
    - inputPos: [0,1,3,4,6,7,9,10,12,13,15]
      outputPos: [0,1,1,2,3,3,4,5,5,6,7,7,8,9,9,10]

# Insertion at the start of a string: prepend to next
table: |
  include tables/latinLetterDef6Dots.uti
  sign . 123456
  # noback correct `[]$a "." # "true" insertion not possible
  noback correct `[$a] "."*
  nofor correct `[$a] ?
flags: {testmode: bothDirections}
tests:
  # - |f|o|o|b|a|r|
  # - |.f|o|o|b|a|r|
  - - foobar
    - .foobar
    - inputPos: [0,0,1,2,3,4,5]
      outputPos: [0,2,3,4,5,6]

# Insertion at the end of a string: append to previous
table: |
  include tables/latinLetterDef6Dots.uti
  sign . 123456
  noback correct $a[]~ "." # "true" insertion
  nofor correct [$a]~ ?
table: |
  include tables/latinLetterDef6Dots.uti
  sign . 123456
  noback correct [$a]~ *"."
  nofor correct [$a]~ ?
flags: {testmode: bothDirections}
tests:
  # - |f|o|o|b|a|r|
  # - |f|o|o|b|a|r.|
  - - foobar
    - foobar.
    - inputPos: [0,1,2,3,4,5,5]
      outputPos: [0,1,2,3,4,5]

# Deletion at the start of a string: append to previous from pov of output (braille), prepend to next from pov of input
table: |
  include tables/latinLetterDef6Dots.uti
  noback correct `[$a] ?
  # nofor correct `[]$a "f" # "true" insertion not possible
  nofor correct `[$a] "f"*
flags: {testmode: bothDirections}
tests:
  # - f|o|o|b|a|r|
  # - |o|o|b|a|r|
  - - foobar
    - oobar
    - inputPos: [1,2,3,4,5]
      outputPos: [0,0,1,2,3,4]

# Deletion at the end of a string: append to previous
table: |
  include tables/latinLetterDef6Dots.uti
  noback correct [$a]~ ?
  nofor correct $a[]~ "r" # "true" insertion
table: |
  include tables/latinLetterDef6Dots.uti
  noback correct [$a]~ ?
  nofor correct [$a]~ *"r"
flags: {testmode: bothDirections}
tests:
  # - |f|o|o|b|ar|
  # - |f|o|o|b|a|
  - - foobar
    - fooba
    - inputPos: [0,1,2,3,4]
      outputPos: [0,1,2,3,4,4]
