# Copyright 2021 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/python.gni")
import("//chrome/browser/resources/tools/optimize_webui.gni")

template("build_mwc_app") {
  node(target_name) {
    script = "//third_party/material_web_components/build_mwc_app.py"

    # This depfile is generated by optimize_webui.py
    depfile = "${target_gen_dir}/${target_name}.d"

    inputs = [ "//chrome/browser/resources/tools/rollup_plugin.js" ] +
             invoker.js_module_in_files
    outputs = []
    if (defined(invoker.html_out_files)) {
      foreach(_out, invoker.html_out_files) {
        outputs += [ "$target_gen_dir/$_out" ]
      }
    }
    foreach(_out, invoker.js_out_files) {
      outputs += [ "$target_gen_dir/$_out" ]
    }

    deps = invoker.deps

    # Note that we have to manually pass the sources to our script if the
    # script needs them as inputs.
    args = [
      "--host",
      invoker.host,
      "--input",
      invoker.input,
      "--out_folder",
      rebase_path(target_gen_dir, root_build_dir),
      "--depfile",
      rebase_path(depfile, root_build_dir),
    ]

    args += [ "--js_out_files" ] + invoker.js_out_files

    if (defined(invoker.excludes)) {
      args += [ "--exclude" ] + invoker.excludes
    }

    resources_path =
        rebase_path("$root_gen_dir/ui/webui/resources/preprocessed/",
                    root_build_dir)

    # Rewrite chrome://resources to the generated preprocessed WebUI resources
    # directory.
    external_paths = [ "chrome://resources/|$resources_path" ]
    if (defined(invoker.external_paths)) {
      external_paths += invoker.external_paths
    }
    args += [ "--external_paths" ] + external_paths

    args += [ "--js_module_in_files" ] + invoker.js_module_in_files

    if (defined(invoker.out_manifest)) {
      args += [
        "--out_manifest",
        rebase_path(invoker.out_manifest, root_build_dir),
      ]
      outputs += [ invoker.out_manifest ]
    }
  }
}
