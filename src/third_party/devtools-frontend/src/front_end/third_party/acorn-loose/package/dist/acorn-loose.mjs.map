{"version":3,"file":"acorn-loose.mjs","sources":["../src/parseutil.js","../src/state.js","../src/tokenize.js","../src/statement.js","../src/expression.js","../src/index.js"],"sourcesContent":["export const dummyValue = \"âœ–\"\n\nexport function isDummy(node) { return node.name === dummyValue }\n","import {Parser, SourceLocation, tokTypes as tt, Node, lineBreak, isNewLine} from \"acorn\"\nimport {dummyValue} from \"./parseutil.js\"\n\nfunction noop() {}\n\nexport class LooseParser {\n  constructor(input, options = {}) {\n    this.toks = this.constructor.BaseParser.tokenizer(input, options)\n    this.options = this.toks.options\n    this.input = this.toks.input\n    this.tok = this.last = {type: tt.eof, start: 0, end: 0}\n    this.tok.validateRegExpFlags = noop\n    this.tok.validateRegExpPattern = noop\n    if (this.options.locations) {\n      let here = this.toks.curPosition()\n      this.tok.loc = new SourceLocation(this.toks, here, here)\n    }\n    this.ahead = [] // Tokens ahead\n    this.context = [] // Indentation contexted\n    this.curIndent = 0\n    this.curLineStart = 0\n    this.nextLineStart = this.lineEnd(this.curLineStart) + 1\n    this.inAsync = false\n    this.inFunction = false\n  }\n\n  startNode() {\n    return new Node(this.toks, this.tok.start, this.options.locations ? this.tok.loc.start : null)\n  }\n\n  storeCurrentPos() {\n    return this.options.locations ? [this.tok.start, this.tok.loc.start] : this.tok.start\n  }\n\n  startNodeAt(pos) {\n    if (this.options.locations) {\n      return new Node(this.toks, pos[0], pos[1])\n    } else {\n      return new Node(this.toks, pos)\n    }\n  }\n\n  finishNode(node, type) {\n    node.type = type\n    node.end = this.last.end\n    if (this.options.locations)\n      node.loc.end = this.last.loc.end\n    if (this.options.ranges)\n      node.range[1] = this.last.end\n    return node\n  }\n\n  dummyNode(type) {\n    let dummy = this.startNode()\n    dummy.type = type\n    dummy.end = dummy.start\n    if (this.options.locations)\n      dummy.loc.end = dummy.loc.start\n    if (this.options.ranges)\n      dummy.range[1] = dummy.start\n    this.last = {type: tt.name, start: dummy.start, end: dummy.start, loc: dummy.loc}\n    return dummy\n  }\n\n  dummyIdent() {\n    let dummy = this.dummyNode(\"Identifier\")\n    dummy.name = dummyValue\n    return dummy\n  }\n\n  dummyString() {\n    let dummy = this.dummyNode(\"Literal\")\n    dummy.value = dummy.raw = dummyValue\n    return dummy\n  }\n\n  eat(type) {\n    if (this.tok.type === type) {\n      this.next()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  isContextual(name) {\n    return this.tok.type === tt.name && this.tok.value === name\n  }\n\n  eatContextual(name) {\n    return this.tok.value === name && this.eat(tt.name)\n  }\n\n  canInsertSemicolon() {\n    return this.tok.type === tt.eof || this.tok.type === tt.braceR ||\n      lineBreak.test(this.input.slice(this.last.end, this.tok.start))\n  }\n\n  semicolon() {\n    return this.eat(tt.semi)\n  }\n\n  expect(type) {\n    if (this.eat(type)) return true\n    for (let i = 1; i <= 2; i++) {\n      if (this.lookAhead(i).type === type) {\n        for (let j = 0; j < i; j++) this.next()\n        return true\n      }\n    }\n  }\n\n  pushCx() {\n    this.context.push(this.curIndent)\n  }\n\n  popCx() {\n    this.curIndent = this.context.pop()\n  }\n\n  lineEnd(pos) {\n    while (pos < this.input.length && !isNewLine(this.input.charCodeAt(pos))) ++pos\n    return pos\n  }\n\n  indentationAfter(pos) {\n    for (let count = 0;; ++pos) {\n      let ch = this.input.charCodeAt(pos)\n      if (ch === 32) ++count\n      else if (ch === 9) count += this.options.tabSize\n      else return count\n    }\n  }\n\n  closes(closeTok, indent, line, blockHeuristic) {\n    if (this.tok.type === closeTok || this.tok.type === tt.eof) return true\n    return line !== this.curLineStart && this.curIndent < indent && this.tokenStartsLine() &&\n      (!blockHeuristic || this.nextLineStart >= this.input.length ||\n       this.indentationAfter(this.nextLineStart) < indent)\n  }\n\n  tokenStartsLine() {\n    for (let p = this.tok.start - 1; p >= this.curLineStart; --p) {\n      let ch = this.input.charCodeAt(p)\n      if (ch !== 9 && ch !== 32) return false\n    }\n    return true\n  }\n\n  extend(name, f) {\n    this[name] = f(this[name])\n  }\n\n  parse() {\n    this.next()\n    return this.parseTopLevel()\n  }\n\n  static extend(...plugins) {\n    let cls = this\n    for (let i = 0; i < plugins.length; i++) cls = plugins[i](cls)\n    return cls\n  }\n\n  static parse(input, options) {\n    return new this(input, options).parse()\n  }\n}\n\n// Allows plugins to extend the base parser / tokenizer used\nLooseParser.BaseParser = Parser\n","import {tokTypes as tt, Token, isNewLine, SourceLocation, getLineInfo, lineBreakG} from \"acorn\"\nimport {LooseParser} from \"./state.js\"\nimport {dummyValue} from \"./parseutil.js\"\n\nconst lp = LooseParser.prototype\n\nfunction isSpace(ch) {\n  return (ch < 14 && ch > 8) || ch === 32 || ch === 160 || isNewLine(ch)\n}\n\nlp.next = function() {\n  this.last = this.tok\n  if (this.ahead.length)\n    this.tok = this.ahead.shift()\n  else\n    this.tok = this.readToken()\n\n  if (this.tok.start >= this.nextLineStart) {\n    while (this.tok.start >= this.nextLineStart) {\n      this.curLineStart = this.nextLineStart\n      this.nextLineStart = this.lineEnd(this.curLineStart) + 1\n    }\n    this.curIndent = this.indentationAfter(this.curLineStart)\n  }\n}\n\nlp.readToken = function() {\n  for (;;) {\n    try {\n      this.toks.next()\n      if (this.toks.type === tt.dot &&\n          this.input.substr(this.toks.end, 1) === \".\" &&\n          this.options.ecmaVersion >= 6) {\n        this.toks.end++\n        this.toks.type = tt.ellipsis\n      }\n      return new Token(this.toks)\n    } catch (e) {\n      if (!(e instanceof SyntaxError)) throw e\n\n      // Try to skip some text, based on the error message, and then continue\n      let msg = e.message, pos = e.raisedAt, replace = true\n      if (/unterminated/i.test(msg)) {\n        pos = this.lineEnd(e.pos + 1)\n        if (/string/.test(msg)) {\n          replace = {start: e.pos, end: pos, type: tt.string, value: this.input.slice(e.pos + 1, pos)}\n        } else if (/regular expr/i.test(msg)) {\n          let re = this.input.slice(e.pos, pos)\n          try { re = new RegExp(re) } catch (e) { /* ignore compilation error due to new syntax */ }\n          replace = {start: e.pos, end: pos, type: tt.regexp, value: re}\n        } else if (/template/.test(msg)) {\n          replace = {\n            start: e.pos,\n            end: pos,\n            type: tt.template,\n            value: this.input.slice(e.pos, pos)\n          }\n        } else {\n          replace = false\n        }\n      } else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number|expected number in radix/i.test(msg)) {\n        while (pos < this.input.length && !isSpace(this.input.charCodeAt(pos))) ++pos\n      } else if (/character escape|expected hexadecimal/i.test(msg)) {\n        while (pos < this.input.length) {\n          let ch = this.input.charCodeAt(pos++)\n          if (ch === 34 || ch === 39 || isNewLine(ch)) break\n        }\n      } else if (/unexpected character/i.test(msg)) {\n        pos++\n        replace = false\n      } else if (/regular expression/i.test(msg)) {\n        replace = true\n      } else {\n        throw e\n      }\n      this.resetTo(pos)\n      if (replace === true) replace = {start: pos, end: pos, type: tt.name, value: dummyValue}\n      if (replace) {\n        if (this.options.locations)\n          replace.loc = new SourceLocation(\n            this.toks,\n            getLineInfo(this.input, replace.start),\n            getLineInfo(this.input, replace.end))\n        return replace\n      }\n    }\n  }\n}\n\nlp.resetTo = function(pos) {\n  this.toks.pos = pos\n  let ch = this.input.charAt(pos - 1)\n  this.toks.exprAllowed = !ch || /[[{(,;:?/*=+\\-~!|&%^<>]/.test(ch) ||\n    /[enwfd]/.test(ch) &&\n    /\\b(case|else|return|throw|new|in|(instance|type)?of|delete|void)$/.test(this.input.slice(pos - 10, pos))\n\n  if (this.options.locations) {\n    this.toks.curLine = 1\n    this.toks.lineStart = lineBreakG.lastIndex = 0\n    let match\n    while ((match = lineBreakG.exec(this.input)) && match.index < pos) {\n      ++this.toks.curLine\n      this.toks.lineStart = match.index + match[0].length\n    }\n  }\n}\n\nlp.lookAhead = function(n) {\n  while (n > this.ahead.length)\n    this.ahead.push(this.readToken())\n  return this.ahead[n - 1]\n}\n","import {LooseParser} from \"./state.js\"\nimport {isDummy} from \"./parseutil.js\"\nimport {getLineInfo, tokTypes as tt} from \"acorn\"\n\nconst lp = LooseParser.prototype\n\nlp.parseTopLevel = function() {\n  let node = this.startNodeAt(this.options.locations ? [0, getLineInfo(this.input, 0)] : 0)\n  node.body = []\n  while (this.tok.type !== tt.eof) node.body.push(this.parseStatement())\n  this.toks.adaptDirectivePrologue(node.body)\n  this.last = this.tok\n  node.sourceType = this.options.sourceType\n  return this.finishNode(node, \"Program\")\n}\n\nlp.parseStatement = function() {\n  let starttype = this.tok.type, node = this.startNode(), kind\n\n  if (this.toks.isLet()) {\n    starttype = tt._var\n    kind = \"let\"\n  }\n\n  switch (starttype) {\n  case tt._break: case tt._continue:\n    this.next()\n    let isBreak = starttype === tt._break\n    if (this.semicolon() || this.canInsertSemicolon()) {\n      node.label = null\n    } else {\n      node.label = this.tok.type === tt.name ? this.parseIdent() : null\n      this.semicolon()\n    }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n\n  case tt._debugger:\n    this.next()\n    this.semicolon()\n    return this.finishNode(node, \"DebuggerStatement\")\n\n  case tt._do:\n    this.next()\n    node.body = this.parseStatement()\n    node.test = this.eat(tt._while) ? this.parseParenExpression() : this.dummyIdent()\n    this.semicolon()\n    return this.finishNode(node, \"DoWhileStatement\")\n\n  case tt._for:\n    this.next() // `for` keyword\n    let isAwait = this.options.ecmaVersion >= 9 && this.eatContextual(\"await\")\n\n    this.pushCx()\n    this.expect(tt.parenL)\n    if (this.tok.type === tt.semi) return this.parseFor(node, null)\n    let isLet = this.toks.isLet()\n    if (isLet || this.tok.type === tt._var || this.tok.type === tt._const) {\n      let init = this.parseVar(this.startNode(), true, isLet ? \"let\" : this.tok.value)\n      if (init.declarations.length === 1 && (this.tok.type === tt._in || this.isContextual(\"of\"))) {\n        if (this.options.ecmaVersion >= 9 && this.tok.type !== tt._in) {\n          node.await = isAwait\n        }\n        return this.parseForIn(node, init)\n      }\n      return this.parseFor(node, init)\n    }\n    let init = this.parseExpression(true)\n    if (this.tok.type === tt._in || this.isContextual(\"of\")) {\n      if (this.options.ecmaVersion >= 9 && this.tok.type !== tt._in) {\n        node.await = isAwait\n      }\n      return this.parseForIn(node, this.toAssignable(init))\n    }\n    return this.parseFor(node, init)\n\n  case tt._function:\n    this.next()\n    return this.parseFunction(node, true)\n\n  case tt._if:\n    this.next()\n    node.test = this.parseParenExpression()\n    node.consequent = this.parseStatement()\n    node.alternate = this.eat(tt._else) ? this.parseStatement() : null\n    return this.finishNode(node, \"IfStatement\")\n\n  case tt._return:\n    this.next()\n    if (this.eat(tt.semi) || this.canInsertSemicolon()) node.argument = null\n    else { node.argument = this.parseExpression(); this.semicolon() }\n    return this.finishNode(node, \"ReturnStatement\")\n\n  case tt._switch:\n    let blockIndent = this.curIndent, line = this.curLineStart\n    this.next()\n    node.discriminant = this.parseParenExpression()\n    node.cases = []\n    this.pushCx()\n    this.expect(tt.braceL)\n\n    let cur\n    while (!this.closes(tt.braceR, blockIndent, line, true)) {\n      if (this.tok.type === tt._case || this.tok.type === tt._default) {\n        let isCase = this.tok.type === tt._case\n        if (cur) this.finishNode(cur, \"SwitchCase\")\n        node.cases.push(cur = this.startNode())\n        cur.consequent = []\n        this.next()\n        if (isCase) cur.test = this.parseExpression()\n        else cur.test = null\n        this.expect(tt.colon)\n      } else {\n        if (!cur) {\n          node.cases.push(cur = this.startNode())\n          cur.consequent = []\n          cur.test = null\n        }\n        cur.consequent.push(this.parseStatement())\n      }\n    }\n    if (cur) this.finishNode(cur, \"SwitchCase\")\n    this.popCx()\n    this.eat(tt.braceR)\n    return this.finishNode(node, \"SwitchStatement\")\n\n  case tt._throw:\n    this.next()\n    node.argument = this.parseExpression()\n    this.semicolon()\n    return this.finishNode(node, \"ThrowStatement\")\n\n  case tt._try:\n    this.next()\n    node.block = this.parseBlock()\n    node.handler = null\n    if (this.tok.type === tt._catch) {\n      let clause = this.startNode()\n      this.next()\n      if (this.eat(tt.parenL)) {\n        clause.param = this.toAssignable(this.parseExprAtom(), true)\n        this.expect(tt.parenR)\n      } else {\n        clause.param = null\n      }\n      clause.body = this.parseBlock()\n      node.handler = this.finishNode(clause, \"CatchClause\")\n    }\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n    if (!node.handler && !node.finalizer) return node.block\n    return this.finishNode(node, \"TryStatement\")\n\n  case tt._var:\n  case tt._const:\n    return this.parseVar(node, false, kind || this.tok.value)\n\n  case tt._while:\n    this.next()\n    node.test = this.parseParenExpression()\n    node.body = this.parseStatement()\n    return this.finishNode(node, \"WhileStatement\")\n\n  case tt._with:\n    this.next()\n    node.object = this.parseParenExpression()\n    node.body = this.parseStatement()\n    return this.finishNode(node, \"WithStatement\")\n\n  case tt.braceL:\n    return this.parseBlock()\n\n  case tt.semi:\n    this.next()\n    return this.finishNode(node, \"EmptyStatement\")\n\n  case tt._class:\n    return this.parseClass(true)\n\n  case tt._import:\n    if (this.options.ecmaVersion > 10) {\n      const nextType = this.lookAhead(1).type\n      if (nextType === tt.parenL || nextType === tt.dot) {\n        node.expression = this.parseExpression()\n        this.semicolon()\n        return this.finishNode(node, \"ExpressionStatement\")\n      }\n    }\n\n    return this.parseImport()\n\n  case tt._export:\n    return this.parseExport()\n\n  default:\n    if (this.toks.isAsyncFunction()) {\n      this.next()\n      this.next()\n      return this.parseFunction(node, true, true)\n    }\n    let expr = this.parseExpression()\n    if (isDummy(expr)) {\n      this.next()\n      if (this.tok.type === tt.eof) return this.finishNode(node, \"EmptyStatement\")\n      return this.parseStatement()\n    } else if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon)) {\n      node.body = this.parseStatement()\n      node.label = expr\n      return this.finishNode(node, \"LabeledStatement\")\n    } else {\n      node.expression = expr\n      this.semicolon()\n      return this.finishNode(node, \"ExpressionStatement\")\n    }\n  }\n}\n\nlp.parseBlock = function() {\n  let node = this.startNode()\n  this.pushCx()\n  this.expect(tt.braceL)\n  let blockIndent = this.curIndent, line = this.curLineStart\n  node.body = []\n  while (!this.closes(tt.braceR, blockIndent, line, true))\n    node.body.push(this.parseStatement())\n  this.popCx()\n  this.eat(tt.braceR)\n  return this.finishNode(node, \"BlockStatement\")\n}\n\nlp.parseFor = function(node, init) {\n  node.init = init\n  node.test = node.update = null\n  if (this.eat(tt.semi) && this.tok.type !== tt.semi) node.test = this.parseExpression()\n  if (this.eat(tt.semi) && this.tok.type !== tt.parenR) node.update = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement()\n  return this.finishNode(node, \"ForStatement\")\n}\n\nlp.parseForIn = function(node, init) {\n  let type = this.tok.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n  this.next()\n  node.left = init\n  node.right = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement()\n  return this.finishNode(node, type)\n}\n\nlp.parseVar = function(node, noIn, kind) {\n  node.kind = kind\n  this.next()\n  node.declarations = []\n  do {\n    let decl = this.startNode()\n    decl.id = this.options.ecmaVersion >= 6 ? this.toAssignable(this.parseExprAtom(), true) : this.parseIdent()\n    decl.init = this.eat(tt.eq) ? this.parseMaybeAssign(noIn) : null\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"))\n  } while (this.eat(tt.comma))\n  if (!node.declarations.length) {\n    let decl = this.startNode()\n    decl.id = this.dummyIdent()\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"))\n  }\n  if (!noIn) this.semicolon()\n  return this.finishNode(node, \"VariableDeclaration\")\n}\n\nlp.parseClass = function(isStatement) {\n  let node = this.startNode()\n  this.next()\n  if (this.tok.type === tt.name) node.id = this.parseIdent()\n  else if (isStatement === true) node.id = this.dummyIdent()\n  else node.id = null\n  node.superClass = this.eat(tt._extends) ? this.parseExpression() : null\n  node.body = this.startNode()\n  node.body.body = []\n  this.pushCx()\n  let indent = this.curIndent + 1, line = this.curLineStart\n  this.eat(tt.braceL)\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart }\n  while (!this.closes(tt.braceR, indent, line)) {\n    if (this.semicolon()) continue\n    let method = this.startNode(), isGenerator, isAsync\n    if (this.options.ecmaVersion >= 6) {\n      method.static = false\n      isGenerator = this.eat(tt.star)\n    }\n    this.parsePropertyName(method)\n    if (isDummy(method.key)) { if (isDummy(this.parseMaybeAssign())) this.next(); this.eat(tt.comma); continue }\n    if (method.key.type === \"Identifier\" && !method.computed && method.key.name === \"static\" &&\n        (this.tok.type !== tt.parenL && this.tok.type !== tt.braceL)) {\n      method.static = true\n      isGenerator = this.eat(tt.star)\n      this.parsePropertyName(method)\n    } else {\n      method.static = false\n    }\n    if (!method.computed &&\n        method.key.type === \"Identifier\" && method.key.name === \"async\" && this.tok.type !== tt.parenL &&\n        !this.canInsertSemicolon()) {\n      isAsync = true\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(tt.star)\n      this.parsePropertyName(method)\n    } else {\n      isAsync = false\n    }\n    if (this.options.ecmaVersion >= 5 && method.key.type === \"Identifier\" &&\n        !method.computed && (method.key.name === \"get\" || method.key.name === \"set\") &&\n        this.tok.type !== tt.parenL && this.tok.type !== tt.braceL) {\n      method.kind = method.key.name\n      this.parsePropertyName(method)\n      method.value = this.parseMethod(false)\n    } else {\n      if (!method.computed && !method.static && !isGenerator && !isAsync && (\n        method.key.type === \"Identifier\" && method.key.name === \"constructor\" ||\n          method.key.type === \"Literal\" && method.key.value === \"constructor\")) {\n        method.kind = \"constructor\"\n      } else {\n        method.kind = \"method\"\n      }\n      method.value = this.parseMethod(isGenerator, isAsync)\n    }\n    node.body.body.push(this.finishNode(method, \"MethodDefinition\"))\n  }\n  this.popCx()\n  if (!this.eat(tt.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  this.semicolon()\n  this.finishNode(node.body, \"ClassBody\")\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n}\n\nlp.parseFunction = function(node, isStatement, isAsync) {\n  let oldInAsync = this.inAsync, oldInFunction = this.inFunction\n  this.initFunction(node)\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = this.eat(tt.star)\n  }\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync\n  }\n  if (this.tok.type === tt.name) node.id = this.parseIdent()\n  else if (isStatement === true) node.id = this.dummyIdent()\n  this.inAsync = node.async\n  this.inFunction = true\n  node.params = this.parseFunctionParams()\n  node.body = this.parseBlock()\n  this.toks.adaptDirectivePrologue(node.body.body)\n  this.inAsync = oldInAsync\n  this.inFunction = oldInFunction\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n}\n\nlp.parseExport = function() {\n  let node = this.startNode()\n  this.next()\n  if (this.eat(tt.star)) {\n    if (this.options.ecmaVersion >= 11) {\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseExprAtom()\n      } else {\n        node.exported = null\n      }\n    }\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : this.dummyString()\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(tt._default)) {\n    // export default (function foo() {}) // This is FunctionExpression.\n    let isAsync\n    if (this.tok.type === tt._function || (isAsync = this.toks.isAsyncFunction())) {\n      let fNode = this.startNode()\n      this.next()\n      if (isAsync) this.next()\n      node.declaration = this.parseFunction(fNode, \"nullableID\", isAsync)\n    } else if (this.tok.type === tt._class) {\n      node.declaration = this.parseClass(\"nullableID\")\n    } else {\n      node.declaration = this.parseMaybeAssign()\n      this.semicolon()\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  if (this.tok.type.keyword || this.toks.isLet() || this.toks.isAsyncFunction()) {\n    node.declaration = this.parseStatement()\n    node.specifiers = []\n    node.source = null\n  } else {\n    node.declaration = null\n    node.specifiers = this.parseExportSpecifierList()\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null\n    this.semicolon()\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n}\n\nlp.parseImport = function() {\n  let node = this.startNode()\n  this.next()\n  if (this.tok.type === tt.string) {\n    node.specifiers = []\n    node.source = this.parseExprAtom()\n  } else {\n    let elt\n    if (this.tok.type === tt.name && this.tok.value !== \"from\") {\n      elt = this.startNode()\n      elt.local = this.parseIdent()\n      this.finishNode(elt, \"ImportDefaultSpecifier\")\n      this.eat(tt.comma)\n    }\n    node.specifiers = this.parseImportSpecifiers()\n    node.source = this.eatContextual(\"from\") && this.tok.type === tt.string ? this.parseExprAtom() : this.dummyString()\n    if (elt) node.specifiers.unshift(elt)\n  }\n  this.semicolon()\n  return this.finishNode(node, \"ImportDeclaration\")\n}\n\nlp.parseImportSpecifiers = function() {\n  let elts = []\n  if (this.tok.type === tt.star) {\n    let elt = this.startNode()\n    this.next()\n    elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent()\n    elts.push(this.finishNode(elt, \"ImportNamespaceSpecifier\"))\n  } else {\n    let indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart\n    this.pushCx()\n    this.eat(tt.braceL)\n    if (this.curLineStart > continuedLine) continuedLine = this.curLineStart\n    while (!this.closes(tt.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n      let elt = this.startNode()\n      if (this.eat(tt.star)) {\n        elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent()\n        this.finishNode(elt, \"ImportNamespaceSpecifier\")\n      } else {\n        if (this.isContextual(\"from\")) break\n        elt.imported = this.parseIdent()\n        if (isDummy(elt.imported)) break\n        elt.local = this.eatContextual(\"as\") ? this.parseIdent() : elt.imported\n        this.finishNode(elt, \"ImportSpecifier\")\n      }\n      elts.push(elt)\n      this.eat(tt.comma)\n    }\n    this.eat(tt.braceR)\n    this.popCx()\n  }\n  return elts\n}\n\nlp.parseExportSpecifierList = function() {\n  let elts = []\n  let indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart\n  this.pushCx()\n  this.eat(tt.braceL)\n  if (this.curLineStart > continuedLine) continuedLine = this.curLineStart\n  while (!this.closes(tt.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n    if (this.isContextual(\"from\")) break\n    let elt = this.startNode()\n    elt.local = this.parseIdent()\n    if (isDummy(elt.local)) break\n    elt.exported = this.eatContextual(\"as\") ? this.parseIdent() : elt.local\n    this.finishNode(elt, \"ExportSpecifier\")\n    elts.push(elt)\n    this.eat(tt.comma)\n  }\n  this.eat(tt.braceR)\n  this.popCx()\n  return elts\n}\n","import {LooseParser} from \"./state.js\"\nimport {isDummy} from \"./parseutil.js\"\nimport {tokTypes as tt} from \"acorn\"\n\nconst lp = LooseParser.prototype\n\nlp.checkLVal = function(expr) {\n  if (!expr) return expr\n  switch (expr.type) {\n  case \"Identifier\":\n  case \"MemberExpression\":\n    return expr\n\n  case \"ParenthesizedExpression\":\n    expr.expression = this.checkLVal(expr.expression)\n    return expr\n\n  default:\n    return this.dummyIdent()\n  }\n}\n\nlp.parseExpression = function(noIn) {\n  let start = this.storeCurrentPos()\n  let expr = this.parseMaybeAssign(noIn)\n  if (this.tok.type === tt.comma) {\n    let node = this.startNodeAt(start)\n    node.expressions = [expr]\n    while (this.eat(tt.comma)) node.expressions.push(this.parseMaybeAssign(noIn))\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n}\n\nlp.parseParenExpression = function() {\n  this.pushCx()\n  this.expect(tt.parenL)\n  let val = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  return val\n}\n\nlp.parseMaybeAssign = function(noIn) {\n  if (this.toks.isContextual(\"yield\")) {\n    let node = this.startNode()\n    this.next()\n    if (this.semicolon() || this.canInsertSemicolon() || (this.tok.type !== tt.star && !this.tok.type.startsExpr)) {\n      node.delegate = false\n      node.argument = null\n    } else {\n      node.delegate = this.eat(tt.star)\n      node.argument = this.parseMaybeAssign()\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  }\n\n  let start = this.storeCurrentPos()\n  let left = this.parseMaybeConditional(noIn)\n  if (this.tok.type.isAssign) {\n    let node = this.startNodeAt(start)\n    node.operator = this.tok.value\n    node.left = this.tok.type === tt.eq ? this.toAssignable(left) : this.checkLVal(left)\n    this.next()\n    node.right = this.parseMaybeAssign(noIn)\n    return this.finishNode(node, \"AssignmentExpression\")\n  }\n  return left\n}\n\nlp.parseMaybeConditional = function(noIn) {\n  let start = this.storeCurrentPos()\n  let expr = this.parseExprOps(noIn)\n  if (this.eat(tt.question)) {\n    let node = this.startNodeAt(start)\n    node.test = expr\n    node.consequent = this.parseMaybeAssign()\n    node.alternate = this.expect(tt.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent()\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n}\n\nlp.parseExprOps = function(noIn) {\n  let start = this.storeCurrentPos()\n  let indent = this.curIndent, line = this.curLineStart\n  return this.parseExprOp(this.parseMaybeUnary(false), start, -1, noIn, indent, line)\n}\n\nlp.parseExprOp = function(left, start, minPrec, noIn, indent, line) {\n  if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) return left\n  let prec = this.tok.type.binop\n  if (prec != null && (!noIn || this.tok.type !== tt._in)) {\n    if (prec > minPrec) {\n      let node = this.startNodeAt(start)\n      node.left = left\n      node.operator = this.tok.value\n      this.next()\n      if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) {\n        node.right = this.dummyIdent()\n      } else {\n        let rightStart = this.storeCurrentPos()\n        node.right = this.parseExprOp(this.parseMaybeUnary(false), rightStart, prec, noIn, indent, line)\n      }\n      this.finishNode(node, /&&|\\|\\||\\?\\?/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\")\n      return this.parseExprOp(node, start, minPrec, noIn, indent, line)\n    }\n  }\n  return left\n}\n\nlp.parseMaybeUnary = function(sawUnary) {\n  let start = this.storeCurrentPos(), expr\n  if (this.options.ecmaVersion >= 8 && this.toks.isContextual(\"await\") &&\n    (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))\n  ) {\n    expr = this.parseAwait()\n    sawUnary = true\n  } else if (this.tok.type.prefix) {\n    let node = this.startNode(), update = this.tok.type === tt.incDec\n    if (!update) sawUnary = true\n    node.operator = this.tok.value\n    node.prefix = true\n    this.next()\n    node.argument = this.parseMaybeUnary(true)\n    if (update) node.argument = this.checkLVal(node.argument)\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n  } else if (this.tok.type === tt.ellipsis) {\n    let node = this.startNode()\n    this.next()\n    node.argument = this.parseMaybeUnary(sawUnary)\n    expr = this.finishNode(node, \"SpreadElement\")\n  } else {\n    expr = this.parseExprSubscripts()\n    while (this.tok.type.postfix && !this.canInsertSemicolon()) {\n      let node = this.startNodeAt(start)\n      node.operator = this.tok.value\n      node.prefix = false\n      node.argument = this.checkLVal(expr)\n      this.next()\n      expr = this.finishNode(node, \"UpdateExpression\")\n    }\n  }\n\n  if (!sawUnary && this.eat(tt.starstar)) {\n    let node = this.startNodeAt(start)\n    node.operator = \"**\"\n    node.left = expr\n    node.right = this.parseMaybeUnary(false)\n    return this.finishNode(node, \"BinaryExpression\")\n  }\n\n  return expr\n}\n\nlp.parseExprSubscripts = function() {\n  let start = this.storeCurrentPos()\n  return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart)\n}\n\nlp.parseSubscripts = function(base, start, noCalls, startIndent, line) {\n  const optionalSupported = this.options.ecmaVersion >= 11\n  let optionalChained = false\n  for (;;) {\n    if (this.curLineStart !== line && this.curIndent <= startIndent && this.tokenStartsLine()) {\n      if (this.tok.type === tt.dot && this.curIndent === startIndent)\n        --startIndent\n      else\n        break\n    }\n\n    let maybeAsyncArrow = base.type === \"Identifier\" && base.name === \"async\" && !this.canInsertSemicolon()\n    let optional = optionalSupported && this.eat(tt.questionDot)\n    if (optional) {\n      optionalChained = true\n    }\n\n    if ((optional && this.tok.type !== tt.parenL && this.tok.type !== tt.bracketL && this.tok.type !== tt.backQuote) || this.eat(tt.dot)) {\n      let node = this.startNodeAt(start)\n      node.object = base\n      if (this.curLineStart !== line && this.curIndent <= startIndent && this.tokenStartsLine())\n        node.property = this.dummyIdent()\n      else\n        node.property = this.parsePropertyAccessor() || this.dummyIdent()\n      node.computed = false\n      if (optionalSupported) {\n        node.optional = optional\n      }\n      base = this.finishNode(node, \"MemberExpression\")\n    } else if (this.tok.type === tt.bracketL) {\n      this.pushCx()\n      this.next()\n      let node = this.startNodeAt(start)\n      node.object = base\n      node.property = this.parseExpression()\n      node.computed = true\n      if (optionalSupported) {\n        node.optional = optional\n      }\n      this.popCx()\n      this.expect(tt.bracketR)\n      base = this.finishNode(node, \"MemberExpression\")\n    } else if (!noCalls && this.tok.type === tt.parenL) {\n      let exprList = this.parseExprList(tt.parenR)\n      if (maybeAsyncArrow && this.eat(tt.arrow))\n        return this.parseArrowExpression(this.startNodeAt(start), exprList, true)\n      let node = this.startNodeAt(start)\n      node.callee = base\n      node.arguments = exprList\n      if (optionalSupported) {\n        node.optional = optional\n      }\n      base = this.finishNode(node, \"CallExpression\")\n    } else if (this.tok.type === tt.backQuote) {\n      let node = this.startNodeAt(start)\n      node.tag = base\n      node.quasi = this.parseTemplate()\n      base = this.finishNode(node, \"TaggedTemplateExpression\")\n    } else {\n      break\n    }\n  }\n\n  if (optionalChained) {\n    const chainNode = this.startNodeAt(start)\n    chainNode.expression = base\n    base = this.finishNode(chainNode, \"ChainExpression\")\n  }\n  return base\n}\n\nlp.parseExprAtom = function() {\n  let node\n  switch (this.tok.type) {\n  case tt._this:\n  case tt._super:\n    let type = this.tok.type === tt._this ? \"ThisExpression\" : \"Super\"\n    node = this.startNode()\n    this.next()\n    return this.finishNode(node, type)\n\n  case tt.name:\n    let start = this.storeCurrentPos()\n    let id = this.parseIdent()\n    let isAsync = false\n    if (id.name === \"async\" && !this.canInsertSemicolon()) {\n      if (this.eat(tt._function))\n        return this.parseFunction(this.startNodeAt(start), false, true)\n      if (this.tok.type === tt.name) {\n        id = this.parseIdent()\n        isAsync = true\n      }\n    }\n    return this.eat(tt.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id], isAsync) : id\n\n  case tt.regexp:\n    node = this.startNode()\n    let val = this.tok.value\n    node.regex = {pattern: val.pattern, flags: val.flags}\n    node.value = val.value\n    node.raw = this.input.slice(this.tok.start, this.tok.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt.num: case tt.string:\n    node = this.startNode()\n    node.value = this.tok.value\n    node.raw = this.input.slice(this.tok.start, this.tok.end)\n    if (this.tok.type === tt.num && node.raw.charCodeAt(node.raw.length - 1) === 110) node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\")\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt._null: case tt._true: case tt._false:\n    node = this.startNode()\n    node.value = this.tok.type === tt._null ? null : this.tok.type === tt._true\n    node.raw = this.tok.type.keyword\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt.parenL:\n    let parenStart = this.storeCurrentPos()\n    this.next()\n    let inner = this.parseExpression()\n    this.expect(tt.parenR)\n    if (this.eat(tt.arrow)) {\n      // (a,)=>a // SequenceExpression makes dummy in the last hole. Drop the dummy.\n      let params = inner.expressions || [inner]\n      if (params.length && isDummy(params[params.length - 1]))\n        params.pop()\n      return this.parseArrowExpression(this.startNodeAt(parenStart), params)\n    }\n    if (this.options.preserveParens) {\n      let par = this.startNodeAt(parenStart)\n      par.expression = inner\n      inner = this.finishNode(par, \"ParenthesizedExpression\")\n    }\n    return inner\n\n  case tt.bracketL:\n    node = this.startNode()\n    node.elements = this.parseExprList(tt.bracketR, true)\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case tt.braceL:\n    return this.parseObj()\n\n  case tt._class:\n    return this.parseClass(false)\n\n  case tt._function:\n    node = this.startNode()\n    this.next()\n    return this.parseFunction(node, false)\n\n  case tt._new:\n    return this.parseNew()\n\n  case tt.backQuote:\n    return this.parseTemplate()\n\n  case tt._import:\n    if (this.options.ecmaVersion >= 11) {\n      return this.parseExprImport()\n    } else {\n      return this.dummyIdent()\n    }\n\n  default:\n    return this.dummyIdent()\n  }\n}\n\nlp.parseExprImport = function() {\n  const node = this.startNode()\n  const meta = this.parseIdent(true)\n  switch (this.tok.type) {\n  case tt.parenL:\n    return this.parseDynamicImport(node)\n  case tt.dot:\n    node.meta = meta\n    return this.parseImportMeta(node)\n  default:\n    node.name = \"import\"\n    return this.finishNode(node, \"Identifier\")\n  }\n}\n\nlp.parseDynamicImport = function(node) {\n  node.source = this.parseExprList(tt.parenR)[0] || this.dummyString()\n  return this.finishNode(node, \"ImportExpression\")\n}\n\nlp.parseImportMeta = function(node) {\n  this.next() // skip '.'\n  node.property = this.parseIdent(true)\n  return this.finishNode(node, \"MetaProperty\")\n}\n\nlp.parseNew = function() {\n  let node = this.startNode(), startIndent = this.curIndent, line = this.curLineStart\n  let meta = this.parseIdent(true)\n  if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n    node.meta = meta\n    node.property = this.parseIdent(true)\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  let start = this.storeCurrentPos()\n  node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line)\n  if (this.tok.type === tt.parenL) {\n    node.arguments = this.parseExprList(tt.parenR)\n  } else {\n    node.arguments = []\n  }\n  return this.finishNode(node, \"NewExpression\")\n}\n\nlp.parseTemplateElement = function() {\n  let elem = this.startNode()\n\n  // The loose parser accepts invalid unicode escapes even in untagged templates.\n  if (this.tok.type === tt.invalidTemplate) {\n    elem.value = {\n      raw: this.tok.value,\n      cooked: null\n    }\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.tok.start, this.tok.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.tok.value\n    }\n  }\n  this.next()\n  elem.tail = this.tok.type === tt.backQuote\n  return this.finishNode(elem, \"TemplateElement\")\n}\n\nlp.parseTemplate = function() {\n  let node = this.startNode()\n  this.next()\n  node.expressions = []\n  let curElt = this.parseTemplateElement()\n  node.quasis = [curElt]\n  while (!curElt.tail) {\n    this.next()\n    node.expressions.push(this.parseExpression())\n    if (this.expect(tt.braceR)) {\n      curElt = this.parseTemplateElement()\n    } else {\n      curElt = this.startNode()\n      curElt.value = {cooked: \"\", raw: \"\"}\n      curElt.tail = true\n      this.finishNode(curElt, \"TemplateElement\")\n    }\n    node.quasis.push(curElt)\n  }\n  this.expect(tt.backQuote)\n  return this.finishNode(node, \"TemplateLiteral\")\n}\n\nlp.parseObj = function() {\n  let node = this.startNode()\n  node.properties = []\n  this.pushCx()\n  let indent = this.curIndent + 1, line = this.curLineStart\n  this.eat(tt.braceL)\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart }\n  while (!this.closes(tt.braceR, indent, line)) {\n    let prop = this.startNode(), isGenerator, isAsync, start\n    if (this.options.ecmaVersion >= 9 && this.eat(tt.ellipsis)) {\n      prop.argument = this.parseMaybeAssign()\n      node.properties.push(this.finishNode(prop, \"SpreadElement\"))\n      this.eat(tt.comma)\n      continue\n    }\n    if (this.options.ecmaVersion >= 6) {\n      start = this.storeCurrentPos()\n      prop.method = false\n      prop.shorthand = false\n      isGenerator = this.eat(tt.star)\n    }\n    this.parsePropertyName(prop)\n    if (this.toks.isAsyncProp(prop)) {\n      isAsync = true\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(tt.star)\n      this.parsePropertyName(prop)\n    } else {\n      isAsync = false\n    }\n    if (isDummy(prop.key)) { if (isDummy(this.parseMaybeAssign())) this.next(); this.eat(tt.comma); continue }\n    if (this.eat(tt.colon)) {\n      prop.kind = \"init\"\n      prop.value = this.parseMaybeAssign()\n    } else if (this.options.ecmaVersion >= 6 && (this.tok.type === tt.parenL || this.tok.type === tt.braceL)) {\n      prop.kind = \"init\"\n      prop.method = true\n      prop.value = this.parseMethod(isGenerator, isAsync)\n    } else if (this.options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\n               !prop.computed && (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.tok.type !== tt.comma && this.tok.type !== tt.braceR && this.tok.type !== tt.eq)) {\n      prop.kind = prop.key.name\n      this.parsePropertyName(prop)\n      prop.value = this.parseMethod(false)\n    } else {\n      prop.kind = \"init\"\n      if (this.options.ecmaVersion >= 6) {\n        if (this.eat(tt.eq)) {\n          let assign = this.startNodeAt(start)\n          assign.operator = \"=\"\n          assign.left = prop.key\n          assign.right = this.parseMaybeAssign()\n          prop.value = this.finishNode(assign, \"AssignmentExpression\")\n        } else {\n          prop.value = prop.key\n        }\n      } else {\n        prop.value = this.dummyIdent()\n      }\n      prop.shorthand = true\n    }\n    node.properties.push(this.finishNode(prop, \"Property\"))\n    this.eat(tt.comma)\n  }\n  this.popCx()\n  if (!this.eat(tt.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  return this.finishNode(node, \"ObjectExpression\")\n}\n\nlp.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(tt.bracketL)) {\n      prop.computed = true\n      prop.key = this.parseExpression()\n      this.expect(tt.bracketR)\n      return\n    } else {\n      prop.computed = false\n    }\n  }\n  let key = (this.tok.type === tt.num || this.tok.type === tt.string) ? this.parseExprAtom() : this.parseIdent()\n  prop.key = key || this.dummyIdent()\n}\n\nlp.parsePropertyAccessor = function() {\n  if (this.tok.type === tt.name || this.tok.type.keyword) return this.parseIdent()\n}\n\nlp.parseIdent = function() {\n  let name = this.tok.type === tt.name ? this.tok.value : this.tok.type.keyword\n  if (!name) return this.dummyIdent()\n  let node = this.startNode()\n  this.next()\n  node.name = name\n  return this.finishNode(node, \"Identifier\")\n}\n\nlp.initFunction = function(node) {\n  node.id = null\n  node.params = []\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false\n    node.expression = false\n  }\n  if (this.options.ecmaVersion >= 8)\n    node.async = false\n}\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\nlp.toAssignable = function(node, binding) {\n  if (!node || node.type === \"Identifier\" || (node.type === \"MemberExpression\" && !binding)) {\n    // Okay\n  } else if (node.type === \"ParenthesizedExpression\") {\n    this.toAssignable(node.expression, binding)\n  } else if (this.options.ecmaVersion < 6) {\n    return this.dummyIdent()\n  } else if (node.type === \"ObjectExpression\") {\n    node.type = \"ObjectPattern\"\n    for (let prop of node.properties)\n      this.toAssignable(prop, binding)\n  } else if (node.type === \"ArrayExpression\") {\n    node.type = \"ArrayPattern\"\n    this.toAssignableList(node.elements, binding)\n  } else if (node.type === \"Property\") {\n    this.toAssignable(node.value, binding)\n  } else if (node.type === \"SpreadElement\") {\n    node.type = \"RestElement\"\n    this.toAssignable(node.argument, binding)\n  } else if (node.type === \"AssignmentExpression\") {\n    node.type = \"AssignmentPattern\"\n    delete node.operator\n  } else {\n    return this.dummyIdent()\n  }\n  return node\n}\n\nlp.toAssignableList = function(exprList, binding) {\n  for (let expr of exprList)\n    this.toAssignable(expr, binding)\n  return exprList\n}\n\nlp.parseFunctionParams = function(params) {\n  params = this.parseExprList(tt.parenR)\n  return this.toAssignableList(params, true)\n}\n\nlp.parseMethod = function(isGenerator, isAsync) {\n  let node = this.startNode(), oldInAsync = this.inAsync, oldInFunction = this.inFunction\n  this.initFunction(node)\n  if (this.options.ecmaVersion >= 6)\n    node.generator = !!isGenerator\n  if (this.options.ecmaVersion >= 8)\n    node.async = !!isAsync\n  this.inAsync = node.async\n  this.inFunction = true\n  node.params = this.parseFunctionParams()\n  node.body = this.parseBlock()\n  this.toks.adaptDirectivePrologue(node.body.body)\n  this.inAsync = oldInAsync\n  this.inFunction = oldInFunction\n  return this.finishNode(node, \"FunctionExpression\")\n}\n\nlp.parseArrowExpression = function(node, params, isAsync) {\n  let oldInAsync = this.inAsync, oldInFunction = this.inFunction\n  this.initFunction(node)\n  if (this.options.ecmaVersion >= 8)\n    node.async = !!isAsync\n  this.inAsync = node.async\n  this.inFunction = true\n  node.params = this.toAssignableList(params, true)\n  node.expression = this.tok.type !== tt.braceL\n  if (node.expression) {\n    node.body = this.parseMaybeAssign()\n  } else {\n    node.body = this.parseBlock()\n    this.toks.adaptDirectivePrologue(node.body.body)\n  }\n  this.inAsync = oldInAsync\n  this.inFunction = oldInFunction\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n}\n\nlp.parseExprList = function(close, allowEmpty) {\n  this.pushCx()\n  let indent = this.curIndent, line = this.curLineStart, elts = []\n  this.next() // Opening bracket\n  while (!this.closes(close, indent + 1, line)) {\n    if (this.eat(tt.comma)) {\n      elts.push(allowEmpty ? null : this.dummyIdent())\n      continue\n    }\n    let elt = this.parseMaybeAssign()\n    if (isDummy(elt)) {\n      if (this.closes(close, indent, line)) break\n      this.next()\n    } else {\n      elts.push(elt)\n    }\n    this.eat(tt.comma)\n  }\n  this.popCx()\n  if (!this.eat(close)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  return elts\n}\n\nlp.parseAwait = function() {\n  let node = this.startNode()\n  this.next()\n  node.argument = this.parseMaybeUnary()\n  return this.finishNode(node, \"AwaitExpression\")\n}\n","// Acorn: Loose parser\n//\n// This module provides an alternative parser that exposes that same\n// interface as the main module's `parse` function, but will try to\n// parse anything as JavaScript, repairing syntax error the best it\n// can. There are circumstances in which it will raise an error and\n// give up, but they are very rare. The resulting AST will be a mostly\n// valid JavaScript AST (as per the [Mozilla parser API][api], except\n// that:\n//\n// - Return outside functions is allowed\n//\n// - Label consistency (no conflicts, break only to existing labels)\n//   is not enforced.\n//\n// - Bogus Identifier nodes with a name of `\"âœ–\"` are inserted whenever\n//   the parser got too confused to return anything meaningful.\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n//\n// The expected use for this is to *first* try `acorn.parse`, and only\n// if that fails switch to the loose parser. The loose parser might\n// parse badly indented code incorrectly, so **don't** use it as your\n// default parser.\n//\n// Quite a lot of acorn.js is duplicated here. The alternative was to\n// add a *lot* of extra cruft to that file, making it less readable\n// and slower. Copying and editing the code allowed me to make\n// invasive changes and simplifications without creating a complicated\n// tangle.\n\nimport {defaultOptions} from \"acorn\"\nimport {LooseParser} from \"./state.js\"\nimport \"./tokenize.js\"\nimport \"./statement.js\"\nimport \"./expression.js\"\n\nexport {LooseParser} from \"./state.js\"\nexport {isDummy} from \"./parseutil.js\"\n\ndefaultOptions.tabSize = 4\n\nexport function parse(input, options) {\n  return LooseParser.parse(input, options)\n}\n"],"names":["const","tt","let","lp","init","decl","elt","node"],"mappings":"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"}