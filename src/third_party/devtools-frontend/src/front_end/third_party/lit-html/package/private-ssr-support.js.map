{"version":3,"file":"private-ssr-support.js","sources":["src/private-ssr-support.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Directive, PartInfo} from './directive.js';\nimport {_Σ as p, AttributePart, noChange, Part} from './lit-html.js';\nexport type {Template} from './lit-html.js';\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports mangled in the\n * client side code, we export a _Σ object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n * @private\n */\nexport const _Σ = {\n  boundAttributeSuffix: p._boundAttributeSuffix,\n  marker: p._marker,\n  markerMatch: p._markerMatch,\n  HTML_RESULT: p._HTML_RESULT,\n  getTemplateHtml: p._getTemplateHtml,\n  overrideDirectiveResolve: (\n    directiveClass: new (part: PartInfo) => Directive & {render(): unknown},\n    resolveOverrideFn: (directive: Directive, values: unknown[]) => unknown\n  ) =>\n    class extends directiveClass {\n      _$resolve(this: Directive, _part: Part, values: unknown[]): unknown {\n        return resolveOverrideFn(this, values);\n      }\n    },\n  getAttributePartCommittedValue: (\n    part: AttributePart,\n    value: unknown,\n    index: number | undefined\n  ) => {\n    // Use the part setter to resolve directives/concatenate multiple parts\n    // into a final value (captured by passing in a commitValue override)\n    let committedValue: unknown = noChange;\n    // Note that _commitValue need not be in `stableProperties` because this\n    // method is only run on `AttributePart`s created by lit-ssr using the same\n    // version of the library as this file\n    part._commitValue = (value: unknown) => (committedValue = value);\n    part._$setValue(value, part, index);\n    return committedValue;\n  },\n  resolveDirective: p._resolveDirective,\n  AttributePart: p._AttributePart,\n  PropertyPart: p._PropertyPart,\n  BooleanAttributePart: p._BooleanAttributePart,\n  EventPart: p._EventPart,\n  ElementPart: p._ElementPart,\n};\n"],"names":["_Σ","boundAttributeSuffix","p","_boundAttributeSuffix","marker","_marker","markerMatch","_markerMatch","HTML_RESULT","_HTML_RESULT","getTemplateHtml","_getTemplateHtml","overrideDirectiveResolve","directiveClass","resolveOverrideFn","[object Object]","_part","values","this","getAttributePartCommittedValue","part","value","index","committedValue","noChange","_commitValue","_$setValue","resolveDirective","_resolveDirective","AttributePart","_AttributePart","PropertyPart","_PropertyPart","BooleanAttributePart","_BooleanAttributePart","EventPart","_EventPart","ElementPart","_ElementPart"],"mappings":";;;;;SAqBaA,EAAK,CAChBC,qBAAsBC,EAAEC,EACxBC,OAAQF,EAAEG,EACVC,YAAaJ,EAAEK,EACfC,YAAaN,EAAEO,EACfC,gBAAiBR,EAAES,EACnBC,yBAA0B,CACxBC,EACAC,IAEA,cAAcD,EACZE,EAA2BC,EAAaC,GACtC,OAAOH,EAAkBI,KAAMD,KAGrCE,+BAAgC,CAC9BC,EACAC,EACAC,KAIA,IAAIC,EAA0BC,EAM9B,OAFAJ,EAAKK,EAAgBJ,GAAoBE,EAAiBF,EAC1DD,EAAKM,EAAWL,EAAOD,EAAME,GACtBC,GAETI,iBAAkBzB,EAAE0B,GACpBC,cAAe3B,EAAE4B,GACjBC,aAAc7B,EAAE8B,GAChBC,qBAAsB/B,EAAEgC,GACxBC,UAAWjC,EAAEkC,GACbC,YAAanC,EAAEoC"}