{"version":3,"file":"async-replace.js","sourceRoot":"","sources":["../../src/directives/async-replace.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAY,QAAQ,EAAC,MAAM,gBAAgB,CAAC;AACnD,OAAO,EAAC,SAAS,EAAsB,MAAM,iBAAiB,CAAC;AAC/D,OAAO,EAAC,cAAc,EAAC,MAAM,uBAAuB,CAAC;AAIrD,MAAM,qBAAsB,SAAQ,cAAc;IAKhD,yEAAyE;IACzE,6DAA6D;IAC7D,MAAM,CAAI,KAAuB,EAAE,OAAmB;QACpD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,KAAgB,EAAE,CAAC,KAAK,EAAE,MAAM,CAA4B;QACjE,kEAAkE;QAClE,kBAAkB;QAClB,IAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE;YACzB,OAAO;SACR;QACD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvB,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,sEAAsE;IACtE,8CAA8C;IACtC,KAAK,CAAC,SAAS,CAAC,MAAwB;QAC9C,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,MAAM,EAAC,MAAM,EAAE,KAAK,EAAC,GAAG,IAAI,CAAC;QAC7B,IAAI,KAAK,EAAE,IAAI,CAAC,IAAI,KAAM,EAAE;YAC1B,kEAAkE;YAClE,+DAA+D;YAC/D,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,EAAE;gBACzB,MAAM;aACP;YAED,mDAAmD;YACnD,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBAC1B,MAAM,IAAI,CAAC,iBAAiB,CAAC;aAC9B;YAED,yDAAyD;YACzD,kEAAkE;YAClE,iEAAiE;YACjE,sCAAsC;YACtC,IAAI,MAAM,KAAK,SAAS,EAAE;gBACxB,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aAClB;YAED,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACjB,CAAC,EAAE,CAAC;SACL;IACH,CAAC;IAED,YAAY;QACV,qCAAqC;QACrC,IAAI,CAAC,iBAAiB,GAAG,IAAI,OAAO,CAClC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,CACjD,CAAC;IACJ,CAAC;IAED,WAAW;QACT,oCAAoC;QACpC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;QACnC,IAAI,CAAC,kBAAmB,EAAE,CAAC;IAC7B,CAAC;CACF;AAED;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,SAAS,CAAC,qBAAqB,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ChildPart, noChange} from '../lit-html.js';\nimport {directive, DirectiveParameters} from '../directive.js';\nimport {AsyncDirective} from '../async-directive.js';\n\ntype Mapper<T> = (v: T, index?: number) => unknown;\n\nclass AsyncReplaceDirective extends AsyncDirective {\n  private _value?: AsyncIterable<unknown>;\n  private _reconnectResolver?: () => void;\n  private _reconnectPromise?: Promise<void>;\n\n  // @ts-expect-error value not used, but we want a nice parameter for docs\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render<T>(value: AsyncIterable<T>, _mapper?: Mapper<T>) {\n    return noChange;\n  }\n\n  update(_part: ChildPart, [value, mapper]: DirectiveParameters<this>) {\n    // If we've already set up this particular iterable, we don't need\n    // to do anything.\n    if (value === this._value) {\n      return;\n    }\n    this._value = value;\n    this.__iterate(mapper);\n    return noChange;\n  }\n\n  // Separate function to avoid an iffe in update; update can't be async\n  // because its return value must be `noChange`\n  private async __iterate(mapper?: Mapper<unknown>) {\n    let i = 0;\n    const {_value: value} = this;\n    for await (let v of value!) {\n      // Check to make sure that value is the still the current value of\n      // the part, and if not bail because a new value owns this part\n      if (this._value !== value) {\n        break;\n      }\n\n      // If we were disconnected, pause until reconnected\n      if (this._reconnectPromise) {\n        await this._reconnectPromise;\n      }\n\n      // As a convenience, because functional-programming-style\n      // transforms of iterables and async iterables requires a library,\n      // we accept a mapper function. This is especially convenient for\n      // rendering a template for each item.\n      if (mapper !== undefined) {\n        v = mapper(v, i);\n      }\n\n      this.setValue(v);\n      i++;\n    }\n  }\n\n  disconnected() {\n    // Pause iteration while disconnected\n    this._reconnectPromise = new Promise(\n      (resolve) => (this._reconnectResolver = resolve)\n    );\n  }\n\n  reconnected() {\n    // Resume iteration when reconnected\n    this._reconnectPromise = undefined;\n    this._reconnectResolver!();\n  }\n}\n\n/**\n * A directive that renders the items of an async iterable[1], replacing\n * previous values with new values, so that only one value is ever rendered\n * at a time. This directive may be used in any expression type.\n *\n * Async iterables are objects with a [Symbol.asyncIterator] method, which\n * returns an iterator who's `next()` method returns a Promise. When a new\n * value is available, the Promise resolves and the value is rendered to the\n * Part controlled by the directive. If another value other than this\n * directive has been set on the Part, the iterable will no longer be listened\n * to and new values won't be written to the Part.\n *\n * [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n *\n * @param value An async iterable\n * @param mapper An optional function that maps from (value, index) to another\n *     value. Useful for generating templates for each item in the iterable.\n */\nexport const asyncReplace = directive(AsyncReplaceDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {AsyncReplaceDirective};\n"]}