diff --git a/components-chromium/paper-tooltip/paper-tooltip.js b/components-chromium/paper-tooltip/paper-tooltip.js
index 853eee1990258..e5b650de76462 100644
--- a/components-chromium/paper-tooltip/paper-tooltip.js
+++ b/components-chromium/paper-tooltip/paper-tooltip.js
@@ -74,7 +74,6 @@ Polymer({
         color: var(--paper-tooltip-text-color, white);
         padding: 8px;
         border-radius: 2px;
-        @apply --paper-tooltip;
       }
 
       @keyframes keyFrameScaleUp {
@@ -222,7 +221,7 @@ Polymer({
       }
     </style>
 
-    <div id="tooltip" class="hidden">
+    <div id="tooltip" class="hidden" part="tooltip">
       <slot></slot>
     </div>
 `,
@@ -311,12 +310,16 @@ Polymer({
 
   /**
    * Returns the target element that this tooltip is anchored to. It is
-   * either the element given by the `for` attribute, or the immediate parent
-   * of the tooltip.
+   * either the element given by the `for` attribute, the element manually
+   * specified through the `target` attribute, or the immediate parent of
+   * the tooltip.
    *
    * @type {Node}
    */
   get target() {
+    if (this._manualTarget)
+      return this._manualTarget;
+
     var parentNode = dom(this).parentNode;
     // If the parentNode is a document fragment, then we need to use the host.
     var ownerRoot = dom(this).getOwnerRoot();
@@ -331,6 +334,15 @@ Polymer({
     return target;
   },
 
+  /**
+   * Sets the target element that this tooltip will be anchored to.
+   * @param {Node} target
+   */
+  set target(target) {
+    this._manualTarget = target;
+    this._findTarget();
+  },
+
   /**
    * @return {void}
    */
@@ -429,13 +441,16 @@ Polymer({
    * @return {void}
    */
   updatePosition: function() {
-    if (!this._target || !this.offsetParent)
+    if (!this._target)
+      return;
+    var offsetParent = this._composedOffsetParent();
+    if (!offsetParent)
       return;
     var offset = this.offset;
     // If a marginTop has been provided by the user (pre 1.0.3), use it.
     if (this.marginTop != 14 && this.offset == 14)
       offset = this.marginTop;
-    var parentRect = this.offsetParent.getBoundingClientRect();
+    var parentRect = offsetParent.getBoundingClientRect();
     var targetRect = this._target.getBoundingClientRect();
     var thisRect = this.getBoundingClientRect();
     var horizontalCenterOffset = (targetRect.width - thisRect.width) / 2;
@@ -581,5 +596,45 @@ Polymer({
     }
     this.unlisten(this.$.tooltip, 'animationend', '_onAnimationEnd');
     this.unlisten(this, 'mouseenter', 'hide');
+  },
+
+  /**
+   * Polyfills the old offsetParent behavior from before the spec was changed:
+   * https://github.com/w3c/csswg-drafts/issues/159
+   */
+  _composedOffsetParent: function() {
+    // Do an initial walk to check for display:none ancestors.
+    for (let ancestor = this; ancestor; ancestor = flatTreeParent(ancestor)) {
+      if (!(ancestor instanceof Element))
+        continue;
+      if (getComputedStyle(ancestor).display === 'none')
+        return null;
+    }
+
+    for (let ancestor = flatTreeParent(this); ancestor; ancestor = flatTreeParent(ancestor)) {
+      if (!(ancestor instanceof Element))
+        continue;
+      const style = getComputedStyle(ancestor);
+      if (style.display === 'contents') {
+        // display:contents nodes aren't in the layout tree so they should be skipped.
+        continue;
+      }
+      if (style.position !== 'static') {
+        return ancestor;
+      }
+      if (ancestor.tagName === 'BODY')
+        return ancestor;
+    }
+    return null;
+
+    function flatTreeParent(element) {
+      if (element.assignedSlot) {
+        return element.assignedSlot;
+      }
+      if (element.parentNode instanceof ShadowRoot) {
+        return element.parentNode.host;
+      }
+      return element.parentNode;
+    }
   }
 });
