# Copyright 2020 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//third_party/protobuf/proto_library.gni")

# src/proto/connections

proto_library("offline_wire_formats_proto") {
  sources = [ "src/proto/connections/offline_wire_formats.proto" ]
  proto_out_dir = "third_party/nearby/proto/connections"
}

proto_library("web_rtc_signaling_frames_proto") {
  sources = [ "src/proto/mediums/web_rtc_signaling_frames.proto" ]
  proto_out_dir = "third_party/nearby/proto/mediums"
}

# src/proto

proto_library("connections_enums_proto") {
  sources = [ "src/proto/connections_enums.proto" ]
  proto_out_dir = "third_party/nearby/proto"
}

# Nearby Config

config("nearby_include_config") {
  include_dirs = [
    "src/cpp",
    "$root_gen_dir/third_party/nearby",

    # For WebRTC APIs.
    "//third_party",
  ]
}

# src/cpp/platform/impl/shared

source_set("platform_impl_shared_file") {
  public_configs = [ ":nearby_include_config" ]
  sources = [ "src/cpp/platform/impl/shared/file.cc" ]
  public = [ "src/cpp/platform/impl/shared/file.h" ]
  public_deps = [
    ":platform_api_platform",
    ":platform_public_types",
    "//third_party/abseil-cpp:absl",
  ]
}

# src/cpp/platform/api

source_set("platform_api_comm") {
  public_configs = [ ":nearby_include_config" ]
  sources = [
    "src/cpp/platform/api/ble.h",
    "src/cpp/platform/api/ble_v2.h",
    "src/cpp/platform/api/bluetooth_adapter.h",
    "src/cpp/platform/api/bluetooth_classic.h",
    "src/cpp/platform/api/server_sync.h",
    "src/cpp/platform/api/webrtc.h",
    "src/cpp/platform/api/wifi.h",
    "src/cpp/platform/api/wifi_lan.h",
  ]
  public_deps = [
    ":offline_wire_formats_proto",
    ":platform_base",
    ":platform_base_cancellation_flag",
    "//third_party/abseil-cpp:absl",
    "//third_party/webrtc_overrides:webrtc_component",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

source_set("platform_api_types") {
  public_configs = [ ":nearby_include_config" ]
  sources = [
    "src/cpp/platform/api/atomic_boolean.h",
    "src/cpp/platform/api/atomic_reference.h",
    "src/cpp/platform/api/cancelable.h",
    "src/cpp/platform/api/condition_variable.h",
    "src/cpp/platform/api/count_down_latch.h",
    "src/cpp/platform/api/crypto.h",
    "src/cpp/platform/api/executor.h",
    "src/cpp/platform/api/future.h",
    "src/cpp/platform/api/input_file.h",
    "src/cpp/platform/api/listenable_future.h",
    "src/cpp/platform/api/log_message.h",
    "src/cpp/platform/api/mutex.h",
    "src/cpp/platform/api/output_file.h",
    "src/cpp/platform/api/scheduled_executor.h",
    "src/cpp/platform/api/settable_future.h",
    "src/cpp/platform/api/submittable_executor.h",
    "src/cpp/platform/api/system_clock.h",
  ]
  public_deps = [
    ":platform_base",
    "//third_party/abseil-cpp:absl",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

source_set("platform_api_platform") {
  public_configs = [ ":nearby_include_config" ]
  public = [ "src/cpp/platform/api/platform.h" ]
  public_deps = [
    ":platform_api_comm",
    ":platform_api_types",
    ":platform_base",
    "//third_party/abseil-cpp:absl",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

# src/cpp/platform/base

source_set("platform_base") {
  public_configs = [ ":nearby_include_config" ]
  sources = [
    "src/cpp/platform/base/base64_utils.cc",
    "src/cpp/platform/base/bluetooth_utils.cc",
    "src/cpp/platform/base/input_stream.cc",
    "src/cpp/platform/base/prng.cc",
  ]
  public = [
    "src/cpp/platform/base/base64_utils.h",
    "src/cpp/platform/base/bluetooth_utils.h",
    "src/cpp/platform/base/byte_array.h",
    "src/cpp/platform/base/callable.h",
    "src/cpp/platform/base/exception.h",
    "src/cpp/platform/base/feature_flags.h",
    "src/cpp/platform/base/input_stream.h",
    "src/cpp/platform/base/listeners.h",
    "src/cpp/platform/base/output_stream.h",
    "src/cpp/platform/base/payload_id.h",
    "src/cpp/platform/base/prng.h",
    "src/cpp/platform/base/runnable.h",
    "src/cpp/platform/base/socket.h",
    "src/cpp/platform/base/types.h",
  ]
  public_deps = [ "//third_party/abseil-cpp:absl" ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

source_set("platform_base_util") {
  public_configs = [ ":nearby_include_config" ]
  sources = [
    "src/cpp/platform/base/base_input_stream.cc",
    "src/cpp/platform/base/base_pipe.cc",
  ]
  public = [
    "src/cpp/platform/base/base_input_stream.h",
    "src/cpp/platform/base/base_mutex_lock.h",
    "src/cpp/platform/base/base_pipe.h",
  ]
  public_deps = [
    ":platform_api_types",
    ":platform_base",
    "//third_party/abseil-cpp:absl",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

source_set("platform_base_logging") {
  public_configs = [ ":nearby_include_config" ]
  public = [ "src/cpp/platform/base/logging.h" ]
  public_deps = [
    ":platform_api_platform",
    ":platform_api_types",
    "//base:base",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

source_set("platform_base_cancellation_flag") {
  public_configs = [ ":nearby_include_config" ]
  sources = [ "src/cpp/platform/base/cancellation_flag.cc" ]
  public = [ "src/cpp/platform/base/cancellation_flag.h" ]
  public_deps = [
    ":platform_base",
    ":platform_base_util",
    "//third_party/abseil-cpp:absl",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

# src/cpp/platform/public

source_set("platform_public_types") {
  public_configs = [ ":nearby_include_config" ]
  sources = [
    "src/cpp/platform/public/monitored_runnable.cc",
    "src/cpp/platform/public/pending_job_registry.cc",
    "src/cpp/platform/public/pipe.cc",
  ]
  public = [
    "src/cpp/platform/public/atomic_boolean.h",
    "src/cpp/platform/public/atomic_reference.h",
    "src/cpp/platform/public/cancelable.h",
    "src/cpp/platform/public/cancelable_alarm.h",
    "src/cpp/platform/public/condition_variable.h",
    "src/cpp/platform/public/count_down_latch.h",
    "src/cpp/platform/public/crypto.h",
    "src/cpp/platform/public/file.h",
    "src/cpp/platform/public/future.h",
    "src/cpp/platform/public/logging.h",
    "src/cpp/platform/public/monitored_runnable.h",
    "src/cpp/platform/public/multi_thread_executor.h",
    "src/cpp/platform/public/mutex.h",
    "src/cpp/platform/public/mutex_lock.h",
    "src/cpp/platform/public/pending_job_registry.h",
    "src/cpp/platform/public/pipe.h",
    "src/cpp/platform/public/scheduled_executor.h",
    "src/cpp/platform/public/settable_future.h",
    "src/cpp/platform/public/single_thread_executor.h",
    "src/cpp/platform/public/submittable_executor.h",
    "src/cpp/platform/public/system_clock.h",
  ]
  public_deps = [
    ":platform_api_platform",
    ":platform_api_types",
    ":platform_base",
    ":platform_base_cancellation_flag",
    ":platform_base_logging",
    ":platform_base_util",
    ":platform_public_logging",
    "//third_party/abseil-cpp:absl",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

source_set("platform_public_comm") {
  public_configs = [ ":nearby_include_config" ]
  sources = [
    "src/cpp/platform/public/ble.cc",
    "src/cpp/platform/public/bluetooth_classic.cc",
    "src/cpp/platform/public/wifi_lan.cc",
  ]
  public = [
    "src/cpp/platform/public/ble.h",
    "src/cpp/platform/public/bluetooth_adapter.h",
    "src/cpp/platform/public/bluetooth_classic.h",
    "src/cpp/platform/public/webrtc.h",
    "src/cpp/platform/public/wifi_lan.h",
  ]
  public_deps = [
    ":platform_api_comm",
    ":platform_api_platform",
    ":platform_base",
    ":platform_public_logging",
    ":platform_public_types",
    "//third_party/abseil-cpp:absl",
    "//third_party/webrtc_overrides:webrtc_component",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

source_set("platform_public_logging") {
  public_configs = [ ":nearby_include_config" ]
  public = [ "src/cpp/platform/public/logging.h" ]
  public_deps = [ ":platform_base_logging" ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

# src/cpp/core

source_set("core") {
  public_configs = [ ":nearby_include_config" ]
  sources = [ "src/cpp/core/core.cc" ]
  public = [ "src/cpp/core/core.h" ]
  public_deps = [
    ":connections_enums_proto",
    ":core_internal",
    ":core_types",
    ":platform_public_comm",
    ":platform_public_logging",
    ":platform_public_types",
    "//third_party/abseil-cpp:absl",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

source_set("core_types") {
  public_configs = [ ":nearby_include_config" ]
  sources = [ "src/cpp/core/strategy.cc" ]
  public = [
    "src/cpp/core/listeners.h",
    "src/cpp/core/options.h",
    "src/cpp/core/params.h",
    "src/cpp/core/payload.h",
    "src/cpp/core/status.h",
    "src/cpp/core/strategy.h",
  ]
  public_deps = [
    ":connections_enums_proto",
    ":platform_base",
    ":platform_public_comm",
    ":platform_public_logging",
    ":platform_public_types",
    "//third_party/abseil-cpp:absl",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

# src/cpp/core/internal

source_set("core_internal") {
  public_configs = [ ":nearby_include_config" ]
  sources = [
    "src/cpp/core/internal/base_endpoint_channel.cc",
    "src/cpp/core/internal/base_pcp_handler.cc",
    "src/cpp/core/internal/ble_advertisement.cc",
    "src/cpp/core/internal/ble_endpoint_channel.cc",
    "src/cpp/core/internal/bluetooth_bwu_handler.cc",
    "src/cpp/core/internal/bluetooth_device_name.cc",
    "src/cpp/core/internal/bluetooth_endpoint_channel.cc",
    "src/cpp/core/internal/bwu_manager.cc",
    "src/cpp/core/internal/client_proxy.cc",
    "src/cpp/core/internal/encryption_runner.cc",
    "src/cpp/core/internal/endpoint_channel_manager.cc",
    "src/cpp/core/internal/endpoint_manager.cc",
    "src/cpp/core/internal/injected_bluetooth_device_store.cc",
    "src/cpp/core/internal/internal_payload.cc",
    "src/cpp/core/internal/internal_payload_factory.cc",
    "src/cpp/core/internal/offline_frames.cc",
    "src/cpp/core/internal/offline_frames_validator.cc",
    "src/cpp/core/internal/offline_service_controller.cc",
    "src/cpp/core/internal/p2p_cluster_pcp_handler.cc",
    "src/cpp/core/internal/p2p_point_to_point_pcp_handler.cc",
    "src/cpp/core/internal/p2p_star_pcp_handler.cc",
    "src/cpp/core/internal/payload_manager.cc",
    "src/cpp/core/internal/pcp_manager.cc",
    "src/cpp/core/internal/service_controller_router.cc",
    "src/cpp/core/internal/webrtc_bwu_handler.cc",
    "src/cpp/core/internal/webrtc_endpoint_channel.cc",
    "src/cpp/core/internal/wifi_lan_bwu_handler.cc",
    "src/cpp/core/internal/wifi_lan_endpoint_channel.cc",
    "src/cpp/core/internal/wifi_lan_service_info.cc",
  ]
  public = [
    "src/cpp/core/internal/base_bwu_handler.h",
    "src/cpp/core/internal/base_endpoint_channel.h",
    "src/cpp/core/internal/base_pcp_handler.h",
    "src/cpp/core/internal/ble_advertisement.h",
    "src/cpp/core/internal/ble_endpoint_channel.h",
    "src/cpp/core/internal/bluetooth_bwu_handler.h",
    "src/cpp/core/internal/bluetooth_device_name.h",
    "src/cpp/core/internal/bluetooth_endpoint_channel.h",
    "src/cpp/core/internal/bwu_handler.h",
    "src/cpp/core/internal/bwu_manager.h",
    "src/cpp/core/internal/client_proxy.h",
    "src/cpp/core/internal/encryption_runner.h",
    "src/cpp/core/internal/endpoint_channel.h",
    "src/cpp/core/internal/endpoint_channel_manager.h",
    "src/cpp/core/internal/endpoint_manager.h",
    "src/cpp/core/internal/injected_bluetooth_device_store.h",
    "src/cpp/core/internal/internal_payload.h",
    "src/cpp/core/internal/internal_payload_factory.h",
    "src/cpp/core/internal/message_lite.h",
    "src/cpp/core/internal/offline_frames.h",
    "src/cpp/core/internal/offline_frames_validator.h",
    "src/cpp/core/internal/offline_service_controller.h",
    "src/cpp/core/internal/p2p_cluster_pcp_handler.h",
    "src/cpp/core/internal/p2p_point_to_point_pcp_handler.h",
    "src/cpp/core/internal/p2p_star_pcp_handler.h",
    "src/cpp/core/internal/payload_manager.h",
    "src/cpp/core/internal/pcp.h",
    "src/cpp/core/internal/pcp_handler.h",
    "src/cpp/core/internal/pcp_manager.h",
    "src/cpp/core/internal/service_controller.h",
    "src/cpp/core/internal/service_controller_router.h",
    "src/cpp/core/internal/webrtc_bwu_handler.h",
    "src/cpp/core/internal/webrtc_endpoint_channel.h",
    "src/cpp/core/internal/wifi_lan_bwu_handler.h",
    "src/cpp/core/internal/wifi_lan_endpoint_channel.h",
    "src/cpp/core/internal/wifi_lan_service_info.h",
  ]
  public_deps = [
    ":connections_enums_proto",
    ":core_internal_mediums",
    ":core_internal_mediums_webrtc",
    ":core_types",
    ":offline_wire_formats_proto",
    ":platform_base",
    ":platform_base_cancellation_flag",
    ":platform_base_util",
    ":platform_public_comm",
    ":platform_public_logging",
    ":platform_public_types",
    "//third_party/abseil-cpp:absl",
    "//third_party/protobuf:protobuf_lite",
    "//third_party/ukey2",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

source_set("core_internal_test") {
  testonly = true
  public_configs = [ ":nearby_include_config" ]
  public = [ "src/cpp/core/internal/mock_service_controller.h" ]
  deps = [
    ":core_internal",
    "//third_party/googletest:gmock",
  ]
}

# src/cpp/core/internal/mediums
source_set("core_internal_mediums") {
  public_configs = [ ":nearby_include_config" ]
  sources = [
    "src/cpp/core/internal/mediums/ble.cc",
    "src/cpp/core/internal/mediums/ble_v2/advertisement_read_result.cc",
    "src/cpp/core/internal/mediums/ble_v2/ble_advertisement.cc",
    "src/cpp/core/internal/mediums/ble_v2/ble_advertisement_header.cc",
    "src/cpp/core/internal/mediums/ble_v2/ble_packet.cc",
    "src/cpp/core/internal/mediums/bloom_filter.cc",
    "src/cpp/core/internal/mediums/bluetooth_classic.cc",
    "src/cpp/core/internal/mediums/bluetooth_radio.cc",
    "src/cpp/core/internal/mediums/mediums.cc",
    "src/cpp/core/internal/mediums/uuid.cc",
    "src/cpp/core/internal/mediums/webrtc.cc",
    "src/cpp/core/internal/mediums/wifi_lan.cc",
  ]
  public = [
    "src/cpp/core/internal/mediums/ble.h",
    "src/cpp/core/internal/mediums/ble_v2/advertisement_read_result.h",
    "src/cpp/core/internal/mediums/ble_v2/ble_advertisement.h",
    "src/cpp/core/internal/mediums/ble_v2/ble_advertisement_header.h",
    "src/cpp/core/internal/mediums/ble_v2/ble_packet.h",
    "src/cpp/core/internal/mediums/ble_v2/ble_peripheral.h",
    "src/cpp/core/internal/mediums/bloom_filter.h",
    "src/cpp/core/internal/mediums/bluetooth_classic.h",
    "src/cpp/core/internal/mediums/bluetooth_radio.h",
    "src/cpp/core/internal/mediums/lost_entity_tracker.h",
    "src/cpp/core/internal/mediums/mediums.h",
    "src/cpp/core/internal/mediums/uuid.h",
    "src/cpp/core/internal/mediums/webrtc.h",
    "src/cpp/core/internal/mediums/wifi_lan.h",
  ]
  public_deps = [
    ":core_internal_mediums_webrtc",
    ":core_types",
    ":platform_base",
    ":platform_base_cancellation_flag",
    ":platform_base_util",
    ":platform_public_comm",
    ":platform_public_logging",
    ":platform_public_types",
    ":web_rtc_signaling_frames_proto",
    "//third_party/abseil-cpp:absl",
    "//third_party/smhasher:murmurhash3",
    "//third_party/webrtc_overrides:webrtc_component",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

source_set("core_internal_mediums_webrtc") {
  public_configs = [ ":nearby_include_config" ]
  sources = [
    "src/cpp/core/internal/mediums/utils.cc",
    "src/cpp/core/internal/mediums/webrtc/connection_flow.cc",
    "src/cpp/core/internal/mediums/webrtc/peer_id.cc",
    "src/cpp/core/internal/mediums/webrtc/signaling_frames.cc",
    "src/cpp/core/internal/mediums/webrtc/webrtc_socket.cc",
  ]
  public = [
    "src/cpp/core/internal/mediums/utils.h",
    "src/cpp/core/internal/mediums/webrtc/connection_flow.h",
    "src/cpp/core/internal/mediums/webrtc/data_channel_listener.h",
    "src/cpp/core/internal/mediums/webrtc/local_ice_candidate_listener.h",
    "src/cpp/core/internal/mediums/webrtc/peer_id.h",
    "src/cpp/core/internal/mediums/webrtc/session_description_wrapper.h",
    "src/cpp/core/internal/mediums/webrtc/signaling_frames.h",
    "src/cpp/core/internal/mediums/webrtc/webrtc_socket.h",
    "src/cpp/core/internal/mediums/webrtc/webrtc_socket_wrapper.h",
  ]
  public_deps = [
    ":core_types",
    ":platform_base",
    ":platform_public_comm",
    ":platform_public_logging",
    ":platform_public_types",
    ":web_rtc_signaling_frames_proto",
    "//third_party/abseil-cpp:absl",
    "//third_party/webrtc_overrides:webrtc_component",
  ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}
