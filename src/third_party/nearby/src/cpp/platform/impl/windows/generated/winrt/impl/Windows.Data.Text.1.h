// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Data_Text_1_H
#define WINRT_Windows_Data_Text_1_H
#include "winrt/impl/Windows.Data.Text.0.h"
WINRT_EXPORT namespace winrt::Windows::Data::Text
{
    struct __declspec(empty_bases) IAlternateWordForm :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAlternateWordForm>
    {
        IAlternateWordForm(std::nullptr_t = nullptr) noexcept {}
        IAlternateWordForm(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAlternateWordForm(IAlternateWordForm const&) noexcept = default;
        IAlternateWordForm(IAlternateWordForm&&) noexcept = default;
        IAlternateWordForm& operator=(IAlternateWordForm const&) & noexcept = default;
        IAlternateWordForm& operator=(IAlternateWordForm&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISelectableWordSegment :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISelectableWordSegment>
    {
        ISelectableWordSegment(std::nullptr_t = nullptr) noexcept {}
        ISelectableWordSegment(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISelectableWordSegment(ISelectableWordSegment const&) noexcept = default;
        ISelectableWordSegment(ISelectableWordSegment&&) noexcept = default;
        ISelectableWordSegment& operator=(ISelectableWordSegment const&) & noexcept = default;
        ISelectableWordSegment& operator=(ISelectableWordSegment&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISelectableWordsSegmenter :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISelectableWordsSegmenter>
    {
        ISelectableWordsSegmenter(std::nullptr_t = nullptr) noexcept {}
        ISelectableWordsSegmenter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISelectableWordsSegmenter(ISelectableWordsSegmenter const&) noexcept = default;
        ISelectableWordsSegmenter(ISelectableWordsSegmenter&&) noexcept = default;
        ISelectableWordsSegmenter& operator=(ISelectableWordsSegmenter const&) & noexcept = default;
        ISelectableWordsSegmenter& operator=(ISelectableWordsSegmenter&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISelectableWordsSegmenterFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISelectableWordsSegmenterFactory>
    {
        ISelectableWordsSegmenterFactory(std::nullptr_t = nullptr) noexcept {}
        ISelectableWordsSegmenterFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISelectableWordsSegmenterFactory(ISelectableWordsSegmenterFactory const&) noexcept = default;
        ISelectableWordsSegmenterFactory(ISelectableWordsSegmenterFactory&&) noexcept = default;
        ISelectableWordsSegmenterFactory& operator=(ISelectableWordsSegmenterFactory const&) & noexcept = default;
        ISelectableWordsSegmenterFactory& operator=(ISelectableWordsSegmenterFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISemanticTextQuery :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISemanticTextQuery>
    {
        ISemanticTextQuery(std::nullptr_t = nullptr) noexcept {}
        ISemanticTextQuery(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISemanticTextQuery(ISemanticTextQuery const&) noexcept = default;
        ISemanticTextQuery(ISemanticTextQuery&&) noexcept = default;
        ISemanticTextQuery& operator=(ISemanticTextQuery const&) & noexcept = default;
        ISemanticTextQuery& operator=(ISemanticTextQuery&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISemanticTextQueryFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISemanticTextQueryFactory>
    {
        ISemanticTextQueryFactory(std::nullptr_t = nullptr) noexcept {}
        ISemanticTextQueryFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISemanticTextQueryFactory(ISemanticTextQueryFactory const&) noexcept = default;
        ISemanticTextQueryFactory(ISemanticTextQueryFactory&&) noexcept = default;
        ISemanticTextQueryFactory& operator=(ISemanticTextQueryFactory const&) & noexcept = default;
        ISemanticTextQueryFactory& operator=(ISemanticTextQueryFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextConversionGenerator :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextConversionGenerator>
    {
        ITextConversionGenerator(std::nullptr_t = nullptr) noexcept {}
        ITextConversionGenerator(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextConversionGenerator(ITextConversionGenerator const&) noexcept = default;
        ITextConversionGenerator(ITextConversionGenerator&&) noexcept = default;
        ITextConversionGenerator& operator=(ITextConversionGenerator const&) & noexcept = default;
        ITextConversionGenerator& operator=(ITextConversionGenerator&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextConversionGeneratorFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextConversionGeneratorFactory>
    {
        ITextConversionGeneratorFactory(std::nullptr_t = nullptr) noexcept {}
        ITextConversionGeneratorFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextConversionGeneratorFactory(ITextConversionGeneratorFactory const&) noexcept = default;
        ITextConversionGeneratorFactory(ITextConversionGeneratorFactory&&) noexcept = default;
        ITextConversionGeneratorFactory& operator=(ITextConversionGeneratorFactory const&) & noexcept = default;
        ITextConversionGeneratorFactory& operator=(ITextConversionGeneratorFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextPhoneme :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextPhoneme>
    {
        ITextPhoneme(std::nullptr_t = nullptr) noexcept {}
        ITextPhoneme(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextPhoneme(ITextPhoneme const&) noexcept = default;
        ITextPhoneme(ITextPhoneme&&) noexcept = default;
        ITextPhoneme& operator=(ITextPhoneme const&) & noexcept = default;
        ITextPhoneme& operator=(ITextPhoneme&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextPredictionGenerator :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextPredictionGenerator>
    {
        ITextPredictionGenerator(std::nullptr_t = nullptr) noexcept {}
        ITextPredictionGenerator(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextPredictionGenerator(ITextPredictionGenerator const&) noexcept = default;
        ITextPredictionGenerator(ITextPredictionGenerator&&) noexcept = default;
        ITextPredictionGenerator& operator=(ITextPredictionGenerator const&) & noexcept = default;
        ITextPredictionGenerator& operator=(ITextPredictionGenerator&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextPredictionGenerator2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextPredictionGenerator2>
    {
        ITextPredictionGenerator2(std::nullptr_t = nullptr) noexcept {}
        ITextPredictionGenerator2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextPredictionGenerator2(ITextPredictionGenerator2 const&) noexcept = default;
        ITextPredictionGenerator2(ITextPredictionGenerator2&&) noexcept = default;
        ITextPredictionGenerator2& operator=(ITextPredictionGenerator2 const&) & noexcept = default;
        ITextPredictionGenerator2& operator=(ITextPredictionGenerator2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextPredictionGeneratorFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextPredictionGeneratorFactory>
    {
        ITextPredictionGeneratorFactory(std::nullptr_t = nullptr) noexcept {}
        ITextPredictionGeneratorFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextPredictionGeneratorFactory(ITextPredictionGeneratorFactory const&) noexcept = default;
        ITextPredictionGeneratorFactory(ITextPredictionGeneratorFactory&&) noexcept = default;
        ITextPredictionGeneratorFactory& operator=(ITextPredictionGeneratorFactory const&) & noexcept = default;
        ITextPredictionGeneratorFactory& operator=(ITextPredictionGeneratorFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextReverseConversionGenerator :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextReverseConversionGenerator>
    {
        ITextReverseConversionGenerator(std::nullptr_t = nullptr) noexcept {}
        ITextReverseConversionGenerator(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextReverseConversionGenerator(ITextReverseConversionGenerator const&) noexcept = default;
        ITextReverseConversionGenerator(ITextReverseConversionGenerator&&) noexcept = default;
        ITextReverseConversionGenerator& operator=(ITextReverseConversionGenerator const&) & noexcept = default;
        ITextReverseConversionGenerator& operator=(ITextReverseConversionGenerator&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextReverseConversionGenerator2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextReverseConversionGenerator2>
    {
        ITextReverseConversionGenerator2(std::nullptr_t = nullptr) noexcept {}
        ITextReverseConversionGenerator2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextReverseConversionGenerator2(ITextReverseConversionGenerator2 const&) noexcept = default;
        ITextReverseConversionGenerator2(ITextReverseConversionGenerator2&&) noexcept = default;
        ITextReverseConversionGenerator2& operator=(ITextReverseConversionGenerator2 const&) & noexcept = default;
        ITextReverseConversionGenerator2& operator=(ITextReverseConversionGenerator2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextReverseConversionGeneratorFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextReverseConversionGeneratorFactory>
    {
        ITextReverseConversionGeneratorFactory(std::nullptr_t = nullptr) noexcept {}
        ITextReverseConversionGeneratorFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextReverseConversionGeneratorFactory(ITextReverseConversionGeneratorFactory const&) noexcept = default;
        ITextReverseConversionGeneratorFactory(ITextReverseConversionGeneratorFactory&&) noexcept = default;
        ITextReverseConversionGeneratorFactory& operator=(ITextReverseConversionGeneratorFactory const&) & noexcept = default;
        ITextReverseConversionGeneratorFactory& operator=(ITextReverseConversionGeneratorFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IUnicodeCharactersStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IUnicodeCharactersStatics>
    {
        IUnicodeCharactersStatics(std::nullptr_t = nullptr) noexcept {}
        IUnicodeCharactersStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IUnicodeCharactersStatics(IUnicodeCharactersStatics const&) noexcept = default;
        IUnicodeCharactersStatics(IUnicodeCharactersStatics&&) noexcept = default;
        IUnicodeCharactersStatics& operator=(IUnicodeCharactersStatics const&) & noexcept = default;
        IUnicodeCharactersStatics& operator=(IUnicodeCharactersStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWordSegment :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWordSegment>
    {
        IWordSegment(std::nullptr_t = nullptr) noexcept {}
        IWordSegment(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWordSegment(IWordSegment const&) noexcept = default;
        IWordSegment(IWordSegment&&) noexcept = default;
        IWordSegment& operator=(IWordSegment const&) & noexcept = default;
        IWordSegment& operator=(IWordSegment&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWordsSegmenter :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWordsSegmenter>
    {
        IWordsSegmenter(std::nullptr_t = nullptr) noexcept {}
        IWordsSegmenter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWordsSegmenter(IWordsSegmenter const&) noexcept = default;
        IWordsSegmenter(IWordsSegmenter&&) noexcept = default;
        IWordsSegmenter& operator=(IWordsSegmenter const&) & noexcept = default;
        IWordsSegmenter& operator=(IWordsSegmenter&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWordsSegmenterFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWordsSegmenterFactory>
    {
        IWordsSegmenterFactory(std::nullptr_t = nullptr) noexcept {}
        IWordsSegmenterFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWordsSegmenterFactory(IWordsSegmenterFactory const&) noexcept = default;
        IWordsSegmenterFactory(IWordsSegmenterFactory&&) noexcept = default;
        IWordsSegmenterFactory& operator=(IWordsSegmenterFactory const&) & noexcept = default;
        IWordsSegmenterFactory& operator=(IWordsSegmenterFactory&&) & noexcept = default;
    };
}
#endif
