// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_ApplicationModel_Background_1_H
#define WINRT_Windows_ApplicationModel_Background_1_H
#include "winrt/impl/Windows.ApplicationModel.Background.0.h"
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Background
{
    struct __declspec(empty_bases) IActivitySensorTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IActivitySensorTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IActivitySensorTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IActivitySensorTrigger(std::nullptr_t = nullptr) noexcept {}
        IActivitySensorTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IActivitySensorTrigger(IActivitySensorTrigger const&) noexcept = default;
        IActivitySensorTrigger(IActivitySensorTrigger&&) noexcept = default;
        IActivitySensorTrigger& operator=(IActivitySensorTrigger const&) & noexcept = default;
        IActivitySensorTrigger& operator=(IActivitySensorTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IActivitySensorTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IActivitySensorTriggerFactory>
    {
        IActivitySensorTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        IActivitySensorTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IActivitySensorTriggerFactory(IActivitySensorTriggerFactory const&) noexcept = default;
        IActivitySensorTriggerFactory(IActivitySensorTriggerFactory&&) noexcept = default;
        IActivitySensorTriggerFactory& operator=(IActivitySensorTriggerFactory const&) & noexcept = default;
        IActivitySensorTriggerFactory& operator=(IActivitySensorTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAlarmApplicationManagerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAlarmApplicationManagerStatics>
    {
        IAlarmApplicationManagerStatics(std::nullptr_t = nullptr) noexcept {}
        IAlarmApplicationManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAlarmApplicationManagerStatics(IAlarmApplicationManagerStatics const&) noexcept = default;
        IAlarmApplicationManagerStatics(IAlarmApplicationManagerStatics&&) noexcept = default;
        IAlarmApplicationManagerStatics& operator=(IAlarmApplicationManagerStatics const&) & noexcept = default;
        IAlarmApplicationManagerStatics& operator=(IAlarmApplicationManagerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAppBroadcastTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppBroadcastTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IAppBroadcastTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IAppBroadcastTrigger(std::nullptr_t = nullptr) noexcept {}
        IAppBroadcastTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAppBroadcastTrigger(IAppBroadcastTrigger const&) noexcept = default;
        IAppBroadcastTrigger(IAppBroadcastTrigger&&) noexcept = default;
        IAppBroadcastTrigger& operator=(IAppBroadcastTrigger const&) & noexcept = default;
        IAppBroadcastTrigger& operator=(IAppBroadcastTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAppBroadcastTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppBroadcastTriggerFactory>
    {
        IAppBroadcastTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        IAppBroadcastTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAppBroadcastTriggerFactory(IAppBroadcastTriggerFactory const&) noexcept = default;
        IAppBroadcastTriggerFactory(IAppBroadcastTriggerFactory&&) noexcept = default;
        IAppBroadcastTriggerFactory& operator=(IAppBroadcastTriggerFactory const&) & noexcept = default;
        IAppBroadcastTriggerFactory& operator=(IAppBroadcastTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAppBroadcastTriggerProviderInfo :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppBroadcastTriggerProviderInfo>
    {
        IAppBroadcastTriggerProviderInfo(std::nullptr_t = nullptr) noexcept {}
        IAppBroadcastTriggerProviderInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAppBroadcastTriggerProviderInfo(IAppBroadcastTriggerProviderInfo const&) noexcept = default;
        IAppBroadcastTriggerProviderInfo(IAppBroadcastTriggerProviderInfo&&) noexcept = default;
        IAppBroadcastTriggerProviderInfo& operator=(IAppBroadcastTriggerProviderInfo const&) & noexcept = default;
        IAppBroadcastTriggerProviderInfo& operator=(IAppBroadcastTriggerProviderInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IApplicationTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IApplicationTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IApplicationTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IApplicationTrigger(std::nullptr_t = nullptr) noexcept {}
        IApplicationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IApplicationTrigger(IApplicationTrigger const&) noexcept = default;
        IApplicationTrigger(IApplicationTrigger&&) noexcept = default;
        IApplicationTrigger& operator=(IApplicationTrigger const&) & noexcept = default;
        IApplicationTrigger& operator=(IApplicationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IApplicationTriggerDetails :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IApplicationTriggerDetails>
    {
        IApplicationTriggerDetails(std::nullptr_t = nullptr) noexcept {}
        IApplicationTriggerDetails(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IApplicationTriggerDetails(IApplicationTriggerDetails const&) noexcept = default;
        IApplicationTriggerDetails(IApplicationTriggerDetails&&) noexcept = default;
        IApplicationTriggerDetails& operator=(IApplicationTriggerDetails const&) & noexcept = default;
        IApplicationTriggerDetails& operator=(IApplicationTriggerDetails&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAppointmentStoreNotificationTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppointmentStoreNotificationTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IAppointmentStoreNotificationTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IAppointmentStoreNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
        IAppointmentStoreNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAppointmentStoreNotificationTrigger(IAppointmentStoreNotificationTrigger const&) noexcept = default;
        IAppointmentStoreNotificationTrigger(IAppointmentStoreNotificationTrigger&&) noexcept = default;
        IAppointmentStoreNotificationTrigger& operator=(IAppointmentStoreNotificationTrigger const&) & noexcept = default;
        IAppointmentStoreNotificationTrigger& operator=(IAppointmentStoreNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundCondition :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundCondition>
    {
        IBackgroundCondition(std::nullptr_t = nullptr) noexcept {}
        IBackgroundCondition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundCondition(IBackgroundCondition const&) noexcept = default;
        IBackgroundCondition(IBackgroundCondition&&) noexcept = default;
        IBackgroundCondition& operator=(IBackgroundCondition const&) & noexcept = default;
        IBackgroundCondition& operator=(IBackgroundCondition&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundExecutionManagerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundExecutionManagerStatics>
    {
        IBackgroundExecutionManagerStatics(std::nullptr_t = nullptr) noexcept {}
        IBackgroundExecutionManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundExecutionManagerStatics(IBackgroundExecutionManagerStatics const&) noexcept = default;
        IBackgroundExecutionManagerStatics(IBackgroundExecutionManagerStatics&&) noexcept = default;
        IBackgroundExecutionManagerStatics& operator=(IBackgroundExecutionManagerStatics const&) & noexcept = default;
        IBackgroundExecutionManagerStatics& operator=(IBackgroundExecutionManagerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundExecutionManagerStatics2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundExecutionManagerStatics2>
    {
        IBackgroundExecutionManagerStatics2(std::nullptr_t = nullptr) noexcept {}
        IBackgroundExecutionManagerStatics2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundExecutionManagerStatics2(IBackgroundExecutionManagerStatics2 const&) noexcept = default;
        IBackgroundExecutionManagerStatics2(IBackgroundExecutionManagerStatics2&&) noexcept = default;
        IBackgroundExecutionManagerStatics2& operator=(IBackgroundExecutionManagerStatics2 const&) & noexcept = default;
        IBackgroundExecutionManagerStatics2& operator=(IBackgroundExecutionManagerStatics2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTask :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTask>
    {
        IBackgroundTask(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTask(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTask(IBackgroundTask const&) noexcept = default;
        IBackgroundTask(IBackgroundTask&&) noexcept = default;
        IBackgroundTask& operator=(IBackgroundTask const&) & noexcept = default;
        IBackgroundTask& operator=(IBackgroundTask&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskBuilder :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskBuilder>
    {
        IBackgroundTaskBuilder(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskBuilder(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskBuilder(IBackgroundTaskBuilder const&) noexcept = default;
        IBackgroundTaskBuilder(IBackgroundTaskBuilder&&) noexcept = default;
        IBackgroundTaskBuilder& operator=(IBackgroundTaskBuilder const&) & noexcept = default;
        IBackgroundTaskBuilder& operator=(IBackgroundTaskBuilder&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskBuilder2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskBuilder2>,
        impl::require<winrt::Windows::ApplicationModel::Background::IBackgroundTaskBuilder2, winrt::Windows::ApplicationModel::Background::IBackgroundTaskBuilder>
    {
        IBackgroundTaskBuilder2(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskBuilder2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskBuilder2(IBackgroundTaskBuilder2 const&) noexcept = default;
        IBackgroundTaskBuilder2(IBackgroundTaskBuilder2&&) noexcept = default;
        IBackgroundTaskBuilder2& operator=(IBackgroundTaskBuilder2 const&) & noexcept = default;
        IBackgroundTaskBuilder2& operator=(IBackgroundTaskBuilder2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskBuilder3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskBuilder3>,
        impl::require<winrt::Windows::ApplicationModel::Background::IBackgroundTaskBuilder3, winrt::Windows::ApplicationModel::Background::IBackgroundTaskBuilder>
    {
        IBackgroundTaskBuilder3(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskBuilder3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskBuilder3(IBackgroundTaskBuilder3 const&) noexcept = default;
        IBackgroundTaskBuilder3(IBackgroundTaskBuilder3&&) noexcept = default;
        IBackgroundTaskBuilder3& operator=(IBackgroundTaskBuilder3 const&) & noexcept = default;
        IBackgroundTaskBuilder3& operator=(IBackgroundTaskBuilder3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskBuilder4 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskBuilder4>,
        impl::require<winrt::Windows::ApplicationModel::Background::IBackgroundTaskBuilder4, winrt::Windows::ApplicationModel::Background::IBackgroundTaskBuilder>
    {
        IBackgroundTaskBuilder4(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskBuilder4(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskBuilder4(IBackgroundTaskBuilder4 const&) noexcept = default;
        IBackgroundTaskBuilder4(IBackgroundTaskBuilder4&&) noexcept = default;
        IBackgroundTaskBuilder4& operator=(IBackgroundTaskBuilder4 const&) & noexcept = default;
        IBackgroundTaskBuilder4& operator=(IBackgroundTaskBuilder4&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskBuilder5 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskBuilder5>
    {
        IBackgroundTaskBuilder5(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskBuilder5(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskBuilder5(IBackgroundTaskBuilder5 const&) noexcept = default;
        IBackgroundTaskBuilder5(IBackgroundTaskBuilder5&&) noexcept = default;
        IBackgroundTaskBuilder5& operator=(IBackgroundTaskBuilder5 const&) & noexcept = default;
        IBackgroundTaskBuilder5& operator=(IBackgroundTaskBuilder5&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskCompletedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskCompletedEventArgs>
    {
        IBackgroundTaskCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskCompletedEventArgs(IBackgroundTaskCompletedEventArgs const&) noexcept = default;
        IBackgroundTaskCompletedEventArgs(IBackgroundTaskCompletedEventArgs&&) noexcept = default;
        IBackgroundTaskCompletedEventArgs& operator=(IBackgroundTaskCompletedEventArgs const&) & noexcept = default;
        IBackgroundTaskCompletedEventArgs& operator=(IBackgroundTaskCompletedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskDeferral :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskDeferral>
    {
        IBackgroundTaskDeferral(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskDeferral(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskDeferral(IBackgroundTaskDeferral const&) noexcept = default;
        IBackgroundTaskDeferral(IBackgroundTaskDeferral&&) noexcept = default;
        IBackgroundTaskDeferral& operator=(IBackgroundTaskDeferral const&) & noexcept = default;
        IBackgroundTaskDeferral& operator=(IBackgroundTaskDeferral&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskInstance :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskInstance>
    {
        IBackgroundTaskInstance(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskInstance(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskInstance(IBackgroundTaskInstance const&) noexcept = default;
        IBackgroundTaskInstance(IBackgroundTaskInstance&&) noexcept = default;
        IBackgroundTaskInstance& operator=(IBackgroundTaskInstance const&) & noexcept = default;
        IBackgroundTaskInstance& operator=(IBackgroundTaskInstance&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskInstance2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskInstance2>,
        impl::require<winrt::Windows::ApplicationModel::Background::IBackgroundTaskInstance2, winrt::Windows::ApplicationModel::Background::IBackgroundTaskInstance>
    {
        IBackgroundTaskInstance2(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskInstance2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskInstance2(IBackgroundTaskInstance2 const&) noexcept = default;
        IBackgroundTaskInstance2(IBackgroundTaskInstance2&&) noexcept = default;
        IBackgroundTaskInstance2& operator=(IBackgroundTaskInstance2 const&) & noexcept = default;
        IBackgroundTaskInstance2& operator=(IBackgroundTaskInstance2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskInstance4 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskInstance4>,
        impl::require<winrt::Windows::ApplicationModel::Background::IBackgroundTaskInstance4, winrt::Windows::ApplicationModel::Background::IBackgroundTaskInstance>
    {
        IBackgroundTaskInstance4(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskInstance4(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskInstance4(IBackgroundTaskInstance4 const&) noexcept = default;
        IBackgroundTaskInstance4(IBackgroundTaskInstance4&&) noexcept = default;
        IBackgroundTaskInstance4& operator=(IBackgroundTaskInstance4 const&) & noexcept = default;
        IBackgroundTaskInstance4& operator=(IBackgroundTaskInstance4&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskProgressEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskProgressEventArgs>
    {
        IBackgroundTaskProgressEventArgs(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskProgressEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskProgressEventArgs(IBackgroundTaskProgressEventArgs const&) noexcept = default;
        IBackgroundTaskProgressEventArgs(IBackgroundTaskProgressEventArgs&&) noexcept = default;
        IBackgroundTaskProgressEventArgs& operator=(IBackgroundTaskProgressEventArgs const&) & noexcept = default;
        IBackgroundTaskProgressEventArgs& operator=(IBackgroundTaskProgressEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskRegistration :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskRegistration>
    {
        IBackgroundTaskRegistration(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskRegistration(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskRegistration(IBackgroundTaskRegistration const&) noexcept = default;
        IBackgroundTaskRegistration(IBackgroundTaskRegistration&&) noexcept = default;
        IBackgroundTaskRegistration& operator=(IBackgroundTaskRegistration const&) & noexcept = default;
        IBackgroundTaskRegistration& operator=(IBackgroundTaskRegistration&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskRegistration2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskRegistration2>,
        impl::require<winrt::Windows::ApplicationModel::Background::IBackgroundTaskRegistration2, winrt::Windows::ApplicationModel::Background::IBackgroundTaskRegistration>
    {
        IBackgroundTaskRegistration2(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskRegistration2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskRegistration2(IBackgroundTaskRegistration2 const&) noexcept = default;
        IBackgroundTaskRegistration2(IBackgroundTaskRegistration2&&) noexcept = default;
        IBackgroundTaskRegistration2& operator=(IBackgroundTaskRegistration2 const&) & noexcept = default;
        IBackgroundTaskRegistration2& operator=(IBackgroundTaskRegistration2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskRegistration3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskRegistration3>,
        impl::require<winrt::Windows::ApplicationModel::Background::IBackgroundTaskRegistration3, winrt::Windows::ApplicationModel::Background::IBackgroundTaskRegistration>
    {
        IBackgroundTaskRegistration3(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskRegistration3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskRegistration3(IBackgroundTaskRegistration3 const&) noexcept = default;
        IBackgroundTaskRegistration3(IBackgroundTaskRegistration3&&) noexcept = default;
        IBackgroundTaskRegistration3& operator=(IBackgroundTaskRegistration3 const&) & noexcept = default;
        IBackgroundTaskRegistration3& operator=(IBackgroundTaskRegistration3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskRegistrationGroup :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskRegistrationGroup>
    {
        IBackgroundTaskRegistrationGroup(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskRegistrationGroup(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskRegistrationGroup(IBackgroundTaskRegistrationGroup const&) noexcept = default;
        IBackgroundTaskRegistrationGroup(IBackgroundTaskRegistrationGroup&&) noexcept = default;
        IBackgroundTaskRegistrationGroup& operator=(IBackgroundTaskRegistrationGroup const&) & noexcept = default;
        IBackgroundTaskRegistrationGroup& operator=(IBackgroundTaskRegistrationGroup&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskRegistrationGroupFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskRegistrationGroupFactory>
    {
        IBackgroundTaskRegistrationGroupFactory(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskRegistrationGroupFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskRegistrationGroupFactory(IBackgroundTaskRegistrationGroupFactory const&) noexcept = default;
        IBackgroundTaskRegistrationGroupFactory(IBackgroundTaskRegistrationGroupFactory&&) noexcept = default;
        IBackgroundTaskRegistrationGroupFactory& operator=(IBackgroundTaskRegistrationGroupFactory const&) & noexcept = default;
        IBackgroundTaskRegistrationGroupFactory& operator=(IBackgroundTaskRegistrationGroupFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskRegistrationStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskRegistrationStatics>
    {
        IBackgroundTaskRegistrationStatics(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskRegistrationStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskRegistrationStatics(IBackgroundTaskRegistrationStatics const&) noexcept = default;
        IBackgroundTaskRegistrationStatics(IBackgroundTaskRegistrationStatics&&) noexcept = default;
        IBackgroundTaskRegistrationStatics& operator=(IBackgroundTaskRegistrationStatics const&) & noexcept = default;
        IBackgroundTaskRegistrationStatics& operator=(IBackgroundTaskRegistrationStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTaskRegistrationStatics2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTaskRegistrationStatics2>
    {
        IBackgroundTaskRegistrationStatics2(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTaskRegistrationStatics2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTaskRegistrationStatics2(IBackgroundTaskRegistrationStatics2 const&) noexcept = default;
        IBackgroundTaskRegistrationStatics2(IBackgroundTaskRegistrationStatics2&&) noexcept = default;
        IBackgroundTaskRegistrationStatics2& operator=(IBackgroundTaskRegistrationStatics2 const&) & noexcept = default;
        IBackgroundTaskRegistrationStatics2& operator=(IBackgroundTaskRegistrationStatics2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundTrigger>
    {
        IBackgroundTrigger(std::nullptr_t = nullptr) noexcept {}
        IBackgroundTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundTrigger(IBackgroundTrigger const&) noexcept = default;
        IBackgroundTrigger(IBackgroundTrigger&&) noexcept = default;
        IBackgroundTrigger& operator=(IBackgroundTrigger const&) & noexcept = default;
        IBackgroundTrigger& operator=(IBackgroundTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBackgroundWorkCostStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBackgroundWorkCostStatics>
    {
        IBackgroundWorkCostStatics(std::nullptr_t = nullptr) noexcept {}
        IBackgroundWorkCostStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBackgroundWorkCostStatics(IBackgroundWorkCostStatics const&) noexcept = default;
        IBackgroundWorkCostStatics(IBackgroundWorkCostStatics&&) noexcept = default;
        IBackgroundWorkCostStatics& operator=(IBackgroundWorkCostStatics const&) & noexcept = default;
        IBackgroundWorkCostStatics& operator=(IBackgroundWorkCostStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBluetoothLEAdvertisementPublisherTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBluetoothLEAdvertisementPublisherTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IBluetoothLEAdvertisementPublisherTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IBluetoothLEAdvertisementPublisherTrigger(std::nullptr_t = nullptr) noexcept {}
        IBluetoothLEAdvertisementPublisherTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBluetoothLEAdvertisementPublisherTrigger(IBluetoothLEAdvertisementPublisherTrigger const&) noexcept = default;
        IBluetoothLEAdvertisementPublisherTrigger(IBluetoothLEAdvertisementPublisherTrigger&&) noexcept = default;
        IBluetoothLEAdvertisementPublisherTrigger& operator=(IBluetoothLEAdvertisementPublisherTrigger const&) & noexcept = default;
        IBluetoothLEAdvertisementPublisherTrigger& operator=(IBluetoothLEAdvertisementPublisherTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBluetoothLEAdvertisementPublisherTrigger2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBluetoothLEAdvertisementPublisherTrigger2>
    {
        IBluetoothLEAdvertisementPublisherTrigger2(std::nullptr_t = nullptr) noexcept {}
        IBluetoothLEAdvertisementPublisherTrigger2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBluetoothLEAdvertisementPublisherTrigger2(IBluetoothLEAdvertisementPublisherTrigger2 const&) noexcept = default;
        IBluetoothLEAdvertisementPublisherTrigger2(IBluetoothLEAdvertisementPublisherTrigger2&&) noexcept = default;
        IBluetoothLEAdvertisementPublisherTrigger2& operator=(IBluetoothLEAdvertisementPublisherTrigger2 const&) & noexcept = default;
        IBluetoothLEAdvertisementPublisherTrigger2& operator=(IBluetoothLEAdvertisementPublisherTrigger2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBluetoothLEAdvertisementWatcherTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBluetoothLEAdvertisementWatcherTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IBluetoothLEAdvertisementWatcherTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IBluetoothLEAdvertisementWatcherTrigger(std::nullptr_t = nullptr) noexcept {}
        IBluetoothLEAdvertisementWatcherTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBluetoothLEAdvertisementWatcherTrigger(IBluetoothLEAdvertisementWatcherTrigger const&) noexcept = default;
        IBluetoothLEAdvertisementWatcherTrigger(IBluetoothLEAdvertisementWatcherTrigger&&) noexcept = default;
        IBluetoothLEAdvertisementWatcherTrigger& operator=(IBluetoothLEAdvertisementWatcherTrigger const&) & noexcept = default;
        IBluetoothLEAdvertisementWatcherTrigger& operator=(IBluetoothLEAdvertisementWatcherTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBluetoothLEAdvertisementWatcherTrigger2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBluetoothLEAdvertisementWatcherTrigger2>
    {
        IBluetoothLEAdvertisementWatcherTrigger2(std::nullptr_t = nullptr) noexcept {}
        IBluetoothLEAdvertisementWatcherTrigger2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBluetoothLEAdvertisementWatcherTrigger2(IBluetoothLEAdvertisementWatcherTrigger2 const&) noexcept = default;
        IBluetoothLEAdvertisementWatcherTrigger2(IBluetoothLEAdvertisementWatcherTrigger2&&) noexcept = default;
        IBluetoothLEAdvertisementWatcherTrigger2& operator=(IBluetoothLEAdvertisementWatcherTrigger2 const&) & noexcept = default;
        IBluetoothLEAdvertisementWatcherTrigger2& operator=(IBluetoothLEAdvertisementWatcherTrigger2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICachedFileUpdaterTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICachedFileUpdaterTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::ICachedFileUpdaterTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        ICachedFileUpdaterTrigger(std::nullptr_t = nullptr) noexcept {}
        ICachedFileUpdaterTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICachedFileUpdaterTrigger(ICachedFileUpdaterTrigger const&) noexcept = default;
        ICachedFileUpdaterTrigger(ICachedFileUpdaterTrigger&&) noexcept = default;
        ICachedFileUpdaterTrigger& operator=(ICachedFileUpdaterTrigger const&) & noexcept = default;
        ICachedFileUpdaterTrigger& operator=(ICachedFileUpdaterTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICachedFileUpdaterTriggerDetails :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICachedFileUpdaterTriggerDetails>
    {
        ICachedFileUpdaterTriggerDetails(std::nullptr_t = nullptr) noexcept {}
        ICachedFileUpdaterTriggerDetails(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICachedFileUpdaterTriggerDetails(ICachedFileUpdaterTriggerDetails const&) noexcept = default;
        ICachedFileUpdaterTriggerDetails(ICachedFileUpdaterTriggerDetails&&) noexcept = default;
        ICachedFileUpdaterTriggerDetails& operator=(ICachedFileUpdaterTriggerDetails const&) & noexcept = default;
        ICachedFileUpdaterTriggerDetails& operator=(ICachedFileUpdaterTriggerDetails&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IChatMessageNotificationTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IChatMessageNotificationTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IChatMessageNotificationTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IChatMessageNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
        IChatMessageNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IChatMessageNotificationTrigger(IChatMessageNotificationTrigger const&) noexcept = default;
        IChatMessageNotificationTrigger(IChatMessageNotificationTrigger&&) noexcept = default;
        IChatMessageNotificationTrigger& operator=(IChatMessageNotificationTrigger const&) & noexcept = default;
        IChatMessageNotificationTrigger& operator=(IChatMessageNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IChatMessageReceivedNotificationTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IChatMessageReceivedNotificationTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IChatMessageReceivedNotificationTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IChatMessageReceivedNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
        IChatMessageReceivedNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IChatMessageReceivedNotificationTrigger(IChatMessageReceivedNotificationTrigger const&) noexcept = default;
        IChatMessageReceivedNotificationTrigger(IChatMessageReceivedNotificationTrigger&&) noexcept = default;
        IChatMessageReceivedNotificationTrigger& operator=(IChatMessageReceivedNotificationTrigger const&) & noexcept = default;
        IChatMessageReceivedNotificationTrigger& operator=(IChatMessageReceivedNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICommunicationBlockingAppSetAsActiveTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICommunicationBlockingAppSetAsActiveTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::ICommunicationBlockingAppSetAsActiveTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        ICommunicationBlockingAppSetAsActiveTrigger(std::nullptr_t = nullptr) noexcept {}
        ICommunicationBlockingAppSetAsActiveTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICommunicationBlockingAppSetAsActiveTrigger(ICommunicationBlockingAppSetAsActiveTrigger const&) noexcept = default;
        ICommunicationBlockingAppSetAsActiveTrigger(ICommunicationBlockingAppSetAsActiveTrigger&&) noexcept = default;
        ICommunicationBlockingAppSetAsActiveTrigger& operator=(ICommunicationBlockingAppSetAsActiveTrigger const&) & noexcept = default;
        ICommunicationBlockingAppSetAsActiveTrigger& operator=(ICommunicationBlockingAppSetAsActiveTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IContactStoreNotificationTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IContactStoreNotificationTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IContactStoreNotificationTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IContactStoreNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
        IContactStoreNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IContactStoreNotificationTrigger(IContactStoreNotificationTrigger const&) noexcept = default;
        IContactStoreNotificationTrigger(IContactStoreNotificationTrigger&&) noexcept = default;
        IContactStoreNotificationTrigger& operator=(IContactStoreNotificationTrigger const&) & noexcept = default;
        IContactStoreNotificationTrigger& operator=(IContactStoreNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IContentPrefetchTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IContentPrefetchTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IContentPrefetchTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IContentPrefetchTrigger(std::nullptr_t = nullptr) noexcept {}
        IContentPrefetchTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IContentPrefetchTrigger(IContentPrefetchTrigger const&) noexcept = default;
        IContentPrefetchTrigger(IContentPrefetchTrigger&&) noexcept = default;
        IContentPrefetchTrigger& operator=(IContentPrefetchTrigger const&) & noexcept = default;
        IContentPrefetchTrigger& operator=(IContentPrefetchTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IContentPrefetchTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IContentPrefetchTriggerFactory>
    {
        IContentPrefetchTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        IContentPrefetchTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IContentPrefetchTriggerFactory(IContentPrefetchTriggerFactory const&) noexcept = default;
        IContentPrefetchTriggerFactory(IContentPrefetchTriggerFactory&&) noexcept = default;
        IContentPrefetchTriggerFactory& operator=(IContentPrefetchTriggerFactory const&) & noexcept = default;
        IContentPrefetchTriggerFactory& operator=(IContentPrefetchTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICustomSystemEventTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICustomSystemEventTrigger>
    {
        ICustomSystemEventTrigger(std::nullptr_t = nullptr) noexcept {}
        ICustomSystemEventTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICustomSystemEventTrigger(ICustomSystemEventTrigger const&) noexcept = default;
        ICustomSystemEventTrigger(ICustomSystemEventTrigger&&) noexcept = default;
        ICustomSystemEventTrigger& operator=(ICustomSystemEventTrigger const&) & noexcept = default;
        ICustomSystemEventTrigger& operator=(ICustomSystemEventTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICustomSystemEventTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICustomSystemEventTriggerFactory>
    {
        ICustomSystemEventTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        ICustomSystemEventTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICustomSystemEventTriggerFactory(ICustomSystemEventTriggerFactory const&) noexcept = default;
        ICustomSystemEventTriggerFactory(ICustomSystemEventTriggerFactory&&) noexcept = default;
        ICustomSystemEventTriggerFactory& operator=(ICustomSystemEventTriggerFactory const&) & noexcept = default;
        ICustomSystemEventTriggerFactory& operator=(ICustomSystemEventTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeviceConnectionChangeTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeviceConnectionChangeTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IDeviceConnectionChangeTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IDeviceConnectionChangeTrigger(std::nullptr_t = nullptr) noexcept {}
        IDeviceConnectionChangeTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeviceConnectionChangeTrigger(IDeviceConnectionChangeTrigger const&) noexcept = default;
        IDeviceConnectionChangeTrigger(IDeviceConnectionChangeTrigger&&) noexcept = default;
        IDeviceConnectionChangeTrigger& operator=(IDeviceConnectionChangeTrigger const&) & noexcept = default;
        IDeviceConnectionChangeTrigger& operator=(IDeviceConnectionChangeTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeviceConnectionChangeTriggerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeviceConnectionChangeTriggerStatics>
    {
        IDeviceConnectionChangeTriggerStatics(std::nullptr_t = nullptr) noexcept {}
        IDeviceConnectionChangeTriggerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeviceConnectionChangeTriggerStatics(IDeviceConnectionChangeTriggerStatics const&) noexcept = default;
        IDeviceConnectionChangeTriggerStatics(IDeviceConnectionChangeTriggerStatics&&) noexcept = default;
        IDeviceConnectionChangeTriggerStatics& operator=(IDeviceConnectionChangeTriggerStatics const&) & noexcept = default;
        IDeviceConnectionChangeTriggerStatics& operator=(IDeviceConnectionChangeTriggerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeviceManufacturerNotificationTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeviceManufacturerNotificationTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IDeviceManufacturerNotificationTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IDeviceManufacturerNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
        IDeviceManufacturerNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeviceManufacturerNotificationTrigger(IDeviceManufacturerNotificationTrigger const&) noexcept = default;
        IDeviceManufacturerNotificationTrigger(IDeviceManufacturerNotificationTrigger&&) noexcept = default;
        IDeviceManufacturerNotificationTrigger& operator=(IDeviceManufacturerNotificationTrigger const&) & noexcept = default;
        IDeviceManufacturerNotificationTrigger& operator=(IDeviceManufacturerNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeviceManufacturerNotificationTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeviceManufacturerNotificationTriggerFactory>
    {
        IDeviceManufacturerNotificationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        IDeviceManufacturerNotificationTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeviceManufacturerNotificationTriggerFactory(IDeviceManufacturerNotificationTriggerFactory const&) noexcept = default;
        IDeviceManufacturerNotificationTriggerFactory(IDeviceManufacturerNotificationTriggerFactory&&) noexcept = default;
        IDeviceManufacturerNotificationTriggerFactory& operator=(IDeviceManufacturerNotificationTriggerFactory const&) & noexcept = default;
        IDeviceManufacturerNotificationTriggerFactory& operator=(IDeviceManufacturerNotificationTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeviceServicingTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeviceServicingTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IDeviceServicingTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IDeviceServicingTrigger(std::nullptr_t = nullptr) noexcept {}
        IDeviceServicingTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeviceServicingTrigger(IDeviceServicingTrigger const&) noexcept = default;
        IDeviceServicingTrigger(IDeviceServicingTrigger&&) noexcept = default;
        IDeviceServicingTrigger& operator=(IDeviceServicingTrigger const&) & noexcept = default;
        IDeviceServicingTrigger& operator=(IDeviceServicingTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeviceUseTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeviceUseTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IDeviceUseTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IDeviceUseTrigger(std::nullptr_t = nullptr) noexcept {}
        IDeviceUseTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeviceUseTrigger(IDeviceUseTrigger const&) noexcept = default;
        IDeviceUseTrigger(IDeviceUseTrigger&&) noexcept = default;
        IDeviceUseTrigger& operator=(IDeviceUseTrigger const&) & noexcept = default;
        IDeviceUseTrigger& operator=(IDeviceUseTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeviceWatcherTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeviceWatcherTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IDeviceWatcherTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IDeviceWatcherTrigger(std::nullptr_t = nullptr) noexcept {}
        IDeviceWatcherTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeviceWatcherTrigger(IDeviceWatcherTrigger const&) noexcept = default;
        IDeviceWatcherTrigger(IDeviceWatcherTrigger&&) noexcept = default;
        IDeviceWatcherTrigger& operator=(IDeviceWatcherTrigger const&) & noexcept = default;
        IDeviceWatcherTrigger& operator=(IDeviceWatcherTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IEmailStoreNotificationTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IEmailStoreNotificationTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IEmailStoreNotificationTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IEmailStoreNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
        IEmailStoreNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IEmailStoreNotificationTrigger(IEmailStoreNotificationTrigger const&) noexcept = default;
        IEmailStoreNotificationTrigger(IEmailStoreNotificationTrigger&&) noexcept = default;
        IEmailStoreNotificationTrigger& operator=(IEmailStoreNotificationTrigger const&) & noexcept = default;
        IEmailStoreNotificationTrigger& operator=(IEmailStoreNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGattCharacteristicNotificationTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGattCharacteristicNotificationTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IGattCharacteristicNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
        IGattCharacteristicNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGattCharacteristicNotificationTrigger(IGattCharacteristicNotificationTrigger const&) noexcept = default;
        IGattCharacteristicNotificationTrigger(IGattCharacteristicNotificationTrigger&&) noexcept = default;
        IGattCharacteristicNotificationTrigger& operator=(IGattCharacteristicNotificationTrigger const&) & noexcept = default;
        IGattCharacteristicNotificationTrigger& operator=(IGattCharacteristicNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGattCharacteristicNotificationTrigger2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGattCharacteristicNotificationTrigger2>
    {
        IGattCharacteristicNotificationTrigger2(std::nullptr_t = nullptr) noexcept {}
        IGattCharacteristicNotificationTrigger2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGattCharacteristicNotificationTrigger2(IGattCharacteristicNotificationTrigger2 const&) noexcept = default;
        IGattCharacteristicNotificationTrigger2(IGattCharacteristicNotificationTrigger2&&) noexcept = default;
        IGattCharacteristicNotificationTrigger2& operator=(IGattCharacteristicNotificationTrigger2 const&) & noexcept = default;
        IGattCharacteristicNotificationTrigger2& operator=(IGattCharacteristicNotificationTrigger2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGattCharacteristicNotificationTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGattCharacteristicNotificationTriggerFactory>
    {
        IGattCharacteristicNotificationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        IGattCharacteristicNotificationTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGattCharacteristicNotificationTriggerFactory(IGattCharacteristicNotificationTriggerFactory const&) noexcept = default;
        IGattCharacteristicNotificationTriggerFactory(IGattCharacteristicNotificationTriggerFactory&&) noexcept = default;
        IGattCharacteristicNotificationTriggerFactory& operator=(IGattCharacteristicNotificationTriggerFactory const&) & noexcept = default;
        IGattCharacteristicNotificationTriggerFactory& operator=(IGattCharacteristicNotificationTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGattCharacteristicNotificationTriggerFactory2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGattCharacteristicNotificationTriggerFactory2>
    {
        IGattCharacteristicNotificationTriggerFactory2(std::nullptr_t = nullptr) noexcept {}
        IGattCharacteristicNotificationTriggerFactory2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGattCharacteristicNotificationTriggerFactory2(IGattCharacteristicNotificationTriggerFactory2 const&) noexcept = default;
        IGattCharacteristicNotificationTriggerFactory2(IGattCharacteristicNotificationTriggerFactory2&&) noexcept = default;
        IGattCharacteristicNotificationTriggerFactory2& operator=(IGattCharacteristicNotificationTriggerFactory2 const&) & noexcept = default;
        IGattCharacteristicNotificationTriggerFactory2& operator=(IGattCharacteristicNotificationTriggerFactory2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGattServiceProviderTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGattServiceProviderTrigger>
    {
        IGattServiceProviderTrigger(std::nullptr_t = nullptr) noexcept {}
        IGattServiceProviderTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGattServiceProviderTrigger(IGattServiceProviderTrigger const&) noexcept = default;
        IGattServiceProviderTrigger(IGattServiceProviderTrigger&&) noexcept = default;
        IGattServiceProviderTrigger& operator=(IGattServiceProviderTrigger const&) & noexcept = default;
        IGattServiceProviderTrigger& operator=(IGattServiceProviderTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGattServiceProviderTriggerResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGattServiceProviderTriggerResult>
    {
        IGattServiceProviderTriggerResult(std::nullptr_t = nullptr) noexcept {}
        IGattServiceProviderTriggerResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGattServiceProviderTriggerResult(IGattServiceProviderTriggerResult const&) noexcept = default;
        IGattServiceProviderTriggerResult(IGattServiceProviderTriggerResult&&) noexcept = default;
        IGattServiceProviderTriggerResult& operator=(IGattServiceProviderTriggerResult const&) & noexcept = default;
        IGattServiceProviderTriggerResult& operator=(IGattServiceProviderTriggerResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGattServiceProviderTriggerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGattServiceProviderTriggerStatics>
    {
        IGattServiceProviderTriggerStatics(std::nullptr_t = nullptr) noexcept {}
        IGattServiceProviderTriggerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGattServiceProviderTriggerStatics(IGattServiceProviderTriggerStatics const&) noexcept = default;
        IGattServiceProviderTriggerStatics(IGattServiceProviderTriggerStatics&&) noexcept = default;
        IGattServiceProviderTriggerStatics& operator=(IGattServiceProviderTriggerStatics const&) & noexcept = default;
        IGattServiceProviderTriggerStatics& operator=(IGattServiceProviderTriggerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGeovisitTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGeovisitTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IGeovisitTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IGeovisitTrigger(std::nullptr_t = nullptr) noexcept {}
        IGeovisitTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGeovisitTrigger(IGeovisitTrigger const&) noexcept = default;
        IGeovisitTrigger(IGeovisitTrigger&&) noexcept = default;
        IGeovisitTrigger& operator=(IGeovisitTrigger const&) & noexcept = default;
        IGeovisitTrigger& operator=(IGeovisitTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILocationTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILocationTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::ILocationTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        ILocationTrigger(std::nullptr_t = nullptr) noexcept {}
        ILocationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILocationTrigger(ILocationTrigger const&) noexcept = default;
        ILocationTrigger(ILocationTrigger&&) noexcept = default;
        ILocationTrigger& operator=(ILocationTrigger const&) & noexcept = default;
        ILocationTrigger& operator=(ILocationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILocationTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILocationTriggerFactory>
    {
        ILocationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        ILocationTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILocationTriggerFactory(ILocationTriggerFactory const&) noexcept = default;
        ILocationTriggerFactory(ILocationTriggerFactory&&) noexcept = default;
        ILocationTriggerFactory& operator=(ILocationTriggerFactory const&) & noexcept = default;
        ILocationTriggerFactory& operator=(ILocationTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMaintenanceTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMaintenanceTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IMaintenanceTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IMaintenanceTrigger(std::nullptr_t = nullptr) noexcept {}
        IMaintenanceTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMaintenanceTrigger(IMaintenanceTrigger const&) noexcept = default;
        IMaintenanceTrigger(IMaintenanceTrigger&&) noexcept = default;
        IMaintenanceTrigger& operator=(IMaintenanceTrigger const&) & noexcept = default;
        IMaintenanceTrigger& operator=(IMaintenanceTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMaintenanceTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMaintenanceTriggerFactory>
    {
        IMaintenanceTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        IMaintenanceTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMaintenanceTriggerFactory(IMaintenanceTriggerFactory const&) noexcept = default;
        IMaintenanceTriggerFactory(IMaintenanceTriggerFactory&&) noexcept = default;
        IMaintenanceTriggerFactory& operator=(IMaintenanceTriggerFactory const&) & noexcept = default;
        IMaintenanceTriggerFactory& operator=(IMaintenanceTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMediaProcessingTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMediaProcessingTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IMediaProcessingTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IMediaProcessingTrigger(std::nullptr_t = nullptr) noexcept {}
        IMediaProcessingTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMediaProcessingTrigger(IMediaProcessingTrigger const&) noexcept = default;
        IMediaProcessingTrigger(IMediaProcessingTrigger&&) noexcept = default;
        IMediaProcessingTrigger& operator=(IMediaProcessingTrigger const&) & noexcept = default;
        IMediaProcessingTrigger& operator=(IMediaProcessingTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INetworkOperatorHotspotAuthenticationTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INetworkOperatorHotspotAuthenticationTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        INetworkOperatorHotspotAuthenticationTrigger(std::nullptr_t = nullptr) noexcept {}
        INetworkOperatorHotspotAuthenticationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INetworkOperatorHotspotAuthenticationTrigger(INetworkOperatorHotspotAuthenticationTrigger const&) noexcept = default;
        INetworkOperatorHotspotAuthenticationTrigger(INetworkOperatorHotspotAuthenticationTrigger&&) noexcept = default;
        INetworkOperatorHotspotAuthenticationTrigger& operator=(INetworkOperatorHotspotAuthenticationTrigger const&) & noexcept = default;
        INetworkOperatorHotspotAuthenticationTrigger& operator=(INetworkOperatorHotspotAuthenticationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INetworkOperatorNotificationTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INetworkOperatorNotificationTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        INetworkOperatorNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
        INetworkOperatorNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INetworkOperatorNotificationTrigger(INetworkOperatorNotificationTrigger const&) noexcept = default;
        INetworkOperatorNotificationTrigger(INetworkOperatorNotificationTrigger&&) noexcept = default;
        INetworkOperatorNotificationTrigger& operator=(INetworkOperatorNotificationTrigger const&) & noexcept = default;
        INetworkOperatorNotificationTrigger& operator=(INetworkOperatorNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INetworkOperatorNotificationTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INetworkOperatorNotificationTriggerFactory>
    {
        INetworkOperatorNotificationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        INetworkOperatorNotificationTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INetworkOperatorNotificationTriggerFactory(INetworkOperatorNotificationTriggerFactory const&) noexcept = default;
        INetworkOperatorNotificationTriggerFactory(INetworkOperatorNotificationTriggerFactory&&) noexcept = default;
        INetworkOperatorNotificationTriggerFactory& operator=(INetworkOperatorNotificationTriggerFactory const&) & noexcept = default;
        INetworkOperatorNotificationTriggerFactory& operator=(INetworkOperatorNotificationTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPhoneTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPhoneTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IPhoneTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IPhoneTrigger(std::nullptr_t = nullptr) noexcept {}
        IPhoneTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPhoneTrigger(IPhoneTrigger const&) noexcept = default;
        IPhoneTrigger(IPhoneTrigger&&) noexcept = default;
        IPhoneTrigger& operator=(IPhoneTrigger const&) & noexcept = default;
        IPhoneTrigger& operator=(IPhoneTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPhoneTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPhoneTriggerFactory>
    {
        IPhoneTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        IPhoneTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPhoneTriggerFactory(IPhoneTriggerFactory const&) noexcept = default;
        IPhoneTriggerFactory(IPhoneTriggerFactory&&) noexcept = default;
        IPhoneTriggerFactory& operator=(IPhoneTriggerFactory const&) & noexcept = default;
        IPhoneTriggerFactory& operator=(IPhoneTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPushNotificationTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPushNotificationTriggerFactory>
    {
        IPushNotificationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        IPushNotificationTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPushNotificationTriggerFactory(IPushNotificationTriggerFactory const&) noexcept = default;
        IPushNotificationTriggerFactory(IPushNotificationTriggerFactory&&) noexcept = default;
        IPushNotificationTriggerFactory& operator=(IPushNotificationTriggerFactory const&) & noexcept = default;
        IPushNotificationTriggerFactory& operator=(IPushNotificationTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IRcsEndUserMessageAvailableTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRcsEndUserMessageAvailableTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IRcsEndUserMessageAvailableTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IRcsEndUserMessageAvailableTrigger(std::nullptr_t = nullptr) noexcept {}
        IRcsEndUserMessageAvailableTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IRcsEndUserMessageAvailableTrigger(IRcsEndUserMessageAvailableTrigger const&) noexcept = default;
        IRcsEndUserMessageAvailableTrigger(IRcsEndUserMessageAvailableTrigger&&) noexcept = default;
        IRcsEndUserMessageAvailableTrigger& operator=(IRcsEndUserMessageAvailableTrigger const&) & noexcept = default;
        IRcsEndUserMessageAvailableTrigger& operator=(IRcsEndUserMessageAvailableTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IRfcommConnectionTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRfcommConnectionTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IRfcommConnectionTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IRfcommConnectionTrigger(std::nullptr_t = nullptr) noexcept {}
        IRfcommConnectionTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IRfcommConnectionTrigger(IRfcommConnectionTrigger const&) noexcept = default;
        IRfcommConnectionTrigger(IRfcommConnectionTrigger&&) noexcept = default;
        IRfcommConnectionTrigger& operator=(IRfcommConnectionTrigger const&) & noexcept = default;
        IRfcommConnectionTrigger& operator=(IRfcommConnectionTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISecondaryAuthenticationFactorAuthenticationTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISecondaryAuthenticationFactorAuthenticationTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::ISecondaryAuthenticationFactorAuthenticationTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        ISecondaryAuthenticationFactorAuthenticationTrigger(std::nullptr_t = nullptr) noexcept {}
        ISecondaryAuthenticationFactorAuthenticationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISecondaryAuthenticationFactorAuthenticationTrigger(ISecondaryAuthenticationFactorAuthenticationTrigger const&) noexcept = default;
        ISecondaryAuthenticationFactorAuthenticationTrigger(ISecondaryAuthenticationFactorAuthenticationTrigger&&) noexcept = default;
        ISecondaryAuthenticationFactorAuthenticationTrigger& operator=(ISecondaryAuthenticationFactorAuthenticationTrigger const&) & noexcept = default;
        ISecondaryAuthenticationFactorAuthenticationTrigger& operator=(ISecondaryAuthenticationFactorAuthenticationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISensorDataThresholdTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISensorDataThresholdTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::ISensorDataThresholdTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        ISensorDataThresholdTrigger(std::nullptr_t = nullptr) noexcept {}
        ISensorDataThresholdTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISensorDataThresholdTrigger(ISensorDataThresholdTrigger const&) noexcept = default;
        ISensorDataThresholdTrigger(ISensorDataThresholdTrigger&&) noexcept = default;
        ISensorDataThresholdTrigger& operator=(ISensorDataThresholdTrigger const&) & noexcept = default;
        ISensorDataThresholdTrigger& operator=(ISensorDataThresholdTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISensorDataThresholdTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISensorDataThresholdTriggerFactory>
    {
        ISensorDataThresholdTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        ISensorDataThresholdTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISensorDataThresholdTriggerFactory(ISensorDataThresholdTriggerFactory const&) noexcept = default;
        ISensorDataThresholdTriggerFactory(ISensorDataThresholdTriggerFactory&&) noexcept = default;
        ISensorDataThresholdTriggerFactory& operator=(ISensorDataThresholdTriggerFactory const&) & noexcept = default;
        ISensorDataThresholdTriggerFactory& operator=(ISensorDataThresholdTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISmartCardTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISmartCardTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::ISmartCardTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        ISmartCardTrigger(std::nullptr_t = nullptr) noexcept {}
        ISmartCardTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISmartCardTrigger(ISmartCardTrigger const&) noexcept = default;
        ISmartCardTrigger(ISmartCardTrigger&&) noexcept = default;
        ISmartCardTrigger& operator=(ISmartCardTrigger const&) & noexcept = default;
        ISmartCardTrigger& operator=(ISmartCardTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISmartCardTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISmartCardTriggerFactory>
    {
        ISmartCardTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        ISmartCardTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISmartCardTriggerFactory(ISmartCardTriggerFactory const&) noexcept = default;
        ISmartCardTriggerFactory(ISmartCardTriggerFactory&&) noexcept = default;
        ISmartCardTriggerFactory& operator=(ISmartCardTriggerFactory const&) & noexcept = default;
        ISmartCardTriggerFactory& operator=(ISmartCardTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISmsMessageReceivedTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISmsMessageReceivedTriggerFactory>
    {
        ISmsMessageReceivedTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        ISmsMessageReceivedTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISmsMessageReceivedTriggerFactory(ISmsMessageReceivedTriggerFactory const&) noexcept = default;
        ISmsMessageReceivedTriggerFactory(ISmsMessageReceivedTriggerFactory&&) noexcept = default;
        ISmsMessageReceivedTriggerFactory& operator=(ISmsMessageReceivedTriggerFactory const&) & noexcept = default;
        ISmsMessageReceivedTriggerFactory& operator=(ISmsMessageReceivedTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISocketActivityTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISocketActivityTrigger>
    {
        ISocketActivityTrigger(std::nullptr_t = nullptr) noexcept {}
        ISocketActivityTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISocketActivityTrigger(ISocketActivityTrigger const&) noexcept = default;
        ISocketActivityTrigger(ISocketActivityTrigger&&) noexcept = default;
        ISocketActivityTrigger& operator=(ISocketActivityTrigger const&) & noexcept = default;
        ISocketActivityTrigger& operator=(ISocketActivityTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStorageLibraryChangeTrackerTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStorageLibraryChangeTrackerTriggerFactory>
    {
        IStorageLibraryChangeTrackerTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        IStorageLibraryChangeTrackerTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStorageLibraryChangeTrackerTriggerFactory(IStorageLibraryChangeTrackerTriggerFactory const&) noexcept = default;
        IStorageLibraryChangeTrackerTriggerFactory(IStorageLibraryChangeTrackerTriggerFactory&&) noexcept = default;
        IStorageLibraryChangeTrackerTriggerFactory& operator=(IStorageLibraryChangeTrackerTriggerFactory const&) & noexcept = default;
        IStorageLibraryChangeTrackerTriggerFactory& operator=(IStorageLibraryChangeTrackerTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStorageLibraryContentChangedTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStorageLibraryContentChangedTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::IStorageLibraryContentChangedTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        IStorageLibraryContentChangedTrigger(std::nullptr_t = nullptr) noexcept {}
        IStorageLibraryContentChangedTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStorageLibraryContentChangedTrigger(IStorageLibraryContentChangedTrigger const&) noexcept = default;
        IStorageLibraryContentChangedTrigger(IStorageLibraryContentChangedTrigger&&) noexcept = default;
        IStorageLibraryContentChangedTrigger& operator=(IStorageLibraryContentChangedTrigger const&) & noexcept = default;
        IStorageLibraryContentChangedTrigger& operator=(IStorageLibraryContentChangedTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStorageLibraryContentChangedTriggerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStorageLibraryContentChangedTriggerStatics>
    {
        IStorageLibraryContentChangedTriggerStatics(std::nullptr_t = nullptr) noexcept {}
        IStorageLibraryContentChangedTriggerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStorageLibraryContentChangedTriggerStatics(IStorageLibraryContentChangedTriggerStatics const&) noexcept = default;
        IStorageLibraryContentChangedTriggerStatics(IStorageLibraryContentChangedTriggerStatics&&) noexcept = default;
        IStorageLibraryContentChangedTriggerStatics& operator=(IStorageLibraryContentChangedTriggerStatics const&) & noexcept = default;
        IStorageLibraryContentChangedTriggerStatics& operator=(IStorageLibraryContentChangedTriggerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISystemCondition :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISystemCondition>,
        impl::require<winrt::Windows::ApplicationModel::Background::ISystemCondition, winrt::Windows::ApplicationModel::Background::IBackgroundCondition>
    {
        ISystemCondition(std::nullptr_t = nullptr) noexcept {}
        ISystemCondition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISystemCondition(ISystemCondition const&) noexcept = default;
        ISystemCondition(ISystemCondition&&) noexcept = default;
        ISystemCondition& operator=(ISystemCondition const&) & noexcept = default;
        ISystemCondition& operator=(ISystemCondition&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISystemConditionFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISystemConditionFactory>
    {
        ISystemConditionFactory(std::nullptr_t = nullptr) noexcept {}
        ISystemConditionFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISystemConditionFactory(ISystemConditionFactory const&) noexcept = default;
        ISystemConditionFactory(ISystemConditionFactory&&) noexcept = default;
        ISystemConditionFactory& operator=(ISystemConditionFactory const&) & noexcept = default;
        ISystemConditionFactory& operator=(ISystemConditionFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISystemTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISystemTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::ISystemTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        ISystemTrigger(std::nullptr_t = nullptr) noexcept {}
        ISystemTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISystemTrigger(ISystemTrigger const&) noexcept = default;
        ISystemTrigger(ISystemTrigger&&) noexcept = default;
        ISystemTrigger& operator=(ISystemTrigger const&) & noexcept = default;
        ISystemTrigger& operator=(ISystemTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISystemTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISystemTriggerFactory>
    {
        ISystemTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        ISystemTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISystemTriggerFactory(ISystemTriggerFactory const&) noexcept = default;
        ISystemTriggerFactory(ISystemTriggerFactory&&) noexcept = default;
        ISystemTriggerFactory& operator=(ISystemTriggerFactory const&) & noexcept = default;
        ISystemTriggerFactory& operator=(ISystemTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITimeTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITimeTrigger>,
        impl::require<winrt::Windows::ApplicationModel::Background::ITimeTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        ITimeTrigger(std::nullptr_t = nullptr) noexcept {}
        ITimeTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITimeTrigger(ITimeTrigger const&) noexcept = default;
        ITimeTrigger(ITimeTrigger&&) noexcept = default;
        ITimeTrigger& operator=(ITimeTrigger const&) & noexcept = default;
        ITimeTrigger& operator=(ITimeTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITimeTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITimeTriggerFactory>
    {
        ITimeTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        ITimeTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITimeTriggerFactory(ITimeTriggerFactory const&) noexcept = default;
        ITimeTriggerFactory(ITimeTriggerFactory&&) noexcept = default;
        ITimeTriggerFactory& operator=(ITimeTriggerFactory const&) & noexcept = default;
        ITimeTriggerFactory& operator=(ITimeTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotificationActionTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotificationActionTriggerFactory>
    {
        IToastNotificationActionTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        IToastNotificationActionTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotificationActionTriggerFactory(IToastNotificationActionTriggerFactory const&) noexcept = default;
        IToastNotificationActionTriggerFactory(IToastNotificationActionTriggerFactory&&) noexcept = default;
        IToastNotificationActionTriggerFactory& operator=(IToastNotificationActionTriggerFactory const&) & noexcept = default;
        IToastNotificationActionTriggerFactory& operator=(IToastNotificationActionTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotificationHistoryChangedTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotificationHistoryChangedTriggerFactory>
    {
        IToastNotificationHistoryChangedTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        IToastNotificationHistoryChangedTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotificationHistoryChangedTriggerFactory(IToastNotificationHistoryChangedTriggerFactory const&) noexcept = default;
        IToastNotificationHistoryChangedTriggerFactory(IToastNotificationHistoryChangedTriggerFactory&&) noexcept = default;
        IToastNotificationHistoryChangedTriggerFactory& operator=(IToastNotificationHistoryChangedTriggerFactory const&) & noexcept = default;
        IToastNotificationHistoryChangedTriggerFactory& operator=(IToastNotificationHistoryChangedTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IUserNotificationChangedTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IUserNotificationChangedTriggerFactory>
    {
        IUserNotificationChangedTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        IUserNotificationChangedTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IUserNotificationChangedTriggerFactory(IUserNotificationChangedTriggerFactory const&) noexcept = default;
        IUserNotificationChangedTriggerFactory(IUserNotificationChangedTriggerFactory&&) noexcept = default;
        IUserNotificationChangedTriggerFactory& operator=(IUserNotificationChangedTriggerFactory const&) & noexcept = default;
        IUserNotificationChangedTriggerFactory& operator=(IUserNotificationChangedTriggerFactory&&) & noexcept = default;
    };
}
#endif
