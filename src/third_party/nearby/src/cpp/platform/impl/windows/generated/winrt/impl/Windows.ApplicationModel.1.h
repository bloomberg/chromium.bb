// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_ApplicationModel_1_H
#define WINRT_Windows_ApplicationModel_1_H
#include "winrt/impl/Windows.ApplicationModel.0.h"
WINRT_EXPORT namespace winrt::Windows::ApplicationModel
{
    struct __declspec(empty_bases) IAppDisplayInfo :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppDisplayInfo>
    {
        IAppDisplayInfo(std::nullptr_t = nullptr) noexcept {}
        IAppDisplayInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAppDisplayInfo(IAppDisplayInfo const&) noexcept = default;
        IAppDisplayInfo(IAppDisplayInfo&&) noexcept = default;
        IAppDisplayInfo& operator=(IAppDisplayInfo const&) & noexcept = default;
        IAppDisplayInfo& operator=(IAppDisplayInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAppInfo :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppInfo>
    {
        IAppInfo(std::nullptr_t = nullptr) noexcept {}
        IAppInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAppInfo(IAppInfo const&) noexcept = default;
        IAppInfo(IAppInfo&&) noexcept = default;
        IAppInfo& operator=(IAppInfo const&) & noexcept = default;
        IAppInfo& operator=(IAppInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAppInfo2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppInfo2>
    {
        IAppInfo2(std::nullptr_t = nullptr) noexcept {}
        IAppInfo2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAppInfo2(IAppInfo2 const&) noexcept = default;
        IAppInfo2(IAppInfo2&&) noexcept = default;
        IAppInfo2& operator=(IAppInfo2 const&) & noexcept = default;
        IAppInfo2& operator=(IAppInfo2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAppInfoStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppInfoStatics>
    {
        IAppInfoStatics(std::nullptr_t = nullptr) noexcept {}
        IAppInfoStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAppInfoStatics(IAppInfoStatics const&) noexcept = default;
        IAppInfoStatics(IAppInfoStatics&&) noexcept = default;
        IAppInfoStatics& operator=(IAppInfoStatics const&) & noexcept = default;
        IAppInfoStatics& operator=(IAppInfoStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAppInstallerInfo :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppInstallerInfo>
    {
        IAppInstallerInfo(std::nullptr_t = nullptr) noexcept {}
        IAppInstallerInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAppInstallerInfo(IAppInstallerInfo const&) noexcept = default;
        IAppInstallerInfo(IAppInstallerInfo&&) noexcept = default;
        IAppInstallerInfo& operator=(IAppInstallerInfo const&) & noexcept = default;
        IAppInstallerInfo& operator=(IAppInstallerInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAppInstance :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppInstance>
    {
        IAppInstance(std::nullptr_t = nullptr) noexcept {}
        IAppInstance(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAppInstance(IAppInstance const&) noexcept = default;
        IAppInstance(IAppInstance&&) noexcept = default;
        IAppInstance& operator=(IAppInstance const&) & noexcept = default;
        IAppInstance& operator=(IAppInstance&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAppInstanceStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppInstanceStatics>
    {
        IAppInstanceStatics(std::nullptr_t = nullptr) noexcept {}
        IAppInstanceStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAppInstanceStatics(IAppInstanceStatics const&) noexcept = default;
        IAppInstanceStatics(IAppInstanceStatics&&) noexcept = default;
        IAppInstanceStatics& operator=(IAppInstanceStatics const&) & noexcept = default;
        IAppInstanceStatics& operator=(IAppInstanceStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICameraApplicationManagerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICameraApplicationManagerStatics>
    {
        ICameraApplicationManagerStatics(std::nullptr_t = nullptr) noexcept {}
        ICameraApplicationManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICameraApplicationManagerStatics(ICameraApplicationManagerStatics const&) noexcept = default;
        ICameraApplicationManagerStatics(ICameraApplicationManagerStatics&&) noexcept = default;
        ICameraApplicationManagerStatics& operator=(ICameraApplicationManagerStatics const&) & noexcept = default;
        ICameraApplicationManagerStatics& operator=(ICameraApplicationManagerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDesignModeStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDesignModeStatics>
    {
        IDesignModeStatics(std::nullptr_t = nullptr) noexcept {}
        IDesignModeStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDesignModeStatics(IDesignModeStatics const&) noexcept = default;
        IDesignModeStatics(IDesignModeStatics&&) noexcept = default;
        IDesignModeStatics& operator=(IDesignModeStatics const&) & noexcept = default;
        IDesignModeStatics& operator=(IDesignModeStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDesignModeStatics2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDesignModeStatics2>
    {
        IDesignModeStatics2(std::nullptr_t = nullptr) noexcept {}
        IDesignModeStatics2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDesignModeStatics2(IDesignModeStatics2 const&) noexcept = default;
        IDesignModeStatics2(IDesignModeStatics2&&) noexcept = default;
        IDesignModeStatics2& operator=(IDesignModeStatics2 const&) & noexcept = default;
        IDesignModeStatics2& operator=(IDesignModeStatics2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IEnteredBackgroundEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IEnteredBackgroundEventArgs>
    {
        IEnteredBackgroundEventArgs(std::nullptr_t = nullptr) noexcept {}
        IEnteredBackgroundEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IEnteredBackgroundEventArgs(IEnteredBackgroundEventArgs const&) noexcept = default;
        IEnteredBackgroundEventArgs(IEnteredBackgroundEventArgs&&) noexcept = default;
        IEnteredBackgroundEventArgs& operator=(IEnteredBackgroundEventArgs const&) & noexcept = default;
        IEnteredBackgroundEventArgs& operator=(IEnteredBackgroundEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IFullTrustProcessLauncherStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IFullTrustProcessLauncherStatics>
    {
        IFullTrustProcessLauncherStatics(std::nullptr_t = nullptr) noexcept {}
        IFullTrustProcessLauncherStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IFullTrustProcessLauncherStatics(IFullTrustProcessLauncherStatics const&) noexcept = default;
        IFullTrustProcessLauncherStatics(IFullTrustProcessLauncherStatics&&) noexcept = default;
        IFullTrustProcessLauncherStatics& operator=(IFullTrustProcessLauncherStatics const&) & noexcept = default;
        IFullTrustProcessLauncherStatics& operator=(IFullTrustProcessLauncherStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILeavingBackgroundEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILeavingBackgroundEventArgs>
    {
        ILeavingBackgroundEventArgs(std::nullptr_t = nullptr) noexcept {}
        ILeavingBackgroundEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILeavingBackgroundEventArgs(ILeavingBackgroundEventArgs const&) noexcept = default;
        ILeavingBackgroundEventArgs(ILeavingBackgroundEventArgs&&) noexcept = default;
        ILeavingBackgroundEventArgs& operator=(ILeavingBackgroundEventArgs const&) & noexcept = default;
        ILeavingBackgroundEventArgs& operator=(ILeavingBackgroundEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILimitedAccessFeatureRequestResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILimitedAccessFeatureRequestResult>
    {
        ILimitedAccessFeatureRequestResult(std::nullptr_t = nullptr) noexcept {}
        ILimitedAccessFeatureRequestResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILimitedAccessFeatureRequestResult(ILimitedAccessFeatureRequestResult const&) noexcept = default;
        ILimitedAccessFeatureRequestResult(ILimitedAccessFeatureRequestResult&&) noexcept = default;
        ILimitedAccessFeatureRequestResult& operator=(ILimitedAccessFeatureRequestResult const&) & noexcept = default;
        ILimitedAccessFeatureRequestResult& operator=(ILimitedAccessFeatureRequestResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILimitedAccessFeaturesStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILimitedAccessFeaturesStatics>
    {
        ILimitedAccessFeaturesStatics(std::nullptr_t = nullptr) noexcept {}
        ILimitedAccessFeaturesStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILimitedAccessFeaturesStatics(ILimitedAccessFeaturesStatics const&) noexcept = default;
        ILimitedAccessFeaturesStatics(ILimitedAccessFeaturesStatics&&) noexcept = default;
        ILimitedAccessFeaturesStatics& operator=(ILimitedAccessFeaturesStatics const&) & noexcept = default;
        ILimitedAccessFeaturesStatics& operator=(ILimitedAccessFeaturesStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackage :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackage>
    {
        IPackage(std::nullptr_t = nullptr) noexcept {}
        IPackage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackage(IPackage const&) noexcept = default;
        IPackage(IPackage&&) noexcept = default;
        IPackage& operator=(IPackage const&) & noexcept = default;
        IPackage& operator=(IPackage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackage2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackage2>
    {
        IPackage2(std::nullptr_t = nullptr) noexcept {}
        IPackage2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackage2(IPackage2 const&) noexcept = default;
        IPackage2(IPackage2&&) noexcept = default;
        IPackage2& operator=(IPackage2 const&) & noexcept = default;
        IPackage2& operator=(IPackage2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackage3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackage3>
    {
        IPackage3(std::nullptr_t = nullptr) noexcept {}
        IPackage3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackage3(IPackage3 const&) noexcept = default;
        IPackage3(IPackage3&&) noexcept = default;
        IPackage3& operator=(IPackage3 const&) & noexcept = default;
        IPackage3& operator=(IPackage3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackage4 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackage4>
    {
        IPackage4(std::nullptr_t = nullptr) noexcept {}
        IPackage4(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackage4(IPackage4 const&) noexcept = default;
        IPackage4(IPackage4&&) noexcept = default;
        IPackage4& operator=(IPackage4 const&) & noexcept = default;
        IPackage4& operator=(IPackage4&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackage5 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackage5>
    {
        IPackage5(std::nullptr_t = nullptr) noexcept {}
        IPackage5(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackage5(IPackage5 const&) noexcept = default;
        IPackage5(IPackage5&&) noexcept = default;
        IPackage5& operator=(IPackage5 const&) & noexcept = default;
        IPackage5& operator=(IPackage5&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackage6 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackage6>
    {
        IPackage6(std::nullptr_t = nullptr) noexcept {}
        IPackage6(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackage6(IPackage6 const&) noexcept = default;
        IPackage6(IPackage6&&) noexcept = default;
        IPackage6& operator=(IPackage6 const&) & noexcept = default;
        IPackage6& operator=(IPackage6&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackage7 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackage7>
    {
        IPackage7(std::nullptr_t = nullptr) noexcept {}
        IPackage7(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackage7(IPackage7 const&) noexcept = default;
        IPackage7(IPackage7&&) noexcept = default;
        IPackage7& operator=(IPackage7 const&) & noexcept = default;
        IPackage7& operator=(IPackage7&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackage8 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackage8>
    {
        IPackage8(std::nullptr_t = nullptr) noexcept {}
        IPackage8(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackage8(IPackage8 const&) noexcept = default;
        IPackage8(IPackage8&&) noexcept = default;
        IPackage8& operator=(IPackage8 const&) & noexcept = default;
        IPackage8& operator=(IPackage8&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageCatalog :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageCatalog>
    {
        IPackageCatalog(std::nullptr_t = nullptr) noexcept {}
        IPackageCatalog(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageCatalog(IPackageCatalog const&) noexcept = default;
        IPackageCatalog(IPackageCatalog&&) noexcept = default;
        IPackageCatalog& operator=(IPackageCatalog const&) & noexcept = default;
        IPackageCatalog& operator=(IPackageCatalog&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageCatalog2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageCatalog2>
    {
        IPackageCatalog2(std::nullptr_t = nullptr) noexcept {}
        IPackageCatalog2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageCatalog2(IPackageCatalog2 const&) noexcept = default;
        IPackageCatalog2(IPackageCatalog2&&) noexcept = default;
        IPackageCatalog2& operator=(IPackageCatalog2 const&) & noexcept = default;
        IPackageCatalog2& operator=(IPackageCatalog2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageCatalog3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageCatalog3>
    {
        IPackageCatalog3(std::nullptr_t = nullptr) noexcept {}
        IPackageCatalog3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageCatalog3(IPackageCatalog3 const&) noexcept = default;
        IPackageCatalog3(IPackageCatalog3&&) noexcept = default;
        IPackageCatalog3& operator=(IPackageCatalog3 const&) & noexcept = default;
        IPackageCatalog3& operator=(IPackageCatalog3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageCatalog4 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageCatalog4>
    {
        IPackageCatalog4(std::nullptr_t = nullptr) noexcept {}
        IPackageCatalog4(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageCatalog4(IPackageCatalog4 const&) noexcept = default;
        IPackageCatalog4(IPackageCatalog4&&) noexcept = default;
        IPackageCatalog4& operator=(IPackageCatalog4 const&) & noexcept = default;
        IPackageCatalog4& operator=(IPackageCatalog4&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageCatalogAddOptionalPackageResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageCatalogAddOptionalPackageResult>
    {
        IPackageCatalogAddOptionalPackageResult(std::nullptr_t = nullptr) noexcept {}
        IPackageCatalogAddOptionalPackageResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageCatalogAddOptionalPackageResult(IPackageCatalogAddOptionalPackageResult const&) noexcept = default;
        IPackageCatalogAddOptionalPackageResult(IPackageCatalogAddOptionalPackageResult&&) noexcept = default;
        IPackageCatalogAddOptionalPackageResult& operator=(IPackageCatalogAddOptionalPackageResult const&) & noexcept = default;
        IPackageCatalogAddOptionalPackageResult& operator=(IPackageCatalogAddOptionalPackageResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageCatalogAddResourcePackageResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageCatalogAddResourcePackageResult>
    {
        IPackageCatalogAddResourcePackageResult(std::nullptr_t = nullptr) noexcept {}
        IPackageCatalogAddResourcePackageResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageCatalogAddResourcePackageResult(IPackageCatalogAddResourcePackageResult const&) noexcept = default;
        IPackageCatalogAddResourcePackageResult(IPackageCatalogAddResourcePackageResult&&) noexcept = default;
        IPackageCatalogAddResourcePackageResult& operator=(IPackageCatalogAddResourcePackageResult const&) & noexcept = default;
        IPackageCatalogAddResourcePackageResult& operator=(IPackageCatalogAddResourcePackageResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageCatalogRemoveOptionalPackagesResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageCatalogRemoveOptionalPackagesResult>
    {
        IPackageCatalogRemoveOptionalPackagesResult(std::nullptr_t = nullptr) noexcept {}
        IPackageCatalogRemoveOptionalPackagesResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageCatalogRemoveOptionalPackagesResult(IPackageCatalogRemoveOptionalPackagesResult const&) noexcept = default;
        IPackageCatalogRemoveOptionalPackagesResult(IPackageCatalogRemoveOptionalPackagesResult&&) noexcept = default;
        IPackageCatalogRemoveOptionalPackagesResult& operator=(IPackageCatalogRemoveOptionalPackagesResult const&) & noexcept = default;
        IPackageCatalogRemoveOptionalPackagesResult& operator=(IPackageCatalogRemoveOptionalPackagesResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageCatalogRemoveResourcePackagesResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageCatalogRemoveResourcePackagesResult>
    {
        IPackageCatalogRemoveResourcePackagesResult(std::nullptr_t = nullptr) noexcept {}
        IPackageCatalogRemoveResourcePackagesResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageCatalogRemoveResourcePackagesResult(IPackageCatalogRemoveResourcePackagesResult const&) noexcept = default;
        IPackageCatalogRemoveResourcePackagesResult(IPackageCatalogRemoveResourcePackagesResult&&) noexcept = default;
        IPackageCatalogRemoveResourcePackagesResult& operator=(IPackageCatalogRemoveResourcePackagesResult const&) & noexcept = default;
        IPackageCatalogRemoveResourcePackagesResult& operator=(IPackageCatalogRemoveResourcePackagesResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageCatalogStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageCatalogStatics>
    {
        IPackageCatalogStatics(std::nullptr_t = nullptr) noexcept {}
        IPackageCatalogStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageCatalogStatics(IPackageCatalogStatics const&) noexcept = default;
        IPackageCatalogStatics(IPackageCatalogStatics&&) noexcept = default;
        IPackageCatalogStatics& operator=(IPackageCatalogStatics const&) & noexcept = default;
        IPackageCatalogStatics& operator=(IPackageCatalogStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageContentGroup :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageContentGroup>
    {
        IPackageContentGroup(std::nullptr_t = nullptr) noexcept {}
        IPackageContentGroup(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageContentGroup(IPackageContentGroup const&) noexcept = default;
        IPackageContentGroup(IPackageContentGroup&&) noexcept = default;
        IPackageContentGroup& operator=(IPackageContentGroup const&) & noexcept = default;
        IPackageContentGroup& operator=(IPackageContentGroup&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageContentGroupStagingEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageContentGroupStagingEventArgs>
    {
        IPackageContentGroupStagingEventArgs(std::nullptr_t = nullptr) noexcept {}
        IPackageContentGroupStagingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageContentGroupStagingEventArgs(IPackageContentGroupStagingEventArgs const&) noexcept = default;
        IPackageContentGroupStagingEventArgs(IPackageContentGroupStagingEventArgs&&) noexcept = default;
        IPackageContentGroupStagingEventArgs& operator=(IPackageContentGroupStagingEventArgs const&) & noexcept = default;
        IPackageContentGroupStagingEventArgs& operator=(IPackageContentGroupStagingEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageContentGroupStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageContentGroupStatics>
    {
        IPackageContentGroupStatics(std::nullptr_t = nullptr) noexcept {}
        IPackageContentGroupStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageContentGroupStatics(IPackageContentGroupStatics const&) noexcept = default;
        IPackageContentGroupStatics(IPackageContentGroupStatics&&) noexcept = default;
        IPackageContentGroupStatics& operator=(IPackageContentGroupStatics const&) & noexcept = default;
        IPackageContentGroupStatics& operator=(IPackageContentGroupStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageId :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageId>
    {
        IPackageId(std::nullptr_t = nullptr) noexcept {}
        IPackageId(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageId(IPackageId const&) noexcept = default;
        IPackageId(IPackageId&&) noexcept = default;
        IPackageId& operator=(IPackageId const&) & noexcept = default;
        IPackageId& operator=(IPackageId&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageIdWithMetadata :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageIdWithMetadata>
    {
        IPackageIdWithMetadata(std::nullptr_t = nullptr) noexcept {}
        IPackageIdWithMetadata(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageIdWithMetadata(IPackageIdWithMetadata const&) noexcept = default;
        IPackageIdWithMetadata(IPackageIdWithMetadata&&) noexcept = default;
        IPackageIdWithMetadata& operator=(IPackageIdWithMetadata const&) & noexcept = default;
        IPackageIdWithMetadata& operator=(IPackageIdWithMetadata&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageInstallingEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageInstallingEventArgs>
    {
        IPackageInstallingEventArgs(std::nullptr_t = nullptr) noexcept {}
        IPackageInstallingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageInstallingEventArgs(IPackageInstallingEventArgs const&) noexcept = default;
        IPackageInstallingEventArgs(IPackageInstallingEventArgs&&) noexcept = default;
        IPackageInstallingEventArgs& operator=(IPackageInstallingEventArgs const&) & noexcept = default;
        IPackageInstallingEventArgs& operator=(IPackageInstallingEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageStagingEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageStagingEventArgs>
    {
        IPackageStagingEventArgs(std::nullptr_t = nullptr) noexcept {}
        IPackageStagingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageStagingEventArgs(IPackageStagingEventArgs const&) noexcept = default;
        IPackageStagingEventArgs(IPackageStagingEventArgs&&) noexcept = default;
        IPackageStagingEventArgs& operator=(IPackageStagingEventArgs const&) & noexcept = default;
        IPackageStagingEventArgs& operator=(IPackageStagingEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageStatics>
    {
        IPackageStatics(std::nullptr_t = nullptr) noexcept {}
        IPackageStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageStatics(IPackageStatics const&) noexcept = default;
        IPackageStatics(IPackageStatics&&) noexcept = default;
        IPackageStatics& operator=(IPackageStatics const&) & noexcept = default;
        IPackageStatics& operator=(IPackageStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageStatus :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageStatus>
    {
        IPackageStatus(std::nullptr_t = nullptr) noexcept {}
        IPackageStatus(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageStatus(IPackageStatus const&) noexcept = default;
        IPackageStatus(IPackageStatus&&) noexcept = default;
        IPackageStatus& operator=(IPackageStatus const&) & noexcept = default;
        IPackageStatus& operator=(IPackageStatus&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageStatus2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageStatus2>
    {
        IPackageStatus2(std::nullptr_t = nullptr) noexcept {}
        IPackageStatus2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageStatus2(IPackageStatus2 const&) noexcept = default;
        IPackageStatus2(IPackageStatus2&&) noexcept = default;
        IPackageStatus2& operator=(IPackageStatus2 const&) & noexcept = default;
        IPackageStatus2& operator=(IPackageStatus2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageStatusChangedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageStatusChangedEventArgs>
    {
        IPackageStatusChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IPackageStatusChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageStatusChangedEventArgs(IPackageStatusChangedEventArgs const&) noexcept = default;
        IPackageStatusChangedEventArgs(IPackageStatusChangedEventArgs&&) noexcept = default;
        IPackageStatusChangedEventArgs& operator=(IPackageStatusChangedEventArgs const&) & noexcept = default;
        IPackageStatusChangedEventArgs& operator=(IPackageStatusChangedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageUninstallingEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageUninstallingEventArgs>
    {
        IPackageUninstallingEventArgs(std::nullptr_t = nullptr) noexcept {}
        IPackageUninstallingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageUninstallingEventArgs(IPackageUninstallingEventArgs const&) noexcept = default;
        IPackageUninstallingEventArgs(IPackageUninstallingEventArgs&&) noexcept = default;
        IPackageUninstallingEventArgs& operator=(IPackageUninstallingEventArgs const&) & noexcept = default;
        IPackageUninstallingEventArgs& operator=(IPackageUninstallingEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageUpdateAvailabilityResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageUpdateAvailabilityResult>
    {
        IPackageUpdateAvailabilityResult(std::nullptr_t = nullptr) noexcept {}
        IPackageUpdateAvailabilityResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageUpdateAvailabilityResult(IPackageUpdateAvailabilityResult const&) noexcept = default;
        IPackageUpdateAvailabilityResult(IPackageUpdateAvailabilityResult&&) noexcept = default;
        IPackageUpdateAvailabilityResult& operator=(IPackageUpdateAvailabilityResult const&) & noexcept = default;
        IPackageUpdateAvailabilityResult& operator=(IPackageUpdateAvailabilityResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageUpdatingEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageUpdatingEventArgs>
    {
        IPackageUpdatingEventArgs(std::nullptr_t = nullptr) noexcept {}
        IPackageUpdatingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageUpdatingEventArgs(IPackageUpdatingEventArgs const&) noexcept = default;
        IPackageUpdatingEventArgs(IPackageUpdatingEventArgs&&) noexcept = default;
        IPackageUpdatingEventArgs& operator=(IPackageUpdatingEventArgs const&) & noexcept = default;
        IPackageUpdatingEventArgs& operator=(IPackageUpdatingEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageWithMetadata :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageWithMetadata>
    {
        IPackageWithMetadata(std::nullptr_t = nullptr) noexcept {}
        IPackageWithMetadata(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageWithMetadata(IPackageWithMetadata const&) noexcept = default;
        IPackageWithMetadata(IPackageWithMetadata&&) noexcept = default;
        IPackageWithMetadata& operator=(IPackageWithMetadata const&) & noexcept = default;
        IPackageWithMetadata& operator=(IPackageWithMetadata&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStartupTask :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStartupTask>
    {
        IStartupTask(std::nullptr_t = nullptr) noexcept {}
        IStartupTask(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStartupTask(IStartupTask const&) noexcept = default;
        IStartupTask(IStartupTask&&) noexcept = default;
        IStartupTask& operator=(IStartupTask const&) & noexcept = default;
        IStartupTask& operator=(IStartupTask&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStartupTaskStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStartupTaskStatics>
    {
        IStartupTaskStatics(std::nullptr_t = nullptr) noexcept {}
        IStartupTaskStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStartupTaskStatics(IStartupTaskStatics const&) noexcept = default;
        IStartupTaskStatics(IStartupTaskStatics&&) noexcept = default;
        IStartupTaskStatics& operator=(IStartupTaskStatics const&) & noexcept = default;
        IStartupTaskStatics& operator=(IStartupTaskStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISuspendingDeferral :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISuspendingDeferral>
    {
        ISuspendingDeferral(std::nullptr_t = nullptr) noexcept {}
        ISuspendingDeferral(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISuspendingDeferral(ISuspendingDeferral const&) noexcept = default;
        ISuspendingDeferral(ISuspendingDeferral&&) noexcept = default;
        ISuspendingDeferral& operator=(ISuspendingDeferral const&) & noexcept = default;
        ISuspendingDeferral& operator=(ISuspendingDeferral&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISuspendingEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISuspendingEventArgs>
    {
        ISuspendingEventArgs(std::nullptr_t = nullptr) noexcept {}
        ISuspendingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISuspendingEventArgs(ISuspendingEventArgs const&) noexcept = default;
        ISuspendingEventArgs(ISuspendingEventArgs&&) noexcept = default;
        ISuspendingEventArgs& operator=(ISuspendingEventArgs const&) & noexcept = default;
        ISuspendingEventArgs& operator=(ISuspendingEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISuspendingOperation :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISuspendingOperation>
    {
        ISuspendingOperation(std::nullptr_t = nullptr) noexcept {}
        ISuspendingOperation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISuspendingOperation(ISuspendingOperation const&) noexcept = default;
        ISuspendingOperation(ISuspendingOperation&&) noexcept = default;
        ISuspendingOperation& operator=(ISuspendingOperation const&) & noexcept = default;
        ISuspendingOperation& operator=(ISuspendingOperation&&) & noexcept = default;
    };
}
#endif
