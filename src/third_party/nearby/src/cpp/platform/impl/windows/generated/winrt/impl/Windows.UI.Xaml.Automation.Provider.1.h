// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_UI_Xaml_Automation_Provider_1_H
#define WINRT_Windows_UI_Xaml_Automation_Provider_1_H
#include "winrt/impl/Windows.UI.Xaml.Automation.Provider.0.h"
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Automation::Provider
{
    struct __declspec(empty_bases) IAnnotationProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAnnotationProvider>
    {
        IAnnotationProvider(std::nullptr_t = nullptr) noexcept {}
        IAnnotationProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAnnotationProvider(IAnnotationProvider const&) noexcept = default;
        IAnnotationProvider(IAnnotationProvider&&) noexcept = default;
        IAnnotationProvider& operator=(IAnnotationProvider const&) & noexcept = default;
        IAnnotationProvider& operator=(IAnnotationProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICustomNavigationProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICustomNavigationProvider>
    {
        ICustomNavigationProvider(std::nullptr_t = nullptr) noexcept {}
        ICustomNavigationProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICustomNavigationProvider(ICustomNavigationProvider const&) noexcept = default;
        ICustomNavigationProvider(ICustomNavigationProvider&&) noexcept = default;
        ICustomNavigationProvider& operator=(ICustomNavigationProvider const&) & noexcept = default;
        ICustomNavigationProvider& operator=(ICustomNavigationProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDockProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDockProvider>
    {
        IDockProvider(std::nullptr_t = nullptr) noexcept {}
        IDockProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDockProvider(IDockProvider const&) noexcept = default;
        IDockProvider(IDockProvider&&) noexcept = default;
        IDockProvider& operator=(IDockProvider const&) & noexcept = default;
        IDockProvider& operator=(IDockProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDragProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDragProvider>
    {
        IDragProvider(std::nullptr_t = nullptr) noexcept {}
        IDragProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDragProvider(IDragProvider const&) noexcept = default;
        IDragProvider(IDragProvider&&) noexcept = default;
        IDragProvider& operator=(IDragProvider const&) & noexcept = default;
        IDragProvider& operator=(IDragProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDropTargetProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDropTargetProvider>
    {
        IDropTargetProvider(std::nullptr_t = nullptr) noexcept {}
        IDropTargetProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDropTargetProvider(IDropTargetProvider const&) noexcept = default;
        IDropTargetProvider(IDropTargetProvider&&) noexcept = default;
        IDropTargetProvider& operator=(IDropTargetProvider const&) & noexcept = default;
        IDropTargetProvider& operator=(IDropTargetProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IExpandCollapseProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IExpandCollapseProvider>
    {
        IExpandCollapseProvider(std::nullptr_t = nullptr) noexcept {}
        IExpandCollapseProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IExpandCollapseProvider(IExpandCollapseProvider const&) noexcept = default;
        IExpandCollapseProvider(IExpandCollapseProvider&&) noexcept = default;
        IExpandCollapseProvider& operator=(IExpandCollapseProvider const&) & noexcept = default;
        IExpandCollapseProvider& operator=(IExpandCollapseProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGridItemProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGridItemProvider>
    {
        IGridItemProvider(std::nullptr_t = nullptr) noexcept {}
        IGridItemProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGridItemProvider(IGridItemProvider const&) noexcept = default;
        IGridItemProvider(IGridItemProvider&&) noexcept = default;
        IGridItemProvider& operator=(IGridItemProvider const&) & noexcept = default;
        IGridItemProvider& operator=(IGridItemProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGridProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGridProvider>
    {
        IGridProvider(std::nullptr_t = nullptr) noexcept {}
        IGridProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGridProvider(IGridProvider const&) noexcept = default;
        IGridProvider(IGridProvider&&) noexcept = default;
        IGridProvider& operator=(IGridProvider const&) & noexcept = default;
        IGridProvider& operator=(IGridProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IIRawElementProviderSimple :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IIRawElementProviderSimple>
    {
        IIRawElementProviderSimple(std::nullptr_t = nullptr) noexcept {}
        IIRawElementProviderSimple(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IIRawElementProviderSimple(IIRawElementProviderSimple const&) noexcept = default;
        IIRawElementProviderSimple(IIRawElementProviderSimple&&) noexcept = default;
        IIRawElementProviderSimple& operator=(IIRawElementProviderSimple const&) & noexcept = default;
        IIRawElementProviderSimple& operator=(IIRawElementProviderSimple&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IInvokeProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IInvokeProvider>
    {
        IInvokeProvider(std::nullptr_t = nullptr) noexcept {}
        IInvokeProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IInvokeProvider(IInvokeProvider const&) noexcept = default;
        IInvokeProvider(IInvokeProvider&&) noexcept = default;
        IInvokeProvider& operator=(IInvokeProvider const&) & noexcept = default;
        IInvokeProvider& operator=(IInvokeProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IItemContainerProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IItemContainerProvider>
    {
        IItemContainerProvider(std::nullptr_t = nullptr) noexcept {}
        IItemContainerProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IItemContainerProvider(IItemContainerProvider const&) noexcept = default;
        IItemContainerProvider(IItemContainerProvider&&) noexcept = default;
        IItemContainerProvider& operator=(IItemContainerProvider const&) & noexcept = default;
        IItemContainerProvider& operator=(IItemContainerProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMultipleViewProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMultipleViewProvider>
    {
        IMultipleViewProvider(std::nullptr_t = nullptr) noexcept {}
        IMultipleViewProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMultipleViewProvider(IMultipleViewProvider const&) noexcept = default;
        IMultipleViewProvider(IMultipleViewProvider&&) noexcept = default;
        IMultipleViewProvider& operator=(IMultipleViewProvider const&) & noexcept = default;
        IMultipleViewProvider& operator=(IMultipleViewProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IObjectModelProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IObjectModelProvider>
    {
        IObjectModelProvider(std::nullptr_t = nullptr) noexcept {}
        IObjectModelProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IObjectModelProvider(IObjectModelProvider const&) noexcept = default;
        IObjectModelProvider(IObjectModelProvider&&) noexcept = default;
        IObjectModelProvider& operator=(IObjectModelProvider const&) & noexcept = default;
        IObjectModelProvider& operator=(IObjectModelProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IRangeValueProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRangeValueProvider>
    {
        IRangeValueProvider(std::nullptr_t = nullptr) noexcept {}
        IRangeValueProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IRangeValueProvider(IRangeValueProvider const&) noexcept = default;
        IRangeValueProvider(IRangeValueProvider&&) noexcept = default;
        IRangeValueProvider& operator=(IRangeValueProvider const&) & noexcept = default;
        IRangeValueProvider& operator=(IRangeValueProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IScrollItemProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IScrollItemProvider>
    {
        IScrollItemProvider(std::nullptr_t = nullptr) noexcept {}
        IScrollItemProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IScrollItemProvider(IScrollItemProvider const&) noexcept = default;
        IScrollItemProvider(IScrollItemProvider&&) noexcept = default;
        IScrollItemProvider& operator=(IScrollItemProvider const&) & noexcept = default;
        IScrollItemProvider& operator=(IScrollItemProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IScrollProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IScrollProvider>
    {
        IScrollProvider(std::nullptr_t = nullptr) noexcept {}
        IScrollProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IScrollProvider(IScrollProvider const&) noexcept = default;
        IScrollProvider(IScrollProvider&&) noexcept = default;
        IScrollProvider& operator=(IScrollProvider const&) & noexcept = default;
        IScrollProvider& operator=(IScrollProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISelectionItemProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISelectionItemProvider>
    {
        ISelectionItemProvider(std::nullptr_t = nullptr) noexcept {}
        ISelectionItemProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISelectionItemProvider(ISelectionItemProvider const&) noexcept = default;
        ISelectionItemProvider(ISelectionItemProvider&&) noexcept = default;
        ISelectionItemProvider& operator=(ISelectionItemProvider const&) & noexcept = default;
        ISelectionItemProvider& operator=(ISelectionItemProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISelectionProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISelectionProvider>
    {
        ISelectionProvider(std::nullptr_t = nullptr) noexcept {}
        ISelectionProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISelectionProvider(ISelectionProvider const&) noexcept = default;
        ISelectionProvider(ISelectionProvider&&) noexcept = default;
        ISelectionProvider& operator=(ISelectionProvider const&) & noexcept = default;
        ISelectionProvider& operator=(ISelectionProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISpreadsheetItemProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISpreadsheetItemProvider>
    {
        ISpreadsheetItemProvider(std::nullptr_t = nullptr) noexcept {}
        ISpreadsheetItemProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISpreadsheetItemProvider(ISpreadsheetItemProvider const&) noexcept = default;
        ISpreadsheetItemProvider(ISpreadsheetItemProvider&&) noexcept = default;
        ISpreadsheetItemProvider& operator=(ISpreadsheetItemProvider const&) & noexcept = default;
        ISpreadsheetItemProvider& operator=(ISpreadsheetItemProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISpreadsheetProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISpreadsheetProvider>
    {
        ISpreadsheetProvider(std::nullptr_t = nullptr) noexcept {}
        ISpreadsheetProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISpreadsheetProvider(ISpreadsheetProvider const&) noexcept = default;
        ISpreadsheetProvider(ISpreadsheetProvider&&) noexcept = default;
        ISpreadsheetProvider& operator=(ISpreadsheetProvider const&) & noexcept = default;
        ISpreadsheetProvider& operator=(ISpreadsheetProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStylesProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStylesProvider>
    {
        IStylesProvider(std::nullptr_t = nullptr) noexcept {}
        IStylesProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStylesProvider(IStylesProvider const&) noexcept = default;
        IStylesProvider(IStylesProvider&&) noexcept = default;
        IStylesProvider& operator=(IStylesProvider const&) & noexcept = default;
        IStylesProvider& operator=(IStylesProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISynchronizedInputProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISynchronizedInputProvider>
    {
        ISynchronizedInputProvider(std::nullptr_t = nullptr) noexcept {}
        ISynchronizedInputProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISynchronizedInputProvider(ISynchronizedInputProvider const&) noexcept = default;
        ISynchronizedInputProvider(ISynchronizedInputProvider&&) noexcept = default;
        ISynchronizedInputProvider& operator=(ISynchronizedInputProvider const&) & noexcept = default;
        ISynchronizedInputProvider& operator=(ISynchronizedInputProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITableItemProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITableItemProvider>
    {
        ITableItemProvider(std::nullptr_t = nullptr) noexcept {}
        ITableItemProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITableItemProvider(ITableItemProvider const&) noexcept = default;
        ITableItemProvider(ITableItemProvider&&) noexcept = default;
        ITableItemProvider& operator=(ITableItemProvider const&) & noexcept = default;
        ITableItemProvider& operator=(ITableItemProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITableProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITableProvider>
    {
        ITableProvider(std::nullptr_t = nullptr) noexcept {}
        ITableProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITableProvider(ITableProvider const&) noexcept = default;
        ITableProvider(ITableProvider&&) noexcept = default;
        ITableProvider& operator=(ITableProvider const&) & noexcept = default;
        ITableProvider& operator=(ITableProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextChildProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextChildProvider>
    {
        ITextChildProvider(std::nullptr_t = nullptr) noexcept {}
        ITextChildProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextChildProvider(ITextChildProvider const&) noexcept = default;
        ITextChildProvider(ITextChildProvider&&) noexcept = default;
        ITextChildProvider& operator=(ITextChildProvider const&) & noexcept = default;
        ITextChildProvider& operator=(ITextChildProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextEditProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextEditProvider>,
        impl::require<winrt::Windows::UI::Xaml::Automation::Provider::ITextEditProvider, winrt::Windows::UI::Xaml::Automation::Provider::ITextProvider>
    {
        ITextEditProvider(std::nullptr_t = nullptr) noexcept {}
        ITextEditProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextEditProvider(ITextEditProvider const&) noexcept = default;
        ITextEditProvider(ITextEditProvider&&) noexcept = default;
        ITextEditProvider& operator=(ITextEditProvider const&) & noexcept = default;
        ITextEditProvider& operator=(ITextEditProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextProvider>
    {
        ITextProvider(std::nullptr_t = nullptr) noexcept {}
        ITextProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextProvider(ITextProvider const&) noexcept = default;
        ITextProvider(ITextProvider&&) noexcept = default;
        ITextProvider& operator=(ITextProvider const&) & noexcept = default;
        ITextProvider& operator=(ITextProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextProvider2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextProvider2>,
        impl::require<winrt::Windows::UI::Xaml::Automation::Provider::ITextProvider2, winrt::Windows::UI::Xaml::Automation::Provider::ITextProvider>
    {
        ITextProvider2(std::nullptr_t = nullptr) noexcept {}
        ITextProvider2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextProvider2(ITextProvider2 const&) noexcept = default;
        ITextProvider2(ITextProvider2&&) noexcept = default;
        ITextProvider2& operator=(ITextProvider2 const&) & noexcept = default;
        ITextProvider2& operator=(ITextProvider2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextRangeProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextRangeProvider>
    {
        ITextRangeProvider(std::nullptr_t = nullptr) noexcept {}
        ITextRangeProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextRangeProvider(ITextRangeProvider const&) noexcept = default;
        ITextRangeProvider(ITextRangeProvider&&) noexcept = default;
        ITextRangeProvider& operator=(ITextRangeProvider const&) & noexcept = default;
        ITextRangeProvider& operator=(ITextRangeProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITextRangeProvider2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextRangeProvider2>,
        impl::require<winrt::Windows::UI::Xaml::Automation::Provider::ITextRangeProvider2, winrt::Windows::UI::Xaml::Automation::Provider::ITextRangeProvider>
    {
        ITextRangeProvider2(std::nullptr_t = nullptr) noexcept {}
        ITextRangeProvider2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITextRangeProvider2(ITextRangeProvider2 const&) noexcept = default;
        ITextRangeProvider2(ITextRangeProvider2&&) noexcept = default;
        ITextRangeProvider2& operator=(ITextRangeProvider2 const&) & noexcept = default;
        ITextRangeProvider2& operator=(ITextRangeProvider2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToggleProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToggleProvider>
    {
        IToggleProvider(std::nullptr_t = nullptr) noexcept {}
        IToggleProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToggleProvider(IToggleProvider const&) noexcept = default;
        IToggleProvider(IToggleProvider&&) noexcept = default;
        IToggleProvider& operator=(IToggleProvider const&) & noexcept = default;
        IToggleProvider& operator=(IToggleProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITransformProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITransformProvider>
    {
        ITransformProvider(std::nullptr_t = nullptr) noexcept {}
        ITransformProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITransformProvider(ITransformProvider const&) noexcept = default;
        ITransformProvider(ITransformProvider&&) noexcept = default;
        ITransformProvider& operator=(ITransformProvider const&) & noexcept = default;
        ITransformProvider& operator=(ITransformProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITransformProvider2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITransformProvider2>,
        impl::require<winrt::Windows::UI::Xaml::Automation::Provider::ITransformProvider2, winrt::Windows::UI::Xaml::Automation::Provider::ITransformProvider>
    {
        ITransformProvider2(std::nullptr_t = nullptr) noexcept {}
        ITransformProvider2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITransformProvider2(ITransformProvider2 const&) noexcept = default;
        ITransformProvider2(ITransformProvider2&&) noexcept = default;
        ITransformProvider2& operator=(ITransformProvider2 const&) & noexcept = default;
        ITransformProvider2& operator=(ITransformProvider2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IValueProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IValueProvider>
    {
        IValueProvider(std::nullptr_t = nullptr) noexcept {}
        IValueProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IValueProvider(IValueProvider const&) noexcept = default;
        IValueProvider(IValueProvider&&) noexcept = default;
        IValueProvider& operator=(IValueProvider const&) & noexcept = default;
        IValueProvider& operator=(IValueProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IVirtualizedItemProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IVirtualizedItemProvider>
    {
        IVirtualizedItemProvider(std::nullptr_t = nullptr) noexcept {}
        IVirtualizedItemProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IVirtualizedItemProvider(IVirtualizedItemProvider const&) noexcept = default;
        IVirtualizedItemProvider(IVirtualizedItemProvider&&) noexcept = default;
        IVirtualizedItemProvider& operator=(IVirtualizedItemProvider const&) & noexcept = default;
        IVirtualizedItemProvider& operator=(IVirtualizedItemProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWindowProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWindowProvider>
    {
        IWindowProvider(std::nullptr_t = nullptr) noexcept {}
        IWindowProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWindowProvider(IWindowProvider const&) noexcept = default;
        IWindowProvider(IWindowProvider&&) noexcept = default;
        IWindowProvider& operator=(IWindowProvider const&) & noexcept = default;
        IWindowProvider& operator=(IWindowProvider&&) & noexcept = default;
    };
}
#endif
