// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Devices_Lights_1_H
#define WINRT_Windows_Devices_Lights_1_H
#include "winrt/impl/Windows.Foundation.0.h"
#include "winrt/impl/Windows.Devices.Lights.0.h"
WINRT_EXPORT namespace winrt::Windows::Devices::Lights
{
    struct __declspec(empty_bases) ILamp :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILamp>,
        impl::require<winrt::Windows::Devices::Lights::ILamp, winrt::Windows::Foundation::IClosable>
    {
        ILamp(std::nullptr_t = nullptr) noexcept {}
        ILamp(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILamp(ILamp const&) noexcept = default;
        ILamp(ILamp&&) noexcept = default;
        ILamp& operator=(ILamp const&) & noexcept = default;
        ILamp& operator=(ILamp&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILampArray :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILampArray>
    {
        ILampArray(std::nullptr_t = nullptr) noexcept {}
        ILampArray(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILampArray(ILampArray const&) noexcept = default;
        ILampArray(ILampArray&&) noexcept = default;
        ILampArray& operator=(ILampArray const&) & noexcept = default;
        ILampArray& operator=(ILampArray&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILampArrayStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILampArrayStatics>
    {
        ILampArrayStatics(std::nullptr_t = nullptr) noexcept {}
        ILampArrayStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILampArrayStatics(ILampArrayStatics const&) noexcept = default;
        ILampArrayStatics(ILampArrayStatics&&) noexcept = default;
        ILampArrayStatics& operator=(ILampArrayStatics const&) & noexcept = default;
        ILampArrayStatics& operator=(ILampArrayStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILampAvailabilityChangedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILampAvailabilityChangedEventArgs>
    {
        ILampAvailabilityChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
        ILampAvailabilityChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILampAvailabilityChangedEventArgs(ILampAvailabilityChangedEventArgs const&) noexcept = default;
        ILampAvailabilityChangedEventArgs(ILampAvailabilityChangedEventArgs&&) noexcept = default;
        ILampAvailabilityChangedEventArgs& operator=(ILampAvailabilityChangedEventArgs const&) & noexcept = default;
        ILampAvailabilityChangedEventArgs& operator=(ILampAvailabilityChangedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILampInfo :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILampInfo>
    {
        ILampInfo(std::nullptr_t = nullptr) noexcept {}
        ILampInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILampInfo(ILampInfo const&) noexcept = default;
        ILampInfo(ILampInfo&&) noexcept = default;
        ILampInfo& operator=(ILampInfo const&) & noexcept = default;
        ILampInfo& operator=(ILampInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILampStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILampStatics>
    {
        ILampStatics(std::nullptr_t = nullptr) noexcept {}
        ILampStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILampStatics(ILampStatics const&) noexcept = default;
        ILampStatics(ILampStatics&&) noexcept = default;
        ILampStatics& operator=(ILampStatics const&) & noexcept = default;
        ILampStatics& operator=(ILampStatics&&) & noexcept = default;
    };
}
#endif
