// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Foundation_1_H
#define WINRT_Windows_Foundation_1_H
#include "winrt/impl/Windows.Foundation.Collections.0.h"
#include "winrt/impl/Windows.Foundation.0.h"
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct __declspec(empty_bases) IAsyncAction :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAsyncAction>,
        impl::require<winrt::Windows::Foundation::IAsyncAction, winrt::Windows::Foundation::IAsyncInfo>
    {
        IAsyncAction(std::nullptr_t = nullptr) noexcept {}
        IAsyncAction(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAsyncAction(IAsyncAction const&) noexcept = default;
        IAsyncAction(IAsyncAction&&) noexcept = default;
        IAsyncAction& operator=(IAsyncAction const&) & noexcept = default;
        IAsyncAction& operator=(IAsyncAction&&) & noexcept = default;
    };
    template <typename TProgress>
    struct __declspec(empty_bases) IAsyncActionWithProgress :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<winrt::Windows::Foundation::IAsyncActionWithProgress<TProgress>>,
        impl::require<winrt::Windows::Foundation::IAsyncActionWithProgress<TProgress>, winrt::Windows::Foundation::IAsyncInfo>
    {
        static_assert(impl::has_category_v<TProgress>, "TProgress must be WinRT type.");
        IAsyncActionWithProgress(std::nullptr_t = nullptr) noexcept {}
        IAsyncActionWithProgress(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAsyncActionWithProgress(IAsyncActionWithProgress const&) noexcept = default;
        IAsyncActionWithProgress(IAsyncActionWithProgress&&) noexcept = default;
        IAsyncActionWithProgress& operator=(IAsyncActionWithProgress const&) & noexcept = default;
        IAsyncActionWithProgress& operator=(IAsyncActionWithProgress&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAsyncInfo :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAsyncInfo>
    {
        IAsyncInfo(std::nullptr_t = nullptr) noexcept {}
        IAsyncInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAsyncInfo(IAsyncInfo const&) noexcept = default;
        IAsyncInfo(IAsyncInfo&&) noexcept = default;
        IAsyncInfo& operator=(IAsyncInfo const&) & noexcept = default;
        IAsyncInfo& operator=(IAsyncInfo&&) & noexcept = default;
    };
    template <typename TResult, typename TProgress>
    struct __declspec(empty_bases) IAsyncOperationWithProgress :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<winrt::Windows::Foundation::IAsyncOperationWithProgress<TResult, TProgress>>,
        impl::require<winrt::Windows::Foundation::IAsyncOperationWithProgress<TResult, TProgress>, winrt::Windows::Foundation::IAsyncInfo>
    {
        static_assert(impl::has_category_v<TResult>, "TResult must be WinRT type.");
        static_assert(impl::has_category_v<TProgress>, "TProgress must be WinRT type.");
        IAsyncOperationWithProgress(std::nullptr_t = nullptr) noexcept {}
        IAsyncOperationWithProgress(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAsyncOperationWithProgress(IAsyncOperationWithProgress const&) noexcept = default;
        IAsyncOperationWithProgress(IAsyncOperationWithProgress&&) noexcept = default;
        IAsyncOperationWithProgress& operator=(IAsyncOperationWithProgress const&) & noexcept = default;
        IAsyncOperationWithProgress& operator=(IAsyncOperationWithProgress&&) & noexcept = default;
    };
    template <typename TResult>
    struct __declspec(empty_bases) IAsyncOperation :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<winrt::Windows::Foundation::IAsyncOperation<TResult>>,
        impl::require<winrt::Windows::Foundation::IAsyncOperation<TResult>, winrt::Windows::Foundation::IAsyncInfo>
    {
        static_assert(impl::has_category_v<TResult>, "TResult must be WinRT type.");
        IAsyncOperation(std::nullptr_t = nullptr) noexcept {}
        IAsyncOperation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAsyncOperation(IAsyncOperation const&) noexcept = default;
        IAsyncOperation(IAsyncOperation&&) noexcept = default;
        IAsyncOperation& operator=(IAsyncOperation const&) & noexcept = default;
        IAsyncOperation& operator=(IAsyncOperation&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IClosable :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IClosable>
    {
        IClosable(std::nullptr_t = nullptr) noexcept {}
        IClosable(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IClosable(IClosable const&) noexcept = default;
        IClosable(IClosable&&) noexcept = default;
        IClosable& operator=(IClosable const&) & noexcept = default;
        IClosable& operator=(IClosable&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeferral :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeferral>,
        impl::require<winrt::Windows::Foundation::IDeferral, winrt::Windows::Foundation::IClosable>
    {
        IDeferral(std::nullptr_t = nullptr) noexcept {}
        IDeferral(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeferral(IDeferral const&) noexcept = default;
        IDeferral(IDeferral&&) noexcept = default;
        IDeferral& operator=(IDeferral const&) & noexcept = default;
        IDeferral& operator=(IDeferral&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeferralFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeferralFactory>
    {
        IDeferralFactory(std::nullptr_t = nullptr) noexcept {}
        IDeferralFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeferralFactory(IDeferralFactory const&) noexcept = default;
        IDeferralFactory(IDeferralFactory&&) noexcept = default;
        IDeferralFactory& operator=(IDeferralFactory const&) & noexcept = default;
        IDeferralFactory& operator=(IDeferralFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGetActivationFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGetActivationFactory>
    {
        IGetActivationFactory(std::nullptr_t = nullptr) noexcept {}
        IGetActivationFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGetActivationFactory(IGetActivationFactory const&) noexcept = default;
        IGetActivationFactory(IGetActivationFactory&&) noexcept = default;
        IGetActivationFactory& operator=(IGetActivationFactory const&) & noexcept = default;
        IGetActivationFactory& operator=(IGetActivationFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGuidHelperStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGuidHelperStatics>
    {
        IGuidHelperStatics(std::nullptr_t = nullptr) noexcept {}
        IGuidHelperStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGuidHelperStatics(IGuidHelperStatics const&) noexcept = default;
        IGuidHelperStatics(IGuidHelperStatics&&) noexcept = default;
        IGuidHelperStatics& operator=(IGuidHelperStatics const&) & noexcept = default;
        IGuidHelperStatics& operator=(IGuidHelperStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMemoryBuffer :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMemoryBuffer>,
        impl::require<winrt::Windows::Foundation::IMemoryBuffer, winrt::Windows::Foundation::IClosable>
    {
        IMemoryBuffer(std::nullptr_t = nullptr) noexcept {}
        IMemoryBuffer(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMemoryBuffer(IMemoryBuffer const&) noexcept = default;
        IMemoryBuffer(IMemoryBuffer&&) noexcept = default;
        IMemoryBuffer& operator=(IMemoryBuffer const&) & noexcept = default;
        IMemoryBuffer& operator=(IMemoryBuffer&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMemoryBufferFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMemoryBufferFactory>
    {
        IMemoryBufferFactory(std::nullptr_t = nullptr) noexcept {}
        IMemoryBufferFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMemoryBufferFactory(IMemoryBufferFactory const&) noexcept = default;
        IMemoryBufferFactory(IMemoryBufferFactory&&) noexcept = default;
        IMemoryBufferFactory& operator=(IMemoryBufferFactory const&) & noexcept = default;
        IMemoryBufferFactory& operator=(IMemoryBufferFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMemoryBufferReference :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMemoryBufferReference>,
        impl::require<winrt::Windows::Foundation::IMemoryBufferReference, winrt::Windows::Foundation::IClosable>
    {
        IMemoryBufferReference(std::nullptr_t = nullptr) noexcept {}
        IMemoryBufferReference(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMemoryBufferReference(IMemoryBufferReference const&) noexcept = default;
        IMemoryBufferReference(IMemoryBufferReference&&) noexcept = default;
        IMemoryBufferReference& operator=(IMemoryBufferReference const&) & noexcept = default;
        IMemoryBufferReference& operator=(IMemoryBufferReference&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPropertyValue :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPropertyValue>
    {
        IPropertyValue(std::nullptr_t = nullptr) noexcept {}
        IPropertyValue(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPropertyValue(IPropertyValue const&) noexcept = default;
        IPropertyValue(IPropertyValue&&) noexcept = default;
        IPropertyValue& operator=(IPropertyValue const&) & noexcept = default;
        IPropertyValue& operator=(IPropertyValue&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPropertyValueStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPropertyValueStatics>
    {
        IPropertyValueStatics(std::nullptr_t = nullptr) noexcept {}
        IPropertyValueStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPropertyValueStatics(IPropertyValueStatics const&) noexcept = default;
        IPropertyValueStatics(IPropertyValueStatics&&) noexcept = default;
        IPropertyValueStatics& operator=(IPropertyValueStatics const&) & noexcept = default;
        IPropertyValueStatics& operator=(IPropertyValueStatics&&) & noexcept = default;
    };
    template <typename T>
    struct __declspec(empty_bases) IReferenceArray :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<winrt::Windows::Foundation::IReferenceArray<T>>,
        impl::require<winrt::Windows::Foundation::IReferenceArray<T>, winrt::Windows::Foundation::IPropertyValue>
    {
        static_assert(impl::has_category_v<T>, "T must be WinRT type.");
        IReferenceArray(std::nullptr_t = nullptr) noexcept {}
        IReferenceArray(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IReferenceArray(IReferenceArray const&) noexcept = default;
        IReferenceArray(IReferenceArray&&) noexcept = default;
        IReferenceArray& operator=(IReferenceArray const&) & noexcept = default;
        IReferenceArray& operator=(IReferenceArray&&) & noexcept = default;
    };
    template <typename T>
    struct __declspec(empty_bases) IReference :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<winrt::Windows::Foundation::IReference<T>>,
        impl::require<winrt::Windows::Foundation::IReference<T>, winrt::Windows::Foundation::IPropertyValue>
    {
        static_assert(impl::has_category_v<T>, "T must be WinRT type.");
        IReference(std::nullptr_t = nullptr) noexcept {}
        IReference(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IReference(IReference const&) noexcept = default;
        IReference(IReference&&) noexcept = default;
        IReference& operator=(IReference const&) & noexcept = default;
        IReference& operator=(IReference&&) & noexcept = default;
        IReference(T const& value) : IReference<T>(impl::reference_traits<T>::make(value))
        {
        }

    private:

        IReference<T>(IInspectable const& value) : IReference<T>(value.as<IReference<T>>())
        {
        }
    };
    struct __declspec(empty_bases) IStringable :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStringable>
    {
        IStringable(std::nullptr_t = nullptr) noexcept {}
        IStringable(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStringable(IStringable const&) noexcept = default;
        IStringable(IStringable&&) noexcept = default;
        IStringable& operator=(IStringable const&) & noexcept = default;
        IStringable& operator=(IStringable&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IUriEscapeStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IUriEscapeStatics>
    {
        IUriEscapeStatics(std::nullptr_t = nullptr) noexcept {}
        IUriEscapeStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IUriEscapeStatics(IUriEscapeStatics const&) noexcept = default;
        IUriEscapeStatics(IUriEscapeStatics&&) noexcept = default;
        IUriEscapeStatics& operator=(IUriEscapeStatics const&) & noexcept = default;
        IUriEscapeStatics& operator=(IUriEscapeStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IUriRuntimeClass :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IUriRuntimeClass>
    {
        IUriRuntimeClass(std::nullptr_t = nullptr) noexcept {}
        IUriRuntimeClass(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IUriRuntimeClass(IUriRuntimeClass const&) noexcept = default;
        IUriRuntimeClass(IUriRuntimeClass&&) noexcept = default;
        IUriRuntimeClass& operator=(IUriRuntimeClass const&) & noexcept = default;
        IUriRuntimeClass& operator=(IUriRuntimeClass&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IUriRuntimeClassFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IUriRuntimeClassFactory>
    {
        IUriRuntimeClassFactory(std::nullptr_t = nullptr) noexcept {}
        IUriRuntimeClassFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IUriRuntimeClassFactory(IUriRuntimeClassFactory const&) noexcept = default;
        IUriRuntimeClassFactory(IUriRuntimeClassFactory&&) noexcept = default;
        IUriRuntimeClassFactory& operator=(IUriRuntimeClassFactory const&) & noexcept = default;
        IUriRuntimeClassFactory& operator=(IUriRuntimeClassFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IUriRuntimeClassWithAbsoluteCanonicalUri :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IUriRuntimeClassWithAbsoluteCanonicalUri>
    {
        IUriRuntimeClassWithAbsoluteCanonicalUri(std::nullptr_t = nullptr) noexcept {}
        IUriRuntimeClassWithAbsoluteCanonicalUri(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IUriRuntimeClassWithAbsoluteCanonicalUri(IUriRuntimeClassWithAbsoluteCanonicalUri const&) noexcept = default;
        IUriRuntimeClassWithAbsoluteCanonicalUri(IUriRuntimeClassWithAbsoluteCanonicalUri&&) noexcept = default;
        IUriRuntimeClassWithAbsoluteCanonicalUri& operator=(IUriRuntimeClassWithAbsoluteCanonicalUri const&) & noexcept = default;
        IUriRuntimeClassWithAbsoluteCanonicalUri& operator=(IUriRuntimeClassWithAbsoluteCanonicalUri&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWwwFormUrlDecoderEntry :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWwwFormUrlDecoderEntry>
    {
        IWwwFormUrlDecoderEntry(std::nullptr_t = nullptr) noexcept {}
        IWwwFormUrlDecoderEntry(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWwwFormUrlDecoderEntry(IWwwFormUrlDecoderEntry const&) noexcept = default;
        IWwwFormUrlDecoderEntry(IWwwFormUrlDecoderEntry&&) noexcept = default;
        IWwwFormUrlDecoderEntry& operator=(IWwwFormUrlDecoderEntry const&) & noexcept = default;
        IWwwFormUrlDecoderEntry& operator=(IWwwFormUrlDecoderEntry&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWwwFormUrlDecoderRuntimeClass :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWwwFormUrlDecoderRuntimeClass>,
        impl::require<winrt::Windows::Foundation::IWwwFormUrlDecoderRuntimeClass, winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::IWwwFormUrlDecoderEntry>, winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Foundation::IWwwFormUrlDecoderEntry>>
    {
        IWwwFormUrlDecoderRuntimeClass(std::nullptr_t = nullptr) noexcept {}
        IWwwFormUrlDecoderRuntimeClass(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWwwFormUrlDecoderRuntimeClass(IWwwFormUrlDecoderRuntimeClass const&) noexcept = default;
        IWwwFormUrlDecoderRuntimeClass(IWwwFormUrlDecoderRuntimeClass&&) noexcept = default;
        IWwwFormUrlDecoderRuntimeClass& operator=(IWwwFormUrlDecoderRuntimeClass const&) & noexcept = default;
        IWwwFormUrlDecoderRuntimeClass& operator=(IWwwFormUrlDecoderRuntimeClass&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWwwFormUrlDecoderRuntimeClassFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWwwFormUrlDecoderRuntimeClassFactory>
    {
        IWwwFormUrlDecoderRuntimeClassFactory(std::nullptr_t = nullptr) noexcept {}
        IWwwFormUrlDecoderRuntimeClassFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWwwFormUrlDecoderRuntimeClassFactory(IWwwFormUrlDecoderRuntimeClassFactory const&) noexcept = default;
        IWwwFormUrlDecoderRuntimeClassFactory(IWwwFormUrlDecoderRuntimeClassFactory&&) noexcept = default;
        IWwwFormUrlDecoderRuntimeClassFactory& operator=(IWwwFormUrlDecoderRuntimeClassFactory const&) & noexcept = default;
        IWwwFormUrlDecoderRuntimeClassFactory& operator=(IWwwFormUrlDecoderRuntimeClassFactory&&) & noexcept = default;
    };
}

WINRT_EXPORT namespace winrt::Windows::Foundation
{
    template <typename T>
    bool operator==(IReference<T> const& left, IReference<T> const& right)
    {
        if (get_abi(left) == get_abi(right))
        {
            return true;
        }

        if (!left || !right)
        {
            return false;
        }

        return left.Value() == right.Value();
    }

    template <typename T>
    bool operator!=(IReference<T> const& left, IReference<T> const& right)
    {
        return !(left == right);
    }
}
#endif
