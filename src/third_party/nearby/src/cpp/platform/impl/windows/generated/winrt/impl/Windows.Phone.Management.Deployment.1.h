// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Phone_Management_Deployment_1_H
#define WINRT_Windows_Phone_Management_Deployment_1_H
#include "winrt/impl/Windows.Phone.Management.Deployment.0.h"
WINRT_EXPORT namespace winrt::Windows::Phone::Management::Deployment
{
    struct __declspec(empty_bases) IEnterprise :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IEnterprise>
    {
        IEnterprise(std::nullptr_t = nullptr) noexcept {}
        IEnterprise(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IEnterprise(IEnterprise const&) noexcept = default;
        IEnterprise(IEnterprise&&) noexcept = default;
        IEnterprise& operator=(IEnterprise const&) & noexcept = default;
        IEnterprise& operator=(IEnterprise&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IEnterpriseEnrollmentManager :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IEnterpriseEnrollmentManager>
    {
        IEnterpriseEnrollmentManager(std::nullptr_t = nullptr) noexcept {}
        IEnterpriseEnrollmentManager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IEnterpriseEnrollmentManager(IEnterpriseEnrollmentManager const&) noexcept = default;
        IEnterpriseEnrollmentManager(IEnterpriseEnrollmentManager&&) noexcept = default;
        IEnterpriseEnrollmentManager& operator=(IEnterpriseEnrollmentManager const&) & noexcept = default;
        IEnterpriseEnrollmentManager& operator=(IEnterpriseEnrollmentManager&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IEnterpriseEnrollmentResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IEnterpriseEnrollmentResult>
    {
        IEnterpriseEnrollmentResult(std::nullptr_t = nullptr) noexcept {}
        IEnterpriseEnrollmentResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IEnterpriseEnrollmentResult(IEnterpriseEnrollmentResult const&) noexcept = default;
        IEnterpriseEnrollmentResult(IEnterpriseEnrollmentResult&&) noexcept = default;
        IEnterpriseEnrollmentResult& operator=(IEnterpriseEnrollmentResult const&) & noexcept = default;
        IEnterpriseEnrollmentResult& operator=(IEnterpriseEnrollmentResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IInstallationManagerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IInstallationManagerStatics>
    {
        IInstallationManagerStatics(std::nullptr_t = nullptr) noexcept {}
        IInstallationManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IInstallationManagerStatics(IInstallationManagerStatics const&) noexcept = default;
        IInstallationManagerStatics(IInstallationManagerStatics&&) noexcept = default;
        IInstallationManagerStatics& operator=(IInstallationManagerStatics const&) & noexcept = default;
        IInstallationManagerStatics& operator=(IInstallationManagerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IInstallationManagerStatics2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IInstallationManagerStatics2>
    {
        IInstallationManagerStatics2(std::nullptr_t = nullptr) noexcept {}
        IInstallationManagerStatics2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IInstallationManagerStatics2(IInstallationManagerStatics2 const&) noexcept = default;
        IInstallationManagerStatics2(IInstallationManagerStatics2&&) noexcept = default;
        IInstallationManagerStatics2& operator=(IInstallationManagerStatics2 const&) & noexcept = default;
        IInstallationManagerStatics2& operator=(IInstallationManagerStatics2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageInstallResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageInstallResult>
    {
        IPackageInstallResult(std::nullptr_t = nullptr) noexcept {}
        IPackageInstallResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageInstallResult(IPackageInstallResult const&) noexcept = default;
        IPackageInstallResult(IPackageInstallResult&&) noexcept = default;
        IPackageInstallResult& operator=(IPackageInstallResult const&) & noexcept = default;
        IPackageInstallResult& operator=(IPackageInstallResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageInstallResult2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageInstallResult2>
    {
        IPackageInstallResult2(std::nullptr_t = nullptr) noexcept {}
        IPackageInstallResult2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageInstallResult2(IPackageInstallResult2 const&) noexcept = default;
        IPackageInstallResult2(IPackageInstallResult2&&) noexcept = default;
        IPackageInstallResult2& operator=(IPackageInstallResult2 const&) & noexcept = default;
        IPackageInstallResult2& operator=(IPackageInstallResult2&&) & noexcept = default;
    };
}
#endif
