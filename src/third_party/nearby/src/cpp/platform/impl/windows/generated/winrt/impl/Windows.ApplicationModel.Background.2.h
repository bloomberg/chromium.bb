// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_ApplicationModel_Background_2_H
#define WINRT_Windows_ApplicationModel_Background_2_H
#include "winrt/impl/Windows.ApplicationModel.Calls.Background.1.h"
#include "winrt/impl/Windows.Devices.Bluetooth.Background.1.h"
#include "winrt/impl/Windows.Devices.Bluetooth.GenericAttributeProfile.1.h"
#include "winrt/impl/Windows.Devices.Sensors.1.h"
#include "winrt/impl/Windows.Devices.SmartCards.1.h"
#include "winrt/impl/Windows.Devices.Sms.1.h"
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.Foundation.Collections.1.h"
#include "winrt/impl/Windows.Storage.1.h"
#include "winrt/impl/Windows.UI.Notifications.1.h"
#include "winrt/impl/Windows.ApplicationModel.Background.1.h"
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Background
{
    struct BackgroundTaskCanceledEventHandler : Windows::Foundation::IUnknown
    {
        BackgroundTaskCanceledEventHandler(std::nullptr_t = nullptr) noexcept {}
        BackgroundTaskCanceledEventHandler(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        BackgroundTaskCanceledEventHandler(BackgroundTaskCanceledEventHandler const&) noexcept = default;
        BackgroundTaskCanceledEventHandler(BackgroundTaskCanceledEventHandler&&) noexcept = default;
        BackgroundTaskCanceledEventHandler& operator=(BackgroundTaskCanceledEventHandler const&) & noexcept = default;
        BackgroundTaskCanceledEventHandler& operator=(BackgroundTaskCanceledEventHandler&&) & noexcept = default;
        template <typename L> BackgroundTaskCanceledEventHandler(L lambda);
        template <typename F> BackgroundTaskCanceledEventHandler(F* function);
        template <typename O, typename M> BackgroundTaskCanceledEventHandler(O* object, M method);
        template <typename O, typename M> BackgroundTaskCanceledEventHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> BackgroundTaskCanceledEventHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Windows::ApplicationModel::Background::IBackgroundTaskInstance const& sender, winrt::Windows::ApplicationModel::Background::BackgroundTaskCancellationReason const& reason) const;
    };
    struct BackgroundTaskCompletedEventHandler : Windows::Foundation::IUnknown
    {
        BackgroundTaskCompletedEventHandler(std::nullptr_t = nullptr) noexcept {}
        BackgroundTaskCompletedEventHandler(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        BackgroundTaskCompletedEventHandler(BackgroundTaskCompletedEventHandler const&) noexcept = default;
        BackgroundTaskCompletedEventHandler(BackgroundTaskCompletedEventHandler&&) noexcept = default;
        BackgroundTaskCompletedEventHandler& operator=(BackgroundTaskCompletedEventHandler const&) & noexcept = default;
        BackgroundTaskCompletedEventHandler& operator=(BackgroundTaskCompletedEventHandler&&) & noexcept = default;
        template <typename L> BackgroundTaskCompletedEventHandler(L lambda);
        template <typename F> BackgroundTaskCompletedEventHandler(F* function);
        template <typename O, typename M> BackgroundTaskCompletedEventHandler(O* object, M method);
        template <typename O, typename M> BackgroundTaskCompletedEventHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> BackgroundTaskCompletedEventHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Windows::ApplicationModel::Background::BackgroundTaskRegistration const& sender, winrt::Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs const& args) const;
    };
    struct BackgroundTaskProgressEventHandler : Windows::Foundation::IUnknown
    {
        BackgroundTaskProgressEventHandler(std::nullptr_t = nullptr) noexcept {}
        BackgroundTaskProgressEventHandler(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        BackgroundTaskProgressEventHandler(BackgroundTaskProgressEventHandler const&) noexcept = default;
        BackgroundTaskProgressEventHandler(BackgroundTaskProgressEventHandler&&) noexcept = default;
        BackgroundTaskProgressEventHandler& operator=(BackgroundTaskProgressEventHandler const&) & noexcept = default;
        BackgroundTaskProgressEventHandler& operator=(BackgroundTaskProgressEventHandler&&) & noexcept = default;
        template <typename L> BackgroundTaskProgressEventHandler(L lambda);
        template <typename F> BackgroundTaskProgressEventHandler(F* function);
        template <typename O, typename M> BackgroundTaskProgressEventHandler(O* object, M method);
        template <typename O, typename M> BackgroundTaskProgressEventHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> BackgroundTaskProgressEventHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Windows::ApplicationModel::Background::BackgroundTaskRegistration const& sender, winrt::Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs const& args) const;
    };
    struct __declspec(empty_bases) ActivitySensorTrigger : winrt::Windows::ApplicationModel::Background::IActivitySensorTrigger
    {
        ActivitySensorTrigger(std::nullptr_t) noexcept {}
        ActivitySensorTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IActivitySensorTrigger(ptr, take_ownership_from_abi) {}
        explicit ActivitySensorTrigger(uint32_t reportIntervalInMilliseconds);
        ActivitySensorTrigger(ActivitySensorTrigger const&) noexcept = default;
        ActivitySensorTrigger(ActivitySensorTrigger&&) noexcept = default;
        ActivitySensorTrigger& operator=(ActivitySensorTrigger const&) & noexcept = default;
        ActivitySensorTrigger& operator=(ActivitySensorTrigger&&) & noexcept = default;
    };
    struct AlarmApplicationManager
    {
        AlarmApplicationManager() = delete;
        static auto RequestAccessAsync();
        static auto GetAccessStatus();
    };
    struct __declspec(empty_bases) AppBroadcastTrigger : winrt::Windows::ApplicationModel::Background::IAppBroadcastTrigger
    {
        AppBroadcastTrigger(std::nullptr_t) noexcept {}
        AppBroadcastTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IAppBroadcastTrigger(ptr, take_ownership_from_abi) {}
        explicit AppBroadcastTrigger(param::hstring const& providerKey);
        AppBroadcastTrigger(AppBroadcastTrigger const&) noexcept = default;
        AppBroadcastTrigger(AppBroadcastTrigger&&) noexcept = default;
        AppBroadcastTrigger& operator=(AppBroadcastTrigger const&) & noexcept = default;
        AppBroadcastTrigger& operator=(AppBroadcastTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) AppBroadcastTriggerProviderInfo : winrt::Windows::ApplicationModel::Background::IAppBroadcastTriggerProviderInfo
    {
        AppBroadcastTriggerProviderInfo(std::nullptr_t) noexcept {}
        AppBroadcastTriggerProviderInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IAppBroadcastTriggerProviderInfo(ptr, take_ownership_from_abi) {}
        AppBroadcastTriggerProviderInfo(AppBroadcastTriggerProviderInfo const&) noexcept = default;
        AppBroadcastTriggerProviderInfo(AppBroadcastTriggerProviderInfo&&) noexcept = default;
        AppBroadcastTriggerProviderInfo& operator=(AppBroadcastTriggerProviderInfo const&) & noexcept = default;
        AppBroadcastTriggerProviderInfo& operator=(AppBroadcastTriggerProviderInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ApplicationTrigger : winrt::Windows::ApplicationModel::Background::IApplicationTrigger
    {
        ApplicationTrigger(std::nullptr_t) noexcept {}
        ApplicationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IApplicationTrigger(ptr, take_ownership_from_abi) {}
        ApplicationTrigger();
        ApplicationTrigger(ApplicationTrigger const&) noexcept = default;
        ApplicationTrigger(ApplicationTrigger&&) noexcept = default;
        ApplicationTrigger& operator=(ApplicationTrigger const&) & noexcept = default;
        ApplicationTrigger& operator=(ApplicationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ApplicationTriggerDetails : winrt::Windows::ApplicationModel::Background::IApplicationTriggerDetails
    {
        ApplicationTriggerDetails(std::nullptr_t) noexcept {}
        ApplicationTriggerDetails(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IApplicationTriggerDetails(ptr, take_ownership_from_abi) {}
        ApplicationTriggerDetails(ApplicationTriggerDetails const&) noexcept = default;
        ApplicationTriggerDetails(ApplicationTriggerDetails&&) noexcept = default;
        ApplicationTriggerDetails& operator=(ApplicationTriggerDetails const&) & noexcept = default;
        ApplicationTriggerDetails& operator=(ApplicationTriggerDetails&&) & noexcept = default;
    };
    struct __declspec(empty_bases) AppointmentStoreNotificationTrigger : winrt::Windows::ApplicationModel::Background::IAppointmentStoreNotificationTrigger
    {
        AppointmentStoreNotificationTrigger(std::nullptr_t) noexcept {}
        AppointmentStoreNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IAppointmentStoreNotificationTrigger(ptr, take_ownership_from_abi) {}
        AppointmentStoreNotificationTrigger();
        AppointmentStoreNotificationTrigger(AppointmentStoreNotificationTrigger const&) noexcept = default;
        AppointmentStoreNotificationTrigger(AppointmentStoreNotificationTrigger&&) noexcept = default;
        AppointmentStoreNotificationTrigger& operator=(AppointmentStoreNotificationTrigger const&) & noexcept = default;
        AppointmentStoreNotificationTrigger& operator=(AppointmentStoreNotificationTrigger&&) & noexcept = default;
    };
    struct BackgroundExecutionManager
    {
        BackgroundExecutionManager() = delete;
        static auto RequestAccessAsync();
        static auto RequestAccessAsync(param::hstring const& applicationId);
        static auto RemoveAccess();
        static auto RemoveAccess(param::hstring const& applicationId);
        static auto GetAccessStatus();
        static auto GetAccessStatus(param::hstring const& applicationId);
        static auto RequestAccessKindAsync(winrt::Windows::ApplicationModel::Background::BackgroundAccessRequestKind const& requestedAccess, param::hstring const& reason);
    };
    struct __declspec(empty_bases) BackgroundTaskBuilder : winrt::Windows::ApplicationModel::Background::IBackgroundTaskBuilder,
        impl::require<BackgroundTaskBuilder, winrt::Windows::ApplicationModel::Background::IBackgroundTaskBuilder2, winrt::Windows::ApplicationModel::Background::IBackgroundTaskBuilder3, winrt::Windows::ApplicationModel::Background::IBackgroundTaskBuilder4, winrt::Windows::ApplicationModel::Background::IBackgroundTaskBuilder5>
    {
        BackgroundTaskBuilder(std::nullptr_t) noexcept {}
        BackgroundTaskBuilder(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTaskBuilder(ptr, take_ownership_from_abi) {}
        BackgroundTaskBuilder();
        BackgroundTaskBuilder(BackgroundTaskBuilder const&) noexcept = default;
        BackgroundTaskBuilder(BackgroundTaskBuilder&&) noexcept = default;
        BackgroundTaskBuilder& operator=(BackgroundTaskBuilder const&) & noexcept = default;
        BackgroundTaskBuilder& operator=(BackgroundTaskBuilder&&) & noexcept = default;
    };
    struct __declspec(empty_bases) BackgroundTaskCompletedEventArgs : winrt::Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs
    {
        BackgroundTaskCompletedEventArgs(std::nullptr_t) noexcept {}
        BackgroundTaskCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs(ptr, take_ownership_from_abi) {}
        BackgroundTaskCompletedEventArgs(BackgroundTaskCompletedEventArgs const&) noexcept = default;
        BackgroundTaskCompletedEventArgs(BackgroundTaskCompletedEventArgs&&) noexcept = default;
        BackgroundTaskCompletedEventArgs& operator=(BackgroundTaskCompletedEventArgs const&) & noexcept = default;
        BackgroundTaskCompletedEventArgs& operator=(BackgroundTaskCompletedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) BackgroundTaskDeferral : winrt::Windows::ApplicationModel::Background::IBackgroundTaskDeferral
    {
        BackgroundTaskDeferral(std::nullptr_t) noexcept {}
        BackgroundTaskDeferral(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTaskDeferral(ptr, take_ownership_from_abi) {}
        BackgroundTaskDeferral(BackgroundTaskDeferral const&) noexcept = default;
        BackgroundTaskDeferral(BackgroundTaskDeferral&&) noexcept = default;
        BackgroundTaskDeferral& operator=(BackgroundTaskDeferral const&) & noexcept = default;
        BackgroundTaskDeferral& operator=(BackgroundTaskDeferral&&) & noexcept = default;
    };
    struct __declspec(empty_bases) BackgroundTaskProgressEventArgs : winrt::Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs
    {
        BackgroundTaskProgressEventArgs(std::nullptr_t) noexcept {}
        BackgroundTaskProgressEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs(ptr, take_ownership_from_abi) {}
        BackgroundTaskProgressEventArgs(BackgroundTaskProgressEventArgs const&) noexcept = default;
        BackgroundTaskProgressEventArgs(BackgroundTaskProgressEventArgs&&) noexcept = default;
        BackgroundTaskProgressEventArgs& operator=(BackgroundTaskProgressEventArgs const&) & noexcept = default;
        BackgroundTaskProgressEventArgs& operator=(BackgroundTaskProgressEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) BackgroundTaskRegistration : winrt::Windows::ApplicationModel::Background::IBackgroundTaskRegistration,
        impl::require<BackgroundTaskRegistration, winrt::Windows::ApplicationModel::Background::IBackgroundTaskRegistration2, winrt::Windows::ApplicationModel::Background::IBackgroundTaskRegistration3>
    {
        BackgroundTaskRegistration(std::nullptr_t) noexcept {}
        BackgroundTaskRegistration(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTaskRegistration(ptr, take_ownership_from_abi) {}
        BackgroundTaskRegistration(BackgroundTaskRegistration const&) noexcept = default;
        BackgroundTaskRegistration(BackgroundTaskRegistration&&) noexcept = default;
        BackgroundTaskRegistration& operator=(BackgroundTaskRegistration const&) & noexcept = default;
        BackgroundTaskRegistration& operator=(BackgroundTaskRegistration&&) & noexcept = default;
        [[nodiscard]] static auto AllTasks();
        [[nodiscard]] static auto AllTaskGroups();
        static auto GetTaskGroup(param::hstring const& groupId);
    };
    struct __declspec(empty_bases) BackgroundTaskRegistrationGroup : winrt::Windows::ApplicationModel::Background::IBackgroundTaskRegistrationGroup
    {
        BackgroundTaskRegistrationGroup(std::nullptr_t) noexcept {}
        BackgroundTaskRegistrationGroup(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTaskRegistrationGroup(ptr, take_ownership_from_abi) {}
        explicit BackgroundTaskRegistrationGroup(param::hstring const& id);
        BackgroundTaskRegistrationGroup(param::hstring const& id, param::hstring const& name);
        BackgroundTaskRegistrationGroup(BackgroundTaskRegistrationGroup const&) noexcept = default;
        BackgroundTaskRegistrationGroup(BackgroundTaskRegistrationGroup&&) noexcept = default;
        BackgroundTaskRegistrationGroup& operator=(BackgroundTaskRegistrationGroup const&) & noexcept = default;
        BackgroundTaskRegistrationGroup& operator=(BackgroundTaskRegistrationGroup&&) & noexcept = default;
    };
    struct BackgroundWorkCost
    {
        BackgroundWorkCost() = delete;
        [[nodiscard]] static auto CurrentBackgroundWorkCost();
    };
    struct __declspec(empty_bases) BluetoothLEAdvertisementPublisherTrigger : winrt::Windows::ApplicationModel::Background::IBluetoothLEAdvertisementPublisherTrigger,
        impl::require<BluetoothLEAdvertisementPublisherTrigger, winrt::Windows::ApplicationModel::Background::IBluetoothLEAdvertisementPublisherTrigger2>
    {
        BluetoothLEAdvertisementPublisherTrigger(std::nullptr_t) noexcept {}
        BluetoothLEAdvertisementPublisherTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBluetoothLEAdvertisementPublisherTrigger(ptr, take_ownership_from_abi) {}
        BluetoothLEAdvertisementPublisherTrigger();
        BluetoothLEAdvertisementPublisherTrigger(BluetoothLEAdvertisementPublisherTrigger const&) noexcept = default;
        BluetoothLEAdvertisementPublisherTrigger(BluetoothLEAdvertisementPublisherTrigger&&) noexcept = default;
        BluetoothLEAdvertisementPublisherTrigger& operator=(BluetoothLEAdvertisementPublisherTrigger const&) & noexcept = default;
        BluetoothLEAdvertisementPublisherTrigger& operator=(BluetoothLEAdvertisementPublisherTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) BluetoothLEAdvertisementWatcherTrigger : winrt::Windows::ApplicationModel::Background::IBluetoothLEAdvertisementWatcherTrigger,
        impl::require<BluetoothLEAdvertisementWatcherTrigger, winrt::Windows::ApplicationModel::Background::IBluetoothLEAdvertisementWatcherTrigger2>
    {
        BluetoothLEAdvertisementWatcherTrigger(std::nullptr_t) noexcept {}
        BluetoothLEAdvertisementWatcherTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBluetoothLEAdvertisementWatcherTrigger(ptr, take_ownership_from_abi) {}
        BluetoothLEAdvertisementWatcherTrigger();
        BluetoothLEAdvertisementWatcherTrigger(BluetoothLEAdvertisementWatcherTrigger const&) noexcept = default;
        BluetoothLEAdvertisementWatcherTrigger(BluetoothLEAdvertisementWatcherTrigger&&) noexcept = default;
        BluetoothLEAdvertisementWatcherTrigger& operator=(BluetoothLEAdvertisementWatcherTrigger const&) & noexcept = default;
        BluetoothLEAdvertisementWatcherTrigger& operator=(BluetoothLEAdvertisementWatcherTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) CachedFileUpdaterTrigger : winrt::Windows::ApplicationModel::Background::ICachedFileUpdaterTrigger
    {
        CachedFileUpdaterTrigger(std::nullptr_t) noexcept {}
        CachedFileUpdaterTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::ICachedFileUpdaterTrigger(ptr, take_ownership_from_abi) {}
        CachedFileUpdaterTrigger();
        CachedFileUpdaterTrigger(CachedFileUpdaterTrigger const&) noexcept = default;
        CachedFileUpdaterTrigger(CachedFileUpdaterTrigger&&) noexcept = default;
        CachedFileUpdaterTrigger& operator=(CachedFileUpdaterTrigger const&) & noexcept = default;
        CachedFileUpdaterTrigger& operator=(CachedFileUpdaterTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) CachedFileUpdaterTriggerDetails : winrt::Windows::ApplicationModel::Background::ICachedFileUpdaterTriggerDetails
    {
        CachedFileUpdaterTriggerDetails(std::nullptr_t) noexcept {}
        CachedFileUpdaterTriggerDetails(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::ICachedFileUpdaterTriggerDetails(ptr, take_ownership_from_abi) {}
        CachedFileUpdaterTriggerDetails(CachedFileUpdaterTriggerDetails const&) noexcept = default;
        CachedFileUpdaterTriggerDetails(CachedFileUpdaterTriggerDetails&&) noexcept = default;
        CachedFileUpdaterTriggerDetails& operator=(CachedFileUpdaterTriggerDetails const&) & noexcept = default;
        CachedFileUpdaterTriggerDetails& operator=(CachedFileUpdaterTriggerDetails&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ChatMessageNotificationTrigger : winrt::Windows::ApplicationModel::Background::IChatMessageNotificationTrigger
    {
        ChatMessageNotificationTrigger(std::nullptr_t) noexcept {}
        ChatMessageNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IChatMessageNotificationTrigger(ptr, take_ownership_from_abi) {}
        ChatMessageNotificationTrigger();
        ChatMessageNotificationTrigger(ChatMessageNotificationTrigger const&) noexcept = default;
        ChatMessageNotificationTrigger(ChatMessageNotificationTrigger&&) noexcept = default;
        ChatMessageNotificationTrigger& operator=(ChatMessageNotificationTrigger const&) & noexcept = default;
        ChatMessageNotificationTrigger& operator=(ChatMessageNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ChatMessageReceivedNotificationTrigger : winrt::Windows::ApplicationModel::Background::IChatMessageReceivedNotificationTrigger
    {
        ChatMessageReceivedNotificationTrigger(std::nullptr_t) noexcept {}
        ChatMessageReceivedNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IChatMessageReceivedNotificationTrigger(ptr, take_ownership_from_abi) {}
        ChatMessageReceivedNotificationTrigger();
        ChatMessageReceivedNotificationTrigger(ChatMessageReceivedNotificationTrigger const&) noexcept = default;
        ChatMessageReceivedNotificationTrigger(ChatMessageReceivedNotificationTrigger&&) noexcept = default;
        ChatMessageReceivedNotificationTrigger& operator=(ChatMessageReceivedNotificationTrigger const&) & noexcept = default;
        ChatMessageReceivedNotificationTrigger& operator=(ChatMessageReceivedNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) CommunicationBlockingAppSetAsActiveTrigger : winrt::Windows::ApplicationModel::Background::ICommunicationBlockingAppSetAsActiveTrigger
    {
        CommunicationBlockingAppSetAsActiveTrigger(std::nullptr_t) noexcept {}
        CommunicationBlockingAppSetAsActiveTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::ICommunicationBlockingAppSetAsActiveTrigger(ptr, take_ownership_from_abi) {}
        CommunicationBlockingAppSetAsActiveTrigger();
        CommunicationBlockingAppSetAsActiveTrigger(CommunicationBlockingAppSetAsActiveTrigger const&) noexcept = default;
        CommunicationBlockingAppSetAsActiveTrigger(CommunicationBlockingAppSetAsActiveTrigger&&) noexcept = default;
        CommunicationBlockingAppSetAsActiveTrigger& operator=(CommunicationBlockingAppSetAsActiveTrigger const&) & noexcept = default;
        CommunicationBlockingAppSetAsActiveTrigger& operator=(CommunicationBlockingAppSetAsActiveTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ContactStoreNotificationTrigger : winrt::Windows::ApplicationModel::Background::IContactStoreNotificationTrigger
    {
        ContactStoreNotificationTrigger(std::nullptr_t) noexcept {}
        ContactStoreNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IContactStoreNotificationTrigger(ptr, take_ownership_from_abi) {}
        ContactStoreNotificationTrigger();
        ContactStoreNotificationTrigger(ContactStoreNotificationTrigger const&) noexcept = default;
        ContactStoreNotificationTrigger(ContactStoreNotificationTrigger&&) noexcept = default;
        ContactStoreNotificationTrigger& operator=(ContactStoreNotificationTrigger const&) & noexcept = default;
        ContactStoreNotificationTrigger& operator=(ContactStoreNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ContentPrefetchTrigger : winrt::Windows::ApplicationModel::Background::IContentPrefetchTrigger
    {
        ContentPrefetchTrigger(std::nullptr_t) noexcept {}
        ContentPrefetchTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IContentPrefetchTrigger(ptr, take_ownership_from_abi) {}
        ContentPrefetchTrigger();
        explicit ContentPrefetchTrigger(winrt::Windows::Foundation::TimeSpan const& waitInterval);
        ContentPrefetchTrigger(ContentPrefetchTrigger const&) noexcept = default;
        ContentPrefetchTrigger(ContentPrefetchTrigger&&) noexcept = default;
        ContentPrefetchTrigger& operator=(ContentPrefetchTrigger const&) & noexcept = default;
        ContentPrefetchTrigger& operator=(ContentPrefetchTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ConversationalAgentTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        ConversationalAgentTrigger(std::nullptr_t) noexcept {}
        ConversationalAgentTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        ConversationalAgentTrigger();
        ConversationalAgentTrigger(ConversationalAgentTrigger const&) noexcept = default;
        ConversationalAgentTrigger(ConversationalAgentTrigger&&) noexcept = default;
        ConversationalAgentTrigger& operator=(ConversationalAgentTrigger const&) & noexcept = default;
        ConversationalAgentTrigger& operator=(ConversationalAgentTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) CustomSystemEventTrigger : winrt::Windows::ApplicationModel::Background::ICustomSystemEventTrigger,
        impl::require<CustomSystemEventTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        CustomSystemEventTrigger(std::nullptr_t) noexcept {}
        CustomSystemEventTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::ICustomSystemEventTrigger(ptr, take_ownership_from_abi) {}
        CustomSystemEventTrigger(param::hstring const& triggerId, winrt::Windows::ApplicationModel::Background::CustomSystemEventTriggerRecurrence const& recurrence);
        CustomSystemEventTrigger(CustomSystemEventTrigger const&) noexcept = default;
        CustomSystemEventTrigger(CustomSystemEventTrigger&&) noexcept = default;
        CustomSystemEventTrigger& operator=(CustomSystemEventTrigger const&) & noexcept = default;
        CustomSystemEventTrigger& operator=(CustomSystemEventTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceConnectionChangeTrigger : winrt::Windows::ApplicationModel::Background::IDeviceConnectionChangeTrigger
    {
        DeviceConnectionChangeTrigger(std::nullptr_t) noexcept {}
        DeviceConnectionChangeTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IDeviceConnectionChangeTrigger(ptr, take_ownership_from_abi) {}
        DeviceConnectionChangeTrigger(DeviceConnectionChangeTrigger const&) noexcept = default;
        DeviceConnectionChangeTrigger(DeviceConnectionChangeTrigger&&) noexcept = default;
        DeviceConnectionChangeTrigger& operator=(DeviceConnectionChangeTrigger const&) & noexcept = default;
        DeviceConnectionChangeTrigger& operator=(DeviceConnectionChangeTrigger&&) & noexcept = default;
        static auto FromIdAsync(param::hstring const& deviceId);
    };
    struct __declspec(empty_bases) DeviceManufacturerNotificationTrigger : winrt::Windows::ApplicationModel::Background::IDeviceManufacturerNotificationTrigger
    {
        DeviceManufacturerNotificationTrigger(std::nullptr_t) noexcept {}
        DeviceManufacturerNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IDeviceManufacturerNotificationTrigger(ptr, take_ownership_from_abi) {}
        DeviceManufacturerNotificationTrigger(param::hstring const& triggerQualifier, bool oneShot);
        DeviceManufacturerNotificationTrigger(DeviceManufacturerNotificationTrigger const&) noexcept = default;
        DeviceManufacturerNotificationTrigger(DeviceManufacturerNotificationTrigger&&) noexcept = default;
        DeviceManufacturerNotificationTrigger& operator=(DeviceManufacturerNotificationTrigger const&) & noexcept = default;
        DeviceManufacturerNotificationTrigger& operator=(DeviceManufacturerNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceServicingTrigger : winrt::Windows::ApplicationModel::Background::IDeviceServicingTrigger
    {
        DeviceServicingTrigger(std::nullptr_t) noexcept {}
        DeviceServicingTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IDeviceServicingTrigger(ptr, take_ownership_from_abi) {}
        DeviceServicingTrigger();
        DeviceServicingTrigger(DeviceServicingTrigger const&) noexcept = default;
        DeviceServicingTrigger(DeviceServicingTrigger&&) noexcept = default;
        DeviceServicingTrigger& operator=(DeviceServicingTrigger const&) & noexcept = default;
        DeviceServicingTrigger& operator=(DeviceServicingTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceUseTrigger : winrt::Windows::ApplicationModel::Background::IDeviceUseTrigger
    {
        DeviceUseTrigger(std::nullptr_t) noexcept {}
        DeviceUseTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IDeviceUseTrigger(ptr, take_ownership_from_abi) {}
        DeviceUseTrigger();
        DeviceUseTrigger(DeviceUseTrigger const&) noexcept = default;
        DeviceUseTrigger(DeviceUseTrigger&&) noexcept = default;
        DeviceUseTrigger& operator=(DeviceUseTrigger const&) & noexcept = default;
        DeviceUseTrigger& operator=(DeviceUseTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceWatcherTrigger : winrt::Windows::ApplicationModel::Background::IDeviceWatcherTrigger
    {
        DeviceWatcherTrigger(std::nullptr_t) noexcept {}
        DeviceWatcherTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IDeviceWatcherTrigger(ptr, take_ownership_from_abi) {}
        DeviceWatcherTrigger(DeviceWatcherTrigger const&) noexcept = default;
        DeviceWatcherTrigger(DeviceWatcherTrigger&&) noexcept = default;
        DeviceWatcherTrigger& operator=(DeviceWatcherTrigger const&) & noexcept = default;
        DeviceWatcherTrigger& operator=(DeviceWatcherTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) EmailStoreNotificationTrigger : winrt::Windows::ApplicationModel::Background::IEmailStoreNotificationTrigger
    {
        EmailStoreNotificationTrigger(std::nullptr_t) noexcept {}
        EmailStoreNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IEmailStoreNotificationTrigger(ptr, take_ownership_from_abi) {}
        EmailStoreNotificationTrigger();
        EmailStoreNotificationTrigger(EmailStoreNotificationTrigger const&) noexcept = default;
        EmailStoreNotificationTrigger(EmailStoreNotificationTrigger&&) noexcept = default;
        EmailStoreNotificationTrigger& operator=(EmailStoreNotificationTrigger const&) & noexcept = default;
        EmailStoreNotificationTrigger& operator=(EmailStoreNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) GattCharacteristicNotificationTrigger : winrt::Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger,
        impl::require<GattCharacteristicNotificationTrigger, winrt::Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger2>
    {
        GattCharacteristicNotificationTrigger(std::nullptr_t) noexcept {}
        GattCharacteristicNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger(ptr, take_ownership_from_abi) {}
        explicit GattCharacteristicNotificationTrigger(winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic const& characteristic);
        GattCharacteristicNotificationTrigger(winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic const& characteristic, winrt::Windows::Devices::Bluetooth::Background::BluetoothEventTriggeringMode const& eventTriggeringMode);
        GattCharacteristicNotificationTrigger(GattCharacteristicNotificationTrigger const&) noexcept = default;
        GattCharacteristicNotificationTrigger(GattCharacteristicNotificationTrigger&&) noexcept = default;
        GattCharacteristicNotificationTrigger& operator=(GattCharacteristicNotificationTrigger const&) & noexcept = default;
        GattCharacteristicNotificationTrigger& operator=(GattCharacteristicNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) GattServiceProviderTrigger : winrt::Windows::ApplicationModel::Background::IGattServiceProviderTrigger,
        impl::require<GattServiceProviderTrigger, winrt::Windows::ApplicationModel::Background::IBackgroundTrigger>
    {
        GattServiceProviderTrigger(std::nullptr_t) noexcept {}
        GattServiceProviderTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IGattServiceProviderTrigger(ptr, take_ownership_from_abi) {}
        GattServiceProviderTrigger(GattServiceProviderTrigger const&) noexcept = default;
        GattServiceProviderTrigger(GattServiceProviderTrigger&&) noexcept = default;
        GattServiceProviderTrigger& operator=(GattServiceProviderTrigger const&) & noexcept = default;
        GattServiceProviderTrigger& operator=(GattServiceProviderTrigger&&) & noexcept = default;
        static auto CreateAsync(param::hstring const& triggerId, winrt::guid const& serviceUuid);
    };
    struct __declspec(empty_bases) GattServiceProviderTriggerResult : winrt::Windows::ApplicationModel::Background::IGattServiceProviderTriggerResult
    {
        GattServiceProviderTriggerResult(std::nullptr_t) noexcept {}
        GattServiceProviderTriggerResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IGattServiceProviderTriggerResult(ptr, take_ownership_from_abi) {}
        GattServiceProviderTriggerResult(GattServiceProviderTriggerResult const&) noexcept = default;
        GattServiceProviderTriggerResult(GattServiceProviderTriggerResult&&) noexcept = default;
        GattServiceProviderTriggerResult& operator=(GattServiceProviderTriggerResult const&) & noexcept = default;
        GattServiceProviderTriggerResult& operator=(GattServiceProviderTriggerResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) GeovisitTrigger : winrt::Windows::ApplicationModel::Background::IGeovisitTrigger
    {
        GeovisitTrigger(std::nullptr_t) noexcept {}
        GeovisitTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IGeovisitTrigger(ptr, take_ownership_from_abi) {}
        GeovisitTrigger();
        GeovisitTrigger(GeovisitTrigger const&) noexcept = default;
        GeovisitTrigger(GeovisitTrigger&&) noexcept = default;
        GeovisitTrigger& operator=(GeovisitTrigger const&) & noexcept = default;
        GeovisitTrigger& operator=(GeovisitTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) LocationTrigger : winrt::Windows::ApplicationModel::Background::ILocationTrigger
    {
        LocationTrigger(std::nullptr_t) noexcept {}
        LocationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::ILocationTrigger(ptr, take_ownership_from_abi) {}
        explicit LocationTrigger(winrt::Windows::ApplicationModel::Background::LocationTriggerType const& triggerType);
        LocationTrigger(LocationTrigger const&) noexcept = default;
        LocationTrigger(LocationTrigger&&) noexcept = default;
        LocationTrigger& operator=(LocationTrigger const&) & noexcept = default;
        LocationTrigger& operator=(LocationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MaintenanceTrigger : winrt::Windows::ApplicationModel::Background::IMaintenanceTrigger
    {
        MaintenanceTrigger(std::nullptr_t) noexcept {}
        MaintenanceTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IMaintenanceTrigger(ptr, take_ownership_from_abi) {}
        MaintenanceTrigger(uint32_t freshnessTime, bool oneShot);
        MaintenanceTrigger(MaintenanceTrigger const&) noexcept = default;
        MaintenanceTrigger(MaintenanceTrigger&&) noexcept = default;
        MaintenanceTrigger& operator=(MaintenanceTrigger const&) & noexcept = default;
        MaintenanceTrigger& operator=(MaintenanceTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MediaProcessingTrigger : winrt::Windows::ApplicationModel::Background::IMediaProcessingTrigger
    {
        MediaProcessingTrigger(std::nullptr_t) noexcept {}
        MediaProcessingTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IMediaProcessingTrigger(ptr, take_ownership_from_abi) {}
        MediaProcessingTrigger();
        MediaProcessingTrigger(MediaProcessingTrigger const&) noexcept = default;
        MediaProcessingTrigger(MediaProcessingTrigger&&) noexcept = default;
        MediaProcessingTrigger& operator=(MediaProcessingTrigger const&) & noexcept = default;
        MediaProcessingTrigger& operator=(MediaProcessingTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MobileBroadbandDeviceServiceNotificationTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        MobileBroadbandDeviceServiceNotificationTrigger(std::nullptr_t) noexcept {}
        MobileBroadbandDeviceServiceNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        MobileBroadbandDeviceServiceNotificationTrigger();
        MobileBroadbandDeviceServiceNotificationTrigger(MobileBroadbandDeviceServiceNotificationTrigger const&) noexcept = default;
        MobileBroadbandDeviceServiceNotificationTrigger(MobileBroadbandDeviceServiceNotificationTrigger&&) noexcept = default;
        MobileBroadbandDeviceServiceNotificationTrigger& operator=(MobileBroadbandDeviceServiceNotificationTrigger const&) & noexcept = default;
        MobileBroadbandDeviceServiceNotificationTrigger& operator=(MobileBroadbandDeviceServiceNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MobileBroadbandPcoDataChangeTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        MobileBroadbandPcoDataChangeTrigger(std::nullptr_t) noexcept {}
        MobileBroadbandPcoDataChangeTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        MobileBroadbandPcoDataChangeTrigger();
        MobileBroadbandPcoDataChangeTrigger(MobileBroadbandPcoDataChangeTrigger const&) noexcept = default;
        MobileBroadbandPcoDataChangeTrigger(MobileBroadbandPcoDataChangeTrigger&&) noexcept = default;
        MobileBroadbandPcoDataChangeTrigger& operator=(MobileBroadbandPcoDataChangeTrigger const&) & noexcept = default;
        MobileBroadbandPcoDataChangeTrigger& operator=(MobileBroadbandPcoDataChangeTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MobileBroadbandPinLockStateChangeTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        MobileBroadbandPinLockStateChangeTrigger(std::nullptr_t) noexcept {}
        MobileBroadbandPinLockStateChangeTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        MobileBroadbandPinLockStateChangeTrigger();
        MobileBroadbandPinLockStateChangeTrigger(MobileBroadbandPinLockStateChangeTrigger const&) noexcept = default;
        MobileBroadbandPinLockStateChangeTrigger(MobileBroadbandPinLockStateChangeTrigger&&) noexcept = default;
        MobileBroadbandPinLockStateChangeTrigger& operator=(MobileBroadbandPinLockStateChangeTrigger const&) & noexcept = default;
        MobileBroadbandPinLockStateChangeTrigger& operator=(MobileBroadbandPinLockStateChangeTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MobileBroadbandRadioStateChangeTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        MobileBroadbandRadioStateChangeTrigger(std::nullptr_t) noexcept {}
        MobileBroadbandRadioStateChangeTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        MobileBroadbandRadioStateChangeTrigger();
        MobileBroadbandRadioStateChangeTrigger(MobileBroadbandRadioStateChangeTrigger const&) noexcept = default;
        MobileBroadbandRadioStateChangeTrigger(MobileBroadbandRadioStateChangeTrigger&&) noexcept = default;
        MobileBroadbandRadioStateChangeTrigger& operator=(MobileBroadbandRadioStateChangeTrigger const&) & noexcept = default;
        MobileBroadbandRadioStateChangeTrigger& operator=(MobileBroadbandRadioStateChangeTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MobileBroadbandRegistrationStateChangeTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        MobileBroadbandRegistrationStateChangeTrigger(std::nullptr_t) noexcept {}
        MobileBroadbandRegistrationStateChangeTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        MobileBroadbandRegistrationStateChangeTrigger();
        MobileBroadbandRegistrationStateChangeTrigger(MobileBroadbandRegistrationStateChangeTrigger const&) noexcept = default;
        MobileBroadbandRegistrationStateChangeTrigger(MobileBroadbandRegistrationStateChangeTrigger&&) noexcept = default;
        MobileBroadbandRegistrationStateChangeTrigger& operator=(MobileBroadbandRegistrationStateChangeTrigger const&) & noexcept = default;
        MobileBroadbandRegistrationStateChangeTrigger& operator=(MobileBroadbandRegistrationStateChangeTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) NetworkOperatorDataUsageTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        NetworkOperatorDataUsageTrigger(std::nullptr_t) noexcept {}
        NetworkOperatorDataUsageTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        NetworkOperatorDataUsageTrigger();
        NetworkOperatorDataUsageTrigger(NetworkOperatorDataUsageTrigger const&) noexcept = default;
        NetworkOperatorDataUsageTrigger(NetworkOperatorDataUsageTrigger&&) noexcept = default;
        NetworkOperatorDataUsageTrigger& operator=(NetworkOperatorDataUsageTrigger const&) & noexcept = default;
        NetworkOperatorDataUsageTrigger& operator=(NetworkOperatorDataUsageTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) NetworkOperatorHotspotAuthenticationTrigger : winrt::Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger
    {
        NetworkOperatorHotspotAuthenticationTrigger(std::nullptr_t) noexcept {}
        NetworkOperatorHotspotAuthenticationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger(ptr, take_ownership_from_abi) {}
        NetworkOperatorHotspotAuthenticationTrigger();
        NetworkOperatorHotspotAuthenticationTrigger(NetworkOperatorHotspotAuthenticationTrigger const&) noexcept = default;
        NetworkOperatorHotspotAuthenticationTrigger(NetworkOperatorHotspotAuthenticationTrigger&&) noexcept = default;
        NetworkOperatorHotspotAuthenticationTrigger& operator=(NetworkOperatorHotspotAuthenticationTrigger const&) & noexcept = default;
        NetworkOperatorHotspotAuthenticationTrigger& operator=(NetworkOperatorHotspotAuthenticationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) NetworkOperatorNotificationTrigger : winrt::Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger
    {
        NetworkOperatorNotificationTrigger(std::nullptr_t) noexcept {}
        NetworkOperatorNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger(ptr, take_ownership_from_abi) {}
        explicit NetworkOperatorNotificationTrigger(param::hstring const& networkAccountId);
        NetworkOperatorNotificationTrigger(NetworkOperatorNotificationTrigger const&) noexcept = default;
        NetworkOperatorNotificationTrigger(NetworkOperatorNotificationTrigger&&) noexcept = default;
        NetworkOperatorNotificationTrigger& operator=(NetworkOperatorNotificationTrigger const&) & noexcept = default;
        NetworkOperatorNotificationTrigger& operator=(NetworkOperatorNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PaymentAppCanMakePaymentTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        PaymentAppCanMakePaymentTrigger(std::nullptr_t) noexcept {}
        PaymentAppCanMakePaymentTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        PaymentAppCanMakePaymentTrigger();
        PaymentAppCanMakePaymentTrigger(PaymentAppCanMakePaymentTrigger const&) noexcept = default;
        PaymentAppCanMakePaymentTrigger(PaymentAppCanMakePaymentTrigger&&) noexcept = default;
        PaymentAppCanMakePaymentTrigger& operator=(PaymentAppCanMakePaymentTrigger const&) & noexcept = default;
        PaymentAppCanMakePaymentTrigger& operator=(PaymentAppCanMakePaymentTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PhoneTrigger : winrt::Windows::ApplicationModel::Background::IPhoneTrigger
    {
        PhoneTrigger(std::nullptr_t) noexcept {}
        PhoneTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IPhoneTrigger(ptr, take_ownership_from_abi) {}
        PhoneTrigger(winrt::Windows::ApplicationModel::Calls::Background::PhoneTriggerType const& type, bool oneShot);
        PhoneTrigger(PhoneTrigger const&) noexcept = default;
        PhoneTrigger(PhoneTrigger&&) noexcept = default;
        PhoneTrigger& operator=(PhoneTrigger const&) & noexcept = default;
        PhoneTrigger& operator=(PhoneTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PushNotificationTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        PushNotificationTrigger(std::nullptr_t) noexcept {}
        PushNotificationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        PushNotificationTrigger();
        explicit PushNotificationTrigger(param::hstring const& applicationId);
        PushNotificationTrigger(PushNotificationTrigger const&) noexcept = default;
        PushNotificationTrigger(PushNotificationTrigger&&) noexcept = default;
        PushNotificationTrigger& operator=(PushNotificationTrigger const&) & noexcept = default;
        PushNotificationTrigger& operator=(PushNotificationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RcsEndUserMessageAvailableTrigger : winrt::Windows::ApplicationModel::Background::IRcsEndUserMessageAvailableTrigger
    {
        RcsEndUserMessageAvailableTrigger(std::nullptr_t) noexcept {}
        RcsEndUserMessageAvailableTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IRcsEndUserMessageAvailableTrigger(ptr, take_ownership_from_abi) {}
        RcsEndUserMessageAvailableTrigger();
        RcsEndUserMessageAvailableTrigger(RcsEndUserMessageAvailableTrigger const&) noexcept = default;
        RcsEndUserMessageAvailableTrigger(RcsEndUserMessageAvailableTrigger&&) noexcept = default;
        RcsEndUserMessageAvailableTrigger& operator=(RcsEndUserMessageAvailableTrigger const&) & noexcept = default;
        RcsEndUserMessageAvailableTrigger& operator=(RcsEndUserMessageAvailableTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RfcommConnectionTrigger : winrt::Windows::ApplicationModel::Background::IRfcommConnectionTrigger
    {
        RfcommConnectionTrigger(std::nullptr_t) noexcept {}
        RfcommConnectionTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IRfcommConnectionTrigger(ptr, take_ownership_from_abi) {}
        RfcommConnectionTrigger();
        RfcommConnectionTrigger(RfcommConnectionTrigger const&) noexcept = default;
        RfcommConnectionTrigger(RfcommConnectionTrigger&&) noexcept = default;
        RfcommConnectionTrigger& operator=(RfcommConnectionTrigger const&) & noexcept = default;
        RfcommConnectionTrigger& operator=(RfcommConnectionTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SecondaryAuthenticationFactorAuthenticationTrigger : winrt::Windows::ApplicationModel::Background::ISecondaryAuthenticationFactorAuthenticationTrigger
    {
        SecondaryAuthenticationFactorAuthenticationTrigger(std::nullptr_t) noexcept {}
        SecondaryAuthenticationFactorAuthenticationTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::ISecondaryAuthenticationFactorAuthenticationTrigger(ptr, take_ownership_from_abi) {}
        SecondaryAuthenticationFactorAuthenticationTrigger();
        SecondaryAuthenticationFactorAuthenticationTrigger(SecondaryAuthenticationFactorAuthenticationTrigger const&) noexcept = default;
        SecondaryAuthenticationFactorAuthenticationTrigger(SecondaryAuthenticationFactorAuthenticationTrigger&&) noexcept = default;
        SecondaryAuthenticationFactorAuthenticationTrigger& operator=(SecondaryAuthenticationFactorAuthenticationTrigger const&) & noexcept = default;
        SecondaryAuthenticationFactorAuthenticationTrigger& operator=(SecondaryAuthenticationFactorAuthenticationTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SensorDataThresholdTrigger : winrt::Windows::ApplicationModel::Background::ISensorDataThresholdTrigger
    {
        SensorDataThresholdTrigger(std::nullptr_t) noexcept {}
        SensorDataThresholdTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::ISensorDataThresholdTrigger(ptr, take_ownership_from_abi) {}
        explicit SensorDataThresholdTrigger(winrt::Windows::Devices::Sensors::ISensorDataThreshold const& threshold);
        SensorDataThresholdTrigger(SensorDataThresholdTrigger const&) noexcept = default;
        SensorDataThresholdTrigger(SensorDataThresholdTrigger&&) noexcept = default;
        SensorDataThresholdTrigger& operator=(SensorDataThresholdTrigger const&) & noexcept = default;
        SensorDataThresholdTrigger& operator=(SensorDataThresholdTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SmartCardTrigger : winrt::Windows::ApplicationModel::Background::ISmartCardTrigger
    {
        SmartCardTrigger(std::nullptr_t) noexcept {}
        SmartCardTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::ISmartCardTrigger(ptr, take_ownership_from_abi) {}
        explicit SmartCardTrigger(winrt::Windows::Devices::SmartCards::SmartCardTriggerType const& triggerType);
        SmartCardTrigger(SmartCardTrigger const&) noexcept = default;
        SmartCardTrigger(SmartCardTrigger&&) noexcept = default;
        SmartCardTrigger& operator=(SmartCardTrigger const&) & noexcept = default;
        SmartCardTrigger& operator=(SmartCardTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SmsMessageReceivedTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        SmsMessageReceivedTrigger(std::nullptr_t) noexcept {}
        SmsMessageReceivedTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        explicit SmsMessageReceivedTrigger(winrt::Windows::Devices::Sms::SmsFilterRules const& filterRules);
        SmsMessageReceivedTrigger(SmsMessageReceivedTrigger const&) noexcept = default;
        SmsMessageReceivedTrigger(SmsMessageReceivedTrigger&&) noexcept = default;
        SmsMessageReceivedTrigger& operator=(SmsMessageReceivedTrigger const&) & noexcept = default;
        SmsMessageReceivedTrigger& operator=(SmsMessageReceivedTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SocketActivityTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger,
        impl::require<SocketActivityTrigger, winrt::Windows::ApplicationModel::Background::ISocketActivityTrigger>
    {
        SocketActivityTrigger(std::nullptr_t) noexcept {}
        SocketActivityTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        SocketActivityTrigger();
        SocketActivityTrigger(SocketActivityTrigger const&) noexcept = default;
        SocketActivityTrigger(SocketActivityTrigger&&) noexcept = default;
        SocketActivityTrigger& operator=(SocketActivityTrigger const&) & noexcept = default;
        SocketActivityTrigger& operator=(SocketActivityTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) StorageLibraryChangeTrackerTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        StorageLibraryChangeTrackerTrigger(std::nullptr_t) noexcept {}
        StorageLibraryChangeTrackerTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        explicit StorageLibraryChangeTrackerTrigger(winrt::Windows::Storage::StorageLibraryChangeTracker const& tracker);
        StorageLibraryChangeTrackerTrigger(StorageLibraryChangeTrackerTrigger const&) noexcept = default;
        StorageLibraryChangeTrackerTrigger(StorageLibraryChangeTrackerTrigger&&) noexcept = default;
        StorageLibraryChangeTrackerTrigger& operator=(StorageLibraryChangeTrackerTrigger const&) & noexcept = default;
        StorageLibraryChangeTrackerTrigger& operator=(StorageLibraryChangeTrackerTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) StorageLibraryContentChangedTrigger : winrt::Windows::ApplicationModel::Background::IStorageLibraryContentChangedTrigger
    {
        StorageLibraryContentChangedTrigger(std::nullptr_t) noexcept {}
        StorageLibraryContentChangedTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IStorageLibraryContentChangedTrigger(ptr, take_ownership_from_abi) {}
        StorageLibraryContentChangedTrigger(StorageLibraryContentChangedTrigger const&) noexcept = default;
        StorageLibraryContentChangedTrigger(StorageLibraryContentChangedTrigger&&) noexcept = default;
        StorageLibraryContentChangedTrigger& operator=(StorageLibraryContentChangedTrigger const&) & noexcept = default;
        StorageLibraryContentChangedTrigger& operator=(StorageLibraryContentChangedTrigger&&) & noexcept = default;
        static auto Create(winrt::Windows::Storage::StorageLibrary const& storageLibrary);
        static auto CreateFromLibraries(param::iterable<winrt::Windows::Storage::StorageLibrary> const& storageLibraries);
    };
    struct __declspec(empty_bases) SystemCondition : winrt::Windows::ApplicationModel::Background::ISystemCondition
    {
        SystemCondition(std::nullptr_t) noexcept {}
        SystemCondition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::ISystemCondition(ptr, take_ownership_from_abi) {}
        explicit SystemCondition(winrt::Windows::ApplicationModel::Background::SystemConditionType const& conditionType);
        SystemCondition(SystemCondition const&) noexcept = default;
        SystemCondition(SystemCondition&&) noexcept = default;
        SystemCondition& operator=(SystemCondition const&) & noexcept = default;
        SystemCondition& operator=(SystemCondition&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SystemTrigger : winrt::Windows::ApplicationModel::Background::ISystemTrigger
    {
        SystemTrigger(std::nullptr_t) noexcept {}
        SystemTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::ISystemTrigger(ptr, take_ownership_from_abi) {}
        SystemTrigger(winrt::Windows::ApplicationModel::Background::SystemTriggerType const& triggerType, bool oneShot);
        SystemTrigger(SystemTrigger const&) noexcept = default;
        SystemTrigger(SystemTrigger&&) noexcept = default;
        SystemTrigger& operator=(SystemTrigger const&) & noexcept = default;
        SystemTrigger& operator=(SystemTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) TetheringEntitlementCheckTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        TetheringEntitlementCheckTrigger(std::nullptr_t) noexcept {}
        TetheringEntitlementCheckTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        TetheringEntitlementCheckTrigger();
        TetheringEntitlementCheckTrigger(TetheringEntitlementCheckTrigger const&) noexcept = default;
        TetheringEntitlementCheckTrigger(TetheringEntitlementCheckTrigger&&) noexcept = default;
        TetheringEntitlementCheckTrigger& operator=(TetheringEntitlementCheckTrigger const&) & noexcept = default;
        TetheringEntitlementCheckTrigger& operator=(TetheringEntitlementCheckTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) TimeTrigger : winrt::Windows::ApplicationModel::Background::ITimeTrigger
    {
        TimeTrigger(std::nullptr_t) noexcept {}
        TimeTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::ITimeTrigger(ptr, take_ownership_from_abi) {}
        TimeTrigger(uint32_t freshnessTime, bool oneShot);
        TimeTrigger(TimeTrigger const&) noexcept = default;
        TimeTrigger(TimeTrigger&&) noexcept = default;
        TimeTrigger& operator=(TimeTrigger const&) & noexcept = default;
        TimeTrigger& operator=(TimeTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ToastNotificationActionTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        ToastNotificationActionTrigger(std::nullptr_t) noexcept {}
        ToastNotificationActionTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        ToastNotificationActionTrigger();
        explicit ToastNotificationActionTrigger(param::hstring const& applicationId);
        ToastNotificationActionTrigger(ToastNotificationActionTrigger const&) noexcept = default;
        ToastNotificationActionTrigger(ToastNotificationActionTrigger&&) noexcept = default;
        ToastNotificationActionTrigger& operator=(ToastNotificationActionTrigger const&) & noexcept = default;
        ToastNotificationActionTrigger& operator=(ToastNotificationActionTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ToastNotificationHistoryChangedTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        ToastNotificationHistoryChangedTrigger(std::nullptr_t) noexcept {}
        ToastNotificationHistoryChangedTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        ToastNotificationHistoryChangedTrigger();
        explicit ToastNotificationHistoryChangedTrigger(param::hstring const& applicationId);
        ToastNotificationHistoryChangedTrigger(ToastNotificationHistoryChangedTrigger const&) noexcept = default;
        ToastNotificationHistoryChangedTrigger(ToastNotificationHistoryChangedTrigger&&) noexcept = default;
        ToastNotificationHistoryChangedTrigger& operator=(ToastNotificationHistoryChangedTrigger const&) & noexcept = default;
        ToastNotificationHistoryChangedTrigger& operator=(ToastNotificationHistoryChangedTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) UserNotificationChangedTrigger : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger
    {
        UserNotificationChangedTrigger(std::nullptr_t) noexcept {}
        UserNotificationChangedTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::ApplicationModel::Background::IBackgroundTrigger(ptr, take_ownership_from_abi) {}
        explicit UserNotificationChangedTrigger(winrt::Windows::UI::Notifications::NotificationKinds const& notificationKinds);
        UserNotificationChangedTrigger(UserNotificationChangedTrigger const&) noexcept = default;
        UserNotificationChangedTrigger(UserNotificationChangedTrigger&&) noexcept = default;
        UserNotificationChangedTrigger& operator=(UserNotificationChangedTrigger const&) & noexcept = default;
        UserNotificationChangedTrigger& operator=(UserNotificationChangedTrigger&&) & noexcept = default;
    };
}
#endif
