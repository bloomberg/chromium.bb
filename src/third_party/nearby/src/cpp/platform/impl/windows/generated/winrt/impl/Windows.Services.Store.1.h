// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Services_Store_1_H
#define WINRT_Windows_Services_Store_1_H
#include "winrt/impl/Windows.Foundation.0.h"
#include "winrt/impl/Windows.Services.Store.0.h"
WINRT_EXPORT namespace winrt::Windows::Services::Store
{
    struct __declspec(empty_bases) IStoreAcquireLicenseResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreAcquireLicenseResult>
    {
        IStoreAcquireLicenseResult(std::nullptr_t = nullptr) noexcept {}
        IStoreAcquireLicenseResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreAcquireLicenseResult(IStoreAcquireLicenseResult const&) noexcept = default;
        IStoreAcquireLicenseResult(IStoreAcquireLicenseResult&&) noexcept = default;
        IStoreAcquireLicenseResult& operator=(IStoreAcquireLicenseResult const&) & noexcept = default;
        IStoreAcquireLicenseResult& operator=(IStoreAcquireLicenseResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreAppLicense :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreAppLicense>
    {
        IStoreAppLicense(std::nullptr_t = nullptr) noexcept {}
        IStoreAppLicense(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreAppLicense(IStoreAppLicense const&) noexcept = default;
        IStoreAppLicense(IStoreAppLicense&&) noexcept = default;
        IStoreAppLicense& operator=(IStoreAppLicense const&) & noexcept = default;
        IStoreAppLicense& operator=(IStoreAppLicense&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreAppLicense2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreAppLicense2>
    {
        IStoreAppLicense2(std::nullptr_t = nullptr) noexcept {}
        IStoreAppLicense2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreAppLicense2(IStoreAppLicense2 const&) noexcept = default;
        IStoreAppLicense2(IStoreAppLicense2&&) noexcept = default;
        IStoreAppLicense2& operator=(IStoreAppLicense2 const&) & noexcept = default;
        IStoreAppLicense2& operator=(IStoreAppLicense2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreAvailability :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreAvailability>
    {
        IStoreAvailability(std::nullptr_t = nullptr) noexcept {}
        IStoreAvailability(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreAvailability(IStoreAvailability const&) noexcept = default;
        IStoreAvailability(IStoreAvailability&&) noexcept = default;
        IStoreAvailability& operator=(IStoreAvailability const&) & noexcept = default;
        IStoreAvailability& operator=(IStoreAvailability&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreCanAcquireLicenseResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreCanAcquireLicenseResult>
    {
        IStoreCanAcquireLicenseResult(std::nullptr_t = nullptr) noexcept {}
        IStoreCanAcquireLicenseResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreCanAcquireLicenseResult(IStoreCanAcquireLicenseResult const&) noexcept = default;
        IStoreCanAcquireLicenseResult(IStoreCanAcquireLicenseResult&&) noexcept = default;
        IStoreCanAcquireLicenseResult& operator=(IStoreCanAcquireLicenseResult const&) & noexcept = default;
        IStoreCanAcquireLicenseResult& operator=(IStoreCanAcquireLicenseResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreCollectionData :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreCollectionData>
    {
        IStoreCollectionData(std::nullptr_t = nullptr) noexcept {}
        IStoreCollectionData(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreCollectionData(IStoreCollectionData const&) noexcept = default;
        IStoreCollectionData(IStoreCollectionData&&) noexcept = default;
        IStoreCollectionData& operator=(IStoreCollectionData const&) & noexcept = default;
        IStoreCollectionData& operator=(IStoreCollectionData&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreConsumableResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreConsumableResult>
    {
        IStoreConsumableResult(std::nullptr_t = nullptr) noexcept {}
        IStoreConsumableResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreConsumableResult(IStoreConsumableResult const&) noexcept = default;
        IStoreConsumableResult(IStoreConsumableResult&&) noexcept = default;
        IStoreConsumableResult& operator=(IStoreConsumableResult const&) & noexcept = default;
        IStoreConsumableResult& operator=(IStoreConsumableResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreContext :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreContext>
    {
        IStoreContext(std::nullptr_t = nullptr) noexcept {}
        IStoreContext(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreContext(IStoreContext const&) noexcept = default;
        IStoreContext(IStoreContext&&) noexcept = default;
        IStoreContext& operator=(IStoreContext const&) & noexcept = default;
        IStoreContext& operator=(IStoreContext&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreContext2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreContext2>
    {
        IStoreContext2(std::nullptr_t = nullptr) noexcept {}
        IStoreContext2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreContext2(IStoreContext2 const&) noexcept = default;
        IStoreContext2(IStoreContext2&&) noexcept = default;
        IStoreContext2& operator=(IStoreContext2 const&) & noexcept = default;
        IStoreContext2& operator=(IStoreContext2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreContext3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreContext3>
    {
        IStoreContext3(std::nullptr_t = nullptr) noexcept {}
        IStoreContext3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreContext3(IStoreContext3 const&) noexcept = default;
        IStoreContext3(IStoreContext3&&) noexcept = default;
        IStoreContext3& operator=(IStoreContext3 const&) & noexcept = default;
        IStoreContext3& operator=(IStoreContext3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreContext4 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreContext4>
    {
        IStoreContext4(std::nullptr_t = nullptr) noexcept {}
        IStoreContext4(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreContext4(IStoreContext4 const&) noexcept = default;
        IStoreContext4(IStoreContext4&&) noexcept = default;
        IStoreContext4& operator=(IStoreContext4 const&) & noexcept = default;
        IStoreContext4& operator=(IStoreContext4&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreContextStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreContextStatics>
    {
        IStoreContextStatics(std::nullptr_t = nullptr) noexcept {}
        IStoreContextStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreContextStatics(IStoreContextStatics const&) noexcept = default;
        IStoreContextStatics(IStoreContextStatics&&) noexcept = default;
        IStoreContextStatics& operator=(IStoreContextStatics const&) & noexcept = default;
        IStoreContextStatics& operator=(IStoreContextStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreImage :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreImage>
    {
        IStoreImage(std::nullptr_t = nullptr) noexcept {}
        IStoreImage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreImage(IStoreImage const&) noexcept = default;
        IStoreImage(IStoreImage&&) noexcept = default;
        IStoreImage& operator=(IStoreImage const&) & noexcept = default;
        IStoreImage& operator=(IStoreImage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreLicense :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreLicense>
    {
        IStoreLicense(std::nullptr_t = nullptr) noexcept {}
        IStoreLicense(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreLicense(IStoreLicense const&) noexcept = default;
        IStoreLicense(IStoreLicense&&) noexcept = default;
        IStoreLicense& operator=(IStoreLicense const&) & noexcept = default;
        IStoreLicense& operator=(IStoreLicense&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStorePackageInstallOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStorePackageInstallOptions>
    {
        IStorePackageInstallOptions(std::nullptr_t = nullptr) noexcept {}
        IStorePackageInstallOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStorePackageInstallOptions(IStorePackageInstallOptions const&) noexcept = default;
        IStorePackageInstallOptions(IStorePackageInstallOptions&&) noexcept = default;
        IStorePackageInstallOptions& operator=(IStorePackageInstallOptions const&) & noexcept = default;
        IStorePackageInstallOptions& operator=(IStorePackageInstallOptions&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStorePackageLicense :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStorePackageLicense>,
        impl::require<winrt::Windows::Services::Store::IStorePackageLicense, winrt::Windows::Foundation::IClosable>
    {
        IStorePackageLicense(std::nullptr_t = nullptr) noexcept {}
        IStorePackageLicense(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStorePackageLicense(IStorePackageLicense const&) noexcept = default;
        IStorePackageLicense(IStorePackageLicense&&) noexcept = default;
        IStorePackageLicense& operator=(IStorePackageLicense const&) & noexcept = default;
        IStorePackageLicense& operator=(IStorePackageLicense&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStorePackageUpdate :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStorePackageUpdate>
    {
        IStorePackageUpdate(std::nullptr_t = nullptr) noexcept {}
        IStorePackageUpdate(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStorePackageUpdate(IStorePackageUpdate const&) noexcept = default;
        IStorePackageUpdate(IStorePackageUpdate&&) noexcept = default;
        IStorePackageUpdate& operator=(IStorePackageUpdate const&) & noexcept = default;
        IStorePackageUpdate& operator=(IStorePackageUpdate&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStorePackageUpdateResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStorePackageUpdateResult>
    {
        IStorePackageUpdateResult(std::nullptr_t = nullptr) noexcept {}
        IStorePackageUpdateResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStorePackageUpdateResult(IStorePackageUpdateResult const&) noexcept = default;
        IStorePackageUpdateResult(IStorePackageUpdateResult&&) noexcept = default;
        IStorePackageUpdateResult& operator=(IStorePackageUpdateResult const&) & noexcept = default;
        IStorePackageUpdateResult& operator=(IStorePackageUpdateResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStorePackageUpdateResult2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStorePackageUpdateResult2>
    {
        IStorePackageUpdateResult2(std::nullptr_t = nullptr) noexcept {}
        IStorePackageUpdateResult2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStorePackageUpdateResult2(IStorePackageUpdateResult2 const&) noexcept = default;
        IStorePackageUpdateResult2(IStorePackageUpdateResult2&&) noexcept = default;
        IStorePackageUpdateResult2& operator=(IStorePackageUpdateResult2 const&) & noexcept = default;
        IStorePackageUpdateResult2& operator=(IStorePackageUpdateResult2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStorePrice :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStorePrice>
    {
        IStorePrice(std::nullptr_t = nullptr) noexcept {}
        IStorePrice(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStorePrice(IStorePrice const&) noexcept = default;
        IStorePrice(IStorePrice&&) noexcept = default;
        IStorePrice& operator=(IStorePrice const&) & noexcept = default;
        IStorePrice& operator=(IStorePrice&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreProduct :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreProduct>
    {
        IStoreProduct(std::nullptr_t = nullptr) noexcept {}
        IStoreProduct(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreProduct(IStoreProduct const&) noexcept = default;
        IStoreProduct(IStoreProduct&&) noexcept = default;
        IStoreProduct& operator=(IStoreProduct const&) & noexcept = default;
        IStoreProduct& operator=(IStoreProduct&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreProductOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreProductOptions>
    {
        IStoreProductOptions(std::nullptr_t = nullptr) noexcept {}
        IStoreProductOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreProductOptions(IStoreProductOptions const&) noexcept = default;
        IStoreProductOptions(IStoreProductOptions&&) noexcept = default;
        IStoreProductOptions& operator=(IStoreProductOptions const&) & noexcept = default;
        IStoreProductOptions& operator=(IStoreProductOptions&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreProductPagedQueryResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreProductPagedQueryResult>
    {
        IStoreProductPagedQueryResult(std::nullptr_t = nullptr) noexcept {}
        IStoreProductPagedQueryResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreProductPagedQueryResult(IStoreProductPagedQueryResult const&) noexcept = default;
        IStoreProductPagedQueryResult(IStoreProductPagedQueryResult&&) noexcept = default;
        IStoreProductPagedQueryResult& operator=(IStoreProductPagedQueryResult const&) & noexcept = default;
        IStoreProductPagedQueryResult& operator=(IStoreProductPagedQueryResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreProductQueryResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreProductQueryResult>
    {
        IStoreProductQueryResult(std::nullptr_t = nullptr) noexcept {}
        IStoreProductQueryResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreProductQueryResult(IStoreProductQueryResult const&) noexcept = default;
        IStoreProductQueryResult(IStoreProductQueryResult&&) noexcept = default;
        IStoreProductQueryResult& operator=(IStoreProductQueryResult const&) & noexcept = default;
        IStoreProductQueryResult& operator=(IStoreProductQueryResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreProductResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreProductResult>
    {
        IStoreProductResult(std::nullptr_t = nullptr) noexcept {}
        IStoreProductResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreProductResult(IStoreProductResult const&) noexcept = default;
        IStoreProductResult(IStoreProductResult&&) noexcept = default;
        IStoreProductResult& operator=(IStoreProductResult const&) & noexcept = default;
        IStoreProductResult& operator=(IStoreProductResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStorePurchaseProperties :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStorePurchaseProperties>
    {
        IStorePurchaseProperties(std::nullptr_t = nullptr) noexcept {}
        IStorePurchaseProperties(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStorePurchaseProperties(IStorePurchaseProperties const&) noexcept = default;
        IStorePurchaseProperties(IStorePurchaseProperties&&) noexcept = default;
        IStorePurchaseProperties& operator=(IStorePurchaseProperties const&) & noexcept = default;
        IStorePurchaseProperties& operator=(IStorePurchaseProperties&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStorePurchasePropertiesFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStorePurchasePropertiesFactory>
    {
        IStorePurchasePropertiesFactory(std::nullptr_t = nullptr) noexcept {}
        IStorePurchasePropertiesFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStorePurchasePropertiesFactory(IStorePurchasePropertiesFactory const&) noexcept = default;
        IStorePurchasePropertiesFactory(IStorePurchasePropertiesFactory&&) noexcept = default;
        IStorePurchasePropertiesFactory& operator=(IStorePurchasePropertiesFactory const&) & noexcept = default;
        IStorePurchasePropertiesFactory& operator=(IStorePurchasePropertiesFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStorePurchaseResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStorePurchaseResult>
    {
        IStorePurchaseResult(std::nullptr_t = nullptr) noexcept {}
        IStorePurchaseResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStorePurchaseResult(IStorePurchaseResult const&) noexcept = default;
        IStorePurchaseResult(IStorePurchaseResult&&) noexcept = default;
        IStorePurchaseResult& operator=(IStorePurchaseResult const&) & noexcept = default;
        IStorePurchaseResult& operator=(IStorePurchaseResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreQueueItem :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreQueueItem>
    {
        IStoreQueueItem(std::nullptr_t = nullptr) noexcept {}
        IStoreQueueItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreQueueItem(IStoreQueueItem const&) noexcept = default;
        IStoreQueueItem(IStoreQueueItem&&) noexcept = default;
        IStoreQueueItem& operator=(IStoreQueueItem const&) & noexcept = default;
        IStoreQueueItem& operator=(IStoreQueueItem&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreQueueItem2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreQueueItem2>
    {
        IStoreQueueItem2(std::nullptr_t = nullptr) noexcept {}
        IStoreQueueItem2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreQueueItem2(IStoreQueueItem2 const&) noexcept = default;
        IStoreQueueItem2(IStoreQueueItem2&&) noexcept = default;
        IStoreQueueItem2& operator=(IStoreQueueItem2 const&) & noexcept = default;
        IStoreQueueItem2& operator=(IStoreQueueItem2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreQueueItemCompletedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreQueueItemCompletedEventArgs>
    {
        IStoreQueueItemCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IStoreQueueItemCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreQueueItemCompletedEventArgs(IStoreQueueItemCompletedEventArgs const&) noexcept = default;
        IStoreQueueItemCompletedEventArgs(IStoreQueueItemCompletedEventArgs&&) noexcept = default;
        IStoreQueueItemCompletedEventArgs& operator=(IStoreQueueItemCompletedEventArgs const&) & noexcept = default;
        IStoreQueueItemCompletedEventArgs& operator=(IStoreQueueItemCompletedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreQueueItemStatus :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreQueueItemStatus>
    {
        IStoreQueueItemStatus(std::nullptr_t = nullptr) noexcept {}
        IStoreQueueItemStatus(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreQueueItemStatus(IStoreQueueItemStatus const&) noexcept = default;
        IStoreQueueItemStatus(IStoreQueueItemStatus&&) noexcept = default;
        IStoreQueueItemStatus& operator=(IStoreQueueItemStatus const&) & noexcept = default;
        IStoreQueueItemStatus& operator=(IStoreQueueItemStatus&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreRateAndReviewResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreRateAndReviewResult>
    {
        IStoreRateAndReviewResult(std::nullptr_t = nullptr) noexcept {}
        IStoreRateAndReviewResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreRateAndReviewResult(IStoreRateAndReviewResult const&) noexcept = default;
        IStoreRateAndReviewResult(IStoreRateAndReviewResult&&) noexcept = default;
        IStoreRateAndReviewResult& operator=(IStoreRateAndReviewResult const&) & noexcept = default;
        IStoreRateAndReviewResult& operator=(IStoreRateAndReviewResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreRequestHelperStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreRequestHelperStatics>
    {
        IStoreRequestHelperStatics(std::nullptr_t = nullptr) noexcept {}
        IStoreRequestHelperStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreRequestHelperStatics(IStoreRequestHelperStatics const&) noexcept = default;
        IStoreRequestHelperStatics(IStoreRequestHelperStatics&&) noexcept = default;
        IStoreRequestHelperStatics& operator=(IStoreRequestHelperStatics const&) & noexcept = default;
        IStoreRequestHelperStatics& operator=(IStoreRequestHelperStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreSendRequestResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreSendRequestResult>
    {
        IStoreSendRequestResult(std::nullptr_t = nullptr) noexcept {}
        IStoreSendRequestResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreSendRequestResult(IStoreSendRequestResult const&) noexcept = default;
        IStoreSendRequestResult(IStoreSendRequestResult&&) noexcept = default;
        IStoreSendRequestResult& operator=(IStoreSendRequestResult const&) & noexcept = default;
        IStoreSendRequestResult& operator=(IStoreSendRequestResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreSendRequestResult2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreSendRequestResult2>
    {
        IStoreSendRequestResult2(std::nullptr_t = nullptr) noexcept {}
        IStoreSendRequestResult2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreSendRequestResult2(IStoreSendRequestResult2 const&) noexcept = default;
        IStoreSendRequestResult2(IStoreSendRequestResult2&&) noexcept = default;
        IStoreSendRequestResult2& operator=(IStoreSendRequestResult2 const&) & noexcept = default;
        IStoreSendRequestResult2& operator=(IStoreSendRequestResult2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreSku :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreSku>
    {
        IStoreSku(std::nullptr_t = nullptr) noexcept {}
        IStoreSku(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreSku(IStoreSku const&) noexcept = default;
        IStoreSku(IStoreSku&&) noexcept = default;
        IStoreSku& operator=(IStoreSku const&) & noexcept = default;
        IStoreSku& operator=(IStoreSku&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreSubscriptionInfo :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreSubscriptionInfo>
    {
        IStoreSubscriptionInfo(std::nullptr_t = nullptr) noexcept {}
        IStoreSubscriptionInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreSubscriptionInfo(IStoreSubscriptionInfo const&) noexcept = default;
        IStoreSubscriptionInfo(IStoreSubscriptionInfo&&) noexcept = default;
        IStoreSubscriptionInfo& operator=(IStoreSubscriptionInfo const&) & noexcept = default;
        IStoreSubscriptionInfo& operator=(IStoreSubscriptionInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreUninstallStorePackageResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreUninstallStorePackageResult>
    {
        IStoreUninstallStorePackageResult(std::nullptr_t = nullptr) noexcept {}
        IStoreUninstallStorePackageResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreUninstallStorePackageResult(IStoreUninstallStorePackageResult const&) noexcept = default;
        IStoreUninstallStorePackageResult(IStoreUninstallStorePackageResult&&) noexcept = default;
        IStoreUninstallStorePackageResult& operator=(IStoreUninstallStorePackageResult const&) & noexcept = default;
        IStoreUninstallStorePackageResult& operator=(IStoreUninstallStorePackageResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStoreVideo :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStoreVideo>
    {
        IStoreVideo(std::nullptr_t = nullptr) noexcept {}
        IStoreVideo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStoreVideo(IStoreVideo const&) noexcept = default;
        IStoreVideo(IStoreVideo&&) noexcept = default;
        IStoreVideo& operator=(IStoreVideo const&) & noexcept = default;
        IStoreVideo& operator=(IStoreVideo&&) & noexcept = default;
    };
}
#endif
