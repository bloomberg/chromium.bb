// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Globalization_1_H
#define WINRT_Windows_Globalization_1_H
#include "winrt/impl/Windows.Globalization.0.h"
WINRT_EXPORT namespace winrt::Windows::Globalization
{
    struct __declspec(empty_bases) IApplicationLanguagesStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IApplicationLanguagesStatics>
    {
        IApplicationLanguagesStatics(std::nullptr_t = nullptr) noexcept {}
        IApplicationLanguagesStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IApplicationLanguagesStatics(IApplicationLanguagesStatics const&) noexcept = default;
        IApplicationLanguagesStatics(IApplicationLanguagesStatics&&) noexcept = default;
        IApplicationLanguagesStatics& operator=(IApplicationLanguagesStatics const&) & noexcept = default;
        IApplicationLanguagesStatics& operator=(IApplicationLanguagesStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IApplicationLanguagesStatics2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IApplicationLanguagesStatics2>
    {
        IApplicationLanguagesStatics2(std::nullptr_t = nullptr) noexcept {}
        IApplicationLanguagesStatics2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IApplicationLanguagesStatics2(IApplicationLanguagesStatics2 const&) noexcept = default;
        IApplicationLanguagesStatics2(IApplicationLanguagesStatics2&&) noexcept = default;
        IApplicationLanguagesStatics2& operator=(IApplicationLanguagesStatics2 const&) & noexcept = default;
        IApplicationLanguagesStatics2& operator=(IApplicationLanguagesStatics2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICalendar :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICalendar>
    {
        ICalendar(std::nullptr_t = nullptr) noexcept {}
        ICalendar(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICalendar(ICalendar const&) noexcept = default;
        ICalendar(ICalendar&&) noexcept = default;
        ICalendar& operator=(ICalendar const&) & noexcept = default;
        ICalendar& operator=(ICalendar&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICalendarFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICalendarFactory>
    {
        ICalendarFactory(std::nullptr_t = nullptr) noexcept {}
        ICalendarFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICalendarFactory(ICalendarFactory const&) noexcept = default;
        ICalendarFactory(ICalendarFactory&&) noexcept = default;
        ICalendarFactory& operator=(ICalendarFactory const&) & noexcept = default;
        ICalendarFactory& operator=(ICalendarFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICalendarFactory2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICalendarFactory2>
    {
        ICalendarFactory2(std::nullptr_t = nullptr) noexcept {}
        ICalendarFactory2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICalendarFactory2(ICalendarFactory2 const&) noexcept = default;
        ICalendarFactory2(ICalendarFactory2&&) noexcept = default;
        ICalendarFactory2& operator=(ICalendarFactory2 const&) & noexcept = default;
        ICalendarFactory2& operator=(ICalendarFactory2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICalendarIdentifiersStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICalendarIdentifiersStatics>
    {
        ICalendarIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
        ICalendarIdentifiersStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICalendarIdentifiersStatics(ICalendarIdentifiersStatics const&) noexcept = default;
        ICalendarIdentifiersStatics(ICalendarIdentifiersStatics&&) noexcept = default;
        ICalendarIdentifiersStatics& operator=(ICalendarIdentifiersStatics const&) & noexcept = default;
        ICalendarIdentifiersStatics& operator=(ICalendarIdentifiersStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICalendarIdentifiersStatics2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICalendarIdentifiersStatics2>
    {
        ICalendarIdentifiersStatics2(std::nullptr_t = nullptr) noexcept {}
        ICalendarIdentifiersStatics2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICalendarIdentifiersStatics2(ICalendarIdentifiersStatics2 const&) noexcept = default;
        ICalendarIdentifiersStatics2(ICalendarIdentifiersStatics2&&) noexcept = default;
        ICalendarIdentifiersStatics2& operator=(ICalendarIdentifiersStatics2 const&) & noexcept = default;
        ICalendarIdentifiersStatics2& operator=(ICalendarIdentifiersStatics2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICalendarIdentifiersStatics3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICalendarIdentifiersStatics3>
    {
        ICalendarIdentifiersStatics3(std::nullptr_t = nullptr) noexcept {}
        ICalendarIdentifiersStatics3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICalendarIdentifiersStatics3(ICalendarIdentifiersStatics3 const&) noexcept = default;
        ICalendarIdentifiersStatics3(ICalendarIdentifiersStatics3&&) noexcept = default;
        ICalendarIdentifiersStatics3& operator=(ICalendarIdentifiersStatics3 const&) & noexcept = default;
        ICalendarIdentifiersStatics3& operator=(ICalendarIdentifiersStatics3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IClockIdentifiersStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IClockIdentifiersStatics>
    {
        IClockIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
        IClockIdentifiersStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IClockIdentifiersStatics(IClockIdentifiersStatics const&) noexcept = default;
        IClockIdentifiersStatics(IClockIdentifiersStatics&&) noexcept = default;
        IClockIdentifiersStatics& operator=(IClockIdentifiersStatics const&) & noexcept = default;
        IClockIdentifiersStatics& operator=(IClockIdentifiersStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICurrencyAmount :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICurrencyAmount>
    {
        ICurrencyAmount(std::nullptr_t = nullptr) noexcept {}
        ICurrencyAmount(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICurrencyAmount(ICurrencyAmount const&) noexcept = default;
        ICurrencyAmount(ICurrencyAmount&&) noexcept = default;
        ICurrencyAmount& operator=(ICurrencyAmount const&) & noexcept = default;
        ICurrencyAmount& operator=(ICurrencyAmount&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICurrencyAmountFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICurrencyAmountFactory>
    {
        ICurrencyAmountFactory(std::nullptr_t = nullptr) noexcept {}
        ICurrencyAmountFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICurrencyAmountFactory(ICurrencyAmountFactory const&) noexcept = default;
        ICurrencyAmountFactory(ICurrencyAmountFactory&&) noexcept = default;
        ICurrencyAmountFactory& operator=(ICurrencyAmountFactory const&) & noexcept = default;
        ICurrencyAmountFactory& operator=(ICurrencyAmountFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICurrencyIdentifiersStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICurrencyIdentifiersStatics>
    {
        ICurrencyIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
        ICurrencyIdentifiersStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICurrencyIdentifiersStatics(ICurrencyIdentifiersStatics const&) noexcept = default;
        ICurrencyIdentifiersStatics(ICurrencyIdentifiersStatics&&) noexcept = default;
        ICurrencyIdentifiersStatics& operator=(ICurrencyIdentifiersStatics const&) & noexcept = default;
        ICurrencyIdentifiersStatics& operator=(ICurrencyIdentifiersStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICurrencyIdentifiersStatics2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICurrencyIdentifiersStatics2>
    {
        ICurrencyIdentifiersStatics2(std::nullptr_t = nullptr) noexcept {}
        ICurrencyIdentifiersStatics2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICurrencyIdentifiersStatics2(ICurrencyIdentifiersStatics2 const&) noexcept = default;
        ICurrencyIdentifiersStatics2(ICurrencyIdentifiersStatics2&&) noexcept = default;
        ICurrencyIdentifiersStatics2& operator=(ICurrencyIdentifiersStatics2 const&) & noexcept = default;
        ICurrencyIdentifiersStatics2& operator=(ICurrencyIdentifiersStatics2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICurrencyIdentifiersStatics3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICurrencyIdentifiersStatics3>
    {
        ICurrencyIdentifiersStatics3(std::nullptr_t = nullptr) noexcept {}
        ICurrencyIdentifiersStatics3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICurrencyIdentifiersStatics3(ICurrencyIdentifiersStatics3 const&) noexcept = default;
        ICurrencyIdentifiersStatics3(ICurrencyIdentifiersStatics3&&) noexcept = default;
        ICurrencyIdentifiersStatics3& operator=(ICurrencyIdentifiersStatics3 const&) & noexcept = default;
        ICurrencyIdentifiersStatics3& operator=(ICurrencyIdentifiersStatics3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGeographicRegion :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGeographicRegion>
    {
        IGeographicRegion(std::nullptr_t = nullptr) noexcept {}
        IGeographicRegion(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGeographicRegion(IGeographicRegion const&) noexcept = default;
        IGeographicRegion(IGeographicRegion&&) noexcept = default;
        IGeographicRegion& operator=(IGeographicRegion const&) & noexcept = default;
        IGeographicRegion& operator=(IGeographicRegion&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGeographicRegionFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGeographicRegionFactory>
    {
        IGeographicRegionFactory(std::nullptr_t = nullptr) noexcept {}
        IGeographicRegionFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGeographicRegionFactory(IGeographicRegionFactory const&) noexcept = default;
        IGeographicRegionFactory(IGeographicRegionFactory&&) noexcept = default;
        IGeographicRegionFactory& operator=(IGeographicRegionFactory const&) & noexcept = default;
        IGeographicRegionFactory& operator=(IGeographicRegionFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IGeographicRegionStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGeographicRegionStatics>
    {
        IGeographicRegionStatics(std::nullptr_t = nullptr) noexcept {}
        IGeographicRegionStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IGeographicRegionStatics(IGeographicRegionStatics const&) noexcept = default;
        IGeographicRegionStatics(IGeographicRegionStatics&&) noexcept = default;
        IGeographicRegionStatics& operator=(IGeographicRegionStatics const&) & noexcept = default;
        IGeographicRegionStatics& operator=(IGeographicRegionStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IJapanesePhoneme :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IJapanesePhoneme>
    {
        IJapanesePhoneme(std::nullptr_t = nullptr) noexcept {}
        IJapanesePhoneme(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IJapanesePhoneme(IJapanesePhoneme const&) noexcept = default;
        IJapanesePhoneme(IJapanesePhoneme&&) noexcept = default;
        IJapanesePhoneme& operator=(IJapanesePhoneme const&) & noexcept = default;
        IJapanesePhoneme& operator=(IJapanesePhoneme&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IJapanesePhoneticAnalyzerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IJapanesePhoneticAnalyzerStatics>
    {
        IJapanesePhoneticAnalyzerStatics(std::nullptr_t = nullptr) noexcept {}
        IJapanesePhoneticAnalyzerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IJapanesePhoneticAnalyzerStatics(IJapanesePhoneticAnalyzerStatics const&) noexcept = default;
        IJapanesePhoneticAnalyzerStatics(IJapanesePhoneticAnalyzerStatics&&) noexcept = default;
        IJapanesePhoneticAnalyzerStatics& operator=(IJapanesePhoneticAnalyzerStatics const&) & noexcept = default;
        IJapanesePhoneticAnalyzerStatics& operator=(IJapanesePhoneticAnalyzerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILanguage :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILanguage>
    {
        ILanguage(std::nullptr_t = nullptr) noexcept {}
        ILanguage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILanguage(ILanguage const&) noexcept = default;
        ILanguage(ILanguage&&) noexcept = default;
        ILanguage& operator=(ILanguage const&) & noexcept = default;
        ILanguage& operator=(ILanguage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILanguage2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILanguage2>
    {
        ILanguage2(std::nullptr_t = nullptr) noexcept {}
        ILanguage2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILanguage2(ILanguage2 const&) noexcept = default;
        ILanguage2(ILanguage2&&) noexcept = default;
        ILanguage2& operator=(ILanguage2 const&) & noexcept = default;
        ILanguage2& operator=(ILanguage2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILanguage3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILanguage3>
    {
        ILanguage3(std::nullptr_t = nullptr) noexcept {}
        ILanguage3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILanguage3(ILanguage3 const&) noexcept = default;
        ILanguage3(ILanguage3&&) noexcept = default;
        ILanguage3& operator=(ILanguage3 const&) & noexcept = default;
        ILanguage3& operator=(ILanguage3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILanguageExtensionSubtags :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILanguageExtensionSubtags>
    {
        ILanguageExtensionSubtags(std::nullptr_t = nullptr) noexcept {}
        ILanguageExtensionSubtags(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILanguageExtensionSubtags(ILanguageExtensionSubtags const&) noexcept = default;
        ILanguageExtensionSubtags(ILanguageExtensionSubtags&&) noexcept = default;
        ILanguageExtensionSubtags& operator=(ILanguageExtensionSubtags const&) & noexcept = default;
        ILanguageExtensionSubtags& operator=(ILanguageExtensionSubtags&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILanguageFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILanguageFactory>
    {
        ILanguageFactory(std::nullptr_t = nullptr) noexcept {}
        ILanguageFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILanguageFactory(ILanguageFactory const&) noexcept = default;
        ILanguageFactory(ILanguageFactory&&) noexcept = default;
        ILanguageFactory& operator=(ILanguageFactory const&) & noexcept = default;
        ILanguageFactory& operator=(ILanguageFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILanguageStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILanguageStatics>
    {
        ILanguageStatics(std::nullptr_t = nullptr) noexcept {}
        ILanguageStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILanguageStatics(ILanguageStatics const&) noexcept = default;
        ILanguageStatics(ILanguageStatics&&) noexcept = default;
        ILanguageStatics& operator=(ILanguageStatics const&) & noexcept = default;
        ILanguageStatics& operator=(ILanguageStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILanguageStatics2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILanguageStatics2>
    {
        ILanguageStatics2(std::nullptr_t = nullptr) noexcept {}
        ILanguageStatics2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILanguageStatics2(ILanguageStatics2 const&) noexcept = default;
        ILanguageStatics2(ILanguageStatics2&&) noexcept = default;
        ILanguageStatics2& operator=(ILanguageStatics2 const&) & noexcept = default;
        ILanguageStatics2& operator=(ILanguageStatics2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ILanguageStatics3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ILanguageStatics3>
    {
        ILanguageStatics3(std::nullptr_t = nullptr) noexcept {}
        ILanguageStatics3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ILanguageStatics3(ILanguageStatics3 const&) noexcept = default;
        ILanguageStatics3(ILanguageStatics3&&) noexcept = default;
        ILanguageStatics3& operator=(ILanguageStatics3 const&) & noexcept = default;
        ILanguageStatics3& operator=(ILanguageStatics3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INumeralSystemIdentifiersStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INumeralSystemIdentifiersStatics>
    {
        INumeralSystemIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
        INumeralSystemIdentifiersStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INumeralSystemIdentifiersStatics(INumeralSystemIdentifiersStatics const&) noexcept = default;
        INumeralSystemIdentifiersStatics(INumeralSystemIdentifiersStatics&&) noexcept = default;
        INumeralSystemIdentifiersStatics& operator=(INumeralSystemIdentifiersStatics const&) & noexcept = default;
        INumeralSystemIdentifiersStatics& operator=(INumeralSystemIdentifiersStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INumeralSystemIdentifiersStatics2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INumeralSystemIdentifiersStatics2>
    {
        INumeralSystemIdentifiersStatics2(std::nullptr_t = nullptr) noexcept {}
        INumeralSystemIdentifiersStatics2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INumeralSystemIdentifiersStatics2(INumeralSystemIdentifiersStatics2 const&) noexcept = default;
        INumeralSystemIdentifiersStatics2(INumeralSystemIdentifiersStatics2&&) noexcept = default;
        INumeralSystemIdentifiersStatics2& operator=(INumeralSystemIdentifiersStatics2 const&) & noexcept = default;
        INumeralSystemIdentifiersStatics2& operator=(INumeralSystemIdentifiersStatics2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITimeZoneOnCalendar :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITimeZoneOnCalendar>
    {
        ITimeZoneOnCalendar(std::nullptr_t = nullptr) noexcept {}
        ITimeZoneOnCalendar(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITimeZoneOnCalendar(ITimeZoneOnCalendar const&) noexcept = default;
        ITimeZoneOnCalendar(ITimeZoneOnCalendar&&) noexcept = default;
        ITimeZoneOnCalendar& operator=(ITimeZoneOnCalendar const&) & noexcept = default;
        ITimeZoneOnCalendar& operator=(ITimeZoneOnCalendar&&) & noexcept = default;
    };
}
#endif
