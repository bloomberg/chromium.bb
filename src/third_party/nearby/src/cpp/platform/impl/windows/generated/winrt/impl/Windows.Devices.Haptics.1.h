// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Devices_Haptics_1_H
#define WINRT_Windows_Devices_Haptics_1_H
#include "winrt/impl/Windows.Devices.Haptics.0.h"
WINRT_EXPORT namespace winrt::Windows::Devices::Haptics
{
    struct __declspec(empty_bases) IKnownSimpleHapticsControllerWaveformsStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IKnownSimpleHapticsControllerWaveformsStatics>
    {
        IKnownSimpleHapticsControllerWaveformsStatics(std::nullptr_t = nullptr) noexcept {}
        IKnownSimpleHapticsControllerWaveformsStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IKnownSimpleHapticsControllerWaveformsStatics(IKnownSimpleHapticsControllerWaveformsStatics const&) noexcept = default;
        IKnownSimpleHapticsControllerWaveformsStatics(IKnownSimpleHapticsControllerWaveformsStatics&&) noexcept = default;
        IKnownSimpleHapticsControllerWaveformsStatics& operator=(IKnownSimpleHapticsControllerWaveformsStatics const&) & noexcept = default;
        IKnownSimpleHapticsControllerWaveformsStatics& operator=(IKnownSimpleHapticsControllerWaveformsStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISimpleHapticsController :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISimpleHapticsController>
    {
        ISimpleHapticsController(std::nullptr_t = nullptr) noexcept {}
        ISimpleHapticsController(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISimpleHapticsController(ISimpleHapticsController const&) noexcept = default;
        ISimpleHapticsController(ISimpleHapticsController&&) noexcept = default;
        ISimpleHapticsController& operator=(ISimpleHapticsController const&) & noexcept = default;
        ISimpleHapticsController& operator=(ISimpleHapticsController&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISimpleHapticsControllerFeedback :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISimpleHapticsControllerFeedback>
    {
        ISimpleHapticsControllerFeedback(std::nullptr_t = nullptr) noexcept {}
        ISimpleHapticsControllerFeedback(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISimpleHapticsControllerFeedback(ISimpleHapticsControllerFeedback const&) noexcept = default;
        ISimpleHapticsControllerFeedback(ISimpleHapticsControllerFeedback&&) noexcept = default;
        ISimpleHapticsControllerFeedback& operator=(ISimpleHapticsControllerFeedback const&) & noexcept = default;
        ISimpleHapticsControllerFeedback& operator=(ISimpleHapticsControllerFeedback&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IVibrationDevice :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IVibrationDevice>
    {
        IVibrationDevice(std::nullptr_t = nullptr) noexcept {}
        IVibrationDevice(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IVibrationDevice(IVibrationDevice const&) noexcept = default;
        IVibrationDevice(IVibrationDevice&&) noexcept = default;
        IVibrationDevice& operator=(IVibrationDevice const&) & noexcept = default;
        IVibrationDevice& operator=(IVibrationDevice&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IVibrationDeviceStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IVibrationDeviceStatics>
    {
        IVibrationDeviceStatics(std::nullptr_t = nullptr) noexcept {}
        IVibrationDeviceStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IVibrationDeviceStatics(IVibrationDeviceStatics const&) noexcept = default;
        IVibrationDeviceStatics(IVibrationDeviceStatics&&) noexcept = default;
        IVibrationDeviceStatics& operator=(IVibrationDeviceStatics const&) & noexcept = default;
        IVibrationDeviceStatics& operator=(IVibrationDeviceStatics&&) & noexcept = default;
    };
}
#endif
