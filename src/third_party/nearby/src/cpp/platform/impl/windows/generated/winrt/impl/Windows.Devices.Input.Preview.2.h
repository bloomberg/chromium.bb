// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Devices_Input_Preview_2_H
#define WINRT_Windows_Devices_Input_Preview_2_H
#include "winrt/impl/Windows.Devices.Input.Preview.1.h"
WINRT_EXPORT namespace winrt::Windows::Devices::Input::Preview
{
    struct __declspec(empty_bases) GazeDevicePreview : winrt::Windows::Devices::Input::Preview::IGazeDevicePreview
    {
        GazeDevicePreview(std::nullptr_t) noexcept {}
        GazeDevicePreview(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Input::Preview::IGazeDevicePreview(ptr, take_ownership_from_abi) {}
        GazeDevicePreview(GazeDevicePreview const&) noexcept = default;
        GazeDevicePreview(GazeDevicePreview&&) noexcept = default;
        GazeDevicePreview& operator=(GazeDevicePreview const&) & noexcept = default;
        GazeDevicePreview& operator=(GazeDevicePreview&&) & noexcept = default;
    };
    struct __declspec(empty_bases) GazeDeviceWatcherAddedPreviewEventArgs : winrt::Windows::Devices::Input::Preview::IGazeDeviceWatcherAddedPreviewEventArgs
    {
        GazeDeviceWatcherAddedPreviewEventArgs(std::nullptr_t) noexcept {}
        GazeDeviceWatcherAddedPreviewEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Input::Preview::IGazeDeviceWatcherAddedPreviewEventArgs(ptr, take_ownership_from_abi) {}
        GazeDeviceWatcherAddedPreviewEventArgs(GazeDeviceWatcherAddedPreviewEventArgs const&) noexcept = default;
        GazeDeviceWatcherAddedPreviewEventArgs(GazeDeviceWatcherAddedPreviewEventArgs&&) noexcept = default;
        GazeDeviceWatcherAddedPreviewEventArgs& operator=(GazeDeviceWatcherAddedPreviewEventArgs const&) & noexcept = default;
        GazeDeviceWatcherAddedPreviewEventArgs& operator=(GazeDeviceWatcherAddedPreviewEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) GazeDeviceWatcherPreview : winrt::Windows::Devices::Input::Preview::IGazeDeviceWatcherPreview
    {
        GazeDeviceWatcherPreview(std::nullptr_t) noexcept {}
        GazeDeviceWatcherPreview(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Input::Preview::IGazeDeviceWatcherPreview(ptr, take_ownership_from_abi) {}
        GazeDeviceWatcherPreview(GazeDeviceWatcherPreview const&) noexcept = default;
        GazeDeviceWatcherPreview(GazeDeviceWatcherPreview&&) noexcept = default;
        GazeDeviceWatcherPreview& operator=(GazeDeviceWatcherPreview const&) & noexcept = default;
        GazeDeviceWatcherPreview& operator=(GazeDeviceWatcherPreview&&) & noexcept = default;
    };
    struct __declspec(empty_bases) GazeDeviceWatcherRemovedPreviewEventArgs : winrt::Windows::Devices::Input::Preview::IGazeDeviceWatcherRemovedPreviewEventArgs
    {
        GazeDeviceWatcherRemovedPreviewEventArgs(std::nullptr_t) noexcept {}
        GazeDeviceWatcherRemovedPreviewEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Input::Preview::IGazeDeviceWatcherRemovedPreviewEventArgs(ptr, take_ownership_from_abi) {}
        GazeDeviceWatcherRemovedPreviewEventArgs(GazeDeviceWatcherRemovedPreviewEventArgs const&) noexcept = default;
        GazeDeviceWatcherRemovedPreviewEventArgs(GazeDeviceWatcherRemovedPreviewEventArgs&&) noexcept = default;
        GazeDeviceWatcherRemovedPreviewEventArgs& operator=(GazeDeviceWatcherRemovedPreviewEventArgs const&) & noexcept = default;
        GazeDeviceWatcherRemovedPreviewEventArgs& operator=(GazeDeviceWatcherRemovedPreviewEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) GazeDeviceWatcherUpdatedPreviewEventArgs : winrt::Windows::Devices::Input::Preview::IGazeDeviceWatcherUpdatedPreviewEventArgs
    {
        GazeDeviceWatcherUpdatedPreviewEventArgs(std::nullptr_t) noexcept {}
        GazeDeviceWatcherUpdatedPreviewEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Input::Preview::IGazeDeviceWatcherUpdatedPreviewEventArgs(ptr, take_ownership_from_abi) {}
        GazeDeviceWatcherUpdatedPreviewEventArgs(GazeDeviceWatcherUpdatedPreviewEventArgs const&) noexcept = default;
        GazeDeviceWatcherUpdatedPreviewEventArgs(GazeDeviceWatcherUpdatedPreviewEventArgs&&) noexcept = default;
        GazeDeviceWatcherUpdatedPreviewEventArgs& operator=(GazeDeviceWatcherUpdatedPreviewEventArgs const&) & noexcept = default;
        GazeDeviceWatcherUpdatedPreviewEventArgs& operator=(GazeDeviceWatcherUpdatedPreviewEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) GazeEnteredPreviewEventArgs : winrt::Windows::Devices::Input::Preview::IGazeEnteredPreviewEventArgs
    {
        GazeEnteredPreviewEventArgs(std::nullptr_t) noexcept {}
        GazeEnteredPreviewEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Input::Preview::IGazeEnteredPreviewEventArgs(ptr, take_ownership_from_abi) {}
        GazeEnteredPreviewEventArgs(GazeEnteredPreviewEventArgs const&) noexcept = default;
        GazeEnteredPreviewEventArgs(GazeEnteredPreviewEventArgs&&) noexcept = default;
        GazeEnteredPreviewEventArgs& operator=(GazeEnteredPreviewEventArgs const&) & noexcept = default;
        GazeEnteredPreviewEventArgs& operator=(GazeEnteredPreviewEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) GazeExitedPreviewEventArgs : winrt::Windows::Devices::Input::Preview::IGazeExitedPreviewEventArgs
    {
        GazeExitedPreviewEventArgs(std::nullptr_t) noexcept {}
        GazeExitedPreviewEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Input::Preview::IGazeExitedPreviewEventArgs(ptr, take_ownership_from_abi) {}
        GazeExitedPreviewEventArgs(GazeExitedPreviewEventArgs const&) noexcept = default;
        GazeExitedPreviewEventArgs(GazeExitedPreviewEventArgs&&) noexcept = default;
        GazeExitedPreviewEventArgs& operator=(GazeExitedPreviewEventArgs const&) & noexcept = default;
        GazeExitedPreviewEventArgs& operator=(GazeExitedPreviewEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) GazeInputSourcePreview : winrt::Windows::Devices::Input::Preview::IGazeInputSourcePreview
    {
        GazeInputSourcePreview(std::nullptr_t) noexcept {}
        GazeInputSourcePreview(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Input::Preview::IGazeInputSourcePreview(ptr, take_ownership_from_abi) {}
        GazeInputSourcePreview(GazeInputSourcePreview const&) noexcept = default;
        GazeInputSourcePreview(GazeInputSourcePreview&&) noexcept = default;
        GazeInputSourcePreview& operator=(GazeInputSourcePreview const&) & noexcept = default;
        GazeInputSourcePreview& operator=(GazeInputSourcePreview&&) & noexcept = default;
        static auto GetForCurrentView();
        static auto CreateWatcher();
    };
    struct __declspec(empty_bases) GazeMovedPreviewEventArgs : winrt::Windows::Devices::Input::Preview::IGazeMovedPreviewEventArgs
    {
        GazeMovedPreviewEventArgs(std::nullptr_t) noexcept {}
        GazeMovedPreviewEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Input::Preview::IGazeMovedPreviewEventArgs(ptr, take_ownership_from_abi) {}
        GazeMovedPreviewEventArgs(GazeMovedPreviewEventArgs const&) noexcept = default;
        GazeMovedPreviewEventArgs(GazeMovedPreviewEventArgs&&) noexcept = default;
        GazeMovedPreviewEventArgs& operator=(GazeMovedPreviewEventArgs const&) & noexcept = default;
        GazeMovedPreviewEventArgs& operator=(GazeMovedPreviewEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) GazePointPreview : winrt::Windows::Devices::Input::Preview::IGazePointPreview
    {
        GazePointPreview(std::nullptr_t) noexcept {}
        GazePointPreview(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Input::Preview::IGazePointPreview(ptr, take_ownership_from_abi) {}
        GazePointPreview(GazePointPreview const&) noexcept = default;
        GazePointPreview(GazePointPreview&&) noexcept = default;
        GazePointPreview& operator=(GazePointPreview const&) & noexcept = default;
        GazePointPreview& operator=(GazePointPreview&&) & noexcept = default;
    };
}
#endif
