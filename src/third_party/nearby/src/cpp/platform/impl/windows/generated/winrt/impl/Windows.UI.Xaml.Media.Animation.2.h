// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_UI_Xaml_Media_Animation_2_H
#define WINRT_Windows_UI_Xaml_Media_Animation_2_H
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/Windows.UI.Xaml.Media.Animation.1.h"
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Media::Animation
{
    struct KeyTime
    {
        winrt::Windows::Foundation::TimeSpan TimeSpan;
    };
    inline bool operator==(KeyTime const& left, KeyTime const& right) noexcept
    {
        return left.TimeSpan == right.TimeSpan;
    }
    inline bool operator!=(KeyTime const& left, KeyTime const& right) noexcept
    {
        return !(left == right);
    }
    struct RepeatBehavior
    {
        double Count;
        winrt::Windows::Foundation::TimeSpan Duration;
        winrt::Windows::UI::Xaml::Media::Animation::RepeatBehaviorType Type;
    };
    inline bool operator==(RepeatBehavior const& left, RepeatBehavior const& right) noexcept
    {
        return left.Count == right.Count && left.Duration == right.Duration && left.Type == right.Type;
    }
    inline bool operator!=(RepeatBehavior const& left, RepeatBehavior const& right) noexcept
    {
        return !(left == right);
    }
    struct __declspec(empty_bases) AddDeleteThemeTransition : winrt::Windows::UI::Xaml::Media::Animation::IAddDeleteThemeTransition,
        impl::base<AddDeleteThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::Transition, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<AddDeleteThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::ITransition, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        AddDeleteThemeTransition(std::nullptr_t) noexcept {}
        AddDeleteThemeTransition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IAddDeleteThemeTransition(ptr, take_ownership_from_abi) {}
        AddDeleteThemeTransition();
        AddDeleteThemeTransition(AddDeleteThemeTransition const&) noexcept = default;
        AddDeleteThemeTransition(AddDeleteThemeTransition&&) noexcept = default;
        AddDeleteThemeTransition& operator=(AddDeleteThemeTransition const&) & noexcept = default;
        AddDeleteThemeTransition& operator=(AddDeleteThemeTransition&&) & noexcept = default;
    };
    struct __declspec(empty_bases) BackEase : winrt::Windows::UI::Xaml::Media::Animation::IBackEase,
        impl::base<BackEase, winrt::Windows::UI::Xaml::Media::Animation::EasingFunctionBase, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<BackEase, winrt::Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        BackEase(std::nullptr_t) noexcept {}
        BackEase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IBackEase(ptr, take_ownership_from_abi) {}
        BackEase();
        BackEase(BackEase const&) noexcept = default;
        BackEase(BackEase&&) noexcept = default;
        BackEase& operator=(BackEase const&) & noexcept = default;
        BackEase& operator=(BackEase&&) & noexcept = default;
        [[nodiscard]] static auto AmplitudeProperty();
    };
    struct __declspec(empty_bases) BasicConnectedAnimationConfiguration : winrt::Windows::UI::Xaml::Media::Animation::IBasicConnectedAnimationConfiguration,
        impl::base<BasicConnectedAnimationConfiguration, winrt::Windows::UI::Xaml::Media::Animation::ConnectedAnimationConfiguration>,
        impl::require<BasicConnectedAnimationConfiguration, winrt::Windows::UI::Xaml::Media::Animation::IConnectedAnimationConfiguration>
    {
        BasicConnectedAnimationConfiguration(std::nullptr_t) noexcept {}
        BasicConnectedAnimationConfiguration(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IBasicConnectedAnimationConfiguration(ptr, take_ownership_from_abi) {}
        BasicConnectedAnimationConfiguration();
        BasicConnectedAnimationConfiguration(BasicConnectedAnimationConfiguration const&) noexcept = default;
        BasicConnectedAnimationConfiguration(BasicConnectedAnimationConfiguration&&) noexcept = default;
        BasicConnectedAnimationConfiguration& operator=(BasicConnectedAnimationConfiguration const&) & noexcept = default;
        BasicConnectedAnimationConfiguration& operator=(BasicConnectedAnimationConfiguration&&) & noexcept = default;
    };
    struct __declspec(empty_bases) BeginStoryboard : winrt::Windows::UI::Xaml::Media::Animation::IBeginStoryboard,
        impl::base<BeginStoryboard, winrt::Windows::UI::Xaml::TriggerAction, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<BeginStoryboard, winrt::Windows::UI::Xaml::ITriggerAction, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        BeginStoryboard(std::nullptr_t) noexcept {}
        BeginStoryboard(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IBeginStoryboard(ptr, take_ownership_from_abi) {}
        BeginStoryboard();
        BeginStoryboard(BeginStoryboard const&) noexcept = default;
        BeginStoryboard(BeginStoryboard&&) noexcept = default;
        BeginStoryboard& operator=(BeginStoryboard const&) & noexcept = default;
        BeginStoryboard& operator=(BeginStoryboard&&) & noexcept = default;
        [[nodiscard]] static auto StoryboardProperty();
    };
    struct __declspec(empty_bases) BounceEase : winrt::Windows::UI::Xaml::Media::Animation::IBounceEase,
        impl::base<BounceEase, winrt::Windows::UI::Xaml::Media::Animation::EasingFunctionBase, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<BounceEase, winrt::Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        BounceEase(std::nullptr_t) noexcept {}
        BounceEase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IBounceEase(ptr, take_ownership_from_abi) {}
        BounceEase();
        BounceEase(BounceEase const&) noexcept = default;
        BounceEase(BounceEase&&) noexcept = default;
        BounceEase& operator=(BounceEase const&) & noexcept = default;
        BounceEase& operator=(BounceEase&&) & noexcept = default;
        [[nodiscard]] static auto BouncesProperty();
        [[nodiscard]] static auto BouncinessProperty();
    };
    struct __declspec(empty_bases) CircleEase : winrt::Windows::UI::Xaml::Media::Animation::ICircleEase,
        impl::base<CircleEase, winrt::Windows::UI::Xaml::Media::Animation::EasingFunctionBase, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<CircleEase, winrt::Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        CircleEase(std::nullptr_t) noexcept {}
        CircleEase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ICircleEase(ptr, take_ownership_from_abi) {}
        CircleEase();
        CircleEase(CircleEase const&) noexcept = default;
        CircleEase(CircleEase&&) noexcept = default;
        CircleEase& operator=(CircleEase const&) & noexcept = default;
        CircleEase& operator=(CircleEase&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ColorAnimation : winrt::Windows::UI::Xaml::Media::Animation::IColorAnimation,
        impl::base<ColorAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<ColorAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        ColorAnimation(std::nullptr_t) noexcept {}
        ColorAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IColorAnimation(ptr, take_ownership_from_abi) {}
        ColorAnimation();
        ColorAnimation(ColorAnimation const&) noexcept = default;
        ColorAnimation(ColorAnimation&&) noexcept = default;
        ColorAnimation& operator=(ColorAnimation const&) & noexcept = default;
        ColorAnimation& operator=(ColorAnimation&&) & noexcept = default;
        [[nodiscard]] static auto FromProperty();
        [[nodiscard]] static auto ToProperty();
        [[nodiscard]] static auto ByProperty();
        [[nodiscard]] static auto EasingFunctionProperty();
        [[nodiscard]] static auto EnableDependentAnimationProperty();
    };
    struct __declspec(empty_bases) ColorAnimationUsingKeyFrames : winrt::Windows::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFrames,
        impl::base<ColorAnimationUsingKeyFrames, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<ColorAnimationUsingKeyFrames, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        ColorAnimationUsingKeyFrames(std::nullptr_t) noexcept {}
        ColorAnimationUsingKeyFrames(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFrames(ptr, take_ownership_from_abi) {}
        ColorAnimationUsingKeyFrames();
        ColorAnimationUsingKeyFrames(ColorAnimationUsingKeyFrames const&) noexcept = default;
        ColorAnimationUsingKeyFrames(ColorAnimationUsingKeyFrames&&) noexcept = default;
        ColorAnimationUsingKeyFrames& operator=(ColorAnimationUsingKeyFrames const&) & noexcept = default;
        ColorAnimationUsingKeyFrames& operator=(ColorAnimationUsingKeyFrames&&) & noexcept = default;
        [[nodiscard]] static auto EnableDependentAnimationProperty();
    };
    struct __declspec(empty_bases) ColorKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::IColorKeyFrame,
        impl::base<ColorKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<ColorKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        ColorKeyFrame(std::nullptr_t) noexcept {}
        ColorKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IColorKeyFrame(ptr, take_ownership_from_abi) {}
        ColorKeyFrame(ColorKeyFrame const&) noexcept = default;
        ColorKeyFrame(ColorKeyFrame&&) noexcept = default;
        ColorKeyFrame& operator=(ColorKeyFrame const&) & noexcept = default;
        ColorKeyFrame& operator=(ColorKeyFrame&&) & noexcept = default;
        [[nodiscard]] static auto ValueProperty();
        [[nodiscard]] static auto KeyTimeProperty();
    };
    struct __declspec(empty_bases) ColorKeyFrameCollection : winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Media::Animation::ColorKeyFrame>
    {
        ColorKeyFrameCollection(std::nullptr_t) noexcept {}
        ColorKeyFrameCollection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Media::Animation::ColorKeyFrame>(ptr, take_ownership_from_abi) {}
        ColorKeyFrameCollection();
        ColorKeyFrameCollection(ColorKeyFrameCollection const&) noexcept = default;
        ColorKeyFrameCollection(ColorKeyFrameCollection&&) noexcept = default;
        ColorKeyFrameCollection& operator=(ColorKeyFrameCollection const&) & noexcept = default;
        ColorKeyFrameCollection& operator=(ColorKeyFrameCollection&&) & noexcept = default;
    };
    struct __declspec(empty_bases) CommonNavigationTransitionInfo : winrt::Windows::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfo,
        impl::base<CommonNavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<CommonNavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        CommonNavigationTransitionInfo(std::nullptr_t) noexcept {}
        CommonNavigationTransitionInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfo(ptr, take_ownership_from_abi) {}
        CommonNavigationTransitionInfo();
        CommonNavigationTransitionInfo(CommonNavigationTransitionInfo const&) noexcept = default;
        CommonNavigationTransitionInfo(CommonNavigationTransitionInfo&&) noexcept = default;
        CommonNavigationTransitionInfo& operator=(CommonNavigationTransitionInfo const&) & noexcept = default;
        CommonNavigationTransitionInfo& operator=(CommonNavigationTransitionInfo&&) & noexcept = default;
        [[nodiscard]] static auto IsStaggeringEnabledProperty();
        [[nodiscard]] static auto IsStaggerElementProperty();
        static auto GetIsStaggerElement(winrt::Windows::UI::Xaml::UIElement const& element);
        static auto SetIsStaggerElement(winrt::Windows::UI::Xaml::UIElement const& element, bool value);
    };
    struct __declspec(empty_bases) ConnectedAnimation : winrt::Windows::UI::Xaml::Media::Animation::IConnectedAnimation,
        impl::require<ConnectedAnimation, winrt::Windows::UI::Xaml::Media::Animation::IConnectedAnimation2, winrt::Windows::UI::Xaml::Media::Animation::IConnectedAnimation3>
    {
        ConnectedAnimation(std::nullptr_t) noexcept {}
        ConnectedAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IConnectedAnimation(ptr, take_ownership_from_abi) {}
        ConnectedAnimation(ConnectedAnimation const&) noexcept = default;
        ConnectedAnimation(ConnectedAnimation&&) noexcept = default;
        ConnectedAnimation& operator=(ConnectedAnimation const&) & noexcept = default;
        ConnectedAnimation& operator=(ConnectedAnimation&&) & noexcept = default;
        using winrt::Windows::UI::Xaml::Media::Animation::IConnectedAnimation::TryStart;
        using impl::consume_t<ConnectedAnimation, winrt::Windows::UI::Xaml::Media::Animation::IConnectedAnimation2>::TryStart;
    };
    struct __declspec(empty_bases) ConnectedAnimationConfiguration : winrt::Windows::UI::Xaml::Media::Animation::IConnectedAnimationConfiguration
    {
        ConnectedAnimationConfiguration(std::nullptr_t) noexcept {}
        ConnectedAnimationConfiguration(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IConnectedAnimationConfiguration(ptr, take_ownership_from_abi) {}
        ConnectedAnimationConfiguration(ConnectedAnimationConfiguration const&) noexcept = default;
        ConnectedAnimationConfiguration(ConnectedAnimationConfiguration&&) noexcept = default;
        ConnectedAnimationConfiguration& operator=(ConnectedAnimationConfiguration const&) & noexcept = default;
        ConnectedAnimationConfiguration& operator=(ConnectedAnimationConfiguration&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ConnectedAnimationService : winrt::Windows::UI::Xaml::Media::Animation::IConnectedAnimationService
    {
        ConnectedAnimationService(std::nullptr_t) noexcept {}
        ConnectedAnimationService(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IConnectedAnimationService(ptr, take_ownership_from_abi) {}
        ConnectedAnimationService(ConnectedAnimationService const&) noexcept = default;
        ConnectedAnimationService(ConnectedAnimationService&&) noexcept = default;
        ConnectedAnimationService& operator=(ConnectedAnimationService const&) & noexcept = default;
        ConnectedAnimationService& operator=(ConnectedAnimationService&&) & noexcept = default;
        static auto GetForCurrentView();
    };
    struct __declspec(empty_bases) ContentThemeTransition : winrt::Windows::UI::Xaml::Media::Animation::IContentThemeTransition,
        impl::base<ContentThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::Transition, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<ContentThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::ITransition, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        ContentThemeTransition(std::nullptr_t) noexcept {}
        ContentThemeTransition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IContentThemeTransition(ptr, take_ownership_from_abi) {}
        ContentThemeTransition();
        ContentThemeTransition(ContentThemeTransition const&) noexcept = default;
        ContentThemeTransition(ContentThemeTransition&&) noexcept = default;
        ContentThemeTransition& operator=(ContentThemeTransition const&) & noexcept = default;
        ContentThemeTransition& operator=(ContentThemeTransition&&) & noexcept = default;
        [[nodiscard]] static auto HorizontalOffsetProperty();
        [[nodiscard]] static auto VerticalOffsetProperty();
    };
    struct __declspec(empty_bases) ContinuumNavigationTransitionInfo : winrt::Windows::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfo,
        impl::base<ContinuumNavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<ContinuumNavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        ContinuumNavigationTransitionInfo(std::nullptr_t) noexcept {}
        ContinuumNavigationTransitionInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfo(ptr, take_ownership_from_abi) {}
        ContinuumNavigationTransitionInfo();
        ContinuumNavigationTransitionInfo(ContinuumNavigationTransitionInfo const&) noexcept = default;
        ContinuumNavigationTransitionInfo(ContinuumNavigationTransitionInfo&&) noexcept = default;
        ContinuumNavigationTransitionInfo& operator=(ContinuumNavigationTransitionInfo const&) & noexcept = default;
        ContinuumNavigationTransitionInfo& operator=(ContinuumNavigationTransitionInfo&&) & noexcept = default;
        [[nodiscard]] static auto ExitElementProperty();
        [[nodiscard]] static auto IsEntranceElementProperty();
        static auto GetIsEntranceElement(winrt::Windows::UI::Xaml::UIElement const& element);
        static auto SetIsEntranceElement(winrt::Windows::UI::Xaml::UIElement const& element, bool value);
        [[nodiscard]] static auto IsExitElementProperty();
        static auto GetIsExitElement(winrt::Windows::UI::Xaml::UIElement const& element);
        static auto SetIsExitElement(winrt::Windows::UI::Xaml::UIElement const& element, bool value);
        [[nodiscard]] static auto ExitElementContainerProperty();
        static auto GetExitElementContainer(winrt::Windows::UI::Xaml::Controls::ListViewBase const& element);
        static auto SetExitElementContainer(winrt::Windows::UI::Xaml::Controls::ListViewBase const& element, bool value);
    };
    struct __declspec(empty_bases) CubicEase : winrt::Windows::UI::Xaml::Media::Animation::ICubicEase,
        impl::base<CubicEase, winrt::Windows::UI::Xaml::Media::Animation::EasingFunctionBase, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<CubicEase, winrt::Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        CubicEase(std::nullptr_t) noexcept {}
        CubicEase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ICubicEase(ptr, take_ownership_from_abi) {}
        CubicEase();
        CubicEase(CubicEase const&) noexcept = default;
        CubicEase(CubicEase&&) noexcept = default;
        CubicEase& operator=(CubicEase const&) & noexcept = default;
        CubicEase& operator=(CubicEase&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DirectConnectedAnimationConfiguration : winrt::Windows::UI::Xaml::Media::Animation::IDirectConnectedAnimationConfiguration,
        impl::base<DirectConnectedAnimationConfiguration, winrt::Windows::UI::Xaml::Media::Animation::ConnectedAnimationConfiguration>,
        impl::require<DirectConnectedAnimationConfiguration, winrt::Windows::UI::Xaml::Media::Animation::IConnectedAnimationConfiguration>
    {
        DirectConnectedAnimationConfiguration(std::nullptr_t) noexcept {}
        DirectConnectedAnimationConfiguration(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IDirectConnectedAnimationConfiguration(ptr, take_ownership_from_abi) {}
        DirectConnectedAnimationConfiguration();
        DirectConnectedAnimationConfiguration(DirectConnectedAnimationConfiguration const&) noexcept = default;
        DirectConnectedAnimationConfiguration(DirectConnectedAnimationConfiguration&&) noexcept = default;
        DirectConnectedAnimationConfiguration& operator=(DirectConnectedAnimationConfiguration const&) & noexcept = default;
        DirectConnectedAnimationConfiguration& operator=(DirectConnectedAnimationConfiguration&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DiscreteColorKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::IDiscreteColorKeyFrame,
        impl::base<DiscreteColorKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::ColorKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<DiscreteColorKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::IColorKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        DiscreteColorKeyFrame(std::nullptr_t) noexcept {}
        DiscreteColorKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IDiscreteColorKeyFrame(ptr, take_ownership_from_abi) {}
        DiscreteColorKeyFrame();
        DiscreteColorKeyFrame(DiscreteColorKeyFrame const&) noexcept = default;
        DiscreteColorKeyFrame(DiscreteColorKeyFrame&&) noexcept = default;
        DiscreteColorKeyFrame& operator=(DiscreteColorKeyFrame const&) & noexcept = default;
        DiscreteColorKeyFrame& operator=(DiscreteColorKeyFrame&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DiscreteDoubleKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::IDiscreteDoubleKeyFrame,
        impl::base<DiscreteDoubleKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::DoubleKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<DiscreteDoubleKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::IDoubleKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        DiscreteDoubleKeyFrame(std::nullptr_t) noexcept {}
        DiscreteDoubleKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IDiscreteDoubleKeyFrame(ptr, take_ownership_from_abi) {}
        DiscreteDoubleKeyFrame();
        DiscreteDoubleKeyFrame(DiscreteDoubleKeyFrame const&) noexcept = default;
        DiscreteDoubleKeyFrame(DiscreteDoubleKeyFrame&&) noexcept = default;
        DiscreteDoubleKeyFrame& operator=(DiscreteDoubleKeyFrame const&) & noexcept = default;
        DiscreteDoubleKeyFrame& operator=(DiscreteDoubleKeyFrame&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DiscreteObjectKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::IDiscreteObjectKeyFrame,
        impl::base<DiscreteObjectKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::ObjectKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<DiscreteObjectKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::IObjectKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        DiscreteObjectKeyFrame(std::nullptr_t) noexcept {}
        DiscreteObjectKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IDiscreteObjectKeyFrame(ptr, take_ownership_from_abi) {}
        DiscreteObjectKeyFrame();
        DiscreteObjectKeyFrame(DiscreteObjectKeyFrame const&) noexcept = default;
        DiscreteObjectKeyFrame(DiscreteObjectKeyFrame&&) noexcept = default;
        DiscreteObjectKeyFrame& operator=(DiscreteObjectKeyFrame const&) & noexcept = default;
        DiscreteObjectKeyFrame& operator=(DiscreteObjectKeyFrame&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DiscretePointKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::IDiscretePointKeyFrame,
        impl::base<DiscretePointKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::PointKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<DiscretePointKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::IPointKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        DiscretePointKeyFrame(std::nullptr_t) noexcept {}
        DiscretePointKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IDiscretePointKeyFrame(ptr, take_ownership_from_abi) {}
        DiscretePointKeyFrame();
        DiscretePointKeyFrame(DiscretePointKeyFrame const&) noexcept = default;
        DiscretePointKeyFrame(DiscretePointKeyFrame&&) noexcept = default;
        DiscretePointKeyFrame& operator=(DiscretePointKeyFrame const&) & noexcept = default;
        DiscretePointKeyFrame& operator=(DiscretePointKeyFrame&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DoubleAnimation : winrt::Windows::UI::Xaml::Media::Animation::IDoubleAnimation,
        impl::base<DoubleAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<DoubleAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        DoubleAnimation(std::nullptr_t) noexcept {}
        DoubleAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IDoubleAnimation(ptr, take_ownership_from_abi) {}
        DoubleAnimation();
        DoubleAnimation(DoubleAnimation const&) noexcept = default;
        DoubleAnimation(DoubleAnimation&&) noexcept = default;
        DoubleAnimation& operator=(DoubleAnimation const&) & noexcept = default;
        DoubleAnimation& operator=(DoubleAnimation&&) & noexcept = default;
        [[nodiscard]] static auto FromProperty();
        [[nodiscard]] static auto ToProperty();
        [[nodiscard]] static auto ByProperty();
        [[nodiscard]] static auto EasingFunctionProperty();
        [[nodiscard]] static auto EnableDependentAnimationProperty();
    };
    struct __declspec(empty_bases) DoubleAnimationUsingKeyFrames : winrt::Windows::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFrames,
        impl::base<DoubleAnimationUsingKeyFrames, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<DoubleAnimationUsingKeyFrames, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        DoubleAnimationUsingKeyFrames(std::nullptr_t) noexcept {}
        DoubleAnimationUsingKeyFrames(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFrames(ptr, take_ownership_from_abi) {}
        DoubleAnimationUsingKeyFrames();
        DoubleAnimationUsingKeyFrames(DoubleAnimationUsingKeyFrames const&) noexcept = default;
        DoubleAnimationUsingKeyFrames(DoubleAnimationUsingKeyFrames&&) noexcept = default;
        DoubleAnimationUsingKeyFrames& operator=(DoubleAnimationUsingKeyFrames const&) & noexcept = default;
        DoubleAnimationUsingKeyFrames& operator=(DoubleAnimationUsingKeyFrames&&) & noexcept = default;
        [[nodiscard]] static auto EnableDependentAnimationProperty();
    };
    struct __declspec(empty_bases) DoubleKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::IDoubleKeyFrame,
        impl::base<DoubleKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<DoubleKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        DoubleKeyFrame(std::nullptr_t) noexcept {}
        DoubleKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IDoubleKeyFrame(ptr, take_ownership_from_abi) {}
        DoubleKeyFrame(DoubleKeyFrame const&) noexcept = default;
        DoubleKeyFrame(DoubleKeyFrame&&) noexcept = default;
        DoubleKeyFrame& operator=(DoubleKeyFrame const&) & noexcept = default;
        DoubleKeyFrame& operator=(DoubleKeyFrame&&) & noexcept = default;
        [[nodiscard]] static auto ValueProperty();
        [[nodiscard]] static auto KeyTimeProperty();
    };
    struct __declspec(empty_bases) DoubleKeyFrameCollection : winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Media::Animation::DoubleKeyFrame>
    {
        DoubleKeyFrameCollection(std::nullptr_t) noexcept {}
        DoubleKeyFrameCollection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Media::Animation::DoubleKeyFrame>(ptr, take_ownership_from_abi) {}
        DoubleKeyFrameCollection();
        DoubleKeyFrameCollection(DoubleKeyFrameCollection const&) noexcept = default;
        DoubleKeyFrameCollection(DoubleKeyFrameCollection&&) noexcept = default;
        DoubleKeyFrameCollection& operator=(DoubleKeyFrameCollection const&) & noexcept = default;
        DoubleKeyFrameCollection& operator=(DoubleKeyFrameCollection&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DragItemThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::IDragItemThemeAnimation,
        impl::base<DragItemThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<DragItemThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        DragItemThemeAnimation(std::nullptr_t) noexcept {}
        DragItemThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IDragItemThemeAnimation(ptr, take_ownership_from_abi) {}
        DragItemThemeAnimation();
        DragItemThemeAnimation(DragItemThemeAnimation const&) noexcept = default;
        DragItemThemeAnimation(DragItemThemeAnimation&&) noexcept = default;
        DragItemThemeAnimation& operator=(DragItemThemeAnimation const&) & noexcept = default;
        DragItemThemeAnimation& operator=(DragItemThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto TargetNameProperty();
    };
    struct __declspec(empty_bases) DragOverThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::IDragOverThemeAnimation,
        impl::base<DragOverThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<DragOverThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        DragOverThemeAnimation(std::nullptr_t) noexcept {}
        DragOverThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IDragOverThemeAnimation(ptr, take_ownership_from_abi) {}
        DragOverThemeAnimation();
        DragOverThemeAnimation(DragOverThemeAnimation const&) noexcept = default;
        DragOverThemeAnimation(DragOverThemeAnimation&&) noexcept = default;
        DragOverThemeAnimation& operator=(DragOverThemeAnimation const&) & noexcept = default;
        DragOverThemeAnimation& operator=(DragOverThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto TargetNameProperty();
        [[nodiscard]] static auto ToOffsetProperty();
        [[nodiscard]] static auto DirectionProperty();
    };
    struct __declspec(empty_bases) DrillInNavigationTransitionInfo : winrt::Windows::UI::Xaml::Media::Animation::IDrillInNavigationTransitionInfo,
        impl::base<DrillInNavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<DrillInNavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        DrillInNavigationTransitionInfo(std::nullptr_t) noexcept {}
        DrillInNavigationTransitionInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IDrillInNavigationTransitionInfo(ptr, take_ownership_from_abi) {}
        DrillInNavigationTransitionInfo();
        DrillInNavigationTransitionInfo(DrillInNavigationTransitionInfo const&) noexcept = default;
        DrillInNavigationTransitionInfo(DrillInNavigationTransitionInfo&&) noexcept = default;
        DrillInNavigationTransitionInfo& operator=(DrillInNavigationTransitionInfo const&) & noexcept = default;
        DrillInNavigationTransitionInfo& operator=(DrillInNavigationTransitionInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DrillInThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::IDrillInThemeAnimation,
        impl::base<DrillInThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<DrillInThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        DrillInThemeAnimation(std::nullptr_t) noexcept {}
        DrillInThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IDrillInThemeAnimation(ptr, take_ownership_from_abi) {}
        DrillInThemeAnimation();
        DrillInThemeAnimation(DrillInThemeAnimation const&) noexcept = default;
        DrillInThemeAnimation(DrillInThemeAnimation&&) noexcept = default;
        DrillInThemeAnimation& operator=(DrillInThemeAnimation const&) & noexcept = default;
        DrillInThemeAnimation& operator=(DrillInThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto EntranceTargetNameProperty();
        [[nodiscard]] static auto EntranceTargetProperty();
        [[nodiscard]] static auto ExitTargetNameProperty();
        [[nodiscard]] static auto ExitTargetProperty();
    };
    struct __declspec(empty_bases) DrillOutThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::IDrillOutThemeAnimation,
        impl::base<DrillOutThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<DrillOutThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        DrillOutThemeAnimation(std::nullptr_t) noexcept {}
        DrillOutThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IDrillOutThemeAnimation(ptr, take_ownership_from_abi) {}
        DrillOutThemeAnimation();
        DrillOutThemeAnimation(DrillOutThemeAnimation const&) noexcept = default;
        DrillOutThemeAnimation(DrillOutThemeAnimation&&) noexcept = default;
        DrillOutThemeAnimation& operator=(DrillOutThemeAnimation const&) & noexcept = default;
        DrillOutThemeAnimation& operator=(DrillOutThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto EntranceTargetNameProperty();
        [[nodiscard]] static auto EntranceTargetProperty();
        [[nodiscard]] static auto ExitTargetNameProperty();
        [[nodiscard]] static auto ExitTargetProperty();
    };
    struct __declspec(empty_bases) DropTargetItemThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimation,
        impl::base<DropTargetItemThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<DropTargetItemThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        DropTargetItemThemeAnimation(std::nullptr_t) noexcept {}
        DropTargetItemThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimation(ptr, take_ownership_from_abi) {}
        DropTargetItemThemeAnimation();
        DropTargetItemThemeAnimation(DropTargetItemThemeAnimation const&) noexcept = default;
        DropTargetItemThemeAnimation(DropTargetItemThemeAnimation&&) noexcept = default;
        DropTargetItemThemeAnimation& operator=(DropTargetItemThemeAnimation const&) & noexcept = default;
        DropTargetItemThemeAnimation& operator=(DropTargetItemThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto TargetNameProperty();
    };
    struct __declspec(empty_bases) EasingColorKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::IEasingColorKeyFrame,
        impl::base<EasingColorKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::ColorKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<EasingColorKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::IColorKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        EasingColorKeyFrame(std::nullptr_t) noexcept {}
        EasingColorKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IEasingColorKeyFrame(ptr, take_ownership_from_abi) {}
        EasingColorKeyFrame();
        EasingColorKeyFrame(EasingColorKeyFrame const&) noexcept = default;
        EasingColorKeyFrame(EasingColorKeyFrame&&) noexcept = default;
        EasingColorKeyFrame& operator=(EasingColorKeyFrame const&) & noexcept = default;
        EasingColorKeyFrame& operator=(EasingColorKeyFrame&&) & noexcept = default;
        [[nodiscard]] static auto EasingFunctionProperty();
    };
    struct __declspec(empty_bases) EasingDoubleKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::IEasingDoubleKeyFrame,
        impl::base<EasingDoubleKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::DoubleKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<EasingDoubleKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::IDoubleKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        EasingDoubleKeyFrame(std::nullptr_t) noexcept {}
        EasingDoubleKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IEasingDoubleKeyFrame(ptr, take_ownership_from_abi) {}
        EasingDoubleKeyFrame();
        EasingDoubleKeyFrame(EasingDoubleKeyFrame const&) noexcept = default;
        EasingDoubleKeyFrame(EasingDoubleKeyFrame&&) noexcept = default;
        EasingDoubleKeyFrame& operator=(EasingDoubleKeyFrame const&) & noexcept = default;
        EasingDoubleKeyFrame& operator=(EasingDoubleKeyFrame&&) & noexcept = default;
        [[nodiscard]] static auto EasingFunctionProperty();
    };
    struct __declspec(empty_bases) EasingFunctionBase : winrt::Windows::UI::Xaml::Media::Animation::IEasingFunctionBase,
        impl::base<EasingFunctionBase, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<EasingFunctionBase, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        EasingFunctionBase(std::nullptr_t) noexcept {}
        EasingFunctionBase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IEasingFunctionBase(ptr, take_ownership_from_abi) {}
        EasingFunctionBase(EasingFunctionBase const&) noexcept = default;
        EasingFunctionBase(EasingFunctionBase&&) noexcept = default;
        EasingFunctionBase& operator=(EasingFunctionBase const&) & noexcept = default;
        EasingFunctionBase& operator=(EasingFunctionBase&&) & noexcept = default;
        [[nodiscard]] static auto EasingModeProperty();
    };
    struct __declspec(empty_bases) EasingPointKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::IEasingPointKeyFrame,
        impl::base<EasingPointKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::PointKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<EasingPointKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::IPointKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        EasingPointKeyFrame(std::nullptr_t) noexcept {}
        EasingPointKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IEasingPointKeyFrame(ptr, take_ownership_from_abi) {}
        EasingPointKeyFrame();
        EasingPointKeyFrame(EasingPointKeyFrame const&) noexcept = default;
        EasingPointKeyFrame(EasingPointKeyFrame&&) noexcept = default;
        EasingPointKeyFrame& operator=(EasingPointKeyFrame const&) & noexcept = default;
        EasingPointKeyFrame& operator=(EasingPointKeyFrame&&) & noexcept = default;
        [[nodiscard]] static auto EasingFunctionProperty();
    };
    struct __declspec(empty_bases) EdgeUIThemeTransition : winrt::Windows::UI::Xaml::Media::Animation::IEdgeUIThemeTransition,
        impl::base<EdgeUIThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::Transition, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<EdgeUIThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::ITransition, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        EdgeUIThemeTransition(std::nullptr_t) noexcept {}
        EdgeUIThemeTransition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IEdgeUIThemeTransition(ptr, take_ownership_from_abi) {}
        EdgeUIThemeTransition();
        EdgeUIThemeTransition(EdgeUIThemeTransition const&) noexcept = default;
        EdgeUIThemeTransition(EdgeUIThemeTransition&&) noexcept = default;
        EdgeUIThemeTransition& operator=(EdgeUIThemeTransition const&) & noexcept = default;
        EdgeUIThemeTransition& operator=(EdgeUIThemeTransition&&) & noexcept = default;
        [[nodiscard]] static auto EdgeProperty();
    };
    struct __declspec(empty_bases) ElasticEase : winrt::Windows::UI::Xaml::Media::Animation::IElasticEase,
        impl::base<ElasticEase, winrt::Windows::UI::Xaml::Media::Animation::EasingFunctionBase, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<ElasticEase, winrt::Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        ElasticEase(std::nullptr_t) noexcept {}
        ElasticEase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IElasticEase(ptr, take_ownership_from_abi) {}
        ElasticEase();
        ElasticEase(ElasticEase const&) noexcept = default;
        ElasticEase(ElasticEase&&) noexcept = default;
        ElasticEase& operator=(ElasticEase const&) & noexcept = default;
        ElasticEase& operator=(ElasticEase&&) & noexcept = default;
        [[nodiscard]] static auto OscillationsProperty();
        [[nodiscard]] static auto SpringinessProperty();
    };
    struct __declspec(empty_bases) EntranceNavigationTransitionInfo : winrt::Windows::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfo,
        impl::base<EntranceNavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<EntranceNavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        EntranceNavigationTransitionInfo(std::nullptr_t) noexcept {}
        EntranceNavigationTransitionInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfo(ptr, take_ownership_from_abi) {}
        EntranceNavigationTransitionInfo();
        EntranceNavigationTransitionInfo(EntranceNavigationTransitionInfo const&) noexcept = default;
        EntranceNavigationTransitionInfo(EntranceNavigationTransitionInfo&&) noexcept = default;
        EntranceNavigationTransitionInfo& operator=(EntranceNavigationTransitionInfo const&) & noexcept = default;
        EntranceNavigationTransitionInfo& operator=(EntranceNavigationTransitionInfo&&) & noexcept = default;
        [[nodiscard]] static auto IsTargetElementProperty();
        static auto GetIsTargetElement(winrt::Windows::UI::Xaml::UIElement const& element);
        static auto SetIsTargetElement(winrt::Windows::UI::Xaml::UIElement const& element, bool value);
    };
    struct __declspec(empty_bases) EntranceThemeTransition : winrt::Windows::UI::Xaml::Media::Animation::IEntranceThemeTransition,
        impl::base<EntranceThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::Transition, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<EntranceThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::ITransition, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        EntranceThemeTransition(std::nullptr_t) noexcept {}
        EntranceThemeTransition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IEntranceThemeTransition(ptr, take_ownership_from_abi) {}
        EntranceThemeTransition();
        EntranceThemeTransition(EntranceThemeTransition const&) noexcept = default;
        EntranceThemeTransition(EntranceThemeTransition&&) noexcept = default;
        EntranceThemeTransition& operator=(EntranceThemeTransition const&) & noexcept = default;
        EntranceThemeTransition& operator=(EntranceThemeTransition&&) & noexcept = default;
        [[nodiscard]] static auto FromHorizontalOffsetProperty();
        [[nodiscard]] static auto FromVerticalOffsetProperty();
        [[nodiscard]] static auto IsStaggeringEnabledProperty();
    };
    struct __declspec(empty_bases) ExponentialEase : winrt::Windows::UI::Xaml::Media::Animation::IExponentialEase,
        impl::base<ExponentialEase, winrt::Windows::UI::Xaml::Media::Animation::EasingFunctionBase, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<ExponentialEase, winrt::Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        ExponentialEase(std::nullptr_t) noexcept {}
        ExponentialEase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IExponentialEase(ptr, take_ownership_from_abi) {}
        ExponentialEase();
        ExponentialEase(ExponentialEase const&) noexcept = default;
        ExponentialEase(ExponentialEase&&) noexcept = default;
        ExponentialEase& operator=(ExponentialEase const&) & noexcept = default;
        ExponentialEase& operator=(ExponentialEase&&) & noexcept = default;
        [[nodiscard]] static auto ExponentProperty();
    };
    struct __declspec(empty_bases) FadeInThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::IFadeInThemeAnimation,
        impl::base<FadeInThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<FadeInThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        FadeInThemeAnimation(std::nullptr_t) noexcept {}
        FadeInThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IFadeInThemeAnimation(ptr, take_ownership_from_abi) {}
        FadeInThemeAnimation();
        FadeInThemeAnimation(FadeInThemeAnimation const&) noexcept = default;
        FadeInThemeAnimation(FadeInThemeAnimation&&) noexcept = default;
        FadeInThemeAnimation& operator=(FadeInThemeAnimation const&) & noexcept = default;
        FadeInThemeAnimation& operator=(FadeInThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto TargetNameProperty();
    };
    struct __declspec(empty_bases) FadeOutThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::IFadeOutThemeAnimation,
        impl::base<FadeOutThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<FadeOutThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        FadeOutThemeAnimation(std::nullptr_t) noexcept {}
        FadeOutThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IFadeOutThemeAnimation(ptr, take_ownership_from_abi) {}
        FadeOutThemeAnimation();
        FadeOutThemeAnimation(FadeOutThemeAnimation const&) noexcept = default;
        FadeOutThemeAnimation(FadeOutThemeAnimation&&) noexcept = default;
        FadeOutThemeAnimation& operator=(FadeOutThemeAnimation const&) & noexcept = default;
        FadeOutThemeAnimation& operator=(FadeOutThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto TargetNameProperty();
    };
    struct __declspec(empty_bases) GravityConnectedAnimationConfiguration : winrt::Windows::UI::Xaml::Media::Animation::IGravityConnectedAnimationConfiguration,
        impl::base<GravityConnectedAnimationConfiguration, winrt::Windows::UI::Xaml::Media::Animation::ConnectedAnimationConfiguration>,
        impl::require<GravityConnectedAnimationConfiguration, winrt::Windows::UI::Xaml::Media::Animation::IGravityConnectedAnimationConfiguration2, winrt::Windows::UI::Xaml::Media::Animation::IConnectedAnimationConfiguration>
    {
        GravityConnectedAnimationConfiguration(std::nullptr_t) noexcept {}
        GravityConnectedAnimationConfiguration(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IGravityConnectedAnimationConfiguration(ptr, take_ownership_from_abi) {}
        GravityConnectedAnimationConfiguration();
        GravityConnectedAnimationConfiguration(GravityConnectedAnimationConfiguration const&) noexcept = default;
        GravityConnectedAnimationConfiguration(GravityConnectedAnimationConfiguration&&) noexcept = default;
        GravityConnectedAnimationConfiguration& operator=(GravityConnectedAnimationConfiguration const&) & noexcept = default;
        GravityConnectedAnimationConfiguration& operator=(GravityConnectedAnimationConfiguration&&) & noexcept = default;
    };
    struct __declspec(empty_bases) KeySpline : winrt::Windows::UI::Xaml::Media::Animation::IKeySpline,
        impl::base<KeySpline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<KeySpline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        KeySpline(std::nullptr_t) noexcept {}
        KeySpline(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IKeySpline(ptr, take_ownership_from_abi) {}
        KeySpline();
        KeySpline(KeySpline const&) noexcept = default;
        KeySpline(KeySpline&&) noexcept = default;
        KeySpline& operator=(KeySpline const&) & noexcept = default;
        KeySpline& operator=(KeySpline&&) & noexcept = default;
    };
    struct __declspec(empty_bases) KeyTimeHelper : winrt::Windows::UI::Xaml::Media::Animation::IKeyTimeHelper
    {
        KeyTimeHelper(std::nullptr_t) noexcept {}
        KeyTimeHelper(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IKeyTimeHelper(ptr, take_ownership_from_abi) {}
        KeyTimeHelper(KeyTimeHelper const&) noexcept = default;
        KeyTimeHelper(KeyTimeHelper&&) noexcept = default;
        KeyTimeHelper& operator=(KeyTimeHelper const&) & noexcept = default;
        KeyTimeHelper& operator=(KeyTimeHelper&&) & noexcept = default;
        static auto FromTimeSpan(winrt::Windows::Foundation::TimeSpan const& timeSpan);
    };
    struct __declspec(empty_bases) LinearColorKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::ILinearColorKeyFrame,
        impl::base<LinearColorKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::ColorKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<LinearColorKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::IColorKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        LinearColorKeyFrame(std::nullptr_t) noexcept {}
        LinearColorKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ILinearColorKeyFrame(ptr, take_ownership_from_abi) {}
        LinearColorKeyFrame();
        LinearColorKeyFrame(LinearColorKeyFrame const&) noexcept = default;
        LinearColorKeyFrame(LinearColorKeyFrame&&) noexcept = default;
        LinearColorKeyFrame& operator=(LinearColorKeyFrame const&) & noexcept = default;
        LinearColorKeyFrame& operator=(LinearColorKeyFrame&&) & noexcept = default;
    };
    struct __declspec(empty_bases) LinearDoubleKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::ILinearDoubleKeyFrame,
        impl::base<LinearDoubleKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::DoubleKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<LinearDoubleKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::IDoubleKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        LinearDoubleKeyFrame(std::nullptr_t) noexcept {}
        LinearDoubleKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ILinearDoubleKeyFrame(ptr, take_ownership_from_abi) {}
        LinearDoubleKeyFrame();
        LinearDoubleKeyFrame(LinearDoubleKeyFrame const&) noexcept = default;
        LinearDoubleKeyFrame(LinearDoubleKeyFrame&&) noexcept = default;
        LinearDoubleKeyFrame& operator=(LinearDoubleKeyFrame const&) & noexcept = default;
        LinearDoubleKeyFrame& operator=(LinearDoubleKeyFrame&&) & noexcept = default;
    };
    struct __declspec(empty_bases) LinearPointKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::ILinearPointKeyFrame,
        impl::base<LinearPointKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::PointKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<LinearPointKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::IPointKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        LinearPointKeyFrame(std::nullptr_t) noexcept {}
        LinearPointKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ILinearPointKeyFrame(ptr, take_ownership_from_abi) {}
        LinearPointKeyFrame();
        LinearPointKeyFrame(LinearPointKeyFrame const&) noexcept = default;
        LinearPointKeyFrame(LinearPointKeyFrame&&) noexcept = default;
        LinearPointKeyFrame& operator=(LinearPointKeyFrame const&) & noexcept = default;
        LinearPointKeyFrame& operator=(LinearPointKeyFrame&&) & noexcept = default;
    };
    struct __declspec(empty_bases) NavigationThemeTransition : winrt::Windows::UI::Xaml::Media::Animation::INavigationThemeTransition,
        impl::base<NavigationThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::Transition, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<NavigationThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::ITransition, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        NavigationThemeTransition(std::nullptr_t) noexcept {}
        NavigationThemeTransition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::INavigationThemeTransition(ptr, take_ownership_from_abi) {}
        NavigationThemeTransition();
        NavigationThemeTransition(NavigationThemeTransition const&) noexcept = default;
        NavigationThemeTransition(NavigationThemeTransition&&) noexcept = default;
        NavigationThemeTransition& operator=(NavigationThemeTransition const&) & noexcept = default;
        NavigationThemeTransition& operator=(NavigationThemeTransition&&) & noexcept = default;
        [[nodiscard]] static auto DefaultNavigationTransitionInfoProperty();
    };
    struct __declspec(empty_bases) NavigationTransitionInfo : winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo,
        impl::base<NavigationTransitionInfo, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<NavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        NavigationTransitionInfo(std::nullptr_t) noexcept {}
        NavigationTransitionInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo(ptr, take_ownership_from_abi) {}
        NavigationTransitionInfo(NavigationTransitionInfo const&) noexcept = default;
        NavigationTransitionInfo(NavigationTransitionInfo&&) noexcept = default;
        NavigationTransitionInfo& operator=(NavigationTransitionInfo const&) & noexcept = default;
        NavigationTransitionInfo& operator=(NavigationTransitionInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ObjectAnimationUsingKeyFrames : winrt::Windows::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFrames,
        impl::base<ObjectAnimationUsingKeyFrames, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<ObjectAnimationUsingKeyFrames, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        ObjectAnimationUsingKeyFrames(std::nullptr_t) noexcept {}
        ObjectAnimationUsingKeyFrames(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFrames(ptr, take_ownership_from_abi) {}
        ObjectAnimationUsingKeyFrames();
        ObjectAnimationUsingKeyFrames(ObjectAnimationUsingKeyFrames const&) noexcept = default;
        ObjectAnimationUsingKeyFrames(ObjectAnimationUsingKeyFrames&&) noexcept = default;
        ObjectAnimationUsingKeyFrames& operator=(ObjectAnimationUsingKeyFrames const&) & noexcept = default;
        ObjectAnimationUsingKeyFrames& operator=(ObjectAnimationUsingKeyFrames&&) & noexcept = default;
        [[nodiscard]] static auto EnableDependentAnimationProperty();
    };
    struct __declspec(empty_bases) ObjectKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::IObjectKeyFrame,
        impl::base<ObjectKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<ObjectKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        ObjectKeyFrame(std::nullptr_t) noexcept {}
        ObjectKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IObjectKeyFrame(ptr, take_ownership_from_abi) {}
        ObjectKeyFrame(ObjectKeyFrame const&) noexcept = default;
        ObjectKeyFrame(ObjectKeyFrame&&) noexcept = default;
        ObjectKeyFrame& operator=(ObjectKeyFrame const&) & noexcept = default;
        ObjectKeyFrame& operator=(ObjectKeyFrame&&) & noexcept = default;
        [[nodiscard]] static auto ValueProperty();
        [[nodiscard]] static auto KeyTimeProperty();
    };
    struct __declspec(empty_bases) ObjectKeyFrameCollection : winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Media::Animation::ObjectKeyFrame>
    {
        ObjectKeyFrameCollection(std::nullptr_t) noexcept {}
        ObjectKeyFrameCollection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Media::Animation::ObjectKeyFrame>(ptr, take_ownership_from_abi) {}
        ObjectKeyFrameCollection();
        ObjectKeyFrameCollection(ObjectKeyFrameCollection const&) noexcept = default;
        ObjectKeyFrameCollection(ObjectKeyFrameCollection&&) noexcept = default;
        ObjectKeyFrameCollection& operator=(ObjectKeyFrameCollection const&) & noexcept = default;
        ObjectKeyFrameCollection& operator=(ObjectKeyFrameCollection&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PaneThemeTransition : winrt::Windows::UI::Xaml::Media::Animation::IPaneThemeTransition,
        impl::base<PaneThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::Transition, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<PaneThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::ITransition, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        PaneThemeTransition(std::nullptr_t) noexcept {}
        PaneThemeTransition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IPaneThemeTransition(ptr, take_ownership_from_abi) {}
        PaneThemeTransition();
        PaneThemeTransition(PaneThemeTransition const&) noexcept = default;
        PaneThemeTransition(PaneThemeTransition&&) noexcept = default;
        PaneThemeTransition& operator=(PaneThemeTransition const&) & noexcept = default;
        PaneThemeTransition& operator=(PaneThemeTransition&&) & noexcept = default;
        [[nodiscard]] static auto EdgeProperty();
    };
    struct __declspec(empty_bases) PointAnimation : winrt::Windows::UI::Xaml::Media::Animation::IPointAnimation,
        impl::base<PointAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<PointAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        PointAnimation(std::nullptr_t) noexcept {}
        PointAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IPointAnimation(ptr, take_ownership_from_abi) {}
        PointAnimation();
        PointAnimation(PointAnimation const&) noexcept = default;
        PointAnimation(PointAnimation&&) noexcept = default;
        PointAnimation& operator=(PointAnimation const&) & noexcept = default;
        PointAnimation& operator=(PointAnimation&&) & noexcept = default;
        [[nodiscard]] static auto FromProperty();
        [[nodiscard]] static auto ToProperty();
        [[nodiscard]] static auto ByProperty();
        [[nodiscard]] static auto EasingFunctionProperty();
        [[nodiscard]] static auto EnableDependentAnimationProperty();
    };
    struct __declspec(empty_bases) PointAnimationUsingKeyFrames : winrt::Windows::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFrames,
        impl::base<PointAnimationUsingKeyFrames, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<PointAnimationUsingKeyFrames, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        PointAnimationUsingKeyFrames(std::nullptr_t) noexcept {}
        PointAnimationUsingKeyFrames(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFrames(ptr, take_ownership_from_abi) {}
        PointAnimationUsingKeyFrames();
        PointAnimationUsingKeyFrames(PointAnimationUsingKeyFrames const&) noexcept = default;
        PointAnimationUsingKeyFrames(PointAnimationUsingKeyFrames&&) noexcept = default;
        PointAnimationUsingKeyFrames& operator=(PointAnimationUsingKeyFrames const&) & noexcept = default;
        PointAnimationUsingKeyFrames& operator=(PointAnimationUsingKeyFrames&&) & noexcept = default;
        [[nodiscard]] static auto EnableDependentAnimationProperty();
    };
    struct __declspec(empty_bases) PointKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::IPointKeyFrame,
        impl::base<PointKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<PointKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        PointKeyFrame(std::nullptr_t) noexcept {}
        PointKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IPointKeyFrame(ptr, take_ownership_from_abi) {}
        PointKeyFrame(PointKeyFrame const&) noexcept = default;
        PointKeyFrame(PointKeyFrame&&) noexcept = default;
        PointKeyFrame& operator=(PointKeyFrame const&) & noexcept = default;
        PointKeyFrame& operator=(PointKeyFrame&&) & noexcept = default;
        [[nodiscard]] static auto ValueProperty();
        [[nodiscard]] static auto KeyTimeProperty();
    };
    struct __declspec(empty_bases) PointKeyFrameCollection : winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Media::Animation::PointKeyFrame>
    {
        PointKeyFrameCollection(std::nullptr_t) noexcept {}
        PointKeyFrameCollection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Media::Animation::PointKeyFrame>(ptr, take_ownership_from_abi) {}
        PointKeyFrameCollection();
        PointKeyFrameCollection(PointKeyFrameCollection const&) noexcept = default;
        PointKeyFrameCollection(PointKeyFrameCollection&&) noexcept = default;
        PointKeyFrameCollection& operator=(PointKeyFrameCollection const&) & noexcept = default;
        PointKeyFrameCollection& operator=(PointKeyFrameCollection&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PointerDownThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::IPointerDownThemeAnimation,
        impl::base<PointerDownThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<PointerDownThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        PointerDownThemeAnimation(std::nullptr_t) noexcept {}
        PointerDownThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IPointerDownThemeAnimation(ptr, take_ownership_from_abi) {}
        PointerDownThemeAnimation();
        PointerDownThemeAnimation(PointerDownThemeAnimation const&) noexcept = default;
        PointerDownThemeAnimation(PointerDownThemeAnimation&&) noexcept = default;
        PointerDownThemeAnimation& operator=(PointerDownThemeAnimation const&) & noexcept = default;
        PointerDownThemeAnimation& operator=(PointerDownThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto TargetNameProperty();
    };
    struct __declspec(empty_bases) PointerUpThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::IPointerUpThemeAnimation,
        impl::base<PointerUpThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<PointerUpThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        PointerUpThemeAnimation(std::nullptr_t) noexcept {}
        PointerUpThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IPointerUpThemeAnimation(ptr, take_ownership_from_abi) {}
        PointerUpThemeAnimation();
        PointerUpThemeAnimation(PointerUpThemeAnimation const&) noexcept = default;
        PointerUpThemeAnimation(PointerUpThemeAnimation&&) noexcept = default;
        PointerUpThemeAnimation& operator=(PointerUpThemeAnimation const&) & noexcept = default;
        PointerUpThemeAnimation& operator=(PointerUpThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto TargetNameProperty();
    };
    struct __declspec(empty_bases) PopInThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::IPopInThemeAnimation,
        impl::base<PopInThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<PopInThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        PopInThemeAnimation(std::nullptr_t) noexcept {}
        PopInThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IPopInThemeAnimation(ptr, take_ownership_from_abi) {}
        PopInThemeAnimation();
        PopInThemeAnimation(PopInThemeAnimation const&) noexcept = default;
        PopInThemeAnimation(PopInThemeAnimation&&) noexcept = default;
        PopInThemeAnimation& operator=(PopInThemeAnimation const&) & noexcept = default;
        PopInThemeAnimation& operator=(PopInThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto TargetNameProperty();
        [[nodiscard]] static auto FromHorizontalOffsetProperty();
        [[nodiscard]] static auto FromVerticalOffsetProperty();
    };
    struct __declspec(empty_bases) PopOutThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::IPopOutThemeAnimation,
        impl::base<PopOutThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<PopOutThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        PopOutThemeAnimation(std::nullptr_t) noexcept {}
        PopOutThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IPopOutThemeAnimation(ptr, take_ownership_from_abi) {}
        PopOutThemeAnimation();
        PopOutThemeAnimation(PopOutThemeAnimation const&) noexcept = default;
        PopOutThemeAnimation(PopOutThemeAnimation&&) noexcept = default;
        PopOutThemeAnimation& operator=(PopOutThemeAnimation const&) & noexcept = default;
        PopOutThemeAnimation& operator=(PopOutThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto TargetNameProperty();
    };
    struct __declspec(empty_bases) PopupThemeTransition : winrt::Windows::UI::Xaml::Media::Animation::IPopupThemeTransition,
        impl::base<PopupThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::Transition, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<PopupThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::ITransition, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        PopupThemeTransition(std::nullptr_t) noexcept {}
        PopupThemeTransition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IPopupThemeTransition(ptr, take_ownership_from_abi) {}
        PopupThemeTransition();
        PopupThemeTransition(PopupThemeTransition const&) noexcept = default;
        PopupThemeTransition(PopupThemeTransition&&) noexcept = default;
        PopupThemeTransition& operator=(PopupThemeTransition const&) & noexcept = default;
        PopupThemeTransition& operator=(PopupThemeTransition&&) & noexcept = default;
        [[nodiscard]] static auto FromHorizontalOffsetProperty();
        [[nodiscard]] static auto FromVerticalOffsetProperty();
    };
    struct __declspec(empty_bases) PowerEase : winrt::Windows::UI::Xaml::Media::Animation::IPowerEase,
        impl::base<PowerEase, winrt::Windows::UI::Xaml::Media::Animation::EasingFunctionBase, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<PowerEase, winrt::Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        PowerEase(std::nullptr_t) noexcept {}
        PowerEase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IPowerEase(ptr, take_ownership_from_abi) {}
        PowerEase();
        PowerEase(PowerEase const&) noexcept = default;
        PowerEase(PowerEase&&) noexcept = default;
        PowerEase& operator=(PowerEase const&) & noexcept = default;
        PowerEase& operator=(PowerEase&&) & noexcept = default;
        [[nodiscard]] static auto PowerProperty();
    };
    struct __declspec(empty_bases) QuadraticEase : winrt::Windows::UI::Xaml::Media::Animation::IQuadraticEase,
        impl::base<QuadraticEase, winrt::Windows::UI::Xaml::Media::Animation::EasingFunctionBase, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<QuadraticEase, winrt::Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        QuadraticEase(std::nullptr_t) noexcept {}
        QuadraticEase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IQuadraticEase(ptr, take_ownership_from_abi) {}
        QuadraticEase();
        QuadraticEase(QuadraticEase const&) noexcept = default;
        QuadraticEase(QuadraticEase&&) noexcept = default;
        QuadraticEase& operator=(QuadraticEase const&) & noexcept = default;
        QuadraticEase& operator=(QuadraticEase&&) & noexcept = default;
    };
    struct __declspec(empty_bases) QuarticEase : winrt::Windows::UI::Xaml::Media::Animation::IQuarticEase,
        impl::base<QuarticEase, winrt::Windows::UI::Xaml::Media::Animation::EasingFunctionBase, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<QuarticEase, winrt::Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        QuarticEase(std::nullptr_t) noexcept {}
        QuarticEase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IQuarticEase(ptr, take_ownership_from_abi) {}
        QuarticEase();
        QuarticEase(QuarticEase const&) noexcept = default;
        QuarticEase(QuarticEase&&) noexcept = default;
        QuarticEase& operator=(QuarticEase const&) & noexcept = default;
        QuarticEase& operator=(QuarticEase&&) & noexcept = default;
    };
    struct __declspec(empty_bases) QuinticEase : winrt::Windows::UI::Xaml::Media::Animation::IQuinticEase,
        impl::base<QuinticEase, winrt::Windows::UI::Xaml::Media::Animation::EasingFunctionBase, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<QuinticEase, winrt::Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        QuinticEase(std::nullptr_t) noexcept {}
        QuinticEase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IQuinticEase(ptr, take_ownership_from_abi) {}
        QuinticEase();
        QuinticEase(QuinticEase const&) noexcept = default;
        QuinticEase(QuinticEase&&) noexcept = default;
        QuinticEase& operator=(QuinticEase const&) & noexcept = default;
        QuinticEase& operator=(QuinticEase&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ReorderThemeTransition : winrt::Windows::UI::Xaml::Media::Animation::IReorderThemeTransition,
        impl::base<ReorderThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::Transition, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<ReorderThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::ITransition, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        ReorderThemeTransition(std::nullptr_t) noexcept {}
        ReorderThemeTransition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IReorderThemeTransition(ptr, take_ownership_from_abi) {}
        ReorderThemeTransition();
        ReorderThemeTransition(ReorderThemeTransition const&) noexcept = default;
        ReorderThemeTransition(ReorderThemeTransition&&) noexcept = default;
        ReorderThemeTransition& operator=(ReorderThemeTransition const&) & noexcept = default;
        ReorderThemeTransition& operator=(ReorderThemeTransition&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RepeatBehaviorHelper : winrt::Windows::UI::Xaml::Media::Animation::IRepeatBehaviorHelper
    {
        RepeatBehaviorHelper(std::nullptr_t) noexcept {}
        RepeatBehaviorHelper(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IRepeatBehaviorHelper(ptr, take_ownership_from_abi) {}
        RepeatBehaviorHelper(RepeatBehaviorHelper const&) noexcept = default;
        RepeatBehaviorHelper(RepeatBehaviorHelper&&) noexcept = default;
        RepeatBehaviorHelper& operator=(RepeatBehaviorHelper const&) & noexcept = default;
        RepeatBehaviorHelper& operator=(RepeatBehaviorHelper&&) & noexcept = default;
        [[nodiscard]] static auto Forever();
        static auto FromCount(double count);
        static auto FromDuration(winrt::Windows::Foundation::TimeSpan const& duration);
        static auto GetHasCount(winrt::Windows::UI::Xaml::Media::Animation::RepeatBehavior const& target);
        static auto GetHasDuration(winrt::Windows::UI::Xaml::Media::Animation::RepeatBehavior const& target);
        static auto Equals(winrt::Windows::UI::Xaml::Media::Animation::RepeatBehavior const& target, winrt::Windows::UI::Xaml::Media::Animation::RepeatBehavior const& value);
    };
    struct __declspec(empty_bases) RepositionThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::IRepositionThemeAnimation,
        impl::base<RepositionThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<RepositionThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        RepositionThemeAnimation(std::nullptr_t) noexcept {}
        RepositionThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IRepositionThemeAnimation(ptr, take_ownership_from_abi) {}
        RepositionThemeAnimation();
        RepositionThemeAnimation(RepositionThemeAnimation const&) noexcept = default;
        RepositionThemeAnimation(RepositionThemeAnimation&&) noexcept = default;
        RepositionThemeAnimation& operator=(RepositionThemeAnimation const&) & noexcept = default;
        RepositionThemeAnimation& operator=(RepositionThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto TargetNameProperty();
        [[nodiscard]] static auto FromHorizontalOffsetProperty();
        [[nodiscard]] static auto FromVerticalOffsetProperty();
    };
    struct __declspec(empty_bases) RepositionThemeTransition : winrt::Windows::UI::Xaml::Media::Animation::IRepositionThemeTransition,
        impl::base<RepositionThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::Transition, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<RepositionThemeTransition, winrt::Windows::UI::Xaml::Media::Animation::IRepositionThemeTransition2, winrt::Windows::UI::Xaml::Media::Animation::ITransition, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        RepositionThemeTransition(std::nullptr_t) noexcept {}
        RepositionThemeTransition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IRepositionThemeTransition(ptr, take_ownership_from_abi) {}
        RepositionThemeTransition();
        RepositionThemeTransition(RepositionThemeTransition const&) noexcept = default;
        RepositionThemeTransition(RepositionThemeTransition&&) noexcept = default;
        RepositionThemeTransition& operator=(RepositionThemeTransition const&) & noexcept = default;
        RepositionThemeTransition& operator=(RepositionThemeTransition&&) & noexcept = default;
        [[nodiscard]] static auto IsStaggeringEnabledProperty();
    };
    struct __declspec(empty_bases) SineEase : winrt::Windows::UI::Xaml::Media::Animation::ISineEase,
        impl::base<SineEase, winrt::Windows::UI::Xaml::Media::Animation::EasingFunctionBase, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<SineEase, winrt::Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        SineEase(std::nullptr_t) noexcept {}
        SineEase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ISineEase(ptr, take_ownership_from_abi) {}
        SineEase();
        SineEase(SineEase const&) noexcept = default;
        SineEase(SineEase&&) noexcept = default;
        SineEase& operator=(SineEase const&) & noexcept = default;
        SineEase& operator=(SineEase&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SlideNavigationTransitionInfo : winrt::Windows::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfo,
        impl::base<SlideNavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<SlideNavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfo2, winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        SlideNavigationTransitionInfo(std::nullptr_t) noexcept {}
        SlideNavigationTransitionInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfo(ptr, take_ownership_from_abi) {}
        SlideNavigationTransitionInfo();
        SlideNavigationTransitionInfo(SlideNavigationTransitionInfo const&) noexcept = default;
        SlideNavigationTransitionInfo(SlideNavigationTransitionInfo&&) noexcept = default;
        SlideNavigationTransitionInfo& operator=(SlideNavigationTransitionInfo const&) & noexcept = default;
        SlideNavigationTransitionInfo& operator=(SlideNavigationTransitionInfo&&) & noexcept = default;
        [[nodiscard]] static auto EffectProperty();
    };
    struct __declspec(empty_bases) SplineColorKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::ISplineColorKeyFrame,
        impl::base<SplineColorKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::ColorKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<SplineColorKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::IColorKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        SplineColorKeyFrame(std::nullptr_t) noexcept {}
        SplineColorKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ISplineColorKeyFrame(ptr, take_ownership_from_abi) {}
        SplineColorKeyFrame();
        SplineColorKeyFrame(SplineColorKeyFrame const&) noexcept = default;
        SplineColorKeyFrame(SplineColorKeyFrame&&) noexcept = default;
        SplineColorKeyFrame& operator=(SplineColorKeyFrame const&) & noexcept = default;
        SplineColorKeyFrame& operator=(SplineColorKeyFrame&&) & noexcept = default;
        [[nodiscard]] static auto KeySplineProperty();
    };
    struct __declspec(empty_bases) SplineDoubleKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::ISplineDoubleKeyFrame,
        impl::base<SplineDoubleKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::DoubleKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<SplineDoubleKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::IDoubleKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        SplineDoubleKeyFrame(std::nullptr_t) noexcept {}
        SplineDoubleKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ISplineDoubleKeyFrame(ptr, take_ownership_from_abi) {}
        SplineDoubleKeyFrame();
        SplineDoubleKeyFrame(SplineDoubleKeyFrame const&) noexcept = default;
        SplineDoubleKeyFrame(SplineDoubleKeyFrame&&) noexcept = default;
        SplineDoubleKeyFrame& operator=(SplineDoubleKeyFrame const&) & noexcept = default;
        SplineDoubleKeyFrame& operator=(SplineDoubleKeyFrame&&) & noexcept = default;
        [[nodiscard]] static auto KeySplineProperty();
    };
    struct __declspec(empty_bases) SplinePointKeyFrame : winrt::Windows::UI::Xaml::Media::Animation::ISplinePointKeyFrame,
        impl::base<SplinePointKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::PointKeyFrame, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<SplinePointKeyFrame, winrt::Windows::UI::Xaml::Media::Animation::IPointKeyFrame, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        SplinePointKeyFrame(std::nullptr_t) noexcept {}
        SplinePointKeyFrame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ISplinePointKeyFrame(ptr, take_ownership_from_abi) {}
        SplinePointKeyFrame();
        SplinePointKeyFrame(SplinePointKeyFrame const&) noexcept = default;
        SplinePointKeyFrame(SplinePointKeyFrame&&) noexcept = default;
        SplinePointKeyFrame& operator=(SplinePointKeyFrame const&) & noexcept = default;
        SplinePointKeyFrame& operator=(SplinePointKeyFrame&&) & noexcept = default;
        [[nodiscard]] static auto KeySplineProperty();
    };
    struct __declspec(empty_bases) SplitCloseThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::ISplitCloseThemeAnimation,
        impl::base<SplitCloseThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<SplitCloseThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        SplitCloseThemeAnimation(std::nullptr_t) noexcept {}
        SplitCloseThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ISplitCloseThemeAnimation(ptr, take_ownership_from_abi) {}
        SplitCloseThemeAnimation();
        SplitCloseThemeAnimation(SplitCloseThemeAnimation const&) noexcept = default;
        SplitCloseThemeAnimation(SplitCloseThemeAnimation&&) noexcept = default;
        SplitCloseThemeAnimation& operator=(SplitCloseThemeAnimation const&) & noexcept = default;
        SplitCloseThemeAnimation& operator=(SplitCloseThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto OpenedTargetNameProperty();
        [[nodiscard]] static auto OpenedTargetProperty();
        [[nodiscard]] static auto ClosedTargetNameProperty();
        [[nodiscard]] static auto ClosedTargetProperty();
        [[nodiscard]] static auto ContentTargetNameProperty();
        [[nodiscard]] static auto ContentTargetProperty();
        [[nodiscard]] static auto OpenedLengthProperty();
        [[nodiscard]] static auto ClosedLengthProperty();
        [[nodiscard]] static auto OffsetFromCenterProperty();
        [[nodiscard]] static auto ContentTranslationDirectionProperty();
        [[nodiscard]] static auto ContentTranslationOffsetProperty();
    };
    struct __declspec(empty_bases) SplitOpenThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::ISplitOpenThemeAnimation,
        impl::base<SplitOpenThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<SplitOpenThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        SplitOpenThemeAnimation(std::nullptr_t) noexcept {}
        SplitOpenThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ISplitOpenThemeAnimation(ptr, take_ownership_from_abi) {}
        SplitOpenThemeAnimation();
        SplitOpenThemeAnimation(SplitOpenThemeAnimation const&) noexcept = default;
        SplitOpenThemeAnimation(SplitOpenThemeAnimation&&) noexcept = default;
        SplitOpenThemeAnimation& operator=(SplitOpenThemeAnimation const&) & noexcept = default;
        SplitOpenThemeAnimation& operator=(SplitOpenThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto OpenedTargetNameProperty();
        [[nodiscard]] static auto OpenedTargetProperty();
        [[nodiscard]] static auto ClosedTargetNameProperty();
        [[nodiscard]] static auto ClosedTargetProperty();
        [[nodiscard]] static auto ContentTargetNameProperty();
        [[nodiscard]] static auto ContentTargetProperty();
        [[nodiscard]] static auto OpenedLengthProperty();
        [[nodiscard]] static auto ClosedLengthProperty();
        [[nodiscard]] static auto OffsetFromCenterProperty();
        [[nodiscard]] static auto ContentTranslationDirectionProperty();
        [[nodiscard]] static auto ContentTranslationOffsetProperty();
    };
    struct __declspec(empty_bases) Storyboard : winrt::Windows::UI::Xaml::Media::Animation::IStoryboard,
        impl::base<Storyboard, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<Storyboard, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        Storyboard(std::nullptr_t) noexcept {}
        Storyboard(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::IStoryboard(ptr, take_ownership_from_abi) {}
        Storyboard();
        Storyboard(Storyboard const&) noexcept = default;
        Storyboard(Storyboard&&) noexcept = default;
        Storyboard& operator=(Storyboard const&) & noexcept = default;
        Storyboard& operator=(Storyboard&&) & noexcept = default;
        [[nodiscard]] static auto TargetPropertyProperty();
        static auto GetTargetProperty(winrt::Windows::UI::Xaml::Media::Animation::Timeline const& element);
        static auto SetTargetProperty(winrt::Windows::UI::Xaml::Media::Animation::Timeline const& element, param::hstring const& path);
        [[nodiscard]] static auto TargetNameProperty();
        static auto GetTargetName(winrt::Windows::UI::Xaml::Media::Animation::Timeline const& element);
        static auto SetTargetName(winrt::Windows::UI::Xaml::Media::Animation::Timeline const& element, param::hstring const& name);
        static auto SetTarget(winrt::Windows::UI::Xaml::Media::Animation::Timeline const& timeline, winrt::Windows::UI::Xaml::DependencyObject const& target);
    };
    struct __declspec(empty_bases) SuppressNavigationTransitionInfo : winrt::Windows::UI::Xaml::Media::Animation::ISuppressNavigationTransitionInfo,
        impl::base<SuppressNavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<SuppressNavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo, winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        SuppressNavigationTransitionInfo(std::nullptr_t) noexcept {}
        SuppressNavigationTransitionInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ISuppressNavigationTransitionInfo(ptr, take_ownership_from_abi) {}
        SuppressNavigationTransitionInfo();
        SuppressNavigationTransitionInfo(SuppressNavigationTransitionInfo const&) noexcept = default;
        SuppressNavigationTransitionInfo(SuppressNavigationTransitionInfo&&) noexcept = default;
        SuppressNavigationTransitionInfo& operator=(SuppressNavigationTransitionInfo const&) & noexcept = default;
        SuppressNavigationTransitionInfo& operator=(SuppressNavigationTransitionInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SwipeBackThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::ISwipeBackThemeAnimation,
        impl::base<SwipeBackThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<SwipeBackThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        SwipeBackThemeAnimation(std::nullptr_t) noexcept {}
        SwipeBackThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ISwipeBackThemeAnimation(ptr, take_ownership_from_abi) {}
        SwipeBackThemeAnimation();
        SwipeBackThemeAnimation(SwipeBackThemeAnimation const&) noexcept = default;
        SwipeBackThemeAnimation(SwipeBackThemeAnimation&&) noexcept = default;
        SwipeBackThemeAnimation& operator=(SwipeBackThemeAnimation const&) & noexcept = default;
        SwipeBackThemeAnimation& operator=(SwipeBackThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto TargetNameProperty();
        [[nodiscard]] static auto FromHorizontalOffsetProperty();
        [[nodiscard]] static auto FromVerticalOffsetProperty();
    };
    struct __declspec(empty_bases) SwipeHintThemeAnimation : winrt::Windows::UI::Xaml::Media::Animation::ISwipeHintThemeAnimation,
        impl::base<SwipeHintThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<SwipeHintThemeAnimation, winrt::Windows::UI::Xaml::Media::Animation::ITimeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        SwipeHintThemeAnimation(std::nullptr_t) noexcept {}
        SwipeHintThemeAnimation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ISwipeHintThemeAnimation(ptr, take_ownership_from_abi) {}
        SwipeHintThemeAnimation();
        SwipeHintThemeAnimation(SwipeHintThemeAnimation const&) noexcept = default;
        SwipeHintThemeAnimation(SwipeHintThemeAnimation&&) noexcept = default;
        SwipeHintThemeAnimation& operator=(SwipeHintThemeAnimation const&) & noexcept = default;
        SwipeHintThemeAnimation& operator=(SwipeHintThemeAnimation&&) & noexcept = default;
        [[nodiscard]] static auto TargetNameProperty();
        [[nodiscard]] static auto ToHorizontalOffsetProperty();
        [[nodiscard]] static auto ToVerticalOffsetProperty();
    };
    struct __declspec(empty_bases) Timeline : winrt::Windows::UI::Xaml::Media::Animation::ITimeline,
        impl::base<Timeline, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<Timeline, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        Timeline(std::nullptr_t) noexcept {}
        Timeline(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ITimeline(ptr, take_ownership_from_abi) {}
        Timeline(Timeline const&) noexcept = default;
        Timeline(Timeline&&) noexcept = default;
        Timeline& operator=(Timeline const&) & noexcept = default;
        Timeline& operator=(Timeline&&) & noexcept = default;
        [[nodiscard]] static auto AllowDependentAnimations();
        static auto AllowDependentAnimations(bool value);
        [[nodiscard]] static auto AutoReverseProperty();
        [[nodiscard]] static auto BeginTimeProperty();
        [[nodiscard]] static auto DurationProperty();
        [[nodiscard]] static auto SpeedRatioProperty();
        [[nodiscard]] static auto FillBehaviorProperty();
        [[nodiscard]] static auto RepeatBehaviorProperty();
    };
    struct __declspec(empty_bases) TimelineCollection : winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Media::Animation::Timeline>
    {
        TimelineCollection(std::nullptr_t) noexcept {}
        TimelineCollection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Media::Animation::Timeline>(ptr, take_ownership_from_abi) {}
        TimelineCollection();
        TimelineCollection(TimelineCollection const&) noexcept = default;
        TimelineCollection(TimelineCollection&&) noexcept = default;
        TimelineCollection& operator=(TimelineCollection const&) & noexcept = default;
        TimelineCollection& operator=(TimelineCollection&&) & noexcept = default;
    };
    struct __declspec(empty_bases) Transition : winrt::Windows::UI::Xaml::Media::Animation::ITransition,
        impl::base<Transition, winrt::Windows::UI::Xaml::DependencyObject>,
        impl::require<Transition, winrt::Windows::UI::Xaml::IDependencyObject, winrt::Windows::UI::Xaml::IDependencyObject2>
    {
        Transition(std::nullptr_t) noexcept {}
        Transition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Xaml::Media::Animation::ITransition(ptr, take_ownership_from_abi) {}
        Transition(Transition const&) noexcept = default;
        Transition(Transition&&) noexcept = default;
        Transition& operator=(Transition const&) & noexcept = default;
        Transition& operator=(Transition&&) & noexcept = default;
    };
    struct __declspec(empty_bases) TransitionCollection : winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Media::Animation::Transition>
    {
        TransitionCollection(std::nullptr_t) noexcept {}
        TransitionCollection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Xaml::Media::Animation::Transition>(ptr, take_ownership_from_abi) {}
        TransitionCollection();
        TransitionCollection(TransitionCollection const&) noexcept = default;
        TransitionCollection(TransitionCollection&&) noexcept = default;
        TransitionCollection& operator=(TransitionCollection const&) & noexcept = default;
        TransitionCollection& operator=(TransitionCollection&&) & noexcept = default;
    };
    template <typename D>
    class INavigationTransitionInfoOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using INavigationTransitionInfoOverrides = winrt::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides;
        WINRT_IMPL_AUTO(hstring) GetNavigationStateCore() const;
        WINRT_IMPL_AUTO(void) SetNavigationStateCore(param::hstring const& navigationState) const;
    };
}
#endif
