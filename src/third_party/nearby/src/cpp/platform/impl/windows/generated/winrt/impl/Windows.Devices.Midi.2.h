// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Devices_Midi_2_H
#define WINRT_Windows_Devices_Midi_2_H
#include "winrt/impl/Windows.Devices.Enumeration.1.h"
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.Storage.Streams.1.h"
#include "winrt/impl/Windows.Devices.Midi.1.h"
WINRT_EXPORT namespace winrt::Windows::Devices::Midi
{
    struct __declspec(empty_bases) MidiActiveSensingMessage : winrt::Windows::Devices::Midi::IMidiMessage
    {
        MidiActiveSensingMessage(std::nullptr_t) noexcept {}
        MidiActiveSensingMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiMessage(ptr, take_ownership_from_abi) {}
        MidiActiveSensingMessage();
        MidiActiveSensingMessage(MidiActiveSensingMessage const&) noexcept = default;
        MidiActiveSensingMessage(MidiActiveSensingMessage&&) noexcept = default;
        MidiActiveSensingMessage& operator=(MidiActiveSensingMessage const&) & noexcept = default;
        MidiActiveSensingMessage& operator=(MidiActiveSensingMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiChannelPressureMessage : winrt::Windows::Devices::Midi::IMidiChannelPressureMessage
    {
        MidiChannelPressureMessage(std::nullptr_t) noexcept {}
        MidiChannelPressureMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiChannelPressureMessage(ptr, take_ownership_from_abi) {}
        MidiChannelPressureMessage(uint8_t channel, uint8_t pressure);
        MidiChannelPressureMessage(MidiChannelPressureMessage const&) noexcept = default;
        MidiChannelPressureMessage(MidiChannelPressureMessage&&) noexcept = default;
        MidiChannelPressureMessage& operator=(MidiChannelPressureMessage const&) & noexcept = default;
        MidiChannelPressureMessage& operator=(MidiChannelPressureMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiContinueMessage : winrt::Windows::Devices::Midi::IMidiMessage
    {
        MidiContinueMessage(std::nullptr_t) noexcept {}
        MidiContinueMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiMessage(ptr, take_ownership_from_abi) {}
        MidiContinueMessage();
        MidiContinueMessage(MidiContinueMessage const&) noexcept = default;
        MidiContinueMessage(MidiContinueMessage&&) noexcept = default;
        MidiContinueMessage& operator=(MidiContinueMessage const&) & noexcept = default;
        MidiContinueMessage& operator=(MidiContinueMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiControlChangeMessage : winrt::Windows::Devices::Midi::IMidiControlChangeMessage
    {
        MidiControlChangeMessage(std::nullptr_t) noexcept {}
        MidiControlChangeMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiControlChangeMessage(ptr, take_ownership_from_abi) {}
        MidiControlChangeMessage(uint8_t channel, uint8_t controller, uint8_t controlValue);
        MidiControlChangeMessage(MidiControlChangeMessage const&) noexcept = default;
        MidiControlChangeMessage(MidiControlChangeMessage&&) noexcept = default;
        MidiControlChangeMessage& operator=(MidiControlChangeMessage const&) & noexcept = default;
        MidiControlChangeMessage& operator=(MidiControlChangeMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiInPort : winrt::Windows::Devices::Midi::IMidiInPort
    {
        MidiInPort(std::nullptr_t) noexcept {}
        MidiInPort(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiInPort(ptr, take_ownership_from_abi) {}
        MidiInPort(MidiInPort const&) noexcept = default;
        MidiInPort(MidiInPort&&) noexcept = default;
        MidiInPort& operator=(MidiInPort const&) & noexcept = default;
        MidiInPort& operator=(MidiInPort&&) & noexcept = default;
        static auto FromIdAsync(param::hstring const& deviceId);
        static auto GetDeviceSelector();
    };
    struct __declspec(empty_bases) MidiMessageReceivedEventArgs : winrt::Windows::Devices::Midi::IMidiMessageReceivedEventArgs
    {
        MidiMessageReceivedEventArgs(std::nullptr_t) noexcept {}
        MidiMessageReceivedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiMessageReceivedEventArgs(ptr, take_ownership_from_abi) {}
        MidiMessageReceivedEventArgs(MidiMessageReceivedEventArgs const&) noexcept = default;
        MidiMessageReceivedEventArgs(MidiMessageReceivedEventArgs&&) noexcept = default;
        MidiMessageReceivedEventArgs& operator=(MidiMessageReceivedEventArgs const&) & noexcept = default;
        MidiMessageReceivedEventArgs& operator=(MidiMessageReceivedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiNoteOffMessage : winrt::Windows::Devices::Midi::IMidiNoteOffMessage
    {
        MidiNoteOffMessage(std::nullptr_t) noexcept {}
        MidiNoteOffMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiNoteOffMessage(ptr, take_ownership_from_abi) {}
        MidiNoteOffMessage(uint8_t channel, uint8_t note, uint8_t velocity);
        MidiNoteOffMessage(MidiNoteOffMessage const&) noexcept = default;
        MidiNoteOffMessage(MidiNoteOffMessage&&) noexcept = default;
        MidiNoteOffMessage& operator=(MidiNoteOffMessage const&) & noexcept = default;
        MidiNoteOffMessage& operator=(MidiNoteOffMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiNoteOnMessage : winrt::Windows::Devices::Midi::IMidiNoteOnMessage
    {
        MidiNoteOnMessage(std::nullptr_t) noexcept {}
        MidiNoteOnMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiNoteOnMessage(ptr, take_ownership_from_abi) {}
        MidiNoteOnMessage(uint8_t channel, uint8_t note, uint8_t velocity);
        MidiNoteOnMessage(MidiNoteOnMessage const&) noexcept = default;
        MidiNoteOnMessage(MidiNoteOnMessage&&) noexcept = default;
        MidiNoteOnMessage& operator=(MidiNoteOnMessage const&) & noexcept = default;
        MidiNoteOnMessage& operator=(MidiNoteOnMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiOutPort : winrt::Windows::Devices::Midi::IMidiOutPort
    {
        MidiOutPort(std::nullptr_t) noexcept {}
        MidiOutPort(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiOutPort(ptr, take_ownership_from_abi) {}
        MidiOutPort(MidiOutPort const&) noexcept = default;
        MidiOutPort(MidiOutPort&&) noexcept = default;
        MidiOutPort& operator=(MidiOutPort const&) & noexcept = default;
        MidiOutPort& operator=(MidiOutPort&&) & noexcept = default;
        static auto FromIdAsync(param::hstring const& deviceId);
        static auto GetDeviceSelector();
    };
    struct __declspec(empty_bases) MidiPitchBendChangeMessage : winrt::Windows::Devices::Midi::IMidiPitchBendChangeMessage
    {
        MidiPitchBendChangeMessage(std::nullptr_t) noexcept {}
        MidiPitchBendChangeMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiPitchBendChangeMessage(ptr, take_ownership_from_abi) {}
        MidiPitchBendChangeMessage(uint8_t channel, uint16_t bend);
        MidiPitchBendChangeMessage(MidiPitchBendChangeMessage const&) noexcept = default;
        MidiPitchBendChangeMessage(MidiPitchBendChangeMessage&&) noexcept = default;
        MidiPitchBendChangeMessage& operator=(MidiPitchBendChangeMessage const&) & noexcept = default;
        MidiPitchBendChangeMessage& operator=(MidiPitchBendChangeMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiPolyphonicKeyPressureMessage : winrt::Windows::Devices::Midi::IMidiPolyphonicKeyPressureMessage
    {
        MidiPolyphonicKeyPressureMessage(std::nullptr_t) noexcept {}
        MidiPolyphonicKeyPressureMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiPolyphonicKeyPressureMessage(ptr, take_ownership_from_abi) {}
        MidiPolyphonicKeyPressureMessage(uint8_t channel, uint8_t note, uint8_t pressure);
        MidiPolyphonicKeyPressureMessage(MidiPolyphonicKeyPressureMessage const&) noexcept = default;
        MidiPolyphonicKeyPressureMessage(MidiPolyphonicKeyPressureMessage&&) noexcept = default;
        MidiPolyphonicKeyPressureMessage& operator=(MidiPolyphonicKeyPressureMessage const&) & noexcept = default;
        MidiPolyphonicKeyPressureMessage& operator=(MidiPolyphonicKeyPressureMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiProgramChangeMessage : winrt::Windows::Devices::Midi::IMidiProgramChangeMessage
    {
        MidiProgramChangeMessage(std::nullptr_t) noexcept {}
        MidiProgramChangeMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiProgramChangeMessage(ptr, take_ownership_from_abi) {}
        MidiProgramChangeMessage(uint8_t channel, uint8_t program);
        MidiProgramChangeMessage(MidiProgramChangeMessage const&) noexcept = default;
        MidiProgramChangeMessage(MidiProgramChangeMessage&&) noexcept = default;
        MidiProgramChangeMessage& operator=(MidiProgramChangeMessage const&) & noexcept = default;
        MidiProgramChangeMessage& operator=(MidiProgramChangeMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiSongPositionPointerMessage : winrt::Windows::Devices::Midi::IMidiSongPositionPointerMessage
    {
        MidiSongPositionPointerMessage(std::nullptr_t) noexcept {}
        MidiSongPositionPointerMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiSongPositionPointerMessage(ptr, take_ownership_from_abi) {}
        explicit MidiSongPositionPointerMessage(uint16_t beats);
        MidiSongPositionPointerMessage(MidiSongPositionPointerMessage const&) noexcept = default;
        MidiSongPositionPointerMessage(MidiSongPositionPointerMessage&&) noexcept = default;
        MidiSongPositionPointerMessage& operator=(MidiSongPositionPointerMessage const&) & noexcept = default;
        MidiSongPositionPointerMessage& operator=(MidiSongPositionPointerMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiSongSelectMessage : winrt::Windows::Devices::Midi::IMidiSongSelectMessage
    {
        MidiSongSelectMessage(std::nullptr_t) noexcept {}
        MidiSongSelectMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiSongSelectMessage(ptr, take_ownership_from_abi) {}
        explicit MidiSongSelectMessage(uint8_t song);
        MidiSongSelectMessage(MidiSongSelectMessage const&) noexcept = default;
        MidiSongSelectMessage(MidiSongSelectMessage&&) noexcept = default;
        MidiSongSelectMessage& operator=(MidiSongSelectMessage const&) & noexcept = default;
        MidiSongSelectMessage& operator=(MidiSongSelectMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiStartMessage : winrt::Windows::Devices::Midi::IMidiMessage
    {
        MidiStartMessage(std::nullptr_t) noexcept {}
        MidiStartMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiMessage(ptr, take_ownership_from_abi) {}
        MidiStartMessage();
        MidiStartMessage(MidiStartMessage const&) noexcept = default;
        MidiStartMessage(MidiStartMessage&&) noexcept = default;
        MidiStartMessage& operator=(MidiStartMessage const&) & noexcept = default;
        MidiStartMessage& operator=(MidiStartMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiStopMessage : winrt::Windows::Devices::Midi::IMidiMessage
    {
        MidiStopMessage(std::nullptr_t) noexcept {}
        MidiStopMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiMessage(ptr, take_ownership_from_abi) {}
        MidiStopMessage();
        MidiStopMessage(MidiStopMessage const&) noexcept = default;
        MidiStopMessage(MidiStopMessage&&) noexcept = default;
        MidiStopMessage& operator=(MidiStopMessage const&) & noexcept = default;
        MidiStopMessage& operator=(MidiStopMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiSynthesizer : winrt::Windows::Devices::Midi::IMidiSynthesizer
    {
        MidiSynthesizer(std::nullptr_t) noexcept {}
        MidiSynthesizer(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiSynthesizer(ptr, take_ownership_from_abi) {}
        MidiSynthesizer(MidiSynthesizer const&) noexcept = default;
        MidiSynthesizer(MidiSynthesizer&&) noexcept = default;
        MidiSynthesizer& operator=(MidiSynthesizer const&) & noexcept = default;
        MidiSynthesizer& operator=(MidiSynthesizer&&) & noexcept = default;
        static auto CreateAsync();
        static auto CreateAsync(winrt::Windows::Devices::Enumeration::DeviceInformation const& audioDevice);
        static auto IsSynthesizer(winrt::Windows::Devices::Enumeration::DeviceInformation const& midiDevice);
    };
    struct __declspec(empty_bases) MidiSystemExclusiveMessage : winrt::Windows::Devices::Midi::IMidiMessage
    {
        MidiSystemExclusiveMessage(std::nullptr_t) noexcept {}
        MidiSystemExclusiveMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiMessage(ptr, take_ownership_from_abi) {}
        explicit MidiSystemExclusiveMessage(winrt::Windows::Storage::Streams::IBuffer const& rawData);
        MidiSystemExclusiveMessage(MidiSystemExclusiveMessage const&) noexcept = default;
        MidiSystemExclusiveMessage(MidiSystemExclusiveMessage&&) noexcept = default;
        MidiSystemExclusiveMessage& operator=(MidiSystemExclusiveMessage const&) & noexcept = default;
        MidiSystemExclusiveMessage& operator=(MidiSystemExclusiveMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiSystemResetMessage : winrt::Windows::Devices::Midi::IMidiMessage
    {
        MidiSystemResetMessage(std::nullptr_t) noexcept {}
        MidiSystemResetMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiMessage(ptr, take_ownership_from_abi) {}
        MidiSystemResetMessage();
        MidiSystemResetMessage(MidiSystemResetMessage const&) noexcept = default;
        MidiSystemResetMessage(MidiSystemResetMessage&&) noexcept = default;
        MidiSystemResetMessage& operator=(MidiSystemResetMessage const&) & noexcept = default;
        MidiSystemResetMessage& operator=(MidiSystemResetMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiTimeCodeMessage : winrt::Windows::Devices::Midi::IMidiTimeCodeMessage
    {
        MidiTimeCodeMessage(std::nullptr_t) noexcept {}
        MidiTimeCodeMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiTimeCodeMessage(ptr, take_ownership_from_abi) {}
        MidiTimeCodeMessage(uint8_t frameType, uint8_t values);
        MidiTimeCodeMessage(MidiTimeCodeMessage const&) noexcept = default;
        MidiTimeCodeMessage(MidiTimeCodeMessage&&) noexcept = default;
        MidiTimeCodeMessage& operator=(MidiTimeCodeMessage const&) & noexcept = default;
        MidiTimeCodeMessage& operator=(MidiTimeCodeMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiTimingClockMessage : winrt::Windows::Devices::Midi::IMidiMessage
    {
        MidiTimingClockMessage(std::nullptr_t) noexcept {}
        MidiTimingClockMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiMessage(ptr, take_ownership_from_abi) {}
        MidiTimingClockMessage();
        MidiTimingClockMessage(MidiTimingClockMessage const&) noexcept = default;
        MidiTimingClockMessage(MidiTimingClockMessage&&) noexcept = default;
        MidiTimingClockMessage& operator=(MidiTimingClockMessage const&) & noexcept = default;
        MidiTimingClockMessage& operator=(MidiTimingClockMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MidiTuneRequestMessage : winrt::Windows::Devices::Midi::IMidiMessage
    {
        MidiTuneRequestMessage(std::nullptr_t) noexcept {}
        MidiTuneRequestMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Midi::IMidiMessage(ptr, take_ownership_from_abi) {}
        MidiTuneRequestMessage();
        MidiTuneRequestMessage(MidiTuneRequestMessage const&) noexcept = default;
        MidiTuneRequestMessage(MidiTuneRequestMessage&&) noexcept = default;
        MidiTuneRequestMessage& operator=(MidiTuneRequestMessage const&) & noexcept = default;
        MidiTuneRequestMessage& operator=(MidiTuneRequestMessage&&) & noexcept = default;
    };
}
#endif
