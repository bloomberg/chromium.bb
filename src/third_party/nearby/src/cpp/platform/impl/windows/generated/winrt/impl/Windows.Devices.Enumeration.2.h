// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Devices_Enumeration_2_H
#define WINRT_Windows_Devices_Enumeration_2_H
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.Foundation.Collections.1.h"
#include "winrt/impl/Windows.Storage.Streams.1.h"
#include "winrt/impl/Windows.Devices.Enumeration.1.h"
WINRT_EXPORT namespace winrt::Windows::Devices::Enumeration
{
    struct __declspec(empty_bases) DeviceAccessChangedEventArgs : winrt::Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs,
        impl::require<DeviceAccessChangedEventArgs, winrt::Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs2>
    {
        DeviceAccessChangedEventArgs(std::nullptr_t) noexcept {}
        DeviceAccessChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs(ptr, take_ownership_from_abi) {}
        DeviceAccessChangedEventArgs(DeviceAccessChangedEventArgs const&) noexcept = default;
        DeviceAccessChangedEventArgs(DeviceAccessChangedEventArgs&&) noexcept = default;
        DeviceAccessChangedEventArgs& operator=(DeviceAccessChangedEventArgs const&) & noexcept = default;
        DeviceAccessChangedEventArgs& operator=(DeviceAccessChangedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceAccessInformation : winrt::Windows::Devices::Enumeration::IDeviceAccessInformation
    {
        DeviceAccessInformation(std::nullptr_t) noexcept {}
        DeviceAccessInformation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDeviceAccessInformation(ptr, take_ownership_from_abi) {}
        DeviceAccessInformation(DeviceAccessInformation const&) noexcept = default;
        DeviceAccessInformation(DeviceAccessInformation&&) noexcept = default;
        DeviceAccessInformation& operator=(DeviceAccessInformation const&) & noexcept = default;
        DeviceAccessInformation& operator=(DeviceAccessInformation&&) & noexcept = default;
        static auto CreateFromId(param::hstring const& deviceId);
        static auto CreateFromDeviceClassId(winrt::guid const& deviceClassId);
        static auto CreateFromDeviceClass(winrt::Windows::Devices::Enumeration::DeviceClass const& deviceClass);
    };
    struct __declspec(empty_bases) DeviceConnectionChangeTriggerDetails : winrt::Windows::Devices::Enumeration::IDeviceConnectionChangeTriggerDetails
    {
        DeviceConnectionChangeTriggerDetails(std::nullptr_t) noexcept {}
        DeviceConnectionChangeTriggerDetails(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDeviceConnectionChangeTriggerDetails(ptr, take_ownership_from_abi) {}
        DeviceConnectionChangeTriggerDetails(DeviceConnectionChangeTriggerDetails const&) noexcept = default;
        DeviceConnectionChangeTriggerDetails(DeviceConnectionChangeTriggerDetails&&) noexcept = default;
        DeviceConnectionChangeTriggerDetails& operator=(DeviceConnectionChangeTriggerDetails const&) & noexcept = default;
        DeviceConnectionChangeTriggerDetails& operator=(DeviceConnectionChangeTriggerDetails&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceDisconnectButtonClickedEventArgs : winrt::Windows::Devices::Enumeration::IDeviceDisconnectButtonClickedEventArgs
    {
        DeviceDisconnectButtonClickedEventArgs(std::nullptr_t) noexcept {}
        DeviceDisconnectButtonClickedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDeviceDisconnectButtonClickedEventArgs(ptr, take_ownership_from_abi) {}
        DeviceDisconnectButtonClickedEventArgs(DeviceDisconnectButtonClickedEventArgs const&) noexcept = default;
        DeviceDisconnectButtonClickedEventArgs(DeviceDisconnectButtonClickedEventArgs&&) noexcept = default;
        DeviceDisconnectButtonClickedEventArgs& operator=(DeviceDisconnectButtonClickedEventArgs const&) & noexcept = default;
        DeviceDisconnectButtonClickedEventArgs& operator=(DeviceDisconnectButtonClickedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceInformation : winrt::Windows::Devices::Enumeration::IDeviceInformation,
        impl::require<DeviceInformation, winrt::Windows::Devices::Enumeration::IDeviceInformation2>
    {
        DeviceInformation(std::nullptr_t) noexcept {}
        DeviceInformation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDeviceInformation(ptr, take_ownership_from_abi) {}
        DeviceInformation(DeviceInformation const&) noexcept = default;
        DeviceInformation(DeviceInformation&&) noexcept = default;
        DeviceInformation& operator=(DeviceInformation const&) & noexcept = default;
        DeviceInformation& operator=(DeviceInformation&&) & noexcept = default;
        static auto CreateFromIdAsync(param::hstring const& deviceId);
        static auto CreateFromIdAsync(param::hstring const& deviceId, param::async_iterable<hstring> const& additionalProperties);
        static auto FindAllAsync();
        static auto FindAllAsync(winrt::Windows::Devices::Enumeration::DeviceClass const& deviceClass);
        static auto FindAllAsync(param::hstring const& aqsFilter);
        static auto FindAllAsync(param::hstring const& aqsFilter, param::async_iterable<hstring> const& additionalProperties);
        static auto CreateWatcher();
        static auto CreateWatcher(winrt::Windows::Devices::Enumeration::DeviceClass const& deviceClass);
        static auto CreateWatcher(param::hstring const& aqsFilter);
        static auto CreateWatcher(param::hstring const& aqsFilter, param::iterable<hstring> const& additionalProperties);
        static auto GetAqsFilterFromDeviceClass(winrt::Windows::Devices::Enumeration::DeviceClass const& deviceClass);
        static auto CreateFromIdAsync(param::hstring const& deviceId, param::async_iterable<hstring> const& additionalProperties, winrt::Windows::Devices::Enumeration::DeviceInformationKind const& kind);
        static auto FindAllAsync(param::hstring const& aqsFilter, param::async_iterable<hstring> const& additionalProperties, winrt::Windows::Devices::Enumeration::DeviceInformationKind const& kind);
        static auto CreateWatcher(param::hstring const& aqsFilter, param::iterable<hstring> const& additionalProperties, winrt::Windows::Devices::Enumeration::DeviceInformationKind const& kind);
    };
    struct __declspec(empty_bases) DeviceInformationCollection : winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Enumeration::DeviceInformation>
    {
        DeviceInformationCollection(std::nullptr_t) noexcept {}
        DeviceInformationCollection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Enumeration::DeviceInformation>(ptr, take_ownership_from_abi) {}
        DeviceInformationCollection(DeviceInformationCollection const&) noexcept = default;
        DeviceInformationCollection(DeviceInformationCollection&&) noexcept = default;
        DeviceInformationCollection& operator=(DeviceInformationCollection const&) & noexcept = default;
        DeviceInformationCollection& operator=(DeviceInformationCollection&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceInformationCustomPairing : winrt::Windows::Devices::Enumeration::IDeviceInformationCustomPairing
    {
        DeviceInformationCustomPairing(std::nullptr_t) noexcept {}
        DeviceInformationCustomPairing(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDeviceInformationCustomPairing(ptr, take_ownership_from_abi) {}
        DeviceInformationCustomPairing(DeviceInformationCustomPairing const&) noexcept = default;
        DeviceInformationCustomPairing(DeviceInformationCustomPairing&&) noexcept = default;
        DeviceInformationCustomPairing& operator=(DeviceInformationCustomPairing const&) & noexcept = default;
        DeviceInformationCustomPairing& operator=(DeviceInformationCustomPairing&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceInformationPairing : winrt::Windows::Devices::Enumeration::IDeviceInformationPairing,
        impl::require<DeviceInformationPairing, winrt::Windows::Devices::Enumeration::IDeviceInformationPairing2>
    {
        DeviceInformationPairing(std::nullptr_t) noexcept {}
        DeviceInformationPairing(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDeviceInformationPairing(ptr, take_ownership_from_abi) {}
        DeviceInformationPairing(DeviceInformationPairing const&) noexcept = default;
        DeviceInformationPairing(DeviceInformationPairing&&) noexcept = default;
        DeviceInformationPairing& operator=(DeviceInformationPairing const&) & noexcept = default;
        DeviceInformationPairing& operator=(DeviceInformationPairing&&) & noexcept = default;
        using winrt::Windows::Devices::Enumeration::IDeviceInformationPairing::PairAsync;
        using impl::consume_t<DeviceInformationPairing, winrt::Windows::Devices::Enumeration::IDeviceInformationPairing2>::PairAsync;
        static auto TryRegisterForAllInboundPairingRequests(winrt::Windows::Devices::Enumeration::DevicePairingKinds const& pairingKindsSupported);
        static auto TryRegisterForAllInboundPairingRequestsWithProtectionLevel(winrt::Windows::Devices::Enumeration::DevicePairingKinds const& pairingKindsSupported, winrt::Windows::Devices::Enumeration::DevicePairingProtectionLevel const& minProtectionLevel);
    };
    struct __declspec(empty_bases) DeviceInformationUpdate : winrt::Windows::Devices::Enumeration::IDeviceInformationUpdate,
        impl::require<DeviceInformationUpdate, winrt::Windows::Devices::Enumeration::IDeviceInformationUpdate2>
    {
        DeviceInformationUpdate(std::nullptr_t) noexcept {}
        DeviceInformationUpdate(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDeviceInformationUpdate(ptr, take_ownership_from_abi) {}
        DeviceInformationUpdate(DeviceInformationUpdate const&) noexcept = default;
        DeviceInformationUpdate(DeviceInformationUpdate&&) noexcept = default;
        DeviceInformationUpdate& operator=(DeviceInformationUpdate const&) & noexcept = default;
        DeviceInformationUpdate& operator=(DeviceInformationUpdate&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DevicePairingRequestedEventArgs : winrt::Windows::Devices::Enumeration::IDevicePairingRequestedEventArgs,
        impl::require<DevicePairingRequestedEventArgs, winrt::Windows::Devices::Enumeration::IDevicePairingRequestedEventArgs2>
    {
        DevicePairingRequestedEventArgs(std::nullptr_t) noexcept {}
        DevicePairingRequestedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDevicePairingRequestedEventArgs(ptr, take_ownership_from_abi) {}
        DevicePairingRequestedEventArgs(DevicePairingRequestedEventArgs const&) noexcept = default;
        DevicePairingRequestedEventArgs(DevicePairingRequestedEventArgs&&) noexcept = default;
        DevicePairingRequestedEventArgs& operator=(DevicePairingRequestedEventArgs const&) & noexcept = default;
        DevicePairingRequestedEventArgs& operator=(DevicePairingRequestedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DevicePairingResult : winrt::Windows::Devices::Enumeration::IDevicePairingResult
    {
        DevicePairingResult(std::nullptr_t) noexcept {}
        DevicePairingResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDevicePairingResult(ptr, take_ownership_from_abi) {}
        DevicePairingResult(DevicePairingResult const&) noexcept = default;
        DevicePairingResult(DevicePairingResult&&) noexcept = default;
        DevicePairingResult& operator=(DevicePairingResult const&) & noexcept = default;
        DevicePairingResult& operator=(DevicePairingResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DevicePicker : winrt::Windows::Devices::Enumeration::IDevicePicker
    {
        DevicePicker(std::nullptr_t) noexcept {}
        DevicePicker(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDevicePicker(ptr, take_ownership_from_abi) {}
        DevicePicker();
        DevicePicker(DevicePicker const&) noexcept = default;
        DevicePicker(DevicePicker&&) noexcept = default;
        DevicePicker& operator=(DevicePicker const&) & noexcept = default;
        DevicePicker& operator=(DevicePicker&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DevicePickerAppearance : winrt::Windows::Devices::Enumeration::IDevicePickerAppearance
    {
        DevicePickerAppearance(std::nullptr_t) noexcept {}
        DevicePickerAppearance(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDevicePickerAppearance(ptr, take_ownership_from_abi) {}
        DevicePickerAppearance(DevicePickerAppearance const&) noexcept = default;
        DevicePickerAppearance(DevicePickerAppearance&&) noexcept = default;
        DevicePickerAppearance& operator=(DevicePickerAppearance const&) & noexcept = default;
        DevicePickerAppearance& operator=(DevicePickerAppearance&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DevicePickerFilter : winrt::Windows::Devices::Enumeration::IDevicePickerFilter
    {
        DevicePickerFilter(std::nullptr_t) noexcept {}
        DevicePickerFilter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDevicePickerFilter(ptr, take_ownership_from_abi) {}
        DevicePickerFilter(DevicePickerFilter const&) noexcept = default;
        DevicePickerFilter(DevicePickerFilter&&) noexcept = default;
        DevicePickerFilter& operator=(DevicePickerFilter const&) & noexcept = default;
        DevicePickerFilter& operator=(DevicePickerFilter&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceSelectedEventArgs : winrt::Windows::Devices::Enumeration::IDeviceSelectedEventArgs
    {
        DeviceSelectedEventArgs(std::nullptr_t) noexcept {}
        DeviceSelectedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDeviceSelectedEventArgs(ptr, take_ownership_from_abi) {}
        DeviceSelectedEventArgs(DeviceSelectedEventArgs const&) noexcept = default;
        DeviceSelectedEventArgs(DeviceSelectedEventArgs&&) noexcept = default;
        DeviceSelectedEventArgs& operator=(DeviceSelectedEventArgs const&) & noexcept = default;
        DeviceSelectedEventArgs& operator=(DeviceSelectedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceThumbnail : winrt::Windows::Storage::Streams::IRandomAccessStreamWithContentType
    {
        DeviceThumbnail(std::nullptr_t) noexcept {}
        DeviceThumbnail(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Storage::Streams::IRandomAccessStreamWithContentType(ptr, take_ownership_from_abi) {}
        DeviceThumbnail(DeviceThumbnail const&) noexcept = default;
        DeviceThumbnail(DeviceThumbnail&&) noexcept = default;
        DeviceThumbnail& operator=(DeviceThumbnail const&) & noexcept = default;
        DeviceThumbnail& operator=(DeviceThumbnail&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceUnpairingResult : winrt::Windows::Devices::Enumeration::IDeviceUnpairingResult
    {
        DeviceUnpairingResult(std::nullptr_t) noexcept {}
        DeviceUnpairingResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDeviceUnpairingResult(ptr, take_ownership_from_abi) {}
        DeviceUnpairingResult(DeviceUnpairingResult const&) noexcept = default;
        DeviceUnpairingResult(DeviceUnpairingResult&&) noexcept = default;
        DeviceUnpairingResult& operator=(DeviceUnpairingResult const&) & noexcept = default;
        DeviceUnpairingResult& operator=(DeviceUnpairingResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceWatcher : winrt::Windows::Devices::Enumeration::IDeviceWatcher,
        impl::require<DeviceWatcher, winrt::Windows::Devices::Enumeration::IDeviceWatcher2>
    {
        DeviceWatcher(std::nullptr_t) noexcept {}
        DeviceWatcher(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDeviceWatcher(ptr, take_ownership_from_abi) {}
        DeviceWatcher(DeviceWatcher const&) noexcept = default;
        DeviceWatcher(DeviceWatcher&&) noexcept = default;
        DeviceWatcher& operator=(DeviceWatcher const&) & noexcept = default;
        DeviceWatcher& operator=(DeviceWatcher&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceWatcherEvent : winrt::Windows::Devices::Enumeration::IDeviceWatcherEvent
    {
        DeviceWatcherEvent(std::nullptr_t) noexcept {}
        DeviceWatcherEvent(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDeviceWatcherEvent(ptr, take_ownership_from_abi) {}
        DeviceWatcherEvent(DeviceWatcherEvent const&) noexcept = default;
        DeviceWatcherEvent(DeviceWatcherEvent&&) noexcept = default;
        DeviceWatcherEvent& operator=(DeviceWatcherEvent const&) & noexcept = default;
        DeviceWatcherEvent& operator=(DeviceWatcherEvent&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DeviceWatcherTriggerDetails : winrt::Windows::Devices::Enumeration::IDeviceWatcherTriggerDetails
    {
        DeviceWatcherTriggerDetails(std::nullptr_t) noexcept {}
        DeviceWatcherTriggerDetails(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IDeviceWatcherTriggerDetails(ptr, take_ownership_from_abi) {}
        DeviceWatcherTriggerDetails(DeviceWatcherTriggerDetails const&) noexcept = default;
        DeviceWatcherTriggerDetails(DeviceWatcherTriggerDetails&&) noexcept = default;
        DeviceWatcherTriggerDetails& operator=(DeviceWatcherTriggerDetails const&) & noexcept = default;
        DeviceWatcherTriggerDetails& operator=(DeviceWatcherTriggerDetails&&) & noexcept = default;
    };
    struct __declspec(empty_bases) EnclosureLocation : winrt::Windows::Devices::Enumeration::IEnclosureLocation,
        impl::require<EnclosureLocation, winrt::Windows::Devices::Enumeration::IEnclosureLocation2>
    {
        EnclosureLocation(std::nullptr_t) noexcept {}
        EnclosureLocation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Devices::Enumeration::IEnclosureLocation(ptr, take_ownership_from_abi) {}
        EnclosureLocation(EnclosureLocation const&) noexcept = default;
        EnclosureLocation(EnclosureLocation&&) noexcept = default;
        EnclosureLocation& operator=(EnclosureLocation const&) & noexcept = default;
        EnclosureLocation& operator=(EnclosureLocation&&) & noexcept = default;
    };
}
#endif
