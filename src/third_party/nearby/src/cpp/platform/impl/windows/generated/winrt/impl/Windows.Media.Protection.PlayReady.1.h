// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Media_Protection_PlayReady_1_H
#define WINRT_Windows_Media_Protection_PlayReady_1_H
#include "winrt/impl/Windows.Media.Protection.0.h"
#include "winrt/impl/Windows.Media.Protection.PlayReady.0.h"
WINRT_EXPORT namespace winrt::Windows::Media::Protection::PlayReady
{
    struct __declspec(empty_bases) INDClient :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDClient>
    {
        INDClient(std::nullptr_t = nullptr) noexcept {}
        INDClient(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDClient(INDClient const&) noexcept = default;
        INDClient(INDClient&&) noexcept = default;
        INDClient& operator=(INDClient const&) & noexcept = default;
        INDClient& operator=(INDClient&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDClientFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDClientFactory>
    {
        INDClientFactory(std::nullptr_t = nullptr) noexcept {}
        INDClientFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDClientFactory(INDClientFactory const&) noexcept = default;
        INDClientFactory(INDClientFactory&&) noexcept = default;
        INDClientFactory& operator=(INDClientFactory const&) & noexcept = default;
        INDClientFactory& operator=(INDClientFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDClosedCaptionDataReceivedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDClosedCaptionDataReceivedEventArgs>
    {
        INDClosedCaptionDataReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
        INDClosedCaptionDataReceivedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDClosedCaptionDataReceivedEventArgs(INDClosedCaptionDataReceivedEventArgs const&) noexcept = default;
        INDClosedCaptionDataReceivedEventArgs(INDClosedCaptionDataReceivedEventArgs&&) noexcept = default;
        INDClosedCaptionDataReceivedEventArgs& operator=(INDClosedCaptionDataReceivedEventArgs const&) & noexcept = default;
        INDClosedCaptionDataReceivedEventArgs& operator=(INDClosedCaptionDataReceivedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDCustomData :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDCustomData>
    {
        INDCustomData(std::nullptr_t = nullptr) noexcept {}
        INDCustomData(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDCustomData(INDCustomData const&) noexcept = default;
        INDCustomData(INDCustomData&&) noexcept = default;
        INDCustomData& operator=(INDCustomData const&) & noexcept = default;
        INDCustomData& operator=(INDCustomData&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDCustomDataFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDCustomDataFactory>
    {
        INDCustomDataFactory(std::nullptr_t = nullptr) noexcept {}
        INDCustomDataFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDCustomDataFactory(INDCustomDataFactory const&) noexcept = default;
        INDCustomDataFactory(INDCustomDataFactory&&) noexcept = default;
        INDCustomDataFactory& operator=(INDCustomDataFactory const&) & noexcept = default;
        INDCustomDataFactory& operator=(INDCustomDataFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDDownloadEngine :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDDownloadEngine>
    {
        INDDownloadEngine(std::nullptr_t = nullptr) noexcept {}
        INDDownloadEngine(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDDownloadEngine(INDDownloadEngine const&) noexcept = default;
        INDDownloadEngine(INDDownloadEngine&&) noexcept = default;
        INDDownloadEngine& operator=(INDDownloadEngine const&) & noexcept = default;
        INDDownloadEngine& operator=(INDDownloadEngine&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDDownloadEngineNotifier :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDDownloadEngineNotifier>
    {
        INDDownloadEngineNotifier(std::nullptr_t = nullptr) noexcept {}
        INDDownloadEngineNotifier(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDDownloadEngineNotifier(INDDownloadEngineNotifier const&) noexcept = default;
        INDDownloadEngineNotifier(INDDownloadEngineNotifier&&) noexcept = default;
        INDDownloadEngineNotifier& operator=(INDDownloadEngineNotifier const&) & noexcept = default;
        INDDownloadEngineNotifier& operator=(INDDownloadEngineNotifier&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDLicenseFetchCompletedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDLicenseFetchCompletedEventArgs>
    {
        INDLicenseFetchCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
        INDLicenseFetchCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDLicenseFetchCompletedEventArgs(INDLicenseFetchCompletedEventArgs const&) noexcept = default;
        INDLicenseFetchCompletedEventArgs(INDLicenseFetchCompletedEventArgs&&) noexcept = default;
        INDLicenseFetchCompletedEventArgs& operator=(INDLicenseFetchCompletedEventArgs const&) & noexcept = default;
        INDLicenseFetchCompletedEventArgs& operator=(INDLicenseFetchCompletedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDLicenseFetchDescriptor :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDLicenseFetchDescriptor>
    {
        INDLicenseFetchDescriptor(std::nullptr_t = nullptr) noexcept {}
        INDLicenseFetchDescriptor(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDLicenseFetchDescriptor(INDLicenseFetchDescriptor const&) noexcept = default;
        INDLicenseFetchDescriptor(INDLicenseFetchDescriptor&&) noexcept = default;
        INDLicenseFetchDescriptor& operator=(INDLicenseFetchDescriptor const&) & noexcept = default;
        INDLicenseFetchDescriptor& operator=(INDLicenseFetchDescriptor&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDLicenseFetchDescriptorFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDLicenseFetchDescriptorFactory>
    {
        INDLicenseFetchDescriptorFactory(std::nullptr_t = nullptr) noexcept {}
        INDLicenseFetchDescriptorFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDLicenseFetchDescriptorFactory(INDLicenseFetchDescriptorFactory const&) noexcept = default;
        INDLicenseFetchDescriptorFactory(INDLicenseFetchDescriptorFactory&&) noexcept = default;
        INDLicenseFetchDescriptorFactory& operator=(INDLicenseFetchDescriptorFactory const&) & noexcept = default;
        INDLicenseFetchDescriptorFactory& operator=(INDLicenseFetchDescriptorFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDLicenseFetchResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDLicenseFetchResult>
    {
        INDLicenseFetchResult(std::nullptr_t = nullptr) noexcept {}
        INDLicenseFetchResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDLicenseFetchResult(INDLicenseFetchResult const&) noexcept = default;
        INDLicenseFetchResult(INDLicenseFetchResult&&) noexcept = default;
        INDLicenseFetchResult& operator=(INDLicenseFetchResult const&) & noexcept = default;
        INDLicenseFetchResult& operator=(INDLicenseFetchResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDMessenger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDMessenger>
    {
        INDMessenger(std::nullptr_t = nullptr) noexcept {}
        INDMessenger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDMessenger(INDMessenger const&) noexcept = default;
        INDMessenger(INDMessenger&&) noexcept = default;
        INDMessenger& operator=(INDMessenger const&) & noexcept = default;
        INDMessenger& operator=(INDMessenger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDProximityDetectionCompletedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDProximityDetectionCompletedEventArgs>
    {
        INDProximityDetectionCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
        INDProximityDetectionCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDProximityDetectionCompletedEventArgs(INDProximityDetectionCompletedEventArgs const&) noexcept = default;
        INDProximityDetectionCompletedEventArgs(INDProximityDetectionCompletedEventArgs&&) noexcept = default;
        INDProximityDetectionCompletedEventArgs& operator=(INDProximityDetectionCompletedEventArgs const&) & noexcept = default;
        INDProximityDetectionCompletedEventArgs& operator=(INDProximityDetectionCompletedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDRegistrationCompletedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDRegistrationCompletedEventArgs>
    {
        INDRegistrationCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
        INDRegistrationCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDRegistrationCompletedEventArgs(INDRegistrationCompletedEventArgs const&) noexcept = default;
        INDRegistrationCompletedEventArgs(INDRegistrationCompletedEventArgs&&) noexcept = default;
        INDRegistrationCompletedEventArgs& operator=(INDRegistrationCompletedEventArgs const&) & noexcept = default;
        INDRegistrationCompletedEventArgs& operator=(INDRegistrationCompletedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDSendResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDSendResult>
    {
        INDSendResult(std::nullptr_t = nullptr) noexcept {}
        INDSendResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDSendResult(INDSendResult const&) noexcept = default;
        INDSendResult(INDSendResult&&) noexcept = default;
        INDSendResult& operator=(INDSendResult const&) & noexcept = default;
        INDSendResult& operator=(INDSendResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDStartResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDStartResult>
    {
        INDStartResult(std::nullptr_t = nullptr) noexcept {}
        INDStartResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDStartResult(INDStartResult const&) noexcept = default;
        INDStartResult(INDStartResult&&) noexcept = default;
        INDStartResult& operator=(INDStartResult const&) & noexcept = default;
        INDStartResult& operator=(INDStartResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDStorageFileHelper :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDStorageFileHelper>
    {
        INDStorageFileHelper(std::nullptr_t = nullptr) noexcept {}
        INDStorageFileHelper(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDStorageFileHelper(INDStorageFileHelper const&) noexcept = default;
        INDStorageFileHelper(INDStorageFileHelper&&) noexcept = default;
        INDStorageFileHelper& operator=(INDStorageFileHelper const&) & noexcept = default;
        INDStorageFileHelper& operator=(INDStorageFileHelper&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDStreamParser :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDStreamParser>
    {
        INDStreamParser(std::nullptr_t = nullptr) noexcept {}
        INDStreamParser(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDStreamParser(INDStreamParser const&) noexcept = default;
        INDStreamParser(INDStreamParser&&) noexcept = default;
        INDStreamParser& operator=(INDStreamParser const&) & noexcept = default;
        INDStreamParser& operator=(INDStreamParser&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDStreamParserNotifier :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDStreamParserNotifier>
    {
        INDStreamParserNotifier(std::nullptr_t = nullptr) noexcept {}
        INDStreamParserNotifier(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDStreamParserNotifier(INDStreamParserNotifier const&) noexcept = default;
        INDStreamParserNotifier(INDStreamParserNotifier&&) noexcept = default;
        INDStreamParserNotifier& operator=(INDStreamParserNotifier const&) & noexcept = default;
        INDStreamParserNotifier& operator=(INDStreamParserNotifier&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDTCPMessengerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDTCPMessengerFactory>
    {
        INDTCPMessengerFactory(std::nullptr_t = nullptr) noexcept {}
        INDTCPMessengerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDTCPMessengerFactory(INDTCPMessengerFactory const&) noexcept = default;
        INDTCPMessengerFactory(INDTCPMessengerFactory&&) noexcept = default;
        INDTCPMessengerFactory& operator=(INDTCPMessengerFactory const&) & noexcept = default;
        INDTCPMessengerFactory& operator=(INDTCPMessengerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INDTransmitterProperties :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INDTransmitterProperties>
    {
        INDTransmitterProperties(std::nullptr_t = nullptr) noexcept {}
        INDTransmitterProperties(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INDTransmitterProperties(INDTransmitterProperties const&) noexcept = default;
        INDTransmitterProperties(INDTransmitterProperties&&) noexcept = default;
        INDTransmitterProperties& operator=(INDTransmitterProperties const&) & noexcept = default;
        INDTransmitterProperties& operator=(INDTransmitterProperties&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyContentHeader :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyContentHeader>
    {
        IPlayReadyContentHeader(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyContentHeader(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyContentHeader(IPlayReadyContentHeader const&) noexcept = default;
        IPlayReadyContentHeader(IPlayReadyContentHeader&&) noexcept = default;
        IPlayReadyContentHeader& operator=(IPlayReadyContentHeader const&) & noexcept = default;
        IPlayReadyContentHeader& operator=(IPlayReadyContentHeader&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyContentHeader2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyContentHeader2>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyContentHeader2, winrt::Windows::Media::Protection::PlayReady::IPlayReadyContentHeader>
    {
        IPlayReadyContentHeader2(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyContentHeader2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyContentHeader2(IPlayReadyContentHeader2 const&) noexcept = default;
        IPlayReadyContentHeader2(IPlayReadyContentHeader2&&) noexcept = default;
        IPlayReadyContentHeader2& operator=(IPlayReadyContentHeader2 const&) & noexcept = default;
        IPlayReadyContentHeader2& operator=(IPlayReadyContentHeader2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyContentHeaderFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyContentHeaderFactory>
    {
        IPlayReadyContentHeaderFactory(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyContentHeaderFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyContentHeaderFactory(IPlayReadyContentHeaderFactory const&) noexcept = default;
        IPlayReadyContentHeaderFactory(IPlayReadyContentHeaderFactory&&) noexcept = default;
        IPlayReadyContentHeaderFactory& operator=(IPlayReadyContentHeaderFactory const&) & noexcept = default;
        IPlayReadyContentHeaderFactory& operator=(IPlayReadyContentHeaderFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyContentHeaderFactory2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyContentHeaderFactory2>
    {
        IPlayReadyContentHeaderFactory2(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyContentHeaderFactory2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyContentHeaderFactory2(IPlayReadyContentHeaderFactory2 const&) noexcept = default;
        IPlayReadyContentHeaderFactory2(IPlayReadyContentHeaderFactory2&&) noexcept = default;
        IPlayReadyContentHeaderFactory2& operator=(IPlayReadyContentHeaderFactory2 const&) & noexcept = default;
        IPlayReadyContentHeaderFactory2& operator=(IPlayReadyContentHeaderFactory2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyContentResolver :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyContentResolver>
    {
        IPlayReadyContentResolver(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyContentResolver(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyContentResolver(IPlayReadyContentResolver const&) noexcept = default;
        IPlayReadyContentResolver(IPlayReadyContentResolver&&) noexcept = default;
        IPlayReadyContentResolver& operator=(IPlayReadyContentResolver const&) & noexcept = default;
        IPlayReadyContentResolver& operator=(IPlayReadyContentResolver&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyDomain :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyDomain>
    {
        IPlayReadyDomain(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyDomain(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyDomain(IPlayReadyDomain const&) noexcept = default;
        IPlayReadyDomain(IPlayReadyDomain&&) noexcept = default;
        IPlayReadyDomain& operator=(IPlayReadyDomain const&) & noexcept = default;
        IPlayReadyDomain& operator=(IPlayReadyDomain&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyDomainIterableFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyDomainIterableFactory>
    {
        IPlayReadyDomainIterableFactory(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyDomainIterableFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyDomainIterableFactory(IPlayReadyDomainIterableFactory const&) noexcept = default;
        IPlayReadyDomainIterableFactory(IPlayReadyDomainIterableFactory&&) noexcept = default;
        IPlayReadyDomainIterableFactory& operator=(IPlayReadyDomainIterableFactory const&) & noexcept = default;
        IPlayReadyDomainIterableFactory& operator=(IPlayReadyDomainIterableFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyDomainJoinServiceRequest :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyDomainJoinServiceRequest>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyDomainJoinServiceRequest, winrt::Windows::Media::Protection::IMediaProtectionServiceRequest, winrt::Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest>
    {
        IPlayReadyDomainJoinServiceRequest(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyDomainJoinServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyDomainJoinServiceRequest(IPlayReadyDomainJoinServiceRequest const&) noexcept = default;
        IPlayReadyDomainJoinServiceRequest(IPlayReadyDomainJoinServiceRequest&&) noexcept = default;
        IPlayReadyDomainJoinServiceRequest& operator=(IPlayReadyDomainJoinServiceRequest const&) & noexcept = default;
        IPlayReadyDomainJoinServiceRequest& operator=(IPlayReadyDomainJoinServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyDomainLeaveServiceRequest :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyDomainLeaveServiceRequest>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyDomainLeaveServiceRequest, winrt::Windows::Media::Protection::IMediaProtectionServiceRequest, winrt::Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest>
    {
        IPlayReadyDomainLeaveServiceRequest(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyDomainLeaveServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyDomainLeaveServiceRequest(IPlayReadyDomainLeaveServiceRequest const&) noexcept = default;
        IPlayReadyDomainLeaveServiceRequest(IPlayReadyDomainLeaveServiceRequest&&) noexcept = default;
        IPlayReadyDomainLeaveServiceRequest& operator=(IPlayReadyDomainLeaveServiceRequest const&) & noexcept = default;
        IPlayReadyDomainLeaveServiceRequest& operator=(IPlayReadyDomainLeaveServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyITADataGenerator :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyITADataGenerator>
    {
        IPlayReadyITADataGenerator(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyITADataGenerator(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyITADataGenerator(IPlayReadyITADataGenerator const&) noexcept = default;
        IPlayReadyITADataGenerator(IPlayReadyITADataGenerator&&) noexcept = default;
        IPlayReadyITADataGenerator& operator=(IPlayReadyITADataGenerator const&) & noexcept = default;
        IPlayReadyITADataGenerator& operator=(IPlayReadyITADataGenerator&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyIndividualizationServiceRequest :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyIndividualizationServiceRequest>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyIndividualizationServiceRequest, winrt::Windows::Media::Protection::IMediaProtectionServiceRequest, winrt::Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest>
    {
        IPlayReadyIndividualizationServiceRequest(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyIndividualizationServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyIndividualizationServiceRequest(IPlayReadyIndividualizationServiceRequest const&) noexcept = default;
        IPlayReadyIndividualizationServiceRequest(IPlayReadyIndividualizationServiceRequest&&) noexcept = default;
        IPlayReadyIndividualizationServiceRequest& operator=(IPlayReadyIndividualizationServiceRequest const&) & noexcept = default;
        IPlayReadyIndividualizationServiceRequest& operator=(IPlayReadyIndividualizationServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyLicense :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyLicense>
    {
        IPlayReadyLicense(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyLicense(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyLicense(IPlayReadyLicense const&) noexcept = default;
        IPlayReadyLicense(IPlayReadyLicense&&) noexcept = default;
        IPlayReadyLicense& operator=(IPlayReadyLicense const&) & noexcept = default;
        IPlayReadyLicense& operator=(IPlayReadyLicense&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyLicense2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyLicense2>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicense2, winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicense>
    {
        IPlayReadyLicense2(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyLicense2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyLicense2(IPlayReadyLicense2 const&) noexcept = default;
        IPlayReadyLicense2(IPlayReadyLicense2&&) noexcept = default;
        IPlayReadyLicense2& operator=(IPlayReadyLicense2 const&) & noexcept = default;
        IPlayReadyLicense2& operator=(IPlayReadyLicense2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyLicenseAcquisitionServiceRequest :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyLicenseAcquisitionServiceRequest>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseAcquisitionServiceRequest, winrt::Windows::Media::Protection::IMediaProtectionServiceRequest, winrt::Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest>
    {
        IPlayReadyLicenseAcquisitionServiceRequest(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyLicenseAcquisitionServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyLicenseAcquisitionServiceRequest(IPlayReadyLicenseAcquisitionServiceRequest const&) noexcept = default;
        IPlayReadyLicenseAcquisitionServiceRequest(IPlayReadyLicenseAcquisitionServiceRequest&&) noexcept = default;
        IPlayReadyLicenseAcquisitionServiceRequest& operator=(IPlayReadyLicenseAcquisitionServiceRequest const&) & noexcept = default;
        IPlayReadyLicenseAcquisitionServiceRequest& operator=(IPlayReadyLicenseAcquisitionServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyLicenseAcquisitionServiceRequest2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyLicenseAcquisitionServiceRequest2>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseAcquisitionServiceRequest2, winrt::Windows::Media::Protection::IMediaProtectionServiceRequest, winrt::Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest, winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseAcquisitionServiceRequest>
    {
        IPlayReadyLicenseAcquisitionServiceRequest2(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyLicenseAcquisitionServiceRequest2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyLicenseAcquisitionServiceRequest2(IPlayReadyLicenseAcquisitionServiceRequest2 const&) noexcept = default;
        IPlayReadyLicenseAcquisitionServiceRequest2(IPlayReadyLicenseAcquisitionServiceRequest2&&) noexcept = default;
        IPlayReadyLicenseAcquisitionServiceRequest2& operator=(IPlayReadyLicenseAcquisitionServiceRequest2 const&) & noexcept = default;
        IPlayReadyLicenseAcquisitionServiceRequest2& operator=(IPlayReadyLicenseAcquisitionServiceRequest2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyLicenseAcquisitionServiceRequest3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyLicenseAcquisitionServiceRequest3>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseAcquisitionServiceRequest3, winrt::Windows::Media::Protection::IMediaProtectionServiceRequest, winrt::Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest, winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseAcquisitionServiceRequest, winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseAcquisitionServiceRequest2>
    {
        IPlayReadyLicenseAcquisitionServiceRequest3(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyLicenseAcquisitionServiceRequest3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyLicenseAcquisitionServiceRequest3(IPlayReadyLicenseAcquisitionServiceRequest3 const&) noexcept = default;
        IPlayReadyLicenseAcquisitionServiceRequest3(IPlayReadyLicenseAcquisitionServiceRequest3&&) noexcept = default;
        IPlayReadyLicenseAcquisitionServiceRequest3& operator=(IPlayReadyLicenseAcquisitionServiceRequest3 const&) & noexcept = default;
        IPlayReadyLicenseAcquisitionServiceRequest3& operator=(IPlayReadyLicenseAcquisitionServiceRequest3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyLicenseIterableFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyLicenseIterableFactory>
    {
        IPlayReadyLicenseIterableFactory(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyLicenseIterableFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyLicenseIterableFactory(IPlayReadyLicenseIterableFactory const&) noexcept = default;
        IPlayReadyLicenseIterableFactory(IPlayReadyLicenseIterableFactory&&) noexcept = default;
        IPlayReadyLicenseIterableFactory& operator=(IPlayReadyLicenseIterableFactory const&) & noexcept = default;
        IPlayReadyLicenseIterableFactory& operator=(IPlayReadyLicenseIterableFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyLicenseManagement :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyLicenseManagement>
    {
        IPlayReadyLicenseManagement(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyLicenseManagement(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyLicenseManagement(IPlayReadyLicenseManagement const&) noexcept = default;
        IPlayReadyLicenseManagement(IPlayReadyLicenseManagement&&) noexcept = default;
        IPlayReadyLicenseManagement& operator=(IPlayReadyLicenseManagement const&) & noexcept = default;
        IPlayReadyLicenseManagement& operator=(IPlayReadyLicenseManagement&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyLicenseSession :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyLicenseSession>
    {
        IPlayReadyLicenseSession(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyLicenseSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyLicenseSession(IPlayReadyLicenseSession const&) noexcept = default;
        IPlayReadyLicenseSession(IPlayReadyLicenseSession&&) noexcept = default;
        IPlayReadyLicenseSession& operator=(IPlayReadyLicenseSession const&) & noexcept = default;
        IPlayReadyLicenseSession& operator=(IPlayReadyLicenseSession&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyLicenseSession2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyLicenseSession2>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseSession2, winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseSession>
    {
        IPlayReadyLicenseSession2(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyLicenseSession2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyLicenseSession2(IPlayReadyLicenseSession2 const&) noexcept = default;
        IPlayReadyLicenseSession2(IPlayReadyLicenseSession2&&) noexcept = default;
        IPlayReadyLicenseSession2& operator=(IPlayReadyLicenseSession2 const&) & noexcept = default;
        IPlayReadyLicenseSession2& operator=(IPlayReadyLicenseSession2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyLicenseSessionFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyLicenseSessionFactory>
    {
        IPlayReadyLicenseSessionFactory(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyLicenseSessionFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyLicenseSessionFactory(IPlayReadyLicenseSessionFactory const&) noexcept = default;
        IPlayReadyLicenseSessionFactory(IPlayReadyLicenseSessionFactory&&) noexcept = default;
        IPlayReadyLicenseSessionFactory& operator=(IPlayReadyLicenseSessionFactory const&) & noexcept = default;
        IPlayReadyLicenseSessionFactory& operator=(IPlayReadyLicenseSessionFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyMeteringReportServiceRequest :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyMeteringReportServiceRequest>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyMeteringReportServiceRequest, winrt::Windows::Media::Protection::IMediaProtectionServiceRequest, winrt::Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest>
    {
        IPlayReadyMeteringReportServiceRequest(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyMeteringReportServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyMeteringReportServiceRequest(IPlayReadyMeteringReportServiceRequest const&) noexcept = default;
        IPlayReadyMeteringReportServiceRequest(IPlayReadyMeteringReportServiceRequest&&) noexcept = default;
        IPlayReadyMeteringReportServiceRequest& operator=(IPlayReadyMeteringReportServiceRequest const&) & noexcept = default;
        IPlayReadyMeteringReportServiceRequest& operator=(IPlayReadyMeteringReportServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyRevocationServiceRequest :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyRevocationServiceRequest>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyRevocationServiceRequest, winrt::Windows::Media::Protection::IMediaProtectionServiceRequest, winrt::Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest>
    {
        IPlayReadyRevocationServiceRequest(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyRevocationServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyRevocationServiceRequest(IPlayReadyRevocationServiceRequest const&) noexcept = default;
        IPlayReadyRevocationServiceRequest(IPlayReadyRevocationServiceRequest&&) noexcept = default;
        IPlayReadyRevocationServiceRequest& operator=(IPlayReadyRevocationServiceRequest const&) & noexcept = default;
        IPlayReadyRevocationServiceRequest& operator=(IPlayReadyRevocationServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadySecureStopIterableFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadySecureStopIterableFactory>
    {
        IPlayReadySecureStopIterableFactory(std::nullptr_t = nullptr) noexcept {}
        IPlayReadySecureStopIterableFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadySecureStopIterableFactory(IPlayReadySecureStopIterableFactory const&) noexcept = default;
        IPlayReadySecureStopIterableFactory(IPlayReadySecureStopIterableFactory&&) noexcept = default;
        IPlayReadySecureStopIterableFactory& operator=(IPlayReadySecureStopIterableFactory const&) & noexcept = default;
        IPlayReadySecureStopIterableFactory& operator=(IPlayReadySecureStopIterableFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadySecureStopServiceRequest :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadySecureStopServiceRequest>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadySecureStopServiceRequest, winrt::Windows::Media::Protection::IMediaProtectionServiceRequest, winrt::Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest>
    {
        IPlayReadySecureStopServiceRequest(std::nullptr_t = nullptr) noexcept {}
        IPlayReadySecureStopServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadySecureStopServiceRequest(IPlayReadySecureStopServiceRequest const&) noexcept = default;
        IPlayReadySecureStopServiceRequest(IPlayReadySecureStopServiceRequest&&) noexcept = default;
        IPlayReadySecureStopServiceRequest& operator=(IPlayReadySecureStopServiceRequest const&) & noexcept = default;
        IPlayReadySecureStopServiceRequest& operator=(IPlayReadySecureStopServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadySecureStopServiceRequestFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadySecureStopServiceRequestFactory>
    {
        IPlayReadySecureStopServiceRequestFactory(std::nullptr_t = nullptr) noexcept {}
        IPlayReadySecureStopServiceRequestFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadySecureStopServiceRequestFactory(IPlayReadySecureStopServiceRequestFactory const&) noexcept = default;
        IPlayReadySecureStopServiceRequestFactory(IPlayReadySecureStopServiceRequestFactory&&) noexcept = default;
        IPlayReadySecureStopServiceRequestFactory& operator=(IPlayReadySecureStopServiceRequestFactory const&) & noexcept = default;
        IPlayReadySecureStopServiceRequestFactory& operator=(IPlayReadySecureStopServiceRequestFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyServiceRequest :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyServiceRequest>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest, winrt::Windows::Media::Protection::IMediaProtectionServiceRequest>
    {
        IPlayReadyServiceRequest(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyServiceRequest(IPlayReadyServiceRequest const&) noexcept = default;
        IPlayReadyServiceRequest(IPlayReadyServiceRequest&&) noexcept = default;
        IPlayReadyServiceRequest& operator=(IPlayReadyServiceRequest const&) & noexcept = default;
        IPlayReadyServiceRequest& operator=(IPlayReadyServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadySoapMessage :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadySoapMessage>
    {
        IPlayReadySoapMessage(std::nullptr_t = nullptr) noexcept {}
        IPlayReadySoapMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadySoapMessage(IPlayReadySoapMessage const&) noexcept = default;
        IPlayReadySoapMessage(IPlayReadySoapMessage&&) noexcept = default;
        IPlayReadySoapMessage& operator=(IPlayReadySoapMessage const&) & noexcept = default;
        IPlayReadySoapMessage& operator=(IPlayReadySoapMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyStatics>
    {
        IPlayReadyStatics(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyStatics(IPlayReadyStatics const&) noexcept = default;
        IPlayReadyStatics(IPlayReadyStatics&&) noexcept = default;
        IPlayReadyStatics& operator=(IPlayReadyStatics const&) & noexcept = default;
        IPlayReadyStatics& operator=(IPlayReadyStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyStatics2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyStatics2>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyStatics2, winrt::Windows::Media::Protection::PlayReady::IPlayReadyStatics>
    {
        IPlayReadyStatics2(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyStatics2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyStatics2(IPlayReadyStatics2 const&) noexcept = default;
        IPlayReadyStatics2(IPlayReadyStatics2&&) noexcept = default;
        IPlayReadyStatics2& operator=(IPlayReadyStatics2 const&) & noexcept = default;
        IPlayReadyStatics2& operator=(IPlayReadyStatics2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyStatics3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyStatics3>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyStatics3, winrt::Windows::Media::Protection::PlayReady::IPlayReadyStatics, winrt::Windows::Media::Protection::PlayReady::IPlayReadyStatics2>
    {
        IPlayReadyStatics3(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyStatics3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyStatics3(IPlayReadyStatics3 const&) noexcept = default;
        IPlayReadyStatics3(IPlayReadyStatics3&&) noexcept = default;
        IPlayReadyStatics3& operator=(IPlayReadyStatics3 const&) & noexcept = default;
        IPlayReadyStatics3& operator=(IPlayReadyStatics3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyStatics4 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyStatics4>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyStatics4, winrt::Windows::Media::Protection::PlayReady::IPlayReadyStatics, winrt::Windows::Media::Protection::PlayReady::IPlayReadyStatics2, winrt::Windows::Media::Protection::PlayReady::IPlayReadyStatics3>
    {
        IPlayReadyStatics4(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyStatics4(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyStatics4(IPlayReadyStatics4 const&) noexcept = default;
        IPlayReadyStatics4(IPlayReadyStatics4&&) noexcept = default;
        IPlayReadyStatics4& operator=(IPlayReadyStatics4 const&) & noexcept = default;
        IPlayReadyStatics4& operator=(IPlayReadyStatics4&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPlayReadyStatics5 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPlayReadyStatics5>,
        impl::require<winrt::Windows::Media::Protection::PlayReady::IPlayReadyStatics5, winrt::Windows::Media::Protection::PlayReady::IPlayReadyStatics, winrt::Windows::Media::Protection::PlayReady::IPlayReadyStatics2, winrt::Windows::Media::Protection::PlayReady::IPlayReadyStatics3, winrt::Windows::Media::Protection::PlayReady::IPlayReadyStatics4>
    {
        IPlayReadyStatics5(std::nullptr_t = nullptr) noexcept {}
        IPlayReadyStatics5(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPlayReadyStatics5(IPlayReadyStatics5 const&) noexcept = default;
        IPlayReadyStatics5(IPlayReadyStatics5&&) noexcept = default;
        IPlayReadyStatics5& operator=(IPlayReadyStatics5 const&) & noexcept = default;
        IPlayReadyStatics5& operator=(IPlayReadyStatics5&&) & noexcept = default;
    };
}
#endif
