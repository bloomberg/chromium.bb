// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Gaming_Input_ForceFeedback_1_H
#define WINRT_Windows_Gaming_Input_ForceFeedback_1_H
#include "winrt/impl/Windows.Gaming.Input.ForceFeedback.0.h"
WINRT_EXPORT namespace winrt::Windows::Gaming::Input::ForceFeedback
{
    struct __declspec(empty_bases) IConditionForceEffect :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IConditionForceEffect>,
        impl::require<winrt::Windows::Gaming::Input::ForceFeedback::IConditionForceEffect, winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect>
    {
        IConditionForceEffect(std::nullptr_t = nullptr) noexcept {}
        IConditionForceEffect(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IConditionForceEffect(IConditionForceEffect const&) noexcept = default;
        IConditionForceEffect(IConditionForceEffect&&) noexcept = default;
        IConditionForceEffect& operator=(IConditionForceEffect const&) & noexcept = default;
        IConditionForceEffect& operator=(IConditionForceEffect&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IConditionForceEffectFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IConditionForceEffectFactory>
    {
        IConditionForceEffectFactory(std::nullptr_t = nullptr) noexcept {}
        IConditionForceEffectFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IConditionForceEffectFactory(IConditionForceEffectFactory const&) noexcept = default;
        IConditionForceEffectFactory(IConditionForceEffectFactory&&) noexcept = default;
        IConditionForceEffectFactory& operator=(IConditionForceEffectFactory const&) & noexcept = default;
        IConditionForceEffectFactory& operator=(IConditionForceEffectFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IConstantForceEffect :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IConstantForceEffect>,
        impl::require<winrt::Windows::Gaming::Input::ForceFeedback::IConstantForceEffect, winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect>
    {
        IConstantForceEffect(std::nullptr_t = nullptr) noexcept {}
        IConstantForceEffect(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IConstantForceEffect(IConstantForceEffect const&) noexcept = default;
        IConstantForceEffect(IConstantForceEffect&&) noexcept = default;
        IConstantForceEffect& operator=(IConstantForceEffect const&) & noexcept = default;
        IConstantForceEffect& operator=(IConstantForceEffect&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IForceFeedbackEffect :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IForceFeedbackEffect>
    {
        IForceFeedbackEffect(std::nullptr_t = nullptr) noexcept {}
        IForceFeedbackEffect(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IForceFeedbackEffect(IForceFeedbackEffect const&) noexcept = default;
        IForceFeedbackEffect(IForceFeedbackEffect&&) noexcept = default;
        IForceFeedbackEffect& operator=(IForceFeedbackEffect const&) & noexcept = default;
        IForceFeedbackEffect& operator=(IForceFeedbackEffect&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IForceFeedbackMotor :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IForceFeedbackMotor>
    {
        IForceFeedbackMotor(std::nullptr_t = nullptr) noexcept {}
        IForceFeedbackMotor(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IForceFeedbackMotor(IForceFeedbackMotor const&) noexcept = default;
        IForceFeedbackMotor(IForceFeedbackMotor&&) noexcept = default;
        IForceFeedbackMotor& operator=(IForceFeedbackMotor const&) & noexcept = default;
        IForceFeedbackMotor& operator=(IForceFeedbackMotor&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPeriodicForceEffect :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPeriodicForceEffect>,
        impl::require<winrt::Windows::Gaming::Input::ForceFeedback::IPeriodicForceEffect, winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect>
    {
        IPeriodicForceEffect(std::nullptr_t = nullptr) noexcept {}
        IPeriodicForceEffect(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPeriodicForceEffect(IPeriodicForceEffect const&) noexcept = default;
        IPeriodicForceEffect(IPeriodicForceEffect&&) noexcept = default;
        IPeriodicForceEffect& operator=(IPeriodicForceEffect const&) & noexcept = default;
        IPeriodicForceEffect& operator=(IPeriodicForceEffect&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPeriodicForceEffectFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPeriodicForceEffectFactory>
    {
        IPeriodicForceEffectFactory(std::nullptr_t = nullptr) noexcept {}
        IPeriodicForceEffectFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPeriodicForceEffectFactory(IPeriodicForceEffectFactory const&) noexcept = default;
        IPeriodicForceEffectFactory(IPeriodicForceEffectFactory&&) noexcept = default;
        IPeriodicForceEffectFactory& operator=(IPeriodicForceEffectFactory const&) & noexcept = default;
        IPeriodicForceEffectFactory& operator=(IPeriodicForceEffectFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IRampForceEffect :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRampForceEffect>,
        impl::require<winrt::Windows::Gaming::Input::ForceFeedback::IRampForceEffect, winrt::Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect>
    {
        IRampForceEffect(std::nullptr_t = nullptr) noexcept {}
        IRampForceEffect(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IRampForceEffect(IRampForceEffect const&) noexcept = default;
        IRampForceEffect(IRampForceEffect&&) noexcept = default;
        IRampForceEffect& operator=(IRampForceEffect const&) & noexcept = default;
        IRampForceEffect& operator=(IRampForceEffect&&) & noexcept = default;
    };
}
#endif
