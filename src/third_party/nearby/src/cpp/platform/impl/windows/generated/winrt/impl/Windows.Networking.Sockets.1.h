// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Networking_Sockets_1_H
#define WINRT_Windows_Networking_Sockets_1_H
#include "winrt/impl/Windows.Foundation.0.h"
#include "winrt/impl/Windows.Networking.Sockets.0.h"
WINRT_EXPORT namespace winrt::Windows::Networking::Sockets
{
    struct __declspec(empty_bases) IControlChannelTrigger :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IControlChannelTrigger>,
        impl::require<winrt::Windows::Networking::Sockets::IControlChannelTrigger, winrt::Windows::Foundation::IClosable>
    {
        IControlChannelTrigger(std::nullptr_t = nullptr) noexcept {}
        IControlChannelTrigger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IControlChannelTrigger(IControlChannelTrigger const&) noexcept = default;
        IControlChannelTrigger(IControlChannelTrigger&&) noexcept = default;
        IControlChannelTrigger& operator=(IControlChannelTrigger const&) & noexcept = default;
        IControlChannelTrigger& operator=(IControlChannelTrigger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IControlChannelTrigger2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IControlChannelTrigger2>
    {
        IControlChannelTrigger2(std::nullptr_t = nullptr) noexcept {}
        IControlChannelTrigger2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IControlChannelTrigger2(IControlChannelTrigger2 const&) noexcept = default;
        IControlChannelTrigger2(IControlChannelTrigger2&&) noexcept = default;
        IControlChannelTrigger2& operator=(IControlChannelTrigger2 const&) & noexcept = default;
        IControlChannelTrigger2& operator=(IControlChannelTrigger2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IControlChannelTriggerEventDetails :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IControlChannelTriggerEventDetails>
    {
        IControlChannelTriggerEventDetails(std::nullptr_t = nullptr) noexcept {}
        IControlChannelTriggerEventDetails(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IControlChannelTriggerEventDetails(IControlChannelTriggerEventDetails const&) noexcept = default;
        IControlChannelTriggerEventDetails(IControlChannelTriggerEventDetails&&) noexcept = default;
        IControlChannelTriggerEventDetails& operator=(IControlChannelTriggerEventDetails const&) & noexcept = default;
        IControlChannelTriggerEventDetails& operator=(IControlChannelTriggerEventDetails&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IControlChannelTriggerFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IControlChannelTriggerFactory>
    {
        IControlChannelTriggerFactory(std::nullptr_t = nullptr) noexcept {}
        IControlChannelTriggerFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IControlChannelTriggerFactory(IControlChannelTriggerFactory const&) noexcept = default;
        IControlChannelTriggerFactory(IControlChannelTriggerFactory&&) noexcept = default;
        IControlChannelTriggerFactory& operator=(IControlChannelTriggerFactory const&) & noexcept = default;
        IControlChannelTriggerFactory& operator=(IControlChannelTriggerFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IControlChannelTriggerResetEventDetails :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IControlChannelTriggerResetEventDetails>
    {
        IControlChannelTriggerResetEventDetails(std::nullptr_t = nullptr) noexcept {}
        IControlChannelTriggerResetEventDetails(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IControlChannelTriggerResetEventDetails(IControlChannelTriggerResetEventDetails const&) noexcept = default;
        IControlChannelTriggerResetEventDetails(IControlChannelTriggerResetEventDetails&&) noexcept = default;
        IControlChannelTriggerResetEventDetails& operator=(IControlChannelTriggerResetEventDetails const&) & noexcept = default;
        IControlChannelTriggerResetEventDetails& operator=(IControlChannelTriggerResetEventDetails&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDatagramSocket :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDatagramSocket>,
        impl::require<winrt::Windows::Networking::Sockets::IDatagramSocket, winrt::Windows::Foundation::IClosable>
    {
        IDatagramSocket(std::nullptr_t = nullptr) noexcept {}
        IDatagramSocket(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDatagramSocket(IDatagramSocket const&) noexcept = default;
        IDatagramSocket(IDatagramSocket&&) noexcept = default;
        IDatagramSocket& operator=(IDatagramSocket const&) & noexcept = default;
        IDatagramSocket& operator=(IDatagramSocket&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDatagramSocket2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDatagramSocket2>,
        impl::require<winrt::Windows::Networking::Sockets::IDatagramSocket2, winrt::Windows::Foundation::IClosable>
    {
        IDatagramSocket2(std::nullptr_t = nullptr) noexcept {}
        IDatagramSocket2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDatagramSocket2(IDatagramSocket2 const&) noexcept = default;
        IDatagramSocket2(IDatagramSocket2&&) noexcept = default;
        IDatagramSocket2& operator=(IDatagramSocket2 const&) & noexcept = default;
        IDatagramSocket2& operator=(IDatagramSocket2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDatagramSocket3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDatagramSocket3>
    {
        IDatagramSocket3(std::nullptr_t = nullptr) noexcept {}
        IDatagramSocket3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDatagramSocket3(IDatagramSocket3 const&) noexcept = default;
        IDatagramSocket3(IDatagramSocket3&&) noexcept = default;
        IDatagramSocket3& operator=(IDatagramSocket3 const&) & noexcept = default;
        IDatagramSocket3& operator=(IDatagramSocket3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDatagramSocketControl :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDatagramSocketControl>
    {
        IDatagramSocketControl(std::nullptr_t = nullptr) noexcept {}
        IDatagramSocketControl(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDatagramSocketControl(IDatagramSocketControl const&) noexcept = default;
        IDatagramSocketControl(IDatagramSocketControl&&) noexcept = default;
        IDatagramSocketControl& operator=(IDatagramSocketControl const&) & noexcept = default;
        IDatagramSocketControl& operator=(IDatagramSocketControl&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDatagramSocketControl2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDatagramSocketControl2>
    {
        IDatagramSocketControl2(std::nullptr_t = nullptr) noexcept {}
        IDatagramSocketControl2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDatagramSocketControl2(IDatagramSocketControl2 const&) noexcept = default;
        IDatagramSocketControl2(IDatagramSocketControl2&&) noexcept = default;
        IDatagramSocketControl2& operator=(IDatagramSocketControl2 const&) & noexcept = default;
        IDatagramSocketControl2& operator=(IDatagramSocketControl2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDatagramSocketControl3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDatagramSocketControl3>
    {
        IDatagramSocketControl3(std::nullptr_t = nullptr) noexcept {}
        IDatagramSocketControl3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDatagramSocketControl3(IDatagramSocketControl3 const&) noexcept = default;
        IDatagramSocketControl3(IDatagramSocketControl3&&) noexcept = default;
        IDatagramSocketControl3& operator=(IDatagramSocketControl3 const&) & noexcept = default;
        IDatagramSocketControl3& operator=(IDatagramSocketControl3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDatagramSocketInformation :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDatagramSocketInformation>
    {
        IDatagramSocketInformation(std::nullptr_t = nullptr) noexcept {}
        IDatagramSocketInformation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDatagramSocketInformation(IDatagramSocketInformation const&) noexcept = default;
        IDatagramSocketInformation(IDatagramSocketInformation&&) noexcept = default;
        IDatagramSocketInformation& operator=(IDatagramSocketInformation const&) & noexcept = default;
        IDatagramSocketInformation& operator=(IDatagramSocketInformation&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDatagramSocketMessageReceivedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDatagramSocketMessageReceivedEventArgs>
    {
        IDatagramSocketMessageReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IDatagramSocketMessageReceivedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDatagramSocketMessageReceivedEventArgs(IDatagramSocketMessageReceivedEventArgs const&) noexcept = default;
        IDatagramSocketMessageReceivedEventArgs(IDatagramSocketMessageReceivedEventArgs&&) noexcept = default;
        IDatagramSocketMessageReceivedEventArgs& operator=(IDatagramSocketMessageReceivedEventArgs const&) & noexcept = default;
        IDatagramSocketMessageReceivedEventArgs& operator=(IDatagramSocketMessageReceivedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDatagramSocketStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDatagramSocketStatics>
    {
        IDatagramSocketStatics(std::nullptr_t = nullptr) noexcept {}
        IDatagramSocketStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDatagramSocketStatics(IDatagramSocketStatics const&) noexcept = default;
        IDatagramSocketStatics(IDatagramSocketStatics&&) noexcept = default;
        IDatagramSocketStatics& operator=(IDatagramSocketStatics const&) & noexcept = default;
        IDatagramSocketStatics& operator=(IDatagramSocketStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMessageWebSocket :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMessageWebSocket>,
        impl::require<winrt::Windows::Networking::Sockets::IMessageWebSocket, winrt::Windows::Foundation::IClosable, winrt::Windows::Networking::Sockets::IWebSocket>
    {
        IMessageWebSocket(std::nullptr_t = nullptr) noexcept {}
        IMessageWebSocket(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMessageWebSocket(IMessageWebSocket const&) noexcept = default;
        IMessageWebSocket(IMessageWebSocket&&) noexcept = default;
        IMessageWebSocket& operator=(IMessageWebSocket const&) & noexcept = default;
        IMessageWebSocket& operator=(IMessageWebSocket&&) & noexcept = default;
        using impl::consume_t<IMessageWebSocket, winrt::Windows::Foundation::IClosable>::Close;
        using impl::consume_t<IMessageWebSocket, winrt::Windows::Networking::Sockets::IWebSocket>::Close;
    };
    struct __declspec(empty_bases) IMessageWebSocket2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMessageWebSocket2>,
        impl::require<winrt::Windows::Networking::Sockets::IMessageWebSocket2, winrt::Windows::Foundation::IClosable, winrt::Windows::Networking::Sockets::IWebSocket, winrt::Windows::Networking::Sockets::IMessageWebSocket>
    {
        IMessageWebSocket2(std::nullptr_t = nullptr) noexcept {}
        IMessageWebSocket2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMessageWebSocket2(IMessageWebSocket2 const&) noexcept = default;
        IMessageWebSocket2(IMessageWebSocket2&&) noexcept = default;
        IMessageWebSocket2& operator=(IMessageWebSocket2 const&) & noexcept = default;
        IMessageWebSocket2& operator=(IMessageWebSocket2&&) & noexcept = default;
        using impl::consume_t<IMessageWebSocket2, winrt::Windows::Foundation::IClosable>::Close;
        using impl::consume_t<IMessageWebSocket2, winrt::Windows::Networking::Sockets::IWebSocket>::Close;
    };
    struct __declspec(empty_bases) IMessageWebSocket3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMessageWebSocket3>
    {
        IMessageWebSocket3(std::nullptr_t = nullptr) noexcept {}
        IMessageWebSocket3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMessageWebSocket3(IMessageWebSocket3 const&) noexcept = default;
        IMessageWebSocket3(IMessageWebSocket3&&) noexcept = default;
        IMessageWebSocket3& operator=(IMessageWebSocket3 const&) & noexcept = default;
        IMessageWebSocket3& operator=(IMessageWebSocket3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMessageWebSocketControl :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMessageWebSocketControl>,
        impl::require<winrt::Windows::Networking::Sockets::IMessageWebSocketControl, winrt::Windows::Networking::Sockets::IWebSocketControl>
    {
        IMessageWebSocketControl(std::nullptr_t = nullptr) noexcept {}
        IMessageWebSocketControl(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMessageWebSocketControl(IMessageWebSocketControl const&) noexcept = default;
        IMessageWebSocketControl(IMessageWebSocketControl&&) noexcept = default;
        IMessageWebSocketControl& operator=(IMessageWebSocketControl const&) & noexcept = default;
        IMessageWebSocketControl& operator=(IMessageWebSocketControl&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMessageWebSocketControl2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMessageWebSocketControl2>
    {
        IMessageWebSocketControl2(std::nullptr_t = nullptr) noexcept {}
        IMessageWebSocketControl2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMessageWebSocketControl2(IMessageWebSocketControl2 const&) noexcept = default;
        IMessageWebSocketControl2(IMessageWebSocketControl2&&) noexcept = default;
        IMessageWebSocketControl2& operator=(IMessageWebSocketControl2 const&) & noexcept = default;
        IMessageWebSocketControl2& operator=(IMessageWebSocketControl2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMessageWebSocketMessageReceivedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMessageWebSocketMessageReceivedEventArgs>
    {
        IMessageWebSocketMessageReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IMessageWebSocketMessageReceivedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMessageWebSocketMessageReceivedEventArgs(IMessageWebSocketMessageReceivedEventArgs const&) noexcept = default;
        IMessageWebSocketMessageReceivedEventArgs(IMessageWebSocketMessageReceivedEventArgs&&) noexcept = default;
        IMessageWebSocketMessageReceivedEventArgs& operator=(IMessageWebSocketMessageReceivedEventArgs const&) & noexcept = default;
        IMessageWebSocketMessageReceivedEventArgs& operator=(IMessageWebSocketMessageReceivedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMessageWebSocketMessageReceivedEventArgs2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMessageWebSocketMessageReceivedEventArgs2>,
        impl::require<winrt::Windows::Networking::Sockets::IMessageWebSocketMessageReceivedEventArgs2, winrt::Windows::Networking::Sockets::IMessageWebSocketMessageReceivedEventArgs>
    {
        IMessageWebSocketMessageReceivedEventArgs2(std::nullptr_t = nullptr) noexcept {}
        IMessageWebSocketMessageReceivedEventArgs2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMessageWebSocketMessageReceivedEventArgs2(IMessageWebSocketMessageReceivedEventArgs2 const&) noexcept = default;
        IMessageWebSocketMessageReceivedEventArgs2(IMessageWebSocketMessageReceivedEventArgs2&&) noexcept = default;
        IMessageWebSocketMessageReceivedEventArgs2& operator=(IMessageWebSocketMessageReceivedEventArgs2 const&) & noexcept = default;
        IMessageWebSocketMessageReceivedEventArgs2& operator=(IMessageWebSocketMessageReceivedEventArgs2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IServerMessageWebSocket :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IServerMessageWebSocket>,
        impl::require<winrt::Windows::Networking::Sockets::IServerMessageWebSocket, winrt::Windows::Foundation::IClosable>
    {
        IServerMessageWebSocket(std::nullptr_t = nullptr) noexcept {}
        IServerMessageWebSocket(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IServerMessageWebSocket(IServerMessageWebSocket const&) noexcept = default;
        IServerMessageWebSocket(IServerMessageWebSocket&&) noexcept = default;
        IServerMessageWebSocket& operator=(IServerMessageWebSocket const&) & noexcept = default;
        IServerMessageWebSocket& operator=(IServerMessageWebSocket&&) & noexcept = default;
        using impl::consume_t<IServerMessageWebSocket, IServerMessageWebSocket>::Close;
        using impl::consume_t<IServerMessageWebSocket, winrt::Windows::Foundation::IClosable>::Close;
    };
    struct __declspec(empty_bases) IServerMessageWebSocketControl :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IServerMessageWebSocketControl>
    {
        IServerMessageWebSocketControl(std::nullptr_t = nullptr) noexcept {}
        IServerMessageWebSocketControl(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IServerMessageWebSocketControl(IServerMessageWebSocketControl const&) noexcept = default;
        IServerMessageWebSocketControl(IServerMessageWebSocketControl&&) noexcept = default;
        IServerMessageWebSocketControl& operator=(IServerMessageWebSocketControl const&) & noexcept = default;
        IServerMessageWebSocketControl& operator=(IServerMessageWebSocketControl&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IServerMessageWebSocketInformation :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IServerMessageWebSocketInformation>
    {
        IServerMessageWebSocketInformation(std::nullptr_t = nullptr) noexcept {}
        IServerMessageWebSocketInformation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IServerMessageWebSocketInformation(IServerMessageWebSocketInformation const&) noexcept = default;
        IServerMessageWebSocketInformation(IServerMessageWebSocketInformation&&) noexcept = default;
        IServerMessageWebSocketInformation& operator=(IServerMessageWebSocketInformation const&) & noexcept = default;
        IServerMessageWebSocketInformation& operator=(IServerMessageWebSocketInformation&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IServerStreamWebSocket :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IServerStreamWebSocket>,
        impl::require<winrt::Windows::Networking::Sockets::IServerStreamWebSocket, winrt::Windows::Foundation::IClosable>
    {
        IServerStreamWebSocket(std::nullptr_t = nullptr) noexcept {}
        IServerStreamWebSocket(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IServerStreamWebSocket(IServerStreamWebSocket const&) noexcept = default;
        IServerStreamWebSocket(IServerStreamWebSocket&&) noexcept = default;
        IServerStreamWebSocket& operator=(IServerStreamWebSocket const&) & noexcept = default;
        IServerStreamWebSocket& operator=(IServerStreamWebSocket&&) & noexcept = default;
        using impl::consume_t<IServerStreamWebSocket, IServerStreamWebSocket>::Close;
        using impl::consume_t<IServerStreamWebSocket, winrt::Windows::Foundation::IClosable>::Close;
    };
    struct __declspec(empty_bases) IServerStreamWebSocketInformation :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IServerStreamWebSocketInformation>
    {
        IServerStreamWebSocketInformation(std::nullptr_t = nullptr) noexcept {}
        IServerStreamWebSocketInformation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IServerStreamWebSocketInformation(IServerStreamWebSocketInformation const&) noexcept = default;
        IServerStreamWebSocketInformation(IServerStreamWebSocketInformation&&) noexcept = default;
        IServerStreamWebSocketInformation& operator=(IServerStreamWebSocketInformation const&) & noexcept = default;
        IServerStreamWebSocketInformation& operator=(IServerStreamWebSocketInformation&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISocketActivityContext :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISocketActivityContext>
    {
        ISocketActivityContext(std::nullptr_t = nullptr) noexcept {}
        ISocketActivityContext(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISocketActivityContext(ISocketActivityContext const&) noexcept = default;
        ISocketActivityContext(ISocketActivityContext&&) noexcept = default;
        ISocketActivityContext& operator=(ISocketActivityContext const&) & noexcept = default;
        ISocketActivityContext& operator=(ISocketActivityContext&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISocketActivityContextFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISocketActivityContextFactory>
    {
        ISocketActivityContextFactory(std::nullptr_t = nullptr) noexcept {}
        ISocketActivityContextFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISocketActivityContextFactory(ISocketActivityContextFactory const&) noexcept = default;
        ISocketActivityContextFactory(ISocketActivityContextFactory&&) noexcept = default;
        ISocketActivityContextFactory& operator=(ISocketActivityContextFactory const&) & noexcept = default;
        ISocketActivityContextFactory& operator=(ISocketActivityContextFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISocketActivityInformation :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISocketActivityInformation>
    {
        ISocketActivityInformation(std::nullptr_t = nullptr) noexcept {}
        ISocketActivityInformation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISocketActivityInformation(ISocketActivityInformation const&) noexcept = default;
        ISocketActivityInformation(ISocketActivityInformation&&) noexcept = default;
        ISocketActivityInformation& operator=(ISocketActivityInformation const&) & noexcept = default;
        ISocketActivityInformation& operator=(ISocketActivityInformation&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISocketActivityInformationStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISocketActivityInformationStatics>
    {
        ISocketActivityInformationStatics(std::nullptr_t = nullptr) noexcept {}
        ISocketActivityInformationStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISocketActivityInformationStatics(ISocketActivityInformationStatics const&) noexcept = default;
        ISocketActivityInformationStatics(ISocketActivityInformationStatics&&) noexcept = default;
        ISocketActivityInformationStatics& operator=(ISocketActivityInformationStatics const&) & noexcept = default;
        ISocketActivityInformationStatics& operator=(ISocketActivityInformationStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISocketActivityTriggerDetails :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISocketActivityTriggerDetails>
    {
        ISocketActivityTriggerDetails(std::nullptr_t = nullptr) noexcept {}
        ISocketActivityTriggerDetails(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISocketActivityTriggerDetails(ISocketActivityTriggerDetails const&) noexcept = default;
        ISocketActivityTriggerDetails(ISocketActivityTriggerDetails&&) noexcept = default;
        ISocketActivityTriggerDetails& operator=(ISocketActivityTriggerDetails const&) & noexcept = default;
        ISocketActivityTriggerDetails& operator=(ISocketActivityTriggerDetails&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISocketErrorStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISocketErrorStatics>
    {
        ISocketErrorStatics(std::nullptr_t = nullptr) noexcept {}
        ISocketErrorStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISocketErrorStatics(ISocketErrorStatics const&) noexcept = default;
        ISocketErrorStatics(ISocketErrorStatics&&) noexcept = default;
        ISocketErrorStatics& operator=(ISocketErrorStatics const&) & noexcept = default;
        ISocketErrorStatics& operator=(ISocketErrorStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocket :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocket>,
        impl::require<winrt::Windows::Networking::Sockets::IStreamSocket, winrt::Windows::Foundation::IClosable>
    {
        IStreamSocket(std::nullptr_t = nullptr) noexcept {}
        IStreamSocket(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocket(IStreamSocket const&) noexcept = default;
        IStreamSocket(IStreamSocket&&) noexcept = default;
        IStreamSocket& operator=(IStreamSocket const&) & noexcept = default;
        IStreamSocket& operator=(IStreamSocket&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocket2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocket2>,
        impl::require<winrt::Windows::Networking::Sockets::IStreamSocket2, winrt::Windows::Foundation::IClosable>
    {
        IStreamSocket2(std::nullptr_t = nullptr) noexcept {}
        IStreamSocket2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocket2(IStreamSocket2 const&) noexcept = default;
        IStreamSocket2(IStreamSocket2&&) noexcept = default;
        IStreamSocket2& operator=(IStreamSocket2 const&) & noexcept = default;
        IStreamSocket2& operator=(IStreamSocket2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocket3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocket3>
    {
        IStreamSocket3(std::nullptr_t = nullptr) noexcept {}
        IStreamSocket3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocket3(IStreamSocket3 const&) noexcept = default;
        IStreamSocket3(IStreamSocket3&&) noexcept = default;
        IStreamSocket3& operator=(IStreamSocket3 const&) & noexcept = default;
        IStreamSocket3& operator=(IStreamSocket3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocketControl :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocketControl>
    {
        IStreamSocketControl(std::nullptr_t = nullptr) noexcept {}
        IStreamSocketControl(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocketControl(IStreamSocketControl const&) noexcept = default;
        IStreamSocketControl(IStreamSocketControl&&) noexcept = default;
        IStreamSocketControl& operator=(IStreamSocketControl const&) & noexcept = default;
        IStreamSocketControl& operator=(IStreamSocketControl&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocketControl2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocketControl2>
    {
        IStreamSocketControl2(std::nullptr_t = nullptr) noexcept {}
        IStreamSocketControl2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocketControl2(IStreamSocketControl2 const&) noexcept = default;
        IStreamSocketControl2(IStreamSocketControl2&&) noexcept = default;
        IStreamSocketControl2& operator=(IStreamSocketControl2 const&) & noexcept = default;
        IStreamSocketControl2& operator=(IStreamSocketControl2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocketControl3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocketControl3>
    {
        IStreamSocketControl3(std::nullptr_t = nullptr) noexcept {}
        IStreamSocketControl3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocketControl3(IStreamSocketControl3 const&) noexcept = default;
        IStreamSocketControl3(IStreamSocketControl3&&) noexcept = default;
        IStreamSocketControl3& operator=(IStreamSocketControl3 const&) & noexcept = default;
        IStreamSocketControl3& operator=(IStreamSocketControl3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocketControl4 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocketControl4>
    {
        IStreamSocketControl4(std::nullptr_t = nullptr) noexcept {}
        IStreamSocketControl4(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocketControl4(IStreamSocketControl4 const&) noexcept = default;
        IStreamSocketControl4(IStreamSocketControl4&&) noexcept = default;
        IStreamSocketControl4& operator=(IStreamSocketControl4 const&) & noexcept = default;
        IStreamSocketControl4& operator=(IStreamSocketControl4&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocketInformation :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocketInformation>
    {
        IStreamSocketInformation(std::nullptr_t = nullptr) noexcept {}
        IStreamSocketInformation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocketInformation(IStreamSocketInformation const&) noexcept = default;
        IStreamSocketInformation(IStreamSocketInformation&&) noexcept = default;
        IStreamSocketInformation& operator=(IStreamSocketInformation const&) & noexcept = default;
        IStreamSocketInformation& operator=(IStreamSocketInformation&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocketInformation2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocketInformation2>
    {
        IStreamSocketInformation2(std::nullptr_t = nullptr) noexcept {}
        IStreamSocketInformation2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocketInformation2(IStreamSocketInformation2 const&) noexcept = default;
        IStreamSocketInformation2(IStreamSocketInformation2&&) noexcept = default;
        IStreamSocketInformation2& operator=(IStreamSocketInformation2 const&) & noexcept = default;
        IStreamSocketInformation2& operator=(IStreamSocketInformation2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocketListener :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocketListener>,
        impl::require<winrt::Windows::Networking::Sockets::IStreamSocketListener, winrt::Windows::Foundation::IClosable>
    {
        IStreamSocketListener(std::nullptr_t = nullptr) noexcept {}
        IStreamSocketListener(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocketListener(IStreamSocketListener const&) noexcept = default;
        IStreamSocketListener(IStreamSocketListener&&) noexcept = default;
        IStreamSocketListener& operator=(IStreamSocketListener const&) & noexcept = default;
        IStreamSocketListener& operator=(IStreamSocketListener&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocketListener2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocketListener2>,
        impl::require<winrt::Windows::Networking::Sockets::IStreamSocketListener2, winrt::Windows::Foundation::IClosable>
    {
        IStreamSocketListener2(std::nullptr_t = nullptr) noexcept {}
        IStreamSocketListener2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocketListener2(IStreamSocketListener2 const&) noexcept = default;
        IStreamSocketListener2(IStreamSocketListener2&&) noexcept = default;
        IStreamSocketListener2& operator=(IStreamSocketListener2 const&) & noexcept = default;
        IStreamSocketListener2& operator=(IStreamSocketListener2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocketListener3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocketListener3>
    {
        IStreamSocketListener3(std::nullptr_t = nullptr) noexcept {}
        IStreamSocketListener3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocketListener3(IStreamSocketListener3 const&) noexcept = default;
        IStreamSocketListener3(IStreamSocketListener3&&) noexcept = default;
        IStreamSocketListener3& operator=(IStreamSocketListener3 const&) & noexcept = default;
        IStreamSocketListener3& operator=(IStreamSocketListener3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocketListenerConnectionReceivedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocketListenerConnectionReceivedEventArgs>
    {
        IStreamSocketListenerConnectionReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IStreamSocketListenerConnectionReceivedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocketListenerConnectionReceivedEventArgs(IStreamSocketListenerConnectionReceivedEventArgs const&) noexcept = default;
        IStreamSocketListenerConnectionReceivedEventArgs(IStreamSocketListenerConnectionReceivedEventArgs&&) noexcept = default;
        IStreamSocketListenerConnectionReceivedEventArgs& operator=(IStreamSocketListenerConnectionReceivedEventArgs const&) & noexcept = default;
        IStreamSocketListenerConnectionReceivedEventArgs& operator=(IStreamSocketListenerConnectionReceivedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocketListenerControl :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocketListenerControl>
    {
        IStreamSocketListenerControl(std::nullptr_t = nullptr) noexcept {}
        IStreamSocketListenerControl(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocketListenerControl(IStreamSocketListenerControl const&) noexcept = default;
        IStreamSocketListenerControl(IStreamSocketListenerControl&&) noexcept = default;
        IStreamSocketListenerControl& operator=(IStreamSocketListenerControl const&) & noexcept = default;
        IStreamSocketListenerControl& operator=(IStreamSocketListenerControl&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocketListenerControl2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocketListenerControl2>
    {
        IStreamSocketListenerControl2(std::nullptr_t = nullptr) noexcept {}
        IStreamSocketListenerControl2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocketListenerControl2(IStreamSocketListenerControl2 const&) noexcept = default;
        IStreamSocketListenerControl2(IStreamSocketListenerControl2&&) noexcept = default;
        IStreamSocketListenerControl2& operator=(IStreamSocketListenerControl2 const&) & noexcept = default;
        IStreamSocketListenerControl2& operator=(IStreamSocketListenerControl2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocketListenerInformation :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocketListenerInformation>
    {
        IStreamSocketListenerInformation(std::nullptr_t = nullptr) noexcept {}
        IStreamSocketListenerInformation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocketListenerInformation(IStreamSocketListenerInformation const&) noexcept = default;
        IStreamSocketListenerInformation(IStreamSocketListenerInformation&&) noexcept = default;
        IStreamSocketListenerInformation& operator=(IStreamSocketListenerInformation const&) & noexcept = default;
        IStreamSocketListenerInformation& operator=(IStreamSocketListenerInformation&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamSocketStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamSocketStatics>
    {
        IStreamSocketStatics(std::nullptr_t = nullptr) noexcept {}
        IStreamSocketStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamSocketStatics(IStreamSocketStatics const&) noexcept = default;
        IStreamSocketStatics(IStreamSocketStatics&&) noexcept = default;
        IStreamSocketStatics& operator=(IStreamSocketStatics const&) & noexcept = default;
        IStreamSocketStatics& operator=(IStreamSocketStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamWebSocket :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamWebSocket>,
        impl::require<winrt::Windows::Networking::Sockets::IStreamWebSocket, winrt::Windows::Foundation::IClosable, winrt::Windows::Networking::Sockets::IWebSocket>
    {
        IStreamWebSocket(std::nullptr_t = nullptr) noexcept {}
        IStreamWebSocket(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamWebSocket(IStreamWebSocket const&) noexcept = default;
        IStreamWebSocket(IStreamWebSocket&&) noexcept = default;
        IStreamWebSocket& operator=(IStreamWebSocket const&) & noexcept = default;
        IStreamWebSocket& operator=(IStreamWebSocket&&) & noexcept = default;
        using impl::consume_t<IStreamWebSocket, winrt::Windows::Foundation::IClosable>::Close;
        using impl::consume_t<IStreamWebSocket, winrt::Windows::Networking::Sockets::IWebSocket>::Close;
    };
    struct __declspec(empty_bases) IStreamWebSocket2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamWebSocket2>,
        impl::require<winrt::Windows::Networking::Sockets::IStreamWebSocket2, winrt::Windows::Foundation::IClosable, winrt::Windows::Networking::Sockets::IWebSocket, winrt::Windows::Networking::Sockets::IStreamWebSocket>
    {
        IStreamWebSocket2(std::nullptr_t = nullptr) noexcept {}
        IStreamWebSocket2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamWebSocket2(IStreamWebSocket2 const&) noexcept = default;
        IStreamWebSocket2(IStreamWebSocket2&&) noexcept = default;
        IStreamWebSocket2& operator=(IStreamWebSocket2 const&) & noexcept = default;
        IStreamWebSocket2& operator=(IStreamWebSocket2&&) & noexcept = default;
        using impl::consume_t<IStreamWebSocket2, winrt::Windows::Foundation::IClosable>::Close;
        using impl::consume_t<IStreamWebSocket2, winrt::Windows::Networking::Sockets::IWebSocket>::Close;
    };
    struct __declspec(empty_bases) IStreamWebSocketControl :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamWebSocketControl>,
        impl::require<winrt::Windows::Networking::Sockets::IStreamWebSocketControl, winrt::Windows::Networking::Sockets::IWebSocketControl>
    {
        IStreamWebSocketControl(std::nullptr_t = nullptr) noexcept {}
        IStreamWebSocketControl(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamWebSocketControl(IStreamWebSocketControl const&) noexcept = default;
        IStreamWebSocketControl(IStreamWebSocketControl&&) noexcept = default;
        IStreamWebSocketControl& operator=(IStreamWebSocketControl const&) & noexcept = default;
        IStreamWebSocketControl& operator=(IStreamWebSocketControl&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStreamWebSocketControl2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStreamWebSocketControl2>
    {
        IStreamWebSocketControl2(std::nullptr_t = nullptr) noexcept {}
        IStreamWebSocketControl2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStreamWebSocketControl2(IStreamWebSocketControl2 const&) noexcept = default;
        IStreamWebSocketControl2(IStreamWebSocketControl2&&) noexcept = default;
        IStreamWebSocketControl2& operator=(IStreamWebSocketControl2 const&) & noexcept = default;
        IStreamWebSocketControl2& operator=(IStreamWebSocketControl2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebSocket :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebSocket>,
        impl::require<winrt::Windows::Networking::Sockets::IWebSocket, winrt::Windows::Foundation::IClosable>
    {
        IWebSocket(std::nullptr_t = nullptr) noexcept {}
        IWebSocket(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebSocket(IWebSocket const&) noexcept = default;
        IWebSocket(IWebSocket&&) noexcept = default;
        IWebSocket& operator=(IWebSocket const&) & noexcept = default;
        IWebSocket& operator=(IWebSocket&&) & noexcept = default;
        using impl::consume_t<IWebSocket, IWebSocket>::Close;
        using impl::consume_t<IWebSocket, winrt::Windows::Foundation::IClosable>::Close;
    };
    struct __declspec(empty_bases) IWebSocketClosedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebSocketClosedEventArgs>
    {
        IWebSocketClosedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IWebSocketClosedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebSocketClosedEventArgs(IWebSocketClosedEventArgs const&) noexcept = default;
        IWebSocketClosedEventArgs(IWebSocketClosedEventArgs&&) noexcept = default;
        IWebSocketClosedEventArgs& operator=(IWebSocketClosedEventArgs const&) & noexcept = default;
        IWebSocketClosedEventArgs& operator=(IWebSocketClosedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebSocketControl :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebSocketControl>
    {
        IWebSocketControl(std::nullptr_t = nullptr) noexcept {}
        IWebSocketControl(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebSocketControl(IWebSocketControl const&) noexcept = default;
        IWebSocketControl(IWebSocketControl&&) noexcept = default;
        IWebSocketControl& operator=(IWebSocketControl const&) & noexcept = default;
        IWebSocketControl& operator=(IWebSocketControl&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebSocketControl2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebSocketControl2>,
        impl::require<winrt::Windows::Networking::Sockets::IWebSocketControl2, winrt::Windows::Networking::Sockets::IWebSocketControl>
    {
        IWebSocketControl2(std::nullptr_t = nullptr) noexcept {}
        IWebSocketControl2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebSocketControl2(IWebSocketControl2 const&) noexcept = default;
        IWebSocketControl2(IWebSocketControl2&&) noexcept = default;
        IWebSocketControl2& operator=(IWebSocketControl2 const&) & noexcept = default;
        IWebSocketControl2& operator=(IWebSocketControl2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebSocketErrorStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebSocketErrorStatics>
    {
        IWebSocketErrorStatics(std::nullptr_t = nullptr) noexcept {}
        IWebSocketErrorStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebSocketErrorStatics(IWebSocketErrorStatics const&) noexcept = default;
        IWebSocketErrorStatics(IWebSocketErrorStatics&&) noexcept = default;
        IWebSocketErrorStatics& operator=(IWebSocketErrorStatics const&) & noexcept = default;
        IWebSocketErrorStatics& operator=(IWebSocketErrorStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebSocketInformation :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebSocketInformation>
    {
        IWebSocketInformation(std::nullptr_t = nullptr) noexcept {}
        IWebSocketInformation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebSocketInformation(IWebSocketInformation const&) noexcept = default;
        IWebSocketInformation(IWebSocketInformation&&) noexcept = default;
        IWebSocketInformation& operator=(IWebSocketInformation const&) & noexcept = default;
        IWebSocketInformation& operator=(IWebSocketInformation&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebSocketInformation2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebSocketInformation2>,
        impl::require<winrt::Windows::Networking::Sockets::IWebSocketInformation2, winrt::Windows::Networking::Sockets::IWebSocketInformation>
    {
        IWebSocketInformation2(std::nullptr_t = nullptr) noexcept {}
        IWebSocketInformation2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebSocketInformation2(IWebSocketInformation2 const&) noexcept = default;
        IWebSocketInformation2(IWebSocketInformation2&&) noexcept = default;
        IWebSocketInformation2& operator=(IWebSocketInformation2 const&) & noexcept = default;
        IWebSocketInformation2& operator=(IWebSocketInformation2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebSocketServerCustomValidationRequestedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebSocketServerCustomValidationRequestedEventArgs>
    {
        IWebSocketServerCustomValidationRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IWebSocketServerCustomValidationRequestedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebSocketServerCustomValidationRequestedEventArgs(IWebSocketServerCustomValidationRequestedEventArgs const&) noexcept = default;
        IWebSocketServerCustomValidationRequestedEventArgs(IWebSocketServerCustomValidationRequestedEventArgs&&) noexcept = default;
        IWebSocketServerCustomValidationRequestedEventArgs& operator=(IWebSocketServerCustomValidationRequestedEventArgs const&) & noexcept = default;
        IWebSocketServerCustomValidationRequestedEventArgs& operator=(IWebSocketServerCustomValidationRequestedEventArgs&&) & noexcept = default;
    };
}
#endif
