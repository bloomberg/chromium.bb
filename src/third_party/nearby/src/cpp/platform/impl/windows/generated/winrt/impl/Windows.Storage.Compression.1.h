// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Storage_Compression_1_H
#define WINRT_Windows_Storage_Compression_1_H
#include "winrt/impl/Windows.Foundation.0.h"
#include "winrt/impl/Windows.Storage.Streams.0.h"
#include "winrt/impl/Windows.Storage.Compression.0.h"
WINRT_EXPORT namespace winrt::Windows::Storage::Compression
{
    struct __declspec(empty_bases) ICompressor :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICompressor>,
        impl::require<winrt::Windows::Storage::Compression::ICompressor, winrt::Windows::Foundation::IClosable, winrt::Windows::Storage::Streams::IOutputStream>
    {
        ICompressor(std::nullptr_t = nullptr) noexcept {}
        ICompressor(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICompressor(ICompressor const&) noexcept = default;
        ICompressor(ICompressor&&) noexcept = default;
        ICompressor& operator=(ICompressor const&) & noexcept = default;
        ICompressor& operator=(ICompressor&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICompressorFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICompressorFactory>
    {
        ICompressorFactory(std::nullptr_t = nullptr) noexcept {}
        ICompressorFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICompressorFactory(ICompressorFactory const&) noexcept = default;
        ICompressorFactory(ICompressorFactory&&) noexcept = default;
        ICompressorFactory& operator=(ICompressorFactory const&) & noexcept = default;
        ICompressorFactory& operator=(ICompressorFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDecompressor :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDecompressor>,
        impl::require<winrt::Windows::Storage::Compression::IDecompressor, winrt::Windows::Foundation::IClosable, winrt::Windows::Storage::Streams::IInputStream>
    {
        IDecompressor(std::nullptr_t = nullptr) noexcept {}
        IDecompressor(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDecompressor(IDecompressor const&) noexcept = default;
        IDecompressor(IDecompressor&&) noexcept = default;
        IDecompressor& operator=(IDecompressor const&) & noexcept = default;
        IDecompressor& operator=(IDecompressor&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDecompressorFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDecompressorFactory>
    {
        IDecompressorFactory(std::nullptr_t = nullptr) noexcept {}
        IDecompressorFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDecompressorFactory(IDecompressorFactory const&) noexcept = default;
        IDecompressorFactory(IDecompressorFactory&&) noexcept = default;
        IDecompressorFactory& operator=(IDecompressorFactory const&) & noexcept = default;
        IDecompressorFactory& operator=(IDecompressorFactory&&) & noexcept = default;
    };
}
#endif
