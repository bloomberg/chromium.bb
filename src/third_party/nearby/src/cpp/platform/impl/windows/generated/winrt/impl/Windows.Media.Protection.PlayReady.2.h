// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Media_Protection_PlayReady_2_H
#define WINRT_Windows_Media_Protection_PlayReady_2_H
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.Foundation.Collections.1.h"
#include "winrt/impl/Windows.Media.Protection.1.h"
#include "winrt/impl/Windows.Media.Protection.PlayReady.1.h"
WINRT_EXPORT namespace winrt::Windows::Media::Protection::PlayReady
{
    struct __declspec(empty_bases) NDClient : winrt::Windows::Media::Protection::PlayReady::INDClient
    {
        NDClient(std::nullptr_t) noexcept {}
        NDClient(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::INDClient(ptr, take_ownership_from_abi) {}
        NDClient(winrt::Windows::Media::Protection::PlayReady::INDDownloadEngine const& downloadEngine, winrt::Windows::Media::Protection::PlayReady::INDStreamParser const& streamParser, winrt::Windows::Media::Protection::PlayReady::INDMessenger const& pMessenger);
        NDClient(NDClient const&) noexcept = default;
        NDClient(NDClient&&) noexcept = default;
        NDClient& operator=(NDClient const&) & noexcept = default;
        NDClient& operator=(NDClient&&) & noexcept = default;
    };
    struct __declspec(empty_bases) NDCustomData : winrt::Windows::Media::Protection::PlayReady::INDCustomData
    {
        NDCustomData(std::nullptr_t) noexcept {}
        NDCustomData(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::INDCustomData(ptr, take_ownership_from_abi) {}
        NDCustomData(array_view<uint8_t const> customDataTypeIDBytes, array_view<uint8_t const> customDataBytes);
        NDCustomData(NDCustomData const&) noexcept = default;
        NDCustomData(NDCustomData&&) noexcept = default;
        NDCustomData& operator=(NDCustomData const&) & noexcept = default;
        NDCustomData& operator=(NDCustomData&&) & noexcept = default;
    };
    struct __declspec(empty_bases) NDDownloadEngineNotifier : winrt::Windows::Media::Protection::PlayReady::INDDownloadEngineNotifier
    {
        NDDownloadEngineNotifier(std::nullptr_t) noexcept {}
        NDDownloadEngineNotifier(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::INDDownloadEngineNotifier(ptr, take_ownership_from_abi) {}
        NDDownloadEngineNotifier();
        NDDownloadEngineNotifier(NDDownloadEngineNotifier const&) noexcept = default;
        NDDownloadEngineNotifier(NDDownloadEngineNotifier&&) noexcept = default;
        NDDownloadEngineNotifier& operator=(NDDownloadEngineNotifier const&) & noexcept = default;
        NDDownloadEngineNotifier& operator=(NDDownloadEngineNotifier&&) & noexcept = default;
    };
    struct __declspec(empty_bases) NDLicenseFetchDescriptor : winrt::Windows::Media::Protection::PlayReady::INDLicenseFetchDescriptor
    {
        NDLicenseFetchDescriptor(std::nullptr_t) noexcept {}
        NDLicenseFetchDescriptor(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::INDLicenseFetchDescriptor(ptr, take_ownership_from_abi) {}
        NDLicenseFetchDescriptor(winrt::Windows::Media::Protection::PlayReady::NDContentIDType const& contentIDType, array_view<uint8_t const> contentIDBytes, winrt::Windows::Media::Protection::PlayReady::INDCustomData const& licenseFetchChallengeCustomData);
        NDLicenseFetchDescriptor(NDLicenseFetchDescriptor const&) noexcept = default;
        NDLicenseFetchDescriptor(NDLicenseFetchDescriptor&&) noexcept = default;
        NDLicenseFetchDescriptor& operator=(NDLicenseFetchDescriptor const&) & noexcept = default;
        NDLicenseFetchDescriptor& operator=(NDLicenseFetchDescriptor&&) & noexcept = default;
    };
    struct __declspec(empty_bases) NDStorageFileHelper : winrt::Windows::Media::Protection::PlayReady::INDStorageFileHelper
    {
        NDStorageFileHelper(std::nullptr_t) noexcept {}
        NDStorageFileHelper(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::INDStorageFileHelper(ptr, take_ownership_from_abi) {}
        NDStorageFileHelper();
        NDStorageFileHelper(NDStorageFileHelper const&) noexcept = default;
        NDStorageFileHelper(NDStorageFileHelper&&) noexcept = default;
        NDStorageFileHelper& operator=(NDStorageFileHelper const&) & noexcept = default;
        NDStorageFileHelper& operator=(NDStorageFileHelper&&) & noexcept = default;
    };
    struct __declspec(empty_bases) NDStreamParserNotifier : winrt::Windows::Media::Protection::PlayReady::INDStreamParserNotifier
    {
        NDStreamParserNotifier(std::nullptr_t) noexcept {}
        NDStreamParserNotifier(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::INDStreamParserNotifier(ptr, take_ownership_from_abi) {}
        NDStreamParserNotifier();
        NDStreamParserNotifier(NDStreamParserNotifier const&) noexcept = default;
        NDStreamParserNotifier(NDStreamParserNotifier&&) noexcept = default;
        NDStreamParserNotifier& operator=(NDStreamParserNotifier const&) & noexcept = default;
        NDStreamParserNotifier& operator=(NDStreamParserNotifier&&) & noexcept = default;
    };
    struct __declspec(empty_bases) NDTCPMessenger : winrt::Windows::Media::Protection::PlayReady::INDMessenger
    {
        NDTCPMessenger(std::nullptr_t) noexcept {}
        NDTCPMessenger(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::INDMessenger(ptr, take_ownership_from_abi) {}
        NDTCPMessenger(param::hstring const& remoteHostName, uint32_t remoteHostPort);
        NDTCPMessenger(NDTCPMessenger const&) noexcept = default;
        NDTCPMessenger(NDTCPMessenger&&) noexcept = default;
        NDTCPMessenger& operator=(NDTCPMessenger const&) & noexcept = default;
        NDTCPMessenger& operator=(NDTCPMessenger&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadyContentHeader : winrt::Windows::Media::Protection::PlayReady::IPlayReadyContentHeader,
        impl::require<PlayReadyContentHeader, winrt::Windows::Media::Protection::PlayReady::IPlayReadyContentHeader2>
    {
        PlayReadyContentHeader(std::nullptr_t) noexcept {}
        PlayReadyContentHeader(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::IPlayReadyContentHeader(ptr, take_ownership_from_abi) {}
        PlayReadyContentHeader(array_view<uint8_t const> headerBytes, winrt::Windows::Foundation::Uri const& licenseAcquisitionUrl, winrt::Windows::Foundation::Uri const& licenseAcquisitionUserInterfaceUrl, param::hstring const& customAttributes, winrt::guid const& domainServiceId);
        PlayReadyContentHeader(winrt::guid const& contentKeyId, param::hstring const& contentKeyIdString, winrt::Windows::Media::Protection::PlayReady::PlayReadyEncryptionAlgorithm const& contentEncryptionAlgorithm, winrt::Windows::Foundation::Uri const& licenseAcquisitionUrl, winrt::Windows::Foundation::Uri const& licenseAcquisitionUserInterfaceUrl, param::hstring const& customAttributes, winrt::guid const& domainServiceId);
        explicit PlayReadyContentHeader(array_view<uint8_t const> headerBytes);
        PlayReadyContentHeader(uint32_t dwFlags, array_view<winrt::guid const> contentKeyIds, array_view<hstring const> contentKeyIdStrings, winrt::Windows::Media::Protection::PlayReady::PlayReadyEncryptionAlgorithm const& contentEncryptionAlgorithm, winrt::Windows::Foundation::Uri const& licenseAcquisitionUrl, winrt::Windows::Foundation::Uri const& licenseAcquisitionUserInterfaceUrl, param::hstring const& customAttributes, winrt::guid const& domainServiceId);
        PlayReadyContentHeader(PlayReadyContentHeader const&) noexcept = default;
        PlayReadyContentHeader(PlayReadyContentHeader&&) noexcept = default;
        PlayReadyContentHeader& operator=(PlayReadyContentHeader const&) & noexcept = default;
        PlayReadyContentHeader& operator=(PlayReadyContentHeader&&) & noexcept = default;
    };
    struct PlayReadyContentResolver
    {
        PlayReadyContentResolver() = delete;
        static auto ServiceRequest(winrt::Windows::Media::Protection::PlayReady::PlayReadyContentHeader const& contentHeader);
    };
    struct __declspec(empty_bases) PlayReadyDomain : winrt::Windows::Media::Protection::PlayReady::IPlayReadyDomain
    {
        PlayReadyDomain(std::nullptr_t) noexcept {}
        PlayReadyDomain(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::IPlayReadyDomain(ptr, take_ownership_from_abi) {}
        PlayReadyDomain(PlayReadyDomain const&) noexcept = default;
        PlayReadyDomain(PlayReadyDomain&&) noexcept = default;
        PlayReadyDomain& operator=(PlayReadyDomain const&) & noexcept = default;
        PlayReadyDomain& operator=(PlayReadyDomain&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadyDomainIterable : winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Media::Protection::PlayReady::IPlayReadyDomain>
    {
        PlayReadyDomainIterable(std::nullptr_t) noexcept {}
        PlayReadyDomainIterable(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Media::Protection::PlayReady::IPlayReadyDomain>(ptr, take_ownership_from_abi) {}
        explicit PlayReadyDomainIterable(winrt::guid const& domainAccountId);
        PlayReadyDomainIterable(PlayReadyDomainIterable const&) noexcept = default;
        PlayReadyDomainIterable(PlayReadyDomainIterable&&) noexcept = default;
        PlayReadyDomainIterable& operator=(PlayReadyDomainIterable const&) & noexcept = default;
        PlayReadyDomainIterable& operator=(PlayReadyDomainIterable&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadyDomainIterator : winrt::Windows::Foundation::Collections::IIterator<winrt::Windows::Media::Protection::PlayReady::IPlayReadyDomain>
    {
        PlayReadyDomainIterator(std::nullptr_t) noexcept {}
        PlayReadyDomainIterator(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IIterator<winrt::Windows::Media::Protection::PlayReady::IPlayReadyDomain>(ptr, take_ownership_from_abi) {}
        PlayReadyDomainIterator(PlayReadyDomainIterator const&) noexcept = default;
        PlayReadyDomainIterator(PlayReadyDomainIterator&&) noexcept = default;
        PlayReadyDomainIterator& operator=(PlayReadyDomainIterator const&) & noexcept = default;
        PlayReadyDomainIterator& operator=(PlayReadyDomainIterator&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadyDomainJoinServiceRequest : winrt::Windows::Media::Protection::PlayReady::IPlayReadyDomainJoinServiceRequest
    {
        PlayReadyDomainJoinServiceRequest(std::nullptr_t) noexcept {}
        PlayReadyDomainJoinServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::IPlayReadyDomainJoinServiceRequest(ptr, take_ownership_from_abi) {}
        PlayReadyDomainJoinServiceRequest();
        PlayReadyDomainJoinServiceRequest(PlayReadyDomainJoinServiceRequest const&) noexcept = default;
        PlayReadyDomainJoinServiceRequest(PlayReadyDomainJoinServiceRequest&&) noexcept = default;
        PlayReadyDomainJoinServiceRequest& operator=(PlayReadyDomainJoinServiceRequest const&) & noexcept = default;
        PlayReadyDomainJoinServiceRequest& operator=(PlayReadyDomainJoinServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadyDomainLeaveServiceRequest : winrt::Windows::Media::Protection::PlayReady::IPlayReadyDomainLeaveServiceRequest
    {
        PlayReadyDomainLeaveServiceRequest(std::nullptr_t) noexcept {}
        PlayReadyDomainLeaveServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::IPlayReadyDomainLeaveServiceRequest(ptr, take_ownership_from_abi) {}
        PlayReadyDomainLeaveServiceRequest();
        PlayReadyDomainLeaveServiceRequest(PlayReadyDomainLeaveServiceRequest const&) noexcept = default;
        PlayReadyDomainLeaveServiceRequest(PlayReadyDomainLeaveServiceRequest&&) noexcept = default;
        PlayReadyDomainLeaveServiceRequest& operator=(PlayReadyDomainLeaveServiceRequest const&) & noexcept = default;
        PlayReadyDomainLeaveServiceRequest& operator=(PlayReadyDomainLeaveServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadyITADataGenerator : winrt::Windows::Media::Protection::PlayReady::IPlayReadyITADataGenerator
    {
        PlayReadyITADataGenerator(std::nullptr_t) noexcept {}
        PlayReadyITADataGenerator(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::IPlayReadyITADataGenerator(ptr, take_ownership_from_abi) {}
        PlayReadyITADataGenerator();
        PlayReadyITADataGenerator(PlayReadyITADataGenerator const&) noexcept = default;
        PlayReadyITADataGenerator(PlayReadyITADataGenerator&&) noexcept = default;
        PlayReadyITADataGenerator& operator=(PlayReadyITADataGenerator const&) & noexcept = default;
        PlayReadyITADataGenerator& operator=(PlayReadyITADataGenerator&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadyIndividualizationServiceRequest : winrt::Windows::Media::Protection::PlayReady::IPlayReadyIndividualizationServiceRequest
    {
        PlayReadyIndividualizationServiceRequest(std::nullptr_t) noexcept {}
        PlayReadyIndividualizationServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::IPlayReadyIndividualizationServiceRequest(ptr, take_ownership_from_abi) {}
        PlayReadyIndividualizationServiceRequest();
        PlayReadyIndividualizationServiceRequest(PlayReadyIndividualizationServiceRequest const&) noexcept = default;
        PlayReadyIndividualizationServiceRequest(PlayReadyIndividualizationServiceRequest&&) noexcept = default;
        PlayReadyIndividualizationServiceRequest& operator=(PlayReadyIndividualizationServiceRequest const&) & noexcept = default;
        PlayReadyIndividualizationServiceRequest& operator=(PlayReadyIndividualizationServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadyLicense : winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicense,
        impl::require<PlayReadyLicense, winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicense2>
    {
        PlayReadyLicense(std::nullptr_t) noexcept {}
        PlayReadyLicense(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicense(ptr, take_ownership_from_abi) {}
        PlayReadyLicense(PlayReadyLicense const&) noexcept = default;
        PlayReadyLicense(PlayReadyLicense&&) noexcept = default;
        PlayReadyLicense& operator=(PlayReadyLicense const&) & noexcept = default;
        PlayReadyLicense& operator=(PlayReadyLicense&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadyLicenseAcquisitionServiceRequest : winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseAcquisitionServiceRequest,
        impl::require<PlayReadyLicenseAcquisitionServiceRequest, winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseAcquisitionServiceRequest2, winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseAcquisitionServiceRequest3>
    {
        PlayReadyLicenseAcquisitionServiceRequest(std::nullptr_t) noexcept {}
        PlayReadyLicenseAcquisitionServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseAcquisitionServiceRequest(ptr, take_ownership_from_abi) {}
        PlayReadyLicenseAcquisitionServiceRequest();
        PlayReadyLicenseAcquisitionServiceRequest(PlayReadyLicenseAcquisitionServiceRequest const&) noexcept = default;
        PlayReadyLicenseAcquisitionServiceRequest(PlayReadyLicenseAcquisitionServiceRequest&&) noexcept = default;
        PlayReadyLicenseAcquisitionServiceRequest& operator=(PlayReadyLicenseAcquisitionServiceRequest const&) & noexcept = default;
        PlayReadyLicenseAcquisitionServiceRequest& operator=(PlayReadyLicenseAcquisitionServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadyLicenseIterable : winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicense>
    {
        PlayReadyLicenseIterable(std::nullptr_t) noexcept {}
        PlayReadyLicenseIterable(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicense>(ptr, take_ownership_from_abi) {}
        PlayReadyLicenseIterable();
        PlayReadyLicenseIterable(winrt::Windows::Media::Protection::PlayReady::PlayReadyContentHeader const& contentHeader, bool fullyEvaluated);
        PlayReadyLicenseIterable(PlayReadyLicenseIterable const&) noexcept = default;
        PlayReadyLicenseIterable(PlayReadyLicenseIterable&&) noexcept = default;
        PlayReadyLicenseIterable& operator=(PlayReadyLicenseIterable const&) & noexcept = default;
        PlayReadyLicenseIterable& operator=(PlayReadyLicenseIterable&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadyLicenseIterator : winrt::Windows::Foundation::Collections::IIterator<winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicense>
    {
        PlayReadyLicenseIterator(std::nullptr_t) noexcept {}
        PlayReadyLicenseIterator(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IIterator<winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicense>(ptr, take_ownership_from_abi) {}
        PlayReadyLicenseIterator(PlayReadyLicenseIterator const&) noexcept = default;
        PlayReadyLicenseIterator(PlayReadyLicenseIterator&&) noexcept = default;
        PlayReadyLicenseIterator& operator=(PlayReadyLicenseIterator const&) & noexcept = default;
        PlayReadyLicenseIterator& operator=(PlayReadyLicenseIterator&&) & noexcept = default;
    };
    struct PlayReadyLicenseManagement
    {
        PlayReadyLicenseManagement() = delete;
        static auto DeleteLicenses(winrt::Windows::Media::Protection::PlayReady::PlayReadyContentHeader const& contentHeader);
    };
    struct __declspec(empty_bases) PlayReadyLicenseSession : winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseSession,
        impl::require<PlayReadyLicenseSession, winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseSession2>
    {
        PlayReadyLicenseSession(std::nullptr_t) noexcept {}
        PlayReadyLicenseSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::IPlayReadyLicenseSession(ptr, take_ownership_from_abi) {}
        explicit PlayReadyLicenseSession(winrt::Windows::Foundation::Collections::IPropertySet const& configuration);
        PlayReadyLicenseSession(PlayReadyLicenseSession const&) noexcept = default;
        PlayReadyLicenseSession(PlayReadyLicenseSession&&) noexcept = default;
        PlayReadyLicenseSession& operator=(PlayReadyLicenseSession const&) & noexcept = default;
        PlayReadyLicenseSession& operator=(PlayReadyLicenseSession&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadyMeteringReportServiceRequest : winrt::Windows::Media::Protection::PlayReady::IPlayReadyMeteringReportServiceRequest
    {
        PlayReadyMeteringReportServiceRequest(std::nullptr_t) noexcept {}
        PlayReadyMeteringReportServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::IPlayReadyMeteringReportServiceRequest(ptr, take_ownership_from_abi) {}
        PlayReadyMeteringReportServiceRequest();
        PlayReadyMeteringReportServiceRequest(PlayReadyMeteringReportServiceRequest const&) noexcept = default;
        PlayReadyMeteringReportServiceRequest(PlayReadyMeteringReportServiceRequest&&) noexcept = default;
        PlayReadyMeteringReportServiceRequest& operator=(PlayReadyMeteringReportServiceRequest const&) & noexcept = default;
        PlayReadyMeteringReportServiceRequest& operator=(PlayReadyMeteringReportServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadyRevocationServiceRequest : winrt::Windows::Media::Protection::PlayReady::IPlayReadyRevocationServiceRequest
    {
        PlayReadyRevocationServiceRequest(std::nullptr_t) noexcept {}
        PlayReadyRevocationServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::IPlayReadyRevocationServiceRequest(ptr, take_ownership_from_abi) {}
        PlayReadyRevocationServiceRequest();
        PlayReadyRevocationServiceRequest(PlayReadyRevocationServiceRequest const&) noexcept = default;
        PlayReadyRevocationServiceRequest(PlayReadyRevocationServiceRequest&&) noexcept = default;
        PlayReadyRevocationServiceRequest& operator=(PlayReadyRevocationServiceRequest const&) & noexcept = default;
        PlayReadyRevocationServiceRequest& operator=(PlayReadyRevocationServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadySecureStopIterable : winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Media::Protection::PlayReady::IPlayReadySecureStopServiceRequest>
    {
        PlayReadySecureStopIterable(std::nullptr_t) noexcept {}
        PlayReadySecureStopIterable(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Media::Protection::PlayReady::IPlayReadySecureStopServiceRequest>(ptr, take_ownership_from_abi) {}
        explicit PlayReadySecureStopIterable(array_view<uint8_t const> publisherCertBytes);
        PlayReadySecureStopIterable(PlayReadySecureStopIterable const&) noexcept = default;
        PlayReadySecureStopIterable(PlayReadySecureStopIterable&&) noexcept = default;
        PlayReadySecureStopIterable& operator=(PlayReadySecureStopIterable const&) & noexcept = default;
        PlayReadySecureStopIterable& operator=(PlayReadySecureStopIterable&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadySecureStopIterator : winrt::Windows::Foundation::Collections::IIterator<winrt::Windows::Media::Protection::PlayReady::IPlayReadySecureStopServiceRequest>
    {
        PlayReadySecureStopIterator(std::nullptr_t) noexcept {}
        PlayReadySecureStopIterator(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IIterator<winrt::Windows::Media::Protection::PlayReady::IPlayReadySecureStopServiceRequest>(ptr, take_ownership_from_abi) {}
        PlayReadySecureStopIterator(PlayReadySecureStopIterator const&) noexcept = default;
        PlayReadySecureStopIterator(PlayReadySecureStopIterator&&) noexcept = default;
        PlayReadySecureStopIterator& operator=(PlayReadySecureStopIterator const&) & noexcept = default;
        PlayReadySecureStopIterator& operator=(PlayReadySecureStopIterator&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadySecureStopServiceRequest : winrt::Windows::Media::Protection::PlayReady::IPlayReadySecureStopServiceRequest
    {
        PlayReadySecureStopServiceRequest(std::nullptr_t) noexcept {}
        PlayReadySecureStopServiceRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::IPlayReadySecureStopServiceRequest(ptr, take_ownership_from_abi) {}
        explicit PlayReadySecureStopServiceRequest(array_view<uint8_t const> publisherCertBytes);
        PlayReadySecureStopServiceRequest(winrt::guid const& sessionID, array_view<uint8_t const> publisherCertBytes);
        PlayReadySecureStopServiceRequest(PlayReadySecureStopServiceRequest const&) noexcept = default;
        PlayReadySecureStopServiceRequest(PlayReadySecureStopServiceRequest&&) noexcept = default;
        PlayReadySecureStopServiceRequest& operator=(PlayReadySecureStopServiceRequest const&) & noexcept = default;
        PlayReadySecureStopServiceRequest& operator=(PlayReadySecureStopServiceRequest&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlayReadySoapMessage : winrt::Windows::Media::Protection::PlayReady::IPlayReadySoapMessage
    {
        PlayReadySoapMessage(std::nullptr_t) noexcept {}
        PlayReadySoapMessage(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::Protection::PlayReady::IPlayReadySoapMessage(ptr, take_ownership_from_abi) {}
        PlayReadySoapMessage(PlayReadySoapMessage const&) noexcept = default;
        PlayReadySoapMessage(PlayReadySoapMessage&&) noexcept = default;
        PlayReadySoapMessage& operator=(PlayReadySoapMessage const&) & noexcept = default;
        PlayReadySoapMessage& operator=(PlayReadySoapMessage&&) & noexcept = default;
    };
    struct PlayReadyStatics
    {
        PlayReadyStatics() = delete;
        [[nodiscard]] static auto DomainJoinServiceRequestType();
        [[nodiscard]] static auto DomainLeaveServiceRequestType();
        [[nodiscard]] static auto IndividualizationServiceRequestType();
        [[nodiscard]] static auto LicenseAcquirerServiceRequestType();
        [[nodiscard]] static auto MeteringReportServiceRequestType();
        [[nodiscard]] static auto RevocationServiceRequestType();
        [[nodiscard]] static auto MediaProtectionSystemId();
        [[nodiscard]] static auto PlayReadySecurityVersion();
        [[nodiscard]] static auto PlayReadyCertificateSecurityLevel();
        [[nodiscard]] static auto SecureStopServiceRequestType();
        static auto CheckSupportedHardware(winrt::Windows::Media::Protection::PlayReady::PlayReadyHardwareDRMFeatures const& hwdrmFeature);
        [[nodiscard]] static auto InputTrustAuthorityToCreate();
        [[nodiscard]] static auto ProtectionSystemId();
        [[nodiscard]] static auto HardwareDRMDisabledAtTime();
        [[nodiscard]] static auto HardwareDRMDisabledUntilTime();
        static auto ResetHardwareDRMDisabled();
    };
}
#endif
