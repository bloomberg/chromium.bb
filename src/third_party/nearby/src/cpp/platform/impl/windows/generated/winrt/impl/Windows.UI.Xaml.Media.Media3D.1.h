// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_UI_Xaml_Media_Media3D_1_H
#define WINRT_Windows_UI_Xaml_Media_Media3D_1_H
#include "winrt/impl/Windows.UI.Xaml.Media.Media3D.0.h"
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Media::Media3D
{
    struct __declspec(empty_bases) ICompositeTransform3D :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICompositeTransform3D>
    {
        ICompositeTransform3D(std::nullptr_t = nullptr) noexcept {}
        ICompositeTransform3D(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICompositeTransform3D(ICompositeTransform3D const&) noexcept = default;
        ICompositeTransform3D(ICompositeTransform3D&&) noexcept = default;
        ICompositeTransform3D& operator=(ICompositeTransform3D const&) & noexcept = default;
        ICompositeTransform3D& operator=(ICompositeTransform3D&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICompositeTransform3DStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICompositeTransform3DStatics>
    {
        ICompositeTransform3DStatics(std::nullptr_t = nullptr) noexcept {}
        ICompositeTransform3DStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICompositeTransform3DStatics(ICompositeTransform3DStatics const&) noexcept = default;
        ICompositeTransform3DStatics(ICompositeTransform3DStatics&&) noexcept = default;
        ICompositeTransform3DStatics& operator=(ICompositeTransform3DStatics const&) & noexcept = default;
        ICompositeTransform3DStatics& operator=(ICompositeTransform3DStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMatrix3DHelper :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMatrix3DHelper>
    {
        IMatrix3DHelper(std::nullptr_t = nullptr) noexcept {}
        IMatrix3DHelper(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMatrix3DHelper(IMatrix3DHelper const&) noexcept = default;
        IMatrix3DHelper(IMatrix3DHelper&&) noexcept = default;
        IMatrix3DHelper& operator=(IMatrix3DHelper const&) & noexcept = default;
        IMatrix3DHelper& operator=(IMatrix3DHelper&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMatrix3DHelperStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMatrix3DHelperStatics>
    {
        IMatrix3DHelperStatics(std::nullptr_t = nullptr) noexcept {}
        IMatrix3DHelperStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMatrix3DHelperStatics(IMatrix3DHelperStatics const&) noexcept = default;
        IMatrix3DHelperStatics(IMatrix3DHelperStatics&&) noexcept = default;
        IMatrix3DHelperStatics& operator=(IMatrix3DHelperStatics const&) & noexcept = default;
        IMatrix3DHelperStatics& operator=(IMatrix3DHelperStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPerspectiveTransform3D :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPerspectiveTransform3D>
    {
        IPerspectiveTransform3D(std::nullptr_t = nullptr) noexcept {}
        IPerspectiveTransform3D(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPerspectiveTransform3D(IPerspectiveTransform3D const&) noexcept = default;
        IPerspectiveTransform3D(IPerspectiveTransform3D&&) noexcept = default;
        IPerspectiveTransform3D& operator=(IPerspectiveTransform3D const&) & noexcept = default;
        IPerspectiveTransform3D& operator=(IPerspectiveTransform3D&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPerspectiveTransform3DStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPerspectiveTransform3DStatics>
    {
        IPerspectiveTransform3DStatics(std::nullptr_t = nullptr) noexcept {}
        IPerspectiveTransform3DStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPerspectiveTransform3DStatics(IPerspectiveTransform3DStatics const&) noexcept = default;
        IPerspectiveTransform3DStatics(IPerspectiveTransform3DStatics&&) noexcept = default;
        IPerspectiveTransform3DStatics& operator=(IPerspectiveTransform3DStatics const&) & noexcept = default;
        IPerspectiveTransform3DStatics& operator=(IPerspectiveTransform3DStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITransform3D :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITransform3D>
    {
        ITransform3D(std::nullptr_t = nullptr) noexcept {}
        ITransform3D(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITransform3D(ITransform3D const&) noexcept = default;
        ITransform3D(ITransform3D&&) noexcept = default;
        ITransform3D& operator=(ITransform3D const&) & noexcept = default;
        ITransform3D& operator=(ITransform3D&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITransform3DFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITransform3DFactory>
    {
        ITransform3DFactory(std::nullptr_t = nullptr) noexcept {}
        ITransform3DFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITransform3DFactory(ITransform3DFactory const&) noexcept = default;
        ITransform3DFactory(ITransform3DFactory&&) noexcept = default;
        ITransform3DFactory& operator=(ITransform3DFactory const&) & noexcept = default;
        ITransform3DFactory& operator=(ITransform3DFactory&&) & noexcept = default;
    };
}
#endif
