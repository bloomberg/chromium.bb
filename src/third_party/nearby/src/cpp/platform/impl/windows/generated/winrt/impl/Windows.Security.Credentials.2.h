// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Security_Credentials_2_H
#define WINRT_Windows_Security_Credentials_2_H
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.Foundation.Collections.1.h"
#include "winrt/impl/Windows.Security.Credentials.1.h"
WINRT_EXPORT namespace winrt::Windows::Security::Credentials
{
    struct __declspec(empty_bases) KeyCredential : winrt::Windows::Security::Credentials::IKeyCredential
    {
        KeyCredential(std::nullptr_t) noexcept {}
        KeyCredential(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Security::Credentials::IKeyCredential(ptr, take_ownership_from_abi) {}
        KeyCredential(KeyCredential const&) noexcept = default;
        KeyCredential(KeyCredential&&) noexcept = default;
        KeyCredential& operator=(KeyCredential const&) & noexcept = default;
        KeyCredential& operator=(KeyCredential&&) & noexcept = default;
    };
    struct __declspec(empty_bases) KeyCredentialAttestationResult : winrt::Windows::Security::Credentials::IKeyCredentialAttestationResult
    {
        KeyCredentialAttestationResult(std::nullptr_t) noexcept {}
        KeyCredentialAttestationResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Security::Credentials::IKeyCredentialAttestationResult(ptr, take_ownership_from_abi) {}
        KeyCredentialAttestationResult(KeyCredentialAttestationResult const&) noexcept = default;
        KeyCredentialAttestationResult(KeyCredentialAttestationResult&&) noexcept = default;
        KeyCredentialAttestationResult& operator=(KeyCredentialAttestationResult const&) & noexcept = default;
        KeyCredentialAttestationResult& operator=(KeyCredentialAttestationResult&&) & noexcept = default;
    };
    struct KeyCredentialManager
    {
        KeyCredentialManager() = delete;
        static auto IsSupportedAsync();
        static auto RenewAttestationAsync();
        static auto RequestCreateAsync(param::hstring const& name, winrt::Windows::Security::Credentials::KeyCredentialCreationOption const& option);
        static auto OpenAsync(param::hstring const& name);
        static auto DeleteAsync(param::hstring const& name);
    };
    struct __declspec(empty_bases) KeyCredentialOperationResult : winrt::Windows::Security::Credentials::IKeyCredentialOperationResult
    {
        KeyCredentialOperationResult(std::nullptr_t) noexcept {}
        KeyCredentialOperationResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Security::Credentials::IKeyCredentialOperationResult(ptr, take_ownership_from_abi) {}
        KeyCredentialOperationResult(KeyCredentialOperationResult const&) noexcept = default;
        KeyCredentialOperationResult(KeyCredentialOperationResult&&) noexcept = default;
        KeyCredentialOperationResult& operator=(KeyCredentialOperationResult const&) & noexcept = default;
        KeyCredentialOperationResult& operator=(KeyCredentialOperationResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) KeyCredentialRetrievalResult : winrt::Windows::Security::Credentials::IKeyCredentialRetrievalResult
    {
        KeyCredentialRetrievalResult(std::nullptr_t) noexcept {}
        KeyCredentialRetrievalResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Security::Credentials::IKeyCredentialRetrievalResult(ptr, take_ownership_from_abi) {}
        KeyCredentialRetrievalResult(KeyCredentialRetrievalResult const&) noexcept = default;
        KeyCredentialRetrievalResult(KeyCredentialRetrievalResult&&) noexcept = default;
        KeyCredentialRetrievalResult& operator=(KeyCredentialRetrievalResult const&) & noexcept = default;
        KeyCredentialRetrievalResult& operator=(KeyCredentialRetrievalResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PasswordCredential : winrt::Windows::Security::Credentials::IPasswordCredential
    {
        PasswordCredential(std::nullptr_t) noexcept {}
        PasswordCredential(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Security::Credentials::IPasswordCredential(ptr, take_ownership_from_abi) {}
        PasswordCredential();
        PasswordCredential(param::hstring const& resource, param::hstring const& userName, param::hstring const& password);
        PasswordCredential(PasswordCredential const&) noexcept = default;
        PasswordCredential(PasswordCredential&&) noexcept = default;
        PasswordCredential& operator=(PasswordCredential const&) & noexcept = default;
        PasswordCredential& operator=(PasswordCredential&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PasswordCredentialPropertyStore : winrt::Windows::Foundation::Collections::IPropertySet
    {
        PasswordCredentialPropertyStore(std::nullptr_t) noexcept {}
        PasswordCredentialPropertyStore(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IPropertySet(ptr, take_ownership_from_abi) {}
        PasswordCredentialPropertyStore();
        PasswordCredentialPropertyStore(PasswordCredentialPropertyStore const&) noexcept = default;
        PasswordCredentialPropertyStore(PasswordCredentialPropertyStore&&) noexcept = default;
        PasswordCredentialPropertyStore& operator=(PasswordCredentialPropertyStore const&) & noexcept = default;
        PasswordCredentialPropertyStore& operator=(PasswordCredentialPropertyStore&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PasswordVault : winrt::Windows::Security::Credentials::IPasswordVault
    {
        PasswordVault(std::nullptr_t) noexcept {}
        PasswordVault(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Security::Credentials::IPasswordVault(ptr, take_ownership_from_abi) {}
        PasswordVault();
        PasswordVault(PasswordVault const&) noexcept = default;
        PasswordVault(PasswordVault&&) noexcept = default;
        PasswordVault& operator=(PasswordVault const&) & noexcept = default;
        PasswordVault& operator=(PasswordVault&&) & noexcept = default;
    };
    struct __declspec(empty_bases) WebAccount : winrt::Windows::Security::Credentials::IWebAccount,
        impl::require<WebAccount, winrt::Windows::Security::Credentials::IWebAccount2>
    {
        WebAccount(std::nullptr_t) noexcept {}
        WebAccount(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Security::Credentials::IWebAccount(ptr, take_ownership_from_abi) {}
        WebAccount(winrt::Windows::Security::Credentials::WebAccountProvider const& webAccountProvider, param::hstring const& userName, winrt::Windows::Security::Credentials::WebAccountState const& state);
        WebAccount(WebAccount const&) noexcept = default;
        WebAccount(WebAccount&&) noexcept = default;
        WebAccount& operator=(WebAccount const&) & noexcept = default;
        WebAccount& operator=(WebAccount&&) & noexcept = default;
    };
    struct __declspec(empty_bases) WebAccountProvider : winrt::Windows::Security::Credentials::IWebAccountProvider,
        impl::require<WebAccountProvider, winrt::Windows::Security::Credentials::IWebAccountProvider2, winrt::Windows::Security::Credentials::IWebAccountProvider3, winrt::Windows::Security::Credentials::IWebAccountProvider4>
    {
        WebAccountProvider(std::nullptr_t) noexcept {}
        WebAccountProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Security::Credentials::IWebAccountProvider(ptr, take_ownership_from_abi) {}
        WebAccountProvider(param::hstring const& id, param::hstring const& displayName, winrt::Windows::Foundation::Uri const& iconUri);
        WebAccountProvider(WebAccountProvider const&) noexcept = default;
        WebAccountProvider(WebAccountProvider&&) noexcept = default;
        WebAccountProvider& operator=(WebAccountProvider const&) & noexcept = default;
        WebAccountProvider& operator=(WebAccountProvider&&) & noexcept = default;
    };
}
#endif
