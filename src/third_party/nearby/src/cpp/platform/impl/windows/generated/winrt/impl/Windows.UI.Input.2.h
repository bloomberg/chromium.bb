// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_UI_Input_2_H
#define WINRT_Windows_UI_Input_2_H
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Storage.Streams.2.h"
#include "winrt/impl/Windows.System.2.h"
#include "winrt/impl/Windows.UI.Input.1.h"
WINRT_EXPORT namespace winrt::Windows::UI::Input
{
    struct CrossSlideThresholds
    {
        float SelectionStart;
        float SpeedBumpStart;
        float SpeedBumpEnd;
        float RearrangeStart;
    };
    inline bool operator==(CrossSlideThresholds const& left, CrossSlideThresholds const& right) noexcept
    {
        return left.SelectionStart == right.SelectionStart && left.SpeedBumpStart == right.SpeedBumpStart && left.SpeedBumpEnd == right.SpeedBumpEnd && left.RearrangeStart == right.RearrangeStart;
    }
    inline bool operator!=(CrossSlideThresholds const& left, CrossSlideThresholds const& right) noexcept
    {
        return !(left == right);
    }
    struct ManipulationDelta
    {
        winrt::Windows::Foundation::Point Translation;
        float Scale;
        float Rotation;
        float Expansion;
    };
    inline bool operator==(ManipulationDelta const& left, ManipulationDelta const& right) noexcept
    {
        return left.Translation == right.Translation && left.Scale == right.Scale && left.Rotation == right.Rotation && left.Expansion == right.Expansion;
    }
    inline bool operator!=(ManipulationDelta const& left, ManipulationDelta const& right) noexcept
    {
        return !(left == right);
    }
    struct ManipulationVelocities
    {
        winrt::Windows::Foundation::Point Linear;
        float Angular;
        float Expansion;
    };
    inline bool operator==(ManipulationVelocities const& left, ManipulationVelocities const& right) noexcept
    {
        return left.Linear == right.Linear && left.Angular == right.Angular && left.Expansion == right.Expansion;
    }
    inline bool operator!=(ManipulationVelocities const& left, ManipulationVelocities const& right) noexcept
    {
        return !(left == right);
    }
    struct __declspec(empty_bases) AttachableInputObject : winrt::Windows::UI::Input::IAttachableInputObject,
        impl::require<AttachableInputObject, winrt::Windows::Foundation::IClosable>
    {
        AttachableInputObject(std::nullptr_t) noexcept {}
        AttachableInputObject(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IAttachableInputObject(ptr, take_ownership_from_abi) {}
        AttachableInputObject(AttachableInputObject const&) noexcept = default;
        AttachableInputObject(AttachableInputObject&&) noexcept = default;
        AttachableInputObject& operator=(AttachableInputObject const&) & noexcept = default;
        AttachableInputObject& operator=(AttachableInputObject&&) & noexcept = default;
    };
    struct __declspec(empty_bases) CrossSlidingEventArgs : winrt::Windows::UI::Input::ICrossSlidingEventArgs,
        impl::require<CrossSlidingEventArgs, winrt::Windows::UI::Input::ICrossSlidingEventArgs2>
    {
        CrossSlidingEventArgs(std::nullptr_t) noexcept {}
        CrossSlidingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::ICrossSlidingEventArgs(ptr, take_ownership_from_abi) {}
        CrossSlidingEventArgs(CrossSlidingEventArgs const&) noexcept = default;
        CrossSlidingEventArgs(CrossSlidingEventArgs&&) noexcept = default;
        CrossSlidingEventArgs& operator=(CrossSlidingEventArgs const&) & noexcept = default;
        CrossSlidingEventArgs& operator=(CrossSlidingEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DraggingEventArgs : winrt::Windows::UI::Input::IDraggingEventArgs,
        impl::require<DraggingEventArgs, winrt::Windows::UI::Input::IDraggingEventArgs2>
    {
        DraggingEventArgs(std::nullptr_t) noexcept {}
        DraggingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IDraggingEventArgs(ptr, take_ownership_from_abi) {}
        DraggingEventArgs(DraggingEventArgs const&) noexcept = default;
        DraggingEventArgs(DraggingEventArgs&&) noexcept = default;
        DraggingEventArgs& operator=(DraggingEventArgs const&) & noexcept = default;
        DraggingEventArgs& operator=(DraggingEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) EdgeGesture : winrt::Windows::UI::Input::IEdgeGesture
    {
        EdgeGesture(std::nullptr_t) noexcept {}
        EdgeGesture(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IEdgeGesture(ptr, take_ownership_from_abi) {}
        EdgeGesture(EdgeGesture const&) noexcept = default;
        EdgeGesture(EdgeGesture&&) noexcept = default;
        EdgeGesture& operator=(EdgeGesture const&) & noexcept = default;
        EdgeGesture& operator=(EdgeGesture&&) & noexcept = default;
        static auto GetForCurrentView();
    };
    struct __declspec(empty_bases) EdgeGestureEventArgs : winrt::Windows::UI::Input::IEdgeGestureEventArgs
    {
        EdgeGestureEventArgs(std::nullptr_t) noexcept {}
        EdgeGestureEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IEdgeGestureEventArgs(ptr, take_ownership_from_abi) {}
        EdgeGestureEventArgs(EdgeGestureEventArgs const&) noexcept = default;
        EdgeGestureEventArgs(EdgeGestureEventArgs&&) noexcept = default;
        EdgeGestureEventArgs& operator=(EdgeGestureEventArgs const&) & noexcept = default;
        EdgeGestureEventArgs& operator=(EdgeGestureEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) GestureRecognizer : winrt::Windows::UI::Input::IGestureRecognizer,
        impl::require<GestureRecognizer, winrt::Windows::UI::Input::IGestureRecognizer2>
    {
        GestureRecognizer(std::nullptr_t) noexcept {}
        GestureRecognizer(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IGestureRecognizer(ptr, take_ownership_from_abi) {}
        GestureRecognizer();
        GestureRecognizer(GestureRecognizer const&) noexcept = default;
        GestureRecognizer(GestureRecognizer&&) noexcept = default;
        GestureRecognizer& operator=(GestureRecognizer const&) & noexcept = default;
        GestureRecognizer& operator=(GestureRecognizer&&) & noexcept = default;
    };
    struct __declspec(empty_bases) HoldingEventArgs : winrt::Windows::UI::Input::IHoldingEventArgs,
        impl::require<HoldingEventArgs, winrt::Windows::UI::Input::IHoldingEventArgs2>
    {
        HoldingEventArgs(std::nullptr_t) noexcept {}
        HoldingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IHoldingEventArgs(ptr, take_ownership_from_abi) {}
        HoldingEventArgs(HoldingEventArgs const&) noexcept = default;
        HoldingEventArgs(HoldingEventArgs&&) noexcept = default;
        HoldingEventArgs& operator=(HoldingEventArgs const&) & noexcept = default;
        HoldingEventArgs& operator=(HoldingEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) InputActivationListener : winrt::Windows::UI::Input::IInputActivationListener,
        impl::base<InputActivationListener, winrt::Windows::UI::Input::AttachableInputObject>,
        impl::require<InputActivationListener, winrt::Windows::UI::Input::IAttachableInputObject, winrt::Windows::Foundation::IClosable>
    {
        InputActivationListener(std::nullptr_t) noexcept {}
        InputActivationListener(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IInputActivationListener(ptr, take_ownership_from_abi) {}
        InputActivationListener(InputActivationListener const&) noexcept = default;
        InputActivationListener(InputActivationListener&&) noexcept = default;
        InputActivationListener& operator=(InputActivationListener const&) & noexcept = default;
        InputActivationListener& operator=(InputActivationListener&&) & noexcept = default;
    };
    struct __declspec(empty_bases) InputActivationListenerActivationChangedEventArgs : winrt::Windows::UI::Input::IInputActivationListenerActivationChangedEventArgs
    {
        InputActivationListenerActivationChangedEventArgs(std::nullptr_t) noexcept {}
        InputActivationListenerActivationChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IInputActivationListenerActivationChangedEventArgs(ptr, take_ownership_from_abi) {}
        InputActivationListenerActivationChangedEventArgs(InputActivationListenerActivationChangedEventArgs const&) noexcept = default;
        InputActivationListenerActivationChangedEventArgs(InputActivationListenerActivationChangedEventArgs&&) noexcept = default;
        InputActivationListenerActivationChangedEventArgs& operator=(InputActivationListenerActivationChangedEventArgs const&) & noexcept = default;
        InputActivationListenerActivationChangedEventArgs& operator=(InputActivationListenerActivationChangedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) KeyboardDeliveryInterceptor : winrt::Windows::UI::Input::IKeyboardDeliveryInterceptor
    {
        KeyboardDeliveryInterceptor(std::nullptr_t) noexcept {}
        KeyboardDeliveryInterceptor(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IKeyboardDeliveryInterceptor(ptr, take_ownership_from_abi) {}
        KeyboardDeliveryInterceptor(KeyboardDeliveryInterceptor const&) noexcept = default;
        KeyboardDeliveryInterceptor(KeyboardDeliveryInterceptor&&) noexcept = default;
        KeyboardDeliveryInterceptor& operator=(KeyboardDeliveryInterceptor const&) & noexcept = default;
        KeyboardDeliveryInterceptor& operator=(KeyboardDeliveryInterceptor&&) & noexcept = default;
        static auto GetForCurrentView();
    };
    struct __declspec(empty_bases) ManipulationCompletedEventArgs : winrt::Windows::UI::Input::IManipulationCompletedEventArgs,
        impl::require<ManipulationCompletedEventArgs, winrt::Windows::UI::Input::IManipulationCompletedEventArgs2>
    {
        ManipulationCompletedEventArgs(std::nullptr_t) noexcept {}
        ManipulationCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IManipulationCompletedEventArgs(ptr, take_ownership_from_abi) {}
        ManipulationCompletedEventArgs(ManipulationCompletedEventArgs const&) noexcept = default;
        ManipulationCompletedEventArgs(ManipulationCompletedEventArgs&&) noexcept = default;
        ManipulationCompletedEventArgs& operator=(ManipulationCompletedEventArgs const&) & noexcept = default;
        ManipulationCompletedEventArgs& operator=(ManipulationCompletedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ManipulationInertiaStartingEventArgs : winrt::Windows::UI::Input::IManipulationInertiaStartingEventArgs,
        impl::require<ManipulationInertiaStartingEventArgs, winrt::Windows::UI::Input::IManipulationInertiaStartingEventArgs2>
    {
        ManipulationInertiaStartingEventArgs(std::nullptr_t) noexcept {}
        ManipulationInertiaStartingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IManipulationInertiaStartingEventArgs(ptr, take_ownership_from_abi) {}
        ManipulationInertiaStartingEventArgs(ManipulationInertiaStartingEventArgs const&) noexcept = default;
        ManipulationInertiaStartingEventArgs(ManipulationInertiaStartingEventArgs&&) noexcept = default;
        ManipulationInertiaStartingEventArgs& operator=(ManipulationInertiaStartingEventArgs const&) & noexcept = default;
        ManipulationInertiaStartingEventArgs& operator=(ManipulationInertiaStartingEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ManipulationStartedEventArgs : winrt::Windows::UI::Input::IManipulationStartedEventArgs,
        impl::require<ManipulationStartedEventArgs, winrt::Windows::UI::Input::IManipulationStartedEventArgs2>
    {
        ManipulationStartedEventArgs(std::nullptr_t) noexcept {}
        ManipulationStartedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IManipulationStartedEventArgs(ptr, take_ownership_from_abi) {}
        ManipulationStartedEventArgs(ManipulationStartedEventArgs const&) noexcept = default;
        ManipulationStartedEventArgs(ManipulationStartedEventArgs&&) noexcept = default;
        ManipulationStartedEventArgs& operator=(ManipulationStartedEventArgs const&) & noexcept = default;
        ManipulationStartedEventArgs& operator=(ManipulationStartedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ManipulationUpdatedEventArgs : winrt::Windows::UI::Input::IManipulationUpdatedEventArgs,
        impl::require<ManipulationUpdatedEventArgs, winrt::Windows::UI::Input::IManipulationUpdatedEventArgs2>
    {
        ManipulationUpdatedEventArgs(std::nullptr_t) noexcept {}
        ManipulationUpdatedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IManipulationUpdatedEventArgs(ptr, take_ownership_from_abi) {}
        ManipulationUpdatedEventArgs(ManipulationUpdatedEventArgs const&) noexcept = default;
        ManipulationUpdatedEventArgs(ManipulationUpdatedEventArgs&&) noexcept = default;
        ManipulationUpdatedEventArgs& operator=(ManipulationUpdatedEventArgs const&) & noexcept = default;
        ManipulationUpdatedEventArgs& operator=(ManipulationUpdatedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) MouseWheelParameters : winrt::Windows::UI::Input::IMouseWheelParameters
    {
        MouseWheelParameters(std::nullptr_t) noexcept {}
        MouseWheelParameters(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IMouseWheelParameters(ptr, take_ownership_from_abi) {}
        MouseWheelParameters(MouseWheelParameters const&) noexcept = default;
        MouseWheelParameters(MouseWheelParameters&&) noexcept = default;
        MouseWheelParameters& operator=(MouseWheelParameters const&) & noexcept = default;
        MouseWheelParameters& operator=(MouseWheelParameters&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PointerPoint : winrt::Windows::UI::Input::IPointerPoint
    {
        PointerPoint(std::nullptr_t) noexcept {}
        PointerPoint(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IPointerPoint(ptr, take_ownership_from_abi) {}
        PointerPoint(PointerPoint const&) noexcept = default;
        PointerPoint(PointerPoint&&) noexcept = default;
        PointerPoint& operator=(PointerPoint const&) & noexcept = default;
        PointerPoint& operator=(PointerPoint&&) & noexcept = default;
        static auto GetCurrentPoint(uint32_t pointerId);
        static auto GetIntermediatePoints(uint32_t pointerId);
        static auto GetCurrentPoint(uint32_t pointerId, winrt::Windows::UI::Input::IPointerPointTransform const& transform);
        static auto GetIntermediatePoints(uint32_t pointerId, winrt::Windows::UI::Input::IPointerPointTransform const& transform);
    };
    struct __declspec(empty_bases) PointerPointProperties : winrt::Windows::UI::Input::IPointerPointProperties,
        impl::require<PointerPointProperties, winrt::Windows::UI::Input::IPointerPointProperties2>
    {
        PointerPointProperties(std::nullptr_t) noexcept {}
        PointerPointProperties(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IPointerPointProperties(ptr, take_ownership_from_abi) {}
        PointerPointProperties(PointerPointProperties const&) noexcept = default;
        PointerPointProperties(PointerPointProperties&&) noexcept = default;
        PointerPointProperties& operator=(PointerPointProperties const&) & noexcept = default;
        PointerPointProperties& operator=(PointerPointProperties&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PointerVisualizationSettings : winrt::Windows::UI::Input::IPointerVisualizationSettings
    {
        PointerVisualizationSettings(std::nullptr_t) noexcept {}
        PointerVisualizationSettings(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IPointerVisualizationSettings(ptr, take_ownership_from_abi) {}
        PointerVisualizationSettings(PointerVisualizationSettings const&) noexcept = default;
        PointerVisualizationSettings(PointerVisualizationSettings&&) noexcept = default;
        PointerVisualizationSettings& operator=(PointerVisualizationSettings const&) & noexcept = default;
        PointerVisualizationSettings& operator=(PointerVisualizationSettings&&) & noexcept = default;
        static auto GetForCurrentView();
    };
    struct __declspec(empty_bases) RadialController : winrt::Windows::UI::Input::IRadialController,
        impl::require<RadialController, winrt::Windows::UI::Input::IRadialController2>
    {
        RadialController(std::nullptr_t) noexcept {}
        RadialController(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRadialController(ptr, take_ownership_from_abi) {}
        RadialController(RadialController const&) noexcept = default;
        RadialController(RadialController&&) noexcept = default;
        RadialController& operator=(RadialController const&) & noexcept = default;
        RadialController& operator=(RadialController&&) & noexcept = default;
        static auto IsSupported();
        static auto CreateForCurrentView();
    };
    struct __declspec(empty_bases) RadialControllerButtonClickedEventArgs : winrt::Windows::UI::Input::IRadialControllerButtonClickedEventArgs,
        impl::require<RadialControllerButtonClickedEventArgs, winrt::Windows::UI::Input::IRadialControllerButtonClickedEventArgs2>
    {
        RadialControllerButtonClickedEventArgs(std::nullptr_t) noexcept {}
        RadialControllerButtonClickedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRadialControllerButtonClickedEventArgs(ptr, take_ownership_from_abi) {}
        RadialControllerButtonClickedEventArgs(RadialControllerButtonClickedEventArgs const&) noexcept = default;
        RadialControllerButtonClickedEventArgs(RadialControllerButtonClickedEventArgs&&) noexcept = default;
        RadialControllerButtonClickedEventArgs& operator=(RadialControllerButtonClickedEventArgs const&) & noexcept = default;
        RadialControllerButtonClickedEventArgs& operator=(RadialControllerButtonClickedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RadialControllerButtonHoldingEventArgs : winrt::Windows::UI::Input::IRadialControllerButtonHoldingEventArgs
    {
        RadialControllerButtonHoldingEventArgs(std::nullptr_t) noexcept {}
        RadialControllerButtonHoldingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRadialControllerButtonHoldingEventArgs(ptr, take_ownership_from_abi) {}
        RadialControllerButtonHoldingEventArgs(RadialControllerButtonHoldingEventArgs const&) noexcept = default;
        RadialControllerButtonHoldingEventArgs(RadialControllerButtonHoldingEventArgs&&) noexcept = default;
        RadialControllerButtonHoldingEventArgs& operator=(RadialControllerButtonHoldingEventArgs const&) & noexcept = default;
        RadialControllerButtonHoldingEventArgs& operator=(RadialControllerButtonHoldingEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RadialControllerButtonPressedEventArgs : winrt::Windows::UI::Input::IRadialControllerButtonPressedEventArgs
    {
        RadialControllerButtonPressedEventArgs(std::nullptr_t) noexcept {}
        RadialControllerButtonPressedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRadialControllerButtonPressedEventArgs(ptr, take_ownership_from_abi) {}
        RadialControllerButtonPressedEventArgs(RadialControllerButtonPressedEventArgs const&) noexcept = default;
        RadialControllerButtonPressedEventArgs(RadialControllerButtonPressedEventArgs&&) noexcept = default;
        RadialControllerButtonPressedEventArgs& operator=(RadialControllerButtonPressedEventArgs const&) & noexcept = default;
        RadialControllerButtonPressedEventArgs& operator=(RadialControllerButtonPressedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RadialControllerButtonReleasedEventArgs : winrt::Windows::UI::Input::IRadialControllerButtonReleasedEventArgs
    {
        RadialControllerButtonReleasedEventArgs(std::nullptr_t) noexcept {}
        RadialControllerButtonReleasedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRadialControllerButtonReleasedEventArgs(ptr, take_ownership_from_abi) {}
        RadialControllerButtonReleasedEventArgs(RadialControllerButtonReleasedEventArgs const&) noexcept = default;
        RadialControllerButtonReleasedEventArgs(RadialControllerButtonReleasedEventArgs&&) noexcept = default;
        RadialControllerButtonReleasedEventArgs& operator=(RadialControllerButtonReleasedEventArgs const&) & noexcept = default;
        RadialControllerButtonReleasedEventArgs& operator=(RadialControllerButtonReleasedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RadialControllerConfiguration : winrt::Windows::UI::Input::IRadialControllerConfiguration,
        impl::require<RadialControllerConfiguration, winrt::Windows::UI::Input::IRadialControllerConfiguration2>
    {
        RadialControllerConfiguration(std::nullptr_t) noexcept {}
        RadialControllerConfiguration(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRadialControllerConfiguration(ptr, take_ownership_from_abi) {}
        RadialControllerConfiguration(RadialControllerConfiguration const&) noexcept = default;
        RadialControllerConfiguration(RadialControllerConfiguration&&) noexcept = default;
        RadialControllerConfiguration& operator=(RadialControllerConfiguration const&) & noexcept = default;
        RadialControllerConfiguration& operator=(RadialControllerConfiguration&&) & noexcept = default;
        static auto GetForCurrentView();
        static auto AppController(winrt::Windows::UI::Input::RadialController const& value);
        [[nodiscard]] static auto AppController();
        static auto IsAppControllerEnabled(bool value);
        [[nodiscard]] static auto IsAppControllerEnabled();
    };
    struct __declspec(empty_bases) RadialControllerControlAcquiredEventArgs : winrt::Windows::UI::Input::IRadialControllerControlAcquiredEventArgs,
        impl::require<RadialControllerControlAcquiredEventArgs, winrt::Windows::UI::Input::IRadialControllerControlAcquiredEventArgs2>
    {
        RadialControllerControlAcquiredEventArgs(std::nullptr_t) noexcept {}
        RadialControllerControlAcquiredEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRadialControllerControlAcquiredEventArgs(ptr, take_ownership_from_abi) {}
        RadialControllerControlAcquiredEventArgs(RadialControllerControlAcquiredEventArgs const&) noexcept = default;
        RadialControllerControlAcquiredEventArgs(RadialControllerControlAcquiredEventArgs&&) noexcept = default;
        RadialControllerControlAcquiredEventArgs& operator=(RadialControllerControlAcquiredEventArgs const&) & noexcept = default;
        RadialControllerControlAcquiredEventArgs& operator=(RadialControllerControlAcquiredEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RadialControllerMenu : winrt::Windows::UI::Input::IRadialControllerMenu
    {
        RadialControllerMenu(std::nullptr_t) noexcept {}
        RadialControllerMenu(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRadialControllerMenu(ptr, take_ownership_from_abi) {}
        RadialControllerMenu(RadialControllerMenu const&) noexcept = default;
        RadialControllerMenu(RadialControllerMenu&&) noexcept = default;
        RadialControllerMenu& operator=(RadialControllerMenu const&) & noexcept = default;
        RadialControllerMenu& operator=(RadialControllerMenu&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RadialControllerMenuItem : winrt::Windows::UI::Input::IRadialControllerMenuItem
    {
        RadialControllerMenuItem(std::nullptr_t) noexcept {}
        RadialControllerMenuItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRadialControllerMenuItem(ptr, take_ownership_from_abi) {}
        RadialControllerMenuItem(RadialControllerMenuItem const&) noexcept = default;
        RadialControllerMenuItem(RadialControllerMenuItem&&) noexcept = default;
        RadialControllerMenuItem& operator=(RadialControllerMenuItem const&) & noexcept = default;
        RadialControllerMenuItem& operator=(RadialControllerMenuItem&&) & noexcept = default;
        static auto CreateFromIcon(param::hstring const& displayText, winrt::Windows::Storage::Streams::RandomAccessStreamReference const& icon);
        static auto CreateFromKnownIcon(param::hstring const& displayText, winrt::Windows::UI::Input::RadialControllerMenuKnownIcon const& value);
        static auto CreateFromFontGlyph(param::hstring const& displayText, param::hstring const& glyph, param::hstring const& fontFamily);
        static auto CreateFromFontGlyph(param::hstring const& displayText, param::hstring const& glyph, param::hstring const& fontFamily, winrt::Windows::Foundation::Uri const& fontUri);
    };
    struct __declspec(empty_bases) RadialControllerRotationChangedEventArgs : winrt::Windows::UI::Input::IRadialControllerRotationChangedEventArgs,
        impl::require<RadialControllerRotationChangedEventArgs, winrt::Windows::UI::Input::IRadialControllerRotationChangedEventArgs2>
    {
        RadialControllerRotationChangedEventArgs(std::nullptr_t) noexcept {}
        RadialControllerRotationChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRadialControllerRotationChangedEventArgs(ptr, take_ownership_from_abi) {}
        RadialControllerRotationChangedEventArgs(RadialControllerRotationChangedEventArgs const&) noexcept = default;
        RadialControllerRotationChangedEventArgs(RadialControllerRotationChangedEventArgs&&) noexcept = default;
        RadialControllerRotationChangedEventArgs& operator=(RadialControllerRotationChangedEventArgs const&) & noexcept = default;
        RadialControllerRotationChangedEventArgs& operator=(RadialControllerRotationChangedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RadialControllerScreenContact : winrt::Windows::UI::Input::IRadialControllerScreenContact
    {
        RadialControllerScreenContact(std::nullptr_t) noexcept {}
        RadialControllerScreenContact(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRadialControllerScreenContact(ptr, take_ownership_from_abi) {}
        RadialControllerScreenContact(RadialControllerScreenContact const&) noexcept = default;
        RadialControllerScreenContact(RadialControllerScreenContact&&) noexcept = default;
        RadialControllerScreenContact& operator=(RadialControllerScreenContact const&) & noexcept = default;
        RadialControllerScreenContact& operator=(RadialControllerScreenContact&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RadialControllerScreenContactContinuedEventArgs : winrt::Windows::UI::Input::IRadialControllerScreenContactContinuedEventArgs,
        impl::require<RadialControllerScreenContactContinuedEventArgs, winrt::Windows::UI::Input::IRadialControllerScreenContactContinuedEventArgs2>
    {
        RadialControllerScreenContactContinuedEventArgs(std::nullptr_t) noexcept {}
        RadialControllerScreenContactContinuedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRadialControllerScreenContactContinuedEventArgs(ptr, take_ownership_from_abi) {}
        RadialControllerScreenContactContinuedEventArgs(RadialControllerScreenContactContinuedEventArgs const&) noexcept = default;
        RadialControllerScreenContactContinuedEventArgs(RadialControllerScreenContactContinuedEventArgs&&) noexcept = default;
        RadialControllerScreenContactContinuedEventArgs& operator=(RadialControllerScreenContactContinuedEventArgs const&) & noexcept = default;
        RadialControllerScreenContactContinuedEventArgs& operator=(RadialControllerScreenContactContinuedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RadialControllerScreenContactEndedEventArgs : winrt::Windows::UI::Input::IRadialControllerScreenContactEndedEventArgs
    {
        RadialControllerScreenContactEndedEventArgs(std::nullptr_t) noexcept {}
        RadialControllerScreenContactEndedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRadialControllerScreenContactEndedEventArgs(ptr, take_ownership_from_abi) {}
        RadialControllerScreenContactEndedEventArgs(RadialControllerScreenContactEndedEventArgs const&) noexcept = default;
        RadialControllerScreenContactEndedEventArgs(RadialControllerScreenContactEndedEventArgs&&) noexcept = default;
        RadialControllerScreenContactEndedEventArgs& operator=(RadialControllerScreenContactEndedEventArgs const&) & noexcept = default;
        RadialControllerScreenContactEndedEventArgs& operator=(RadialControllerScreenContactEndedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RadialControllerScreenContactStartedEventArgs : winrt::Windows::UI::Input::IRadialControllerScreenContactStartedEventArgs,
        impl::require<RadialControllerScreenContactStartedEventArgs, winrt::Windows::UI::Input::IRadialControllerScreenContactStartedEventArgs2>
    {
        RadialControllerScreenContactStartedEventArgs(std::nullptr_t) noexcept {}
        RadialControllerScreenContactStartedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRadialControllerScreenContactStartedEventArgs(ptr, take_ownership_from_abi) {}
        RadialControllerScreenContactStartedEventArgs(RadialControllerScreenContactStartedEventArgs const&) noexcept = default;
        RadialControllerScreenContactStartedEventArgs(RadialControllerScreenContactStartedEventArgs&&) noexcept = default;
        RadialControllerScreenContactStartedEventArgs& operator=(RadialControllerScreenContactStartedEventArgs const&) & noexcept = default;
        RadialControllerScreenContactStartedEventArgs& operator=(RadialControllerScreenContactStartedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RightTappedEventArgs : winrt::Windows::UI::Input::IRightTappedEventArgs,
        impl::require<RightTappedEventArgs, winrt::Windows::UI::Input::IRightTappedEventArgs2>
    {
        RightTappedEventArgs(std::nullptr_t) noexcept {}
        RightTappedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::IRightTappedEventArgs(ptr, take_ownership_from_abi) {}
        RightTappedEventArgs(RightTappedEventArgs const&) noexcept = default;
        RightTappedEventArgs(RightTappedEventArgs&&) noexcept = default;
        RightTappedEventArgs& operator=(RightTappedEventArgs const&) & noexcept = default;
        RightTappedEventArgs& operator=(RightTappedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SystemButtonEventController : winrt::Windows::UI::Input::ISystemButtonEventController,
        impl::base<SystemButtonEventController, winrt::Windows::UI::Input::AttachableInputObject>,
        impl::require<SystemButtonEventController, winrt::Windows::UI::Input::IAttachableInputObject, winrt::Windows::Foundation::IClosable>
    {
        SystemButtonEventController(std::nullptr_t) noexcept {}
        SystemButtonEventController(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::ISystemButtonEventController(ptr, take_ownership_from_abi) {}
        SystemButtonEventController(SystemButtonEventController const&) noexcept = default;
        SystemButtonEventController(SystemButtonEventController&&) noexcept = default;
        SystemButtonEventController& operator=(SystemButtonEventController const&) & noexcept = default;
        SystemButtonEventController& operator=(SystemButtonEventController&&) & noexcept = default;
        static auto CreateForDispatcherQueue(winrt::Windows::System::DispatcherQueue const& queue);
    };
    struct __declspec(empty_bases) SystemFunctionButtonEventArgs : winrt::Windows::UI::Input::ISystemFunctionButtonEventArgs
    {
        SystemFunctionButtonEventArgs(std::nullptr_t) noexcept {}
        SystemFunctionButtonEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::ISystemFunctionButtonEventArgs(ptr, take_ownership_from_abi) {}
        SystemFunctionButtonEventArgs(SystemFunctionButtonEventArgs const&) noexcept = default;
        SystemFunctionButtonEventArgs(SystemFunctionButtonEventArgs&&) noexcept = default;
        SystemFunctionButtonEventArgs& operator=(SystemFunctionButtonEventArgs const&) & noexcept = default;
        SystemFunctionButtonEventArgs& operator=(SystemFunctionButtonEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SystemFunctionLockChangedEventArgs : winrt::Windows::UI::Input::ISystemFunctionLockChangedEventArgs
    {
        SystemFunctionLockChangedEventArgs(std::nullptr_t) noexcept {}
        SystemFunctionLockChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::ISystemFunctionLockChangedEventArgs(ptr, take_ownership_from_abi) {}
        SystemFunctionLockChangedEventArgs(SystemFunctionLockChangedEventArgs const&) noexcept = default;
        SystemFunctionLockChangedEventArgs(SystemFunctionLockChangedEventArgs&&) noexcept = default;
        SystemFunctionLockChangedEventArgs& operator=(SystemFunctionLockChangedEventArgs const&) & noexcept = default;
        SystemFunctionLockChangedEventArgs& operator=(SystemFunctionLockChangedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SystemFunctionLockIndicatorChangedEventArgs : winrt::Windows::UI::Input::ISystemFunctionLockIndicatorChangedEventArgs
    {
        SystemFunctionLockIndicatorChangedEventArgs(std::nullptr_t) noexcept {}
        SystemFunctionLockIndicatorChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::ISystemFunctionLockIndicatorChangedEventArgs(ptr, take_ownership_from_abi) {}
        SystemFunctionLockIndicatorChangedEventArgs(SystemFunctionLockIndicatorChangedEventArgs const&) noexcept = default;
        SystemFunctionLockIndicatorChangedEventArgs(SystemFunctionLockIndicatorChangedEventArgs&&) noexcept = default;
        SystemFunctionLockIndicatorChangedEventArgs& operator=(SystemFunctionLockIndicatorChangedEventArgs const&) & noexcept = default;
        SystemFunctionLockIndicatorChangedEventArgs& operator=(SystemFunctionLockIndicatorChangedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) TappedEventArgs : winrt::Windows::UI::Input::ITappedEventArgs,
        impl::require<TappedEventArgs, winrt::Windows::UI::Input::ITappedEventArgs2>
    {
        TappedEventArgs(std::nullptr_t) noexcept {}
        TappedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::UI::Input::ITappedEventArgs(ptr, take_ownership_from_abi) {}
        TappedEventArgs(TappedEventArgs const&) noexcept = default;
        TappedEventArgs(TappedEventArgs&&) noexcept = default;
        TappedEventArgs& operator=(TappedEventArgs const&) & noexcept = default;
        TappedEventArgs& operator=(TappedEventArgs&&) & noexcept = default;
    };
}
#endif
