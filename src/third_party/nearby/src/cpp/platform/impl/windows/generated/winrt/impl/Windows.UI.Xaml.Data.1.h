// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_UI_Xaml_Data_1_H
#define WINRT_Windows_UI_Xaml_Data_1_H
#include "winrt/impl/Windows.Foundation.0.h"
#include "winrt/impl/Windows.Foundation.Collections.0.h"
#include "winrt/impl/Windows.UI.Xaml.Data.0.h"
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Data
{
    struct __declspec(empty_bases) IBinding :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBinding>
    {
        IBinding(std::nullptr_t = nullptr) noexcept {}
        IBinding(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBinding(IBinding const&) noexcept = default;
        IBinding(IBinding&&) noexcept = default;
        IBinding& operator=(IBinding const&) & noexcept = default;
        IBinding& operator=(IBinding&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBinding2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBinding2>
    {
        IBinding2(std::nullptr_t = nullptr) noexcept {}
        IBinding2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBinding2(IBinding2 const&) noexcept = default;
        IBinding2(IBinding2&&) noexcept = default;
        IBinding2& operator=(IBinding2 const&) & noexcept = default;
        IBinding2& operator=(IBinding2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBindingBase :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBindingBase>
    {
        IBindingBase(std::nullptr_t = nullptr) noexcept {}
        IBindingBase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBindingBase(IBindingBase const&) noexcept = default;
        IBindingBase(IBindingBase&&) noexcept = default;
        IBindingBase& operator=(IBindingBase const&) & noexcept = default;
        IBindingBase& operator=(IBindingBase&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBindingBaseFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBindingBaseFactory>
    {
        IBindingBaseFactory(std::nullptr_t = nullptr) noexcept {}
        IBindingBaseFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBindingBaseFactory(IBindingBaseFactory const&) noexcept = default;
        IBindingBaseFactory(IBindingBaseFactory&&) noexcept = default;
        IBindingBaseFactory& operator=(IBindingBaseFactory const&) & noexcept = default;
        IBindingBaseFactory& operator=(IBindingBaseFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBindingExpression :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBindingExpression>
    {
        IBindingExpression(std::nullptr_t = nullptr) noexcept {}
        IBindingExpression(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBindingExpression(IBindingExpression const&) noexcept = default;
        IBindingExpression(IBindingExpression&&) noexcept = default;
        IBindingExpression& operator=(IBindingExpression const&) & noexcept = default;
        IBindingExpression& operator=(IBindingExpression&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBindingExpressionBase :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBindingExpressionBase>
    {
        IBindingExpressionBase(std::nullptr_t = nullptr) noexcept {}
        IBindingExpressionBase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBindingExpressionBase(IBindingExpressionBase const&) noexcept = default;
        IBindingExpressionBase(IBindingExpressionBase&&) noexcept = default;
        IBindingExpressionBase& operator=(IBindingExpressionBase const&) & noexcept = default;
        IBindingExpressionBase& operator=(IBindingExpressionBase&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBindingExpressionBaseFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBindingExpressionBaseFactory>
    {
        IBindingExpressionBaseFactory(std::nullptr_t = nullptr) noexcept {}
        IBindingExpressionBaseFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBindingExpressionBaseFactory(IBindingExpressionBaseFactory const&) noexcept = default;
        IBindingExpressionBaseFactory(IBindingExpressionBaseFactory&&) noexcept = default;
        IBindingExpressionBaseFactory& operator=(IBindingExpressionBaseFactory const&) & noexcept = default;
        IBindingExpressionBaseFactory& operator=(IBindingExpressionBaseFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBindingExpressionFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBindingExpressionFactory>
    {
        IBindingExpressionFactory(std::nullptr_t = nullptr) noexcept {}
        IBindingExpressionFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBindingExpressionFactory(IBindingExpressionFactory const&) noexcept = default;
        IBindingExpressionFactory(IBindingExpressionFactory&&) noexcept = default;
        IBindingExpressionFactory& operator=(IBindingExpressionFactory const&) & noexcept = default;
        IBindingExpressionFactory& operator=(IBindingExpressionFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBindingFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBindingFactory>
    {
        IBindingFactory(std::nullptr_t = nullptr) noexcept {}
        IBindingFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBindingFactory(IBindingFactory const&) noexcept = default;
        IBindingFactory(IBindingFactory&&) noexcept = default;
        IBindingFactory& operator=(IBindingFactory const&) & noexcept = default;
        IBindingFactory& operator=(IBindingFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBindingOperations :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBindingOperations>
    {
        IBindingOperations(std::nullptr_t = nullptr) noexcept {}
        IBindingOperations(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBindingOperations(IBindingOperations const&) noexcept = default;
        IBindingOperations(IBindingOperations&&) noexcept = default;
        IBindingOperations& operator=(IBindingOperations const&) & noexcept = default;
        IBindingOperations& operator=(IBindingOperations&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBindingOperationsStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBindingOperationsStatics>
    {
        IBindingOperationsStatics(std::nullptr_t = nullptr) noexcept {}
        IBindingOperationsStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBindingOperationsStatics(IBindingOperationsStatics const&) noexcept = default;
        IBindingOperationsStatics(IBindingOperationsStatics&&) noexcept = default;
        IBindingOperationsStatics& operator=(IBindingOperationsStatics const&) & noexcept = default;
        IBindingOperationsStatics& operator=(IBindingOperationsStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICollectionView :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICollectionView>,
        impl::require<winrt::Windows::UI::Xaml::Data::ICollectionView, winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::IInspectable>, winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Foundation::IInspectable>, winrt::Windows::Foundation::Collections::IObservableVector<winrt::Windows::Foundation::IInspectable>>
    {
        ICollectionView(std::nullptr_t = nullptr) noexcept {}
        ICollectionView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICollectionView(ICollectionView const&) noexcept = default;
        ICollectionView(ICollectionView&&) noexcept = default;
        ICollectionView& operator=(ICollectionView const&) & noexcept = default;
        ICollectionView& operator=(ICollectionView&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICollectionViewFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICollectionViewFactory>
    {
        ICollectionViewFactory(std::nullptr_t = nullptr) noexcept {}
        ICollectionViewFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICollectionViewFactory(ICollectionViewFactory const&) noexcept = default;
        ICollectionViewFactory(ICollectionViewFactory&&) noexcept = default;
        ICollectionViewFactory& operator=(ICollectionViewFactory const&) & noexcept = default;
        ICollectionViewFactory& operator=(ICollectionViewFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICollectionViewGroup :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICollectionViewGroup>
    {
        ICollectionViewGroup(std::nullptr_t = nullptr) noexcept {}
        ICollectionViewGroup(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICollectionViewGroup(ICollectionViewGroup const&) noexcept = default;
        ICollectionViewGroup(ICollectionViewGroup&&) noexcept = default;
        ICollectionViewGroup& operator=(ICollectionViewGroup const&) & noexcept = default;
        ICollectionViewGroup& operator=(ICollectionViewGroup&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICollectionViewSource :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICollectionViewSource>
    {
        ICollectionViewSource(std::nullptr_t = nullptr) noexcept {}
        ICollectionViewSource(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICollectionViewSource(ICollectionViewSource const&) noexcept = default;
        ICollectionViewSource(ICollectionViewSource&&) noexcept = default;
        ICollectionViewSource& operator=(ICollectionViewSource const&) & noexcept = default;
        ICollectionViewSource& operator=(ICollectionViewSource&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICollectionViewSourceStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICollectionViewSourceStatics>
    {
        ICollectionViewSourceStatics(std::nullptr_t = nullptr) noexcept {}
        ICollectionViewSourceStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICollectionViewSourceStatics(ICollectionViewSourceStatics const&) noexcept = default;
        ICollectionViewSourceStatics(ICollectionViewSourceStatics&&) noexcept = default;
        ICollectionViewSourceStatics& operator=(ICollectionViewSourceStatics const&) & noexcept = default;
        ICollectionViewSourceStatics& operator=(ICollectionViewSourceStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICurrentChangingEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICurrentChangingEventArgs>
    {
        ICurrentChangingEventArgs(std::nullptr_t = nullptr) noexcept {}
        ICurrentChangingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICurrentChangingEventArgs(ICurrentChangingEventArgs const&) noexcept = default;
        ICurrentChangingEventArgs(ICurrentChangingEventArgs&&) noexcept = default;
        ICurrentChangingEventArgs& operator=(ICurrentChangingEventArgs const&) & noexcept = default;
        ICurrentChangingEventArgs& operator=(ICurrentChangingEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICurrentChangingEventArgsFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICurrentChangingEventArgsFactory>
    {
        ICurrentChangingEventArgsFactory(std::nullptr_t = nullptr) noexcept {}
        ICurrentChangingEventArgsFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICurrentChangingEventArgsFactory(ICurrentChangingEventArgsFactory const&) noexcept = default;
        ICurrentChangingEventArgsFactory(ICurrentChangingEventArgsFactory&&) noexcept = default;
        ICurrentChangingEventArgsFactory& operator=(ICurrentChangingEventArgsFactory const&) & noexcept = default;
        ICurrentChangingEventArgsFactory& operator=(ICurrentChangingEventArgsFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICustomProperty :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICustomProperty>
    {
        ICustomProperty(std::nullptr_t = nullptr) noexcept {}
        ICustomProperty(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICustomProperty(ICustomProperty const&) noexcept = default;
        ICustomProperty(ICustomProperty&&) noexcept = default;
        ICustomProperty& operator=(ICustomProperty const&) & noexcept = default;
        ICustomProperty& operator=(ICustomProperty&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICustomPropertyProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICustomPropertyProvider>
    {
        ICustomPropertyProvider(std::nullptr_t = nullptr) noexcept {}
        ICustomPropertyProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICustomPropertyProvider(ICustomPropertyProvider const&) noexcept = default;
        ICustomPropertyProvider(ICustomPropertyProvider&&) noexcept = default;
        ICustomPropertyProvider& operator=(ICustomPropertyProvider const&) & noexcept = default;
        ICustomPropertyProvider& operator=(ICustomPropertyProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IItemIndexRange :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IItemIndexRange>
    {
        IItemIndexRange(std::nullptr_t = nullptr) noexcept {}
        IItemIndexRange(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IItemIndexRange(IItemIndexRange const&) noexcept = default;
        IItemIndexRange(IItemIndexRange&&) noexcept = default;
        IItemIndexRange& operator=(IItemIndexRange const&) & noexcept = default;
        IItemIndexRange& operator=(IItemIndexRange&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IItemIndexRangeFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IItemIndexRangeFactory>
    {
        IItemIndexRangeFactory(std::nullptr_t = nullptr) noexcept {}
        IItemIndexRangeFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IItemIndexRangeFactory(IItemIndexRangeFactory const&) noexcept = default;
        IItemIndexRangeFactory(IItemIndexRangeFactory&&) noexcept = default;
        IItemIndexRangeFactory& operator=(IItemIndexRangeFactory const&) & noexcept = default;
        IItemIndexRangeFactory& operator=(IItemIndexRangeFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IItemsRangeInfo :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IItemsRangeInfo>,
        impl::require<winrt::Windows::UI::Xaml::Data::IItemsRangeInfo, winrt::Windows::Foundation::IClosable>
    {
        IItemsRangeInfo(std::nullptr_t = nullptr) noexcept {}
        IItemsRangeInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IItemsRangeInfo(IItemsRangeInfo const&) noexcept = default;
        IItemsRangeInfo(IItemsRangeInfo&&) noexcept = default;
        IItemsRangeInfo& operator=(IItemsRangeInfo const&) & noexcept = default;
        IItemsRangeInfo& operator=(IItemsRangeInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INotifyPropertyChanged :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INotifyPropertyChanged>
    {
        INotifyPropertyChanged(std::nullptr_t = nullptr) noexcept {}
        INotifyPropertyChanged(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INotifyPropertyChanged(INotifyPropertyChanged const&) noexcept = default;
        INotifyPropertyChanged(INotifyPropertyChanged&&) noexcept = default;
        INotifyPropertyChanged& operator=(INotifyPropertyChanged const&) & noexcept = default;
        INotifyPropertyChanged& operator=(INotifyPropertyChanged&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPropertyChangedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPropertyChangedEventArgs>
    {
        IPropertyChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IPropertyChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPropertyChangedEventArgs(IPropertyChangedEventArgs const&) noexcept = default;
        IPropertyChangedEventArgs(IPropertyChangedEventArgs&&) noexcept = default;
        IPropertyChangedEventArgs& operator=(IPropertyChangedEventArgs const&) & noexcept = default;
        IPropertyChangedEventArgs& operator=(IPropertyChangedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPropertyChangedEventArgsFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPropertyChangedEventArgsFactory>
    {
        IPropertyChangedEventArgsFactory(std::nullptr_t = nullptr) noexcept {}
        IPropertyChangedEventArgsFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPropertyChangedEventArgsFactory(IPropertyChangedEventArgsFactory const&) noexcept = default;
        IPropertyChangedEventArgsFactory(IPropertyChangedEventArgsFactory&&) noexcept = default;
        IPropertyChangedEventArgsFactory& operator=(IPropertyChangedEventArgsFactory const&) & noexcept = default;
        IPropertyChangedEventArgsFactory& operator=(IPropertyChangedEventArgsFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IRelativeSource :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRelativeSource>
    {
        IRelativeSource(std::nullptr_t = nullptr) noexcept {}
        IRelativeSource(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IRelativeSource(IRelativeSource const&) noexcept = default;
        IRelativeSource(IRelativeSource&&) noexcept = default;
        IRelativeSource& operator=(IRelativeSource const&) & noexcept = default;
        IRelativeSource& operator=(IRelativeSource&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IRelativeSourceFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRelativeSourceFactory>
    {
        IRelativeSourceFactory(std::nullptr_t = nullptr) noexcept {}
        IRelativeSourceFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IRelativeSourceFactory(IRelativeSourceFactory const&) noexcept = default;
        IRelativeSourceFactory(IRelativeSourceFactory&&) noexcept = default;
        IRelativeSourceFactory& operator=(IRelativeSourceFactory const&) & noexcept = default;
        IRelativeSourceFactory& operator=(IRelativeSourceFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISelectionInfo :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISelectionInfo>
    {
        ISelectionInfo(std::nullptr_t = nullptr) noexcept {}
        ISelectionInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISelectionInfo(ISelectionInfo const&) noexcept = default;
        ISelectionInfo(ISelectionInfo&&) noexcept = default;
        ISelectionInfo& operator=(ISelectionInfo const&) & noexcept = default;
        ISelectionInfo& operator=(ISelectionInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISupportIncrementalLoading :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISupportIncrementalLoading>
    {
        ISupportIncrementalLoading(std::nullptr_t = nullptr) noexcept {}
        ISupportIncrementalLoading(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISupportIncrementalLoading(ISupportIncrementalLoading const&) noexcept = default;
        ISupportIncrementalLoading(ISupportIncrementalLoading&&) noexcept = default;
        ISupportIncrementalLoading& operator=(ISupportIncrementalLoading const&) & noexcept = default;
        ISupportIncrementalLoading& operator=(ISupportIncrementalLoading&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IValueConverter :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IValueConverter>
    {
        IValueConverter(std::nullptr_t = nullptr) noexcept {}
        IValueConverter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IValueConverter(IValueConverter const&) noexcept = default;
        IValueConverter(IValueConverter&&) noexcept = default;
        IValueConverter& operator=(IValueConverter const&) & noexcept = default;
        IValueConverter& operator=(IValueConverter&&) & noexcept = default;
    };
}
#endif
