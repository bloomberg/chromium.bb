// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Security_Credentials_1_H
#define WINRT_Windows_Security_Credentials_1_H
#include "winrt/impl/Windows.Security.Credentials.0.h"
WINRT_EXPORT namespace winrt::Windows::Security::Credentials
{
    struct __declspec(empty_bases) ICredentialFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICredentialFactory>
    {
        ICredentialFactory(std::nullptr_t = nullptr) noexcept {}
        ICredentialFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICredentialFactory(ICredentialFactory const&) noexcept = default;
        ICredentialFactory(ICredentialFactory&&) noexcept = default;
        ICredentialFactory& operator=(ICredentialFactory const&) & noexcept = default;
        ICredentialFactory& operator=(ICredentialFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IKeyCredential :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IKeyCredential>
    {
        IKeyCredential(std::nullptr_t = nullptr) noexcept {}
        IKeyCredential(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IKeyCredential(IKeyCredential const&) noexcept = default;
        IKeyCredential(IKeyCredential&&) noexcept = default;
        IKeyCredential& operator=(IKeyCredential const&) & noexcept = default;
        IKeyCredential& operator=(IKeyCredential&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IKeyCredentialAttestationResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IKeyCredentialAttestationResult>
    {
        IKeyCredentialAttestationResult(std::nullptr_t = nullptr) noexcept {}
        IKeyCredentialAttestationResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IKeyCredentialAttestationResult(IKeyCredentialAttestationResult const&) noexcept = default;
        IKeyCredentialAttestationResult(IKeyCredentialAttestationResult&&) noexcept = default;
        IKeyCredentialAttestationResult& operator=(IKeyCredentialAttestationResult const&) & noexcept = default;
        IKeyCredentialAttestationResult& operator=(IKeyCredentialAttestationResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IKeyCredentialManagerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IKeyCredentialManagerStatics>
    {
        IKeyCredentialManagerStatics(std::nullptr_t = nullptr) noexcept {}
        IKeyCredentialManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IKeyCredentialManagerStatics(IKeyCredentialManagerStatics const&) noexcept = default;
        IKeyCredentialManagerStatics(IKeyCredentialManagerStatics&&) noexcept = default;
        IKeyCredentialManagerStatics& operator=(IKeyCredentialManagerStatics const&) & noexcept = default;
        IKeyCredentialManagerStatics& operator=(IKeyCredentialManagerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IKeyCredentialOperationResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IKeyCredentialOperationResult>
    {
        IKeyCredentialOperationResult(std::nullptr_t = nullptr) noexcept {}
        IKeyCredentialOperationResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IKeyCredentialOperationResult(IKeyCredentialOperationResult const&) noexcept = default;
        IKeyCredentialOperationResult(IKeyCredentialOperationResult&&) noexcept = default;
        IKeyCredentialOperationResult& operator=(IKeyCredentialOperationResult const&) & noexcept = default;
        IKeyCredentialOperationResult& operator=(IKeyCredentialOperationResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IKeyCredentialRetrievalResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IKeyCredentialRetrievalResult>
    {
        IKeyCredentialRetrievalResult(std::nullptr_t = nullptr) noexcept {}
        IKeyCredentialRetrievalResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IKeyCredentialRetrievalResult(IKeyCredentialRetrievalResult const&) noexcept = default;
        IKeyCredentialRetrievalResult(IKeyCredentialRetrievalResult&&) noexcept = default;
        IKeyCredentialRetrievalResult& operator=(IKeyCredentialRetrievalResult const&) & noexcept = default;
        IKeyCredentialRetrievalResult& operator=(IKeyCredentialRetrievalResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPasswordCredential :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPasswordCredential>
    {
        IPasswordCredential(std::nullptr_t = nullptr) noexcept {}
        IPasswordCredential(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPasswordCredential(IPasswordCredential const&) noexcept = default;
        IPasswordCredential(IPasswordCredential&&) noexcept = default;
        IPasswordCredential& operator=(IPasswordCredential const&) & noexcept = default;
        IPasswordCredential& operator=(IPasswordCredential&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPasswordVault :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPasswordVault>
    {
        IPasswordVault(std::nullptr_t = nullptr) noexcept {}
        IPasswordVault(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPasswordVault(IPasswordVault const&) noexcept = default;
        IPasswordVault(IPasswordVault&&) noexcept = default;
        IPasswordVault& operator=(IPasswordVault const&) & noexcept = default;
        IPasswordVault& operator=(IPasswordVault&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebAccount :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebAccount>
    {
        IWebAccount(std::nullptr_t = nullptr) noexcept {}
        IWebAccount(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebAccount(IWebAccount const&) noexcept = default;
        IWebAccount(IWebAccount&&) noexcept = default;
        IWebAccount& operator=(IWebAccount const&) & noexcept = default;
        IWebAccount& operator=(IWebAccount&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebAccount2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebAccount2>,
        impl::require<winrt::Windows::Security::Credentials::IWebAccount2, winrt::Windows::Security::Credentials::IWebAccount>
    {
        IWebAccount2(std::nullptr_t = nullptr) noexcept {}
        IWebAccount2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebAccount2(IWebAccount2 const&) noexcept = default;
        IWebAccount2(IWebAccount2&&) noexcept = default;
        IWebAccount2& operator=(IWebAccount2 const&) & noexcept = default;
        IWebAccount2& operator=(IWebAccount2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebAccountFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebAccountFactory>
    {
        IWebAccountFactory(std::nullptr_t = nullptr) noexcept {}
        IWebAccountFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebAccountFactory(IWebAccountFactory const&) noexcept = default;
        IWebAccountFactory(IWebAccountFactory&&) noexcept = default;
        IWebAccountFactory& operator=(IWebAccountFactory const&) & noexcept = default;
        IWebAccountFactory& operator=(IWebAccountFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebAccountProvider :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebAccountProvider>
    {
        IWebAccountProvider(std::nullptr_t = nullptr) noexcept {}
        IWebAccountProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebAccountProvider(IWebAccountProvider const&) noexcept = default;
        IWebAccountProvider(IWebAccountProvider&&) noexcept = default;
        IWebAccountProvider& operator=(IWebAccountProvider const&) & noexcept = default;
        IWebAccountProvider& operator=(IWebAccountProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebAccountProvider2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebAccountProvider2>,
        impl::require<winrt::Windows::Security::Credentials::IWebAccountProvider2, winrt::Windows::Security::Credentials::IWebAccountProvider>
    {
        IWebAccountProvider2(std::nullptr_t = nullptr) noexcept {}
        IWebAccountProvider2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebAccountProvider2(IWebAccountProvider2 const&) noexcept = default;
        IWebAccountProvider2(IWebAccountProvider2&&) noexcept = default;
        IWebAccountProvider2& operator=(IWebAccountProvider2 const&) & noexcept = default;
        IWebAccountProvider2& operator=(IWebAccountProvider2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebAccountProvider3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebAccountProvider3>,
        impl::require<winrt::Windows::Security::Credentials::IWebAccountProvider3, winrt::Windows::Security::Credentials::IWebAccountProvider, winrt::Windows::Security::Credentials::IWebAccountProvider2>
    {
        IWebAccountProvider3(std::nullptr_t = nullptr) noexcept {}
        IWebAccountProvider3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebAccountProvider3(IWebAccountProvider3 const&) noexcept = default;
        IWebAccountProvider3(IWebAccountProvider3&&) noexcept = default;
        IWebAccountProvider3& operator=(IWebAccountProvider3 const&) & noexcept = default;
        IWebAccountProvider3& operator=(IWebAccountProvider3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebAccountProvider4 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebAccountProvider4>
    {
        IWebAccountProvider4(std::nullptr_t = nullptr) noexcept {}
        IWebAccountProvider4(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebAccountProvider4(IWebAccountProvider4 const&) noexcept = default;
        IWebAccountProvider4(IWebAccountProvider4&&) noexcept = default;
        IWebAccountProvider4& operator=(IWebAccountProvider4 const&) & noexcept = default;
        IWebAccountProvider4& operator=(IWebAccountProvider4&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IWebAccountProviderFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IWebAccountProviderFactory>
    {
        IWebAccountProviderFactory(std::nullptr_t = nullptr) noexcept {}
        IWebAccountProviderFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IWebAccountProviderFactory(IWebAccountProviderFactory const&) noexcept = default;
        IWebAccountProviderFactory(IWebAccountProviderFactory&&) noexcept = default;
        IWebAccountProviderFactory& operator=(IWebAccountProviderFactory const&) & noexcept = default;
        IWebAccountProviderFactory& operator=(IWebAccountProviderFactory&&) & noexcept = default;
    };
}
#endif
