// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_UI_Notifications_1_H
#define WINRT_Windows_UI_Notifications_1_H
#include "winrt/impl/Windows.UI.Notifications.0.h"
WINRT_EXPORT namespace winrt::Windows::UI::Notifications
{
    struct __declspec(empty_bases) IAdaptiveNotificationContent :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAdaptiveNotificationContent>
    {
        IAdaptiveNotificationContent(std::nullptr_t = nullptr) noexcept {}
        IAdaptiveNotificationContent(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAdaptiveNotificationContent(IAdaptiveNotificationContent const&) noexcept = default;
        IAdaptiveNotificationContent(IAdaptiveNotificationContent&&) noexcept = default;
        IAdaptiveNotificationContent& operator=(IAdaptiveNotificationContent const&) & noexcept = default;
        IAdaptiveNotificationContent& operator=(IAdaptiveNotificationContent&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAdaptiveNotificationText :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAdaptiveNotificationText>
    {
        IAdaptiveNotificationText(std::nullptr_t = nullptr) noexcept {}
        IAdaptiveNotificationText(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAdaptiveNotificationText(IAdaptiveNotificationText const&) noexcept = default;
        IAdaptiveNotificationText(IAdaptiveNotificationText&&) noexcept = default;
        IAdaptiveNotificationText& operator=(IAdaptiveNotificationText const&) & noexcept = default;
        IAdaptiveNotificationText& operator=(IAdaptiveNotificationText&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBadgeNotification :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBadgeNotification>
    {
        IBadgeNotification(std::nullptr_t = nullptr) noexcept {}
        IBadgeNotification(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBadgeNotification(IBadgeNotification const&) noexcept = default;
        IBadgeNotification(IBadgeNotification&&) noexcept = default;
        IBadgeNotification& operator=(IBadgeNotification const&) & noexcept = default;
        IBadgeNotification& operator=(IBadgeNotification&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBadgeNotificationFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBadgeNotificationFactory>
    {
        IBadgeNotificationFactory(std::nullptr_t = nullptr) noexcept {}
        IBadgeNotificationFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBadgeNotificationFactory(IBadgeNotificationFactory const&) noexcept = default;
        IBadgeNotificationFactory(IBadgeNotificationFactory&&) noexcept = default;
        IBadgeNotificationFactory& operator=(IBadgeNotificationFactory const&) & noexcept = default;
        IBadgeNotificationFactory& operator=(IBadgeNotificationFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBadgeUpdateManagerForUser :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBadgeUpdateManagerForUser>
    {
        IBadgeUpdateManagerForUser(std::nullptr_t = nullptr) noexcept {}
        IBadgeUpdateManagerForUser(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBadgeUpdateManagerForUser(IBadgeUpdateManagerForUser const&) noexcept = default;
        IBadgeUpdateManagerForUser(IBadgeUpdateManagerForUser&&) noexcept = default;
        IBadgeUpdateManagerForUser& operator=(IBadgeUpdateManagerForUser const&) & noexcept = default;
        IBadgeUpdateManagerForUser& operator=(IBadgeUpdateManagerForUser&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBadgeUpdateManagerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBadgeUpdateManagerStatics>
    {
        IBadgeUpdateManagerStatics(std::nullptr_t = nullptr) noexcept {}
        IBadgeUpdateManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBadgeUpdateManagerStatics(IBadgeUpdateManagerStatics const&) noexcept = default;
        IBadgeUpdateManagerStatics(IBadgeUpdateManagerStatics&&) noexcept = default;
        IBadgeUpdateManagerStatics& operator=(IBadgeUpdateManagerStatics const&) & noexcept = default;
        IBadgeUpdateManagerStatics& operator=(IBadgeUpdateManagerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBadgeUpdateManagerStatics2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBadgeUpdateManagerStatics2>
    {
        IBadgeUpdateManagerStatics2(std::nullptr_t = nullptr) noexcept {}
        IBadgeUpdateManagerStatics2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBadgeUpdateManagerStatics2(IBadgeUpdateManagerStatics2 const&) noexcept = default;
        IBadgeUpdateManagerStatics2(IBadgeUpdateManagerStatics2&&) noexcept = default;
        IBadgeUpdateManagerStatics2& operator=(IBadgeUpdateManagerStatics2 const&) & noexcept = default;
        IBadgeUpdateManagerStatics2& operator=(IBadgeUpdateManagerStatics2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IBadgeUpdater :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IBadgeUpdater>
    {
        IBadgeUpdater(std::nullptr_t = nullptr) noexcept {}
        IBadgeUpdater(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IBadgeUpdater(IBadgeUpdater const&) noexcept = default;
        IBadgeUpdater(IBadgeUpdater&&) noexcept = default;
        IBadgeUpdater& operator=(IBadgeUpdater const&) & noexcept = default;
        IBadgeUpdater& operator=(IBadgeUpdater&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IKnownAdaptiveNotificationHintsStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IKnownAdaptiveNotificationHintsStatics>
    {
        IKnownAdaptiveNotificationHintsStatics(std::nullptr_t = nullptr) noexcept {}
        IKnownAdaptiveNotificationHintsStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IKnownAdaptiveNotificationHintsStatics(IKnownAdaptiveNotificationHintsStatics const&) noexcept = default;
        IKnownAdaptiveNotificationHintsStatics(IKnownAdaptiveNotificationHintsStatics&&) noexcept = default;
        IKnownAdaptiveNotificationHintsStatics& operator=(IKnownAdaptiveNotificationHintsStatics const&) & noexcept = default;
        IKnownAdaptiveNotificationHintsStatics& operator=(IKnownAdaptiveNotificationHintsStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IKnownAdaptiveNotificationTextStylesStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IKnownAdaptiveNotificationTextStylesStatics>
    {
        IKnownAdaptiveNotificationTextStylesStatics(std::nullptr_t = nullptr) noexcept {}
        IKnownAdaptiveNotificationTextStylesStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IKnownAdaptiveNotificationTextStylesStatics(IKnownAdaptiveNotificationTextStylesStatics const&) noexcept = default;
        IKnownAdaptiveNotificationTextStylesStatics(IKnownAdaptiveNotificationTextStylesStatics&&) noexcept = default;
        IKnownAdaptiveNotificationTextStylesStatics& operator=(IKnownAdaptiveNotificationTextStylesStatics const&) & noexcept = default;
        IKnownAdaptiveNotificationTextStylesStatics& operator=(IKnownAdaptiveNotificationTextStylesStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IKnownNotificationBindingsStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IKnownNotificationBindingsStatics>
    {
        IKnownNotificationBindingsStatics(std::nullptr_t = nullptr) noexcept {}
        IKnownNotificationBindingsStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IKnownNotificationBindingsStatics(IKnownNotificationBindingsStatics const&) noexcept = default;
        IKnownNotificationBindingsStatics(IKnownNotificationBindingsStatics&&) noexcept = default;
        IKnownNotificationBindingsStatics& operator=(IKnownNotificationBindingsStatics const&) & noexcept = default;
        IKnownNotificationBindingsStatics& operator=(IKnownNotificationBindingsStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INotification :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INotification>
    {
        INotification(std::nullptr_t = nullptr) noexcept {}
        INotification(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INotification(INotification const&) noexcept = default;
        INotification(INotification&&) noexcept = default;
        INotification& operator=(INotification const&) & noexcept = default;
        INotification& operator=(INotification&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INotificationBinding :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INotificationBinding>
    {
        INotificationBinding(std::nullptr_t = nullptr) noexcept {}
        INotificationBinding(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INotificationBinding(INotificationBinding const&) noexcept = default;
        INotificationBinding(INotificationBinding&&) noexcept = default;
        INotificationBinding& operator=(INotificationBinding const&) & noexcept = default;
        INotificationBinding& operator=(INotificationBinding&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INotificationData :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INotificationData>
    {
        INotificationData(std::nullptr_t = nullptr) noexcept {}
        INotificationData(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INotificationData(INotificationData const&) noexcept = default;
        INotificationData(INotificationData&&) noexcept = default;
        INotificationData& operator=(INotificationData const&) & noexcept = default;
        INotificationData& operator=(INotificationData&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INotificationDataFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INotificationDataFactory>
    {
        INotificationDataFactory(std::nullptr_t = nullptr) noexcept {}
        INotificationDataFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INotificationDataFactory(INotificationDataFactory const&) noexcept = default;
        INotificationDataFactory(INotificationDataFactory&&) noexcept = default;
        INotificationDataFactory& operator=(INotificationDataFactory const&) & noexcept = default;
        INotificationDataFactory& operator=(INotificationDataFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) INotificationVisual :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INotificationVisual>
    {
        INotificationVisual(std::nullptr_t = nullptr) noexcept {}
        INotificationVisual(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        INotificationVisual(INotificationVisual const&) noexcept = default;
        INotificationVisual(INotificationVisual&&) noexcept = default;
        INotificationVisual& operator=(INotificationVisual const&) & noexcept = default;
        INotificationVisual& operator=(INotificationVisual&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IScheduledTileNotification :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IScheduledTileNotification>
    {
        IScheduledTileNotification(std::nullptr_t = nullptr) noexcept {}
        IScheduledTileNotification(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IScheduledTileNotification(IScheduledTileNotification const&) noexcept = default;
        IScheduledTileNotification(IScheduledTileNotification&&) noexcept = default;
        IScheduledTileNotification& operator=(IScheduledTileNotification const&) & noexcept = default;
        IScheduledTileNotification& operator=(IScheduledTileNotification&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IScheduledTileNotificationFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IScheduledTileNotificationFactory>
    {
        IScheduledTileNotificationFactory(std::nullptr_t = nullptr) noexcept {}
        IScheduledTileNotificationFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IScheduledTileNotificationFactory(IScheduledTileNotificationFactory const&) noexcept = default;
        IScheduledTileNotificationFactory(IScheduledTileNotificationFactory&&) noexcept = default;
        IScheduledTileNotificationFactory& operator=(IScheduledTileNotificationFactory const&) & noexcept = default;
        IScheduledTileNotificationFactory& operator=(IScheduledTileNotificationFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IScheduledToastNotification :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IScheduledToastNotification>
    {
        IScheduledToastNotification(std::nullptr_t = nullptr) noexcept {}
        IScheduledToastNotification(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IScheduledToastNotification(IScheduledToastNotification const&) noexcept = default;
        IScheduledToastNotification(IScheduledToastNotification&&) noexcept = default;
        IScheduledToastNotification& operator=(IScheduledToastNotification const&) & noexcept = default;
        IScheduledToastNotification& operator=(IScheduledToastNotification&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IScheduledToastNotification2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IScheduledToastNotification2>
    {
        IScheduledToastNotification2(std::nullptr_t = nullptr) noexcept {}
        IScheduledToastNotification2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IScheduledToastNotification2(IScheduledToastNotification2 const&) noexcept = default;
        IScheduledToastNotification2(IScheduledToastNotification2&&) noexcept = default;
        IScheduledToastNotification2& operator=(IScheduledToastNotification2 const&) & noexcept = default;
        IScheduledToastNotification2& operator=(IScheduledToastNotification2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IScheduledToastNotification3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IScheduledToastNotification3>
    {
        IScheduledToastNotification3(std::nullptr_t = nullptr) noexcept {}
        IScheduledToastNotification3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IScheduledToastNotification3(IScheduledToastNotification3 const&) noexcept = default;
        IScheduledToastNotification3(IScheduledToastNotification3&&) noexcept = default;
        IScheduledToastNotification3& operator=(IScheduledToastNotification3 const&) & noexcept = default;
        IScheduledToastNotification3& operator=(IScheduledToastNotification3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IScheduledToastNotification4 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IScheduledToastNotification4>
    {
        IScheduledToastNotification4(std::nullptr_t = nullptr) noexcept {}
        IScheduledToastNotification4(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IScheduledToastNotification4(IScheduledToastNotification4 const&) noexcept = default;
        IScheduledToastNotification4(IScheduledToastNotification4&&) noexcept = default;
        IScheduledToastNotification4& operator=(IScheduledToastNotification4 const&) & noexcept = default;
        IScheduledToastNotification4& operator=(IScheduledToastNotification4&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IScheduledToastNotificationFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IScheduledToastNotificationFactory>
    {
        IScheduledToastNotificationFactory(std::nullptr_t = nullptr) noexcept {}
        IScheduledToastNotificationFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IScheduledToastNotificationFactory(IScheduledToastNotificationFactory const&) noexcept = default;
        IScheduledToastNotificationFactory(IScheduledToastNotificationFactory&&) noexcept = default;
        IScheduledToastNotificationFactory& operator=(IScheduledToastNotificationFactory const&) & noexcept = default;
        IScheduledToastNotificationFactory& operator=(IScheduledToastNotificationFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IScheduledToastNotificationShowingEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IScheduledToastNotificationShowingEventArgs>
    {
        IScheduledToastNotificationShowingEventArgs(std::nullptr_t = nullptr) noexcept {}
        IScheduledToastNotificationShowingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IScheduledToastNotificationShowingEventArgs(IScheduledToastNotificationShowingEventArgs const&) noexcept = default;
        IScheduledToastNotificationShowingEventArgs(IScheduledToastNotificationShowingEventArgs&&) noexcept = default;
        IScheduledToastNotificationShowingEventArgs& operator=(IScheduledToastNotificationShowingEventArgs const&) & noexcept = default;
        IScheduledToastNotificationShowingEventArgs& operator=(IScheduledToastNotificationShowingEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IShownTileNotification :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IShownTileNotification>
    {
        IShownTileNotification(std::nullptr_t = nullptr) noexcept {}
        IShownTileNotification(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IShownTileNotification(IShownTileNotification const&) noexcept = default;
        IShownTileNotification(IShownTileNotification&&) noexcept = default;
        IShownTileNotification& operator=(IShownTileNotification const&) & noexcept = default;
        IShownTileNotification& operator=(IShownTileNotification&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITileFlyoutNotification :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITileFlyoutNotification>
    {
        ITileFlyoutNotification(std::nullptr_t = nullptr) noexcept {}
        ITileFlyoutNotification(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITileFlyoutNotification(ITileFlyoutNotification const&) noexcept = default;
        ITileFlyoutNotification(ITileFlyoutNotification&&) noexcept = default;
        ITileFlyoutNotification& operator=(ITileFlyoutNotification const&) & noexcept = default;
        ITileFlyoutNotification& operator=(ITileFlyoutNotification&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITileFlyoutNotificationFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITileFlyoutNotificationFactory>
    {
        ITileFlyoutNotificationFactory(std::nullptr_t = nullptr) noexcept {}
        ITileFlyoutNotificationFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITileFlyoutNotificationFactory(ITileFlyoutNotificationFactory const&) noexcept = default;
        ITileFlyoutNotificationFactory(ITileFlyoutNotificationFactory&&) noexcept = default;
        ITileFlyoutNotificationFactory& operator=(ITileFlyoutNotificationFactory const&) & noexcept = default;
        ITileFlyoutNotificationFactory& operator=(ITileFlyoutNotificationFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITileFlyoutUpdateManagerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITileFlyoutUpdateManagerStatics>
    {
        ITileFlyoutUpdateManagerStatics(std::nullptr_t = nullptr) noexcept {}
        ITileFlyoutUpdateManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITileFlyoutUpdateManagerStatics(ITileFlyoutUpdateManagerStatics const&) noexcept = default;
        ITileFlyoutUpdateManagerStatics(ITileFlyoutUpdateManagerStatics&&) noexcept = default;
        ITileFlyoutUpdateManagerStatics& operator=(ITileFlyoutUpdateManagerStatics const&) & noexcept = default;
        ITileFlyoutUpdateManagerStatics& operator=(ITileFlyoutUpdateManagerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITileFlyoutUpdater :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITileFlyoutUpdater>
    {
        ITileFlyoutUpdater(std::nullptr_t = nullptr) noexcept {}
        ITileFlyoutUpdater(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITileFlyoutUpdater(ITileFlyoutUpdater const&) noexcept = default;
        ITileFlyoutUpdater(ITileFlyoutUpdater&&) noexcept = default;
        ITileFlyoutUpdater& operator=(ITileFlyoutUpdater const&) & noexcept = default;
        ITileFlyoutUpdater& operator=(ITileFlyoutUpdater&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITileNotification :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITileNotification>
    {
        ITileNotification(std::nullptr_t = nullptr) noexcept {}
        ITileNotification(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITileNotification(ITileNotification const&) noexcept = default;
        ITileNotification(ITileNotification&&) noexcept = default;
        ITileNotification& operator=(ITileNotification const&) & noexcept = default;
        ITileNotification& operator=(ITileNotification&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITileNotificationFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITileNotificationFactory>
    {
        ITileNotificationFactory(std::nullptr_t = nullptr) noexcept {}
        ITileNotificationFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITileNotificationFactory(ITileNotificationFactory const&) noexcept = default;
        ITileNotificationFactory(ITileNotificationFactory&&) noexcept = default;
        ITileNotificationFactory& operator=(ITileNotificationFactory const&) & noexcept = default;
        ITileNotificationFactory& operator=(ITileNotificationFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITileUpdateManagerForUser :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITileUpdateManagerForUser>
    {
        ITileUpdateManagerForUser(std::nullptr_t = nullptr) noexcept {}
        ITileUpdateManagerForUser(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITileUpdateManagerForUser(ITileUpdateManagerForUser const&) noexcept = default;
        ITileUpdateManagerForUser(ITileUpdateManagerForUser&&) noexcept = default;
        ITileUpdateManagerForUser& operator=(ITileUpdateManagerForUser const&) & noexcept = default;
        ITileUpdateManagerForUser& operator=(ITileUpdateManagerForUser&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITileUpdateManagerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITileUpdateManagerStatics>
    {
        ITileUpdateManagerStatics(std::nullptr_t = nullptr) noexcept {}
        ITileUpdateManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITileUpdateManagerStatics(ITileUpdateManagerStatics const&) noexcept = default;
        ITileUpdateManagerStatics(ITileUpdateManagerStatics&&) noexcept = default;
        ITileUpdateManagerStatics& operator=(ITileUpdateManagerStatics const&) & noexcept = default;
        ITileUpdateManagerStatics& operator=(ITileUpdateManagerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITileUpdateManagerStatics2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITileUpdateManagerStatics2>
    {
        ITileUpdateManagerStatics2(std::nullptr_t = nullptr) noexcept {}
        ITileUpdateManagerStatics2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITileUpdateManagerStatics2(ITileUpdateManagerStatics2 const&) noexcept = default;
        ITileUpdateManagerStatics2(ITileUpdateManagerStatics2&&) noexcept = default;
        ITileUpdateManagerStatics2& operator=(ITileUpdateManagerStatics2 const&) & noexcept = default;
        ITileUpdateManagerStatics2& operator=(ITileUpdateManagerStatics2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITileUpdater :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITileUpdater>
    {
        ITileUpdater(std::nullptr_t = nullptr) noexcept {}
        ITileUpdater(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITileUpdater(ITileUpdater const&) noexcept = default;
        ITileUpdater(ITileUpdater&&) noexcept = default;
        ITileUpdater& operator=(ITileUpdater const&) & noexcept = default;
        ITileUpdater& operator=(ITileUpdater&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ITileUpdater2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITileUpdater2>
    {
        ITileUpdater2(std::nullptr_t = nullptr) noexcept {}
        ITileUpdater2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ITileUpdater2(ITileUpdater2 const&) noexcept = default;
        ITileUpdater2(ITileUpdater2&&) noexcept = default;
        ITileUpdater2& operator=(ITileUpdater2 const&) & noexcept = default;
        ITileUpdater2& operator=(ITileUpdater2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastActivatedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastActivatedEventArgs>
    {
        IToastActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IToastActivatedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastActivatedEventArgs(IToastActivatedEventArgs const&) noexcept = default;
        IToastActivatedEventArgs(IToastActivatedEventArgs&&) noexcept = default;
        IToastActivatedEventArgs& operator=(IToastActivatedEventArgs const&) & noexcept = default;
        IToastActivatedEventArgs& operator=(IToastActivatedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastActivatedEventArgs2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastActivatedEventArgs2>
    {
        IToastActivatedEventArgs2(std::nullptr_t = nullptr) noexcept {}
        IToastActivatedEventArgs2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastActivatedEventArgs2(IToastActivatedEventArgs2 const&) noexcept = default;
        IToastActivatedEventArgs2(IToastActivatedEventArgs2&&) noexcept = default;
        IToastActivatedEventArgs2& operator=(IToastActivatedEventArgs2 const&) & noexcept = default;
        IToastActivatedEventArgs2& operator=(IToastActivatedEventArgs2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastCollection :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastCollection>
    {
        IToastCollection(std::nullptr_t = nullptr) noexcept {}
        IToastCollection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastCollection(IToastCollection const&) noexcept = default;
        IToastCollection(IToastCollection&&) noexcept = default;
        IToastCollection& operator=(IToastCollection const&) & noexcept = default;
        IToastCollection& operator=(IToastCollection&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastCollectionFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastCollectionFactory>
    {
        IToastCollectionFactory(std::nullptr_t = nullptr) noexcept {}
        IToastCollectionFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastCollectionFactory(IToastCollectionFactory const&) noexcept = default;
        IToastCollectionFactory(IToastCollectionFactory&&) noexcept = default;
        IToastCollectionFactory& operator=(IToastCollectionFactory const&) & noexcept = default;
        IToastCollectionFactory& operator=(IToastCollectionFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastCollectionManager :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastCollectionManager>
    {
        IToastCollectionManager(std::nullptr_t = nullptr) noexcept {}
        IToastCollectionManager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastCollectionManager(IToastCollectionManager const&) noexcept = default;
        IToastCollectionManager(IToastCollectionManager&&) noexcept = default;
        IToastCollectionManager& operator=(IToastCollectionManager const&) & noexcept = default;
        IToastCollectionManager& operator=(IToastCollectionManager&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastDismissedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastDismissedEventArgs>
    {
        IToastDismissedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IToastDismissedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastDismissedEventArgs(IToastDismissedEventArgs const&) noexcept = default;
        IToastDismissedEventArgs(IToastDismissedEventArgs&&) noexcept = default;
        IToastDismissedEventArgs& operator=(IToastDismissedEventArgs const&) & noexcept = default;
        IToastDismissedEventArgs& operator=(IToastDismissedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastFailedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastFailedEventArgs>
    {
        IToastFailedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IToastFailedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastFailedEventArgs(IToastFailedEventArgs const&) noexcept = default;
        IToastFailedEventArgs(IToastFailedEventArgs&&) noexcept = default;
        IToastFailedEventArgs& operator=(IToastFailedEventArgs const&) & noexcept = default;
        IToastFailedEventArgs& operator=(IToastFailedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotification :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotification>
    {
        IToastNotification(std::nullptr_t = nullptr) noexcept {}
        IToastNotification(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotification(IToastNotification const&) noexcept = default;
        IToastNotification(IToastNotification&&) noexcept = default;
        IToastNotification& operator=(IToastNotification const&) & noexcept = default;
        IToastNotification& operator=(IToastNotification&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotification2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotification2>
    {
        IToastNotification2(std::nullptr_t = nullptr) noexcept {}
        IToastNotification2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotification2(IToastNotification2 const&) noexcept = default;
        IToastNotification2(IToastNotification2&&) noexcept = default;
        IToastNotification2& operator=(IToastNotification2 const&) & noexcept = default;
        IToastNotification2& operator=(IToastNotification2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotification3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotification3>
    {
        IToastNotification3(std::nullptr_t = nullptr) noexcept {}
        IToastNotification3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotification3(IToastNotification3 const&) noexcept = default;
        IToastNotification3(IToastNotification3&&) noexcept = default;
        IToastNotification3& operator=(IToastNotification3 const&) & noexcept = default;
        IToastNotification3& operator=(IToastNotification3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotification4 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotification4>
    {
        IToastNotification4(std::nullptr_t = nullptr) noexcept {}
        IToastNotification4(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotification4(IToastNotification4 const&) noexcept = default;
        IToastNotification4(IToastNotification4&&) noexcept = default;
        IToastNotification4& operator=(IToastNotification4 const&) & noexcept = default;
        IToastNotification4& operator=(IToastNotification4&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotification6 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotification6>
    {
        IToastNotification6(std::nullptr_t = nullptr) noexcept {}
        IToastNotification6(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotification6(IToastNotification6 const&) noexcept = default;
        IToastNotification6(IToastNotification6&&) noexcept = default;
        IToastNotification6& operator=(IToastNotification6 const&) & noexcept = default;
        IToastNotification6& operator=(IToastNotification6&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotificationActionTriggerDetail :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotificationActionTriggerDetail>
    {
        IToastNotificationActionTriggerDetail(std::nullptr_t = nullptr) noexcept {}
        IToastNotificationActionTriggerDetail(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotificationActionTriggerDetail(IToastNotificationActionTriggerDetail const&) noexcept = default;
        IToastNotificationActionTriggerDetail(IToastNotificationActionTriggerDetail&&) noexcept = default;
        IToastNotificationActionTriggerDetail& operator=(IToastNotificationActionTriggerDetail const&) & noexcept = default;
        IToastNotificationActionTriggerDetail& operator=(IToastNotificationActionTriggerDetail&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotificationFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotificationFactory>
    {
        IToastNotificationFactory(std::nullptr_t = nullptr) noexcept {}
        IToastNotificationFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotificationFactory(IToastNotificationFactory const&) noexcept = default;
        IToastNotificationFactory(IToastNotificationFactory&&) noexcept = default;
        IToastNotificationFactory& operator=(IToastNotificationFactory const&) & noexcept = default;
        IToastNotificationFactory& operator=(IToastNotificationFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotificationHistory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotificationHistory>
    {
        IToastNotificationHistory(std::nullptr_t = nullptr) noexcept {}
        IToastNotificationHistory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotificationHistory(IToastNotificationHistory const&) noexcept = default;
        IToastNotificationHistory(IToastNotificationHistory&&) noexcept = default;
        IToastNotificationHistory& operator=(IToastNotificationHistory const&) & noexcept = default;
        IToastNotificationHistory& operator=(IToastNotificationHistory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotificationHistory2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotificationHistory2>
    {
        IToastNotificationHistory2(std::nullptr_t = nullptr) noexcept {}
        IToastNotificationHistory2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotificationHistory2(IToastNotificationHistory2 const&) noexcept = default;
        IToastNotificationHistory2(IToastNotificationHistory2&&) noexcept = default;
        IToastNotificationHistory2& operator=(IToastNotificationHistory2 const&) & noexcept = default;
        IToastNotificationHistory2& operator=(IToastNotificationHistory2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotificationHistoryChangedTriggerDetail :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotificationHistoryChangedTriggerDetail>
    {
        IToastNotificationHistoryChangedTriggerDetail(std::nullptr_t = nullptr) noexcept {}
        IToastNotificationHistoryChangedTriggerDetail(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotificationHistoryChangedTriggerDetail(IToastNotificationHistoryChangedTriggerDetail const&) noexcept = default;
        IToastNotificationHistoryChangedTriggerDetail(IToastNotificationHistoryChangedTriggerDetail&&) noexcept = default;
        IToastNotificationHistoryChangedTriggerDetail& operator=(IToastNotificationHistoryChangedTriggerDetail const&) & noexcept = default;
        IToastNotificationHistoryChangedTriggerDetail& operator=(IToastNotificationHistoryChangedTriggerDetail&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotificationHistoryChangedTriggerDetail2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotificationHistoryChangedTriggerDetail2>
    {
        IToastNotificationHistoryChangedTriggerDetail2(std::nullptr_t = nullptr) noexcept {}
        IToastNotificationHistoryChangedTriggerDetail2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotificationHistoryChangedTriggerDetail2(IToastNotificationHistoryChangedTriggerDetail2 const&) noexcept = default;
        IToastNotificationHistoryChangedTriggerDetail2(IToastNotificationHistoryChangedTriggerDetail2&&) noexcept = default;
        IToastNotificationHistoryChangedTriggerDetail2& operator=(IToastNotificationHistoryChangedTriggerDetail2 const&) & noexcept = default;
        IToastNotificationHistoryChangedTriggerDetail2& operator=(IToastNotificationHistoryChangedTriggerDetail2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotificationManagerForUser :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotificationManagerForUser>
    {
        IToastNotificationManagerForUser(std::nullptr_t = nullptr) noexcept {}
        IToastNotificationManagerForUser(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotificationManagerForUser(IToastNotificationManagerForUser const&) noexcept = default;
        IToastNotificationManagerForUser(IToastNotificationManagerForUser&&) noexcept = default;
        IToastNotificationManagerForUser& operator=(IToastNotificationManagerForUser const&) & noexcept = default;
        IToastNotificationManagerForUser& operator=(IToastNotificationManagerForUser&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotificationManagerForUser2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotificationManagerForUser2>
    {
        IToastNotificationManagerForUser2(std::nullptr_t = nullptr) noexcept {}
        IToastNotificationManagerForUser2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotificationManagerForUser2(IToastNotificationManagerForUser2 const&) noexcept = default;
        IToastNotificationManagerForUser2(IToastNotificationManagerForUser2&&) noexcept = default;
        IToastNotificationManagerForUser2& operator=(IToastNotificationManagerForUser2 const&) & noexcept = default;
        IToastNotificationManagerForUser2& operator=(IToastNotificationManagerForUser2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotificationManagerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotificationManagerStatics>
    {
        IToastNotificationManagerStatics(std::nullptr_t = nullptr) noexcept {}
        IToastNotificationManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotificationManagerStatics(IToastNotificationManagerStatics const&) noexcept = default;
        IToastNotificationManagerStatics(IToastNotificationManagerStatics&&) noexcept = default;
        IToastNotificationManagerStatics& operator=(IToastNotificationManagerStatics const&) & noexcept = default;
        IToastNotificationManagerStatics& operator=(IToastNotificationManagerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotificationManagerStatics2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotificationManagerStatics2>
    {
        IToastNotificationManagerStatics2(std::nullptr_t = nullptr) noexcept {}
        IToastNotificationManagerStatics2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotificationManagerStatics2(IToastNotificationManagerStatics2 const&) noexcept = default;
        IToastNotificationManagerStatics2(IToastNotificationManagerStatics2&&) noexcept = default;
        IToastNotificationManagerStatics2& operator=(IToastNotificationManagerStatics2 const&) & noexcept = default;
        IToastNotificationManagerStatics2& operator=(IToastNotificationManagerStatics2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotificationManagerStatics4 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotificationManagerStatics4>
    {
        IToastNotificationManagerStatics4(std::nullptr_t = nullptr) noexcept {}
        IToastNotificationManagerStatics4(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotificationManagerStatics4(IToastNotificationManagerStatics4 const&) noexcept = default;
        IToastNotificationManagerStatics4(IToastNotificationManagerStatics4&&) noexcept = default;
        IToastNotificationManagerStatics4& operator=(IToastNotificationManagerStatics4 const&) & noexcept = default;
        IToastNotificationManagerStatics4& operator=(IToastNotificationManagerStatics4&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotificationManagerStatics5 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotificationManagerStatics5>
    {
        IToastNotificationManagerStatics5(std::nullptr_t = nullptr) noexcept {}
        IToastNotificationManagerStatics5(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotificationManagerStatics5(IToastNotificationManagerStatics5 const&) noexcept = default;
        IToastNotificationManagerStatics5(IToastNotificationManagerStatics5&&) noexcept = default;
        IToastNotificationManagerStatics5& operator=(IToastNotificationManagerStatics5 const&) & noexcept = default;
        IToastNotificationManagerStatics5& operator=(IToastNotificationManagerStatics5&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotifier :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotifier>
    {
        IToastNotifier(std::nullptr_t = nullptr) noexcept {}
        IToastNotifier(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotifier(IToastNotifier const&) noexcept = default;
        IToastNotifier(IToastNotifier&&) noexcept = default;
        IToastNotifier& operator=(IToastNotifier const&) & noexcept = default;
        IToastNotifier& operator=(IToastNotifier&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotifier2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotifier2>
    {
        IToastNotifier2(std::nullptr_t = nullptr) noexcept {}
        IToastNotifier2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotifier2(IToastNotifier2 const&) noexcept = default;
        IToastNotifier2(IToastNotifier2&&) noexcept = default;
        IToastNotifier2& operator=(IToastNotifier2 const&) & noexcept = default;
        IToastNotifier2& operator=(IToastNotifier2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IToastNotifier3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IToastNotifier3>
    {
        IToastNotifier3(std::nullptr_t = nullptr) noexcept {}
        IToastNotifier3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IToastNotifier3(IToastNotifier3 const&) noexcept = default;
        IToastNotifier3(IToastNotifier3&&) noexcept = default;
        IToastNotifier3& operator=(IToastNotifier3 const&) & noexcept = default;
        IToastNotifier3& operator=(IToastNotifier3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IUserNotification :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IUserNotification>
    {
        IUserNotification(std::nullptr_t = nullptr) noexcept {}
        IUserNotification(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IUserNotification(IUserNotification const&) noexcept = default;
        IUserNotification(IUserNotification&&) noexcept = default;
        IUserNotification& operator=(IUserNotification const&) & noexcept = default;
        IUserNotification& operator=(IUserNotification&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IUserNotificationChangedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IUserNotificationChangedEventArgs>
    {
        IUserNotificationChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IUserNotificationChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IUserNotificationChangedEventArgs(IUserNotificationChangedEventArgs const&) noexcept = default;
        IUserNotificationChangedEventArgs(IUserNotificationChangedEventArgs&&) noexcept = default;
        IUserNotificationChangedEventArgs& operator=(IUserNotificationChangedEventArgs const&) & noexcept = default;
        IUserNotificationChangedEventArgs& operator=(IUserNotificationChangedEventArgs&&) & noexcept = default;
    };
}
#endif
