// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Media_DialProtocol_2_H
#define WINRT_Windows_Media_DialProtocol_2_H
#include "winrt/impl/Windows.Devices.Enumeration.1.h"
#include "winrt/impl/Windows.Media.DialProtocol.1.h"
WINRT_EXPORT namespace winrt::Windows::Media::DialProtocol
{
    struct __declspec(empty_bases) DialApp : winrt::Windows::Media::DialProtocol::IDialApp
    {
        DialApp(std::nullptr_t) noexcept {}
        DialApp(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::DialProtocol::IDialApp(ptr, take_ownership_from_abi) {}
        DialApp(DialApp const&) noexcept = default;
        DialApp(DialApp&&) noexcept = default;
        DialApp& operator=(DialApp const&) & noexcept = default;
        DialApp& operator=(DialApp&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DialAppStateDetails : winrt::Windows::Media::DialProtocol::IDialAppStateDetails
    {
        DialAppStateDetails(std::nullptr_t) noexcept {}
        DialAppStateDetails(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::DialProtocol::IDialAppStateDetails(ptr, take_ownership_from_abi) {}
        DialAppStateDetails(DialAppStateDetails const&) noexcept = default;
        DialAppStateDetails(DialAppStateDetails&&) noexcept = default;
        DialAppStateDetails& operator=(DialAppStateDetails const&) & noexcept = default;
        DialAppStateDetails& operator=(DialAppStateDetails&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DialDevice : winrt::Windows::Media::DialProtocol::IDialDevice,
        impl::require<DialDevice, winrt::Windows::Media::DialProtocol::IDialDevice2>
    {
        DialDevice(std::nullptr_t) noexcept {}
        DialDevice(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::DialProtocol::IDialDevice(ptr, take_ownership_from_abi) {}
        DialDevice(DialDevice const&) noexcept = default;
        DialDevice(DialDevice&&) noexcept = default;
        DialDevice& operator=(DialDevice const&) & noexcept = default;
        DialDevice& operator=(DialDevice&&) & noexcept = default;
        static auto GetDeviceSelector(param::hstring const& appName);
        static auto FromIdAsync(param::hstring const& value);
        static auto DeviceInfoSupportsDialAsync(winrt::Windows::Devices::Enumeration::DeviceInformation const& device);
    };
    struct __declspec(empty_bases) DialDevicePicker : winrt::Windows::Media::DialProtocol::IDialDevicePicker
    {
        DialDevicePicker(std::nullptr_t) noexcept {}
        DialDevicePicker(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::DialProtocol::IDialDevicePicker(ptr, take_ownership_from_abi) {}
        DialDevicePicker();
        DialDevicePicker(DialDevicePicker const&) noexcept = default;
        DialDevicePicker(DialDevicePicker&&) noexcept = default;
        DialDevicePicker& operator=(DialDevicePicker const&) & noexcept = default;
        DialDevicePicker& operator=(DialDevicePicker&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DialDevicePickerFilter : winrt::Windows::Media::DialProtocol::IDialDevicePickerFilter
    {
        DialDevicePickerFilter(std::nullptr_t) noexcept {}
        DialDevicePickerFilter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::DialProtocol::IDialDevicePickerFilter(ptr, take_ownership_from_abi) {}
        DialDevicePickerFilter(DialDevicePickerFilter const&) noexcept = default;
        DialDevicePickerFilter(DialDevicePickerFilter&&) noexcept = default;
        DialDevicePickerFilter& operator=(DialDevicePickerFilter const&) & noexcept = default;
        DialDevicePickerFilter& operator=(DialDevicePickerFilter&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DialDeviceSelectedEventArgs : winrt::Windows::Media::DialProtocol::IDialDeviceSelectedEventArgs
    {
        DialDeviceSelectedEventArgs(std::nullptr_t) noexcept {}
        DialDeviceSelectedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::DialProtocol::IDialDeviceSelectedEventArgs(ptr, take_ownership_from_abi) {}
        DialDeviceSelectedEventArgs(DialDeviceSelectedEventArgs const&) noexcept = default;
        DialDeviceSelectedEventArgs(DialDeviceSelectedEventArgs&&) noexcept = default;
        DialDeviceSelectedEventArgs& operator=(DialDeviceSelectedEventArgs const&) & noexcept = default;
        DialDeviceSelectedEventArgs& operator=(DialDeviceSelectedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DialDisconnectButtonClickedEventArgs : winrt::Windows::Media::DialProtocol::IDialDisconnectButtonClickedEventArgs
    {
        DialDisconnectButtonClickedEventArgs(std::nullptr_t) noexcept {}
        DialDisconnectButtonClickedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::DialProtocol::IDialDisconnectButtonClickedEventArgs(ptr, take_ownership_from_abi) {}
        DialDisconnectButtonClickedEventArgs(DialDisconnectButtonClickedEventArgs const&) noexcept = default;
        DialDisconnectButtonClickedEventArgs(DialDisconnectButtonClickedEventArgs&&) noexcept = default;
        DialDisconnectButtonClickedEventArgs& operator=(DialDisconnectButtonClickedEventArgs const&) & noexcept = default;
        DialDisconnectButtonClickedEventArgs& operator=(DialDisconnectButtonClickedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DialReceiverApp : winrt::Windows::Media::DialProtocol::IDialReceiverApp,
        impl::require<DialReceiverApp, winrt::Windows::Media::DialProtocol::IDialReceiverApp2>
    {
        DialReceiverApp(std::nullptr_t) noexcept {}
        DialReceiverApp(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Media::DialProtocol::IDialReceiverApp(ptr, take_ownership_from_abi) {}
        DialReceiverApp(DialReceiverApp const&) noexcept = default;
        DialReceiverApp(DialReceiverApp&&) noexcept = default;
        DialReceiverApp& operator=(DialReceiverApp const&) & noexcept = default;
        DialReceiverApp& operator=(DialReceiverApp&&) & noexcept = default;
        [[nodiscard]] static auto Current();
    };
}
#endif
