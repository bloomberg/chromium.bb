// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/mediums/ble_frames.proto

#include "proto/mediums/ble_frames.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace location {
namespace nearby {
namespace mediums {
constexpr SocketControlFrame::SocketControlFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : introduction_(nullptr)
  , disconnection_(nullptr)
  , packet_acknowledgement_(nullptr)
  , type_(0)
{}
struct SocketControlFrameDefaultTypeInternal {
  constexpr SocketControlFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SocketControlFrameDefaultTypeInternal() {}
  union {
    SocketControlFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SocketControlFrameDefaultTypeInternal _SocketControlFrame_default_instance_;
constexpr IntroductionFrame::IntroductionFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_id_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , socket_version_(0)
{}
struct IntroductionFrameDefaultTypeInternal {
  constexpr IntroductionFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntroductionFrameDefaultTypeInternal() {}
  union {
    IntroductionFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntroductionFrameDefaultTypeInternal _IntroductionFrame_default_instance_;
constexpr DisconnectionFrame::DisconnectionFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_id_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DisconnectionFrameDefaultTypeInternal {
  constexpr DisconnectionFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DisconnectionFrameDefaultTypeInternal() {}
  union {
    DisconnectionFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DisconnectionFrameDefaultTypeInternal _DisconnectionFrame_default_instance_;
constexpr PacketAcknowledgementFrame::PacketAcknowledgementFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_id_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , received_size_(0){}
struct PacketAcknowledgementFrameDefaultTypeInternal {
  constexpr PacketAcknowledgementFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketAcknowledgementFrameDefaultTypeInternal() {}
  union {
    PacketAcknowledgementFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketAcknowledgementFrameDefaultTypeInternal _PacketAcknowledgementFrame_default_instance_;
}  // namespace mediums
}  // namespace nearby
}  // namespace location
namespace location {
namespace nearby {
namespace mediums {
bool SocketControlFrame_ControlFrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SocketControlFrame_ControlFrameType_strings[4] = {};

static const char SocketControlFrame_ControlFrameType_names[] =
  "DISCONNECTION"
  "INTRODUCTION"
  "PACKET_ACKNOWLEDGEMENT"
  "UNKNOWN_CONTROL_FRAME_TYPE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SocketControlFrame_ControlFrameType_entries[] = {
  { {SocketControlFrame_ControlFrameType_names + 0, 13}, 2 },
  { {SocketControlFrame_ControlFrameType_names + 13, 12}, 1 },
  { {SocketControlFrame_ControlFrameType_names + 25, 22}, 3 },
  { {SocketControlFrame_ControlFrameType_names + 47, 26}, 0 },
};

static const int SocketControlFrame_ControlFrameType_entries_by_number[] = {
  3, // 0 -> UNKNOWN_CONTROL_FRAME_TYPE
  1, // 1 -> INTRODUCTION
  0, // 2 -> DISCONNECTION
  2, // 3 -> PACKET_ACKNOWLEDGEMENT
};

const std::string& SocketControlFrame_ControlFrameType_Name(
    SocketControlFrame_ControlFrameType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SocketControlFrame_ControlFrameType_entries,
          SocketControlFrame_ControlFrameType_entries_by_number,
          4, SocketControlFrame_ControlFrameType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SocketControlFrame_ControlFrameType_entries,
      SocketControlFrame_ControlFrameType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SocketControlFrame_ControlFrameType_strings[idx].get();
}
bool SocketControlFrame_ControlFrameType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SocketControlFrame_ControlFrameType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SocketControlFrame_ControlFrameType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<SocketControlFrame_ControlFrameType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SocketControlFrame_ControlFrameType SocketControlFrame::UNKNOWN_CONTROL_FRAME_TYPE;
constexpr SocketControlFrame_ControlFrameType SocketControlFrame::INTRODUCTION;
constexpr SocketControlFrame_ControlFrameType SocketControlFrame::DISCONNECTION;
constexpr SocketControlFrame_ControlFrameType SocketControlFrame::PACKET_ACKNOWLEDGEMENT;
constexpr SocketControlFrame_ControlFrameType SocketControlFrame::ControlFrameType_MIN;
constexpr SocketControlFrame_ControlFrameType SocketControlFrame::ControlFrameType_MAX;
constexpr int SocketControlFrame::ControlFrameType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool SocketVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SocketVersion_strings[3] = {};

static const char SocketVersion_names[] =
  "UNKNOWN_SOCKET_VERSION"
  "V1"
  "V2";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SocketVersion_entries[] = {
  { {SocketVersion_names + 0, 22}, 0 },
  { {SocketVersion_names + 22, 2}, 1 },
  { {SocketVersion_names + 24, 2}, 2 },
};

static const int SocketVersion_entries_by_number[] = {
  0, // 0 -> UNKNOWN_SOCKET_VERSION
  1, // 1 -> V1
  2, // 2 -> V2
};

const std::string& SocketVersion_Name(
    SocketVersion value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SocketVersion_entries,
          SocketVersion_entries_by_number,
          3, SocketVersion_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SocketVersion_entries,
      SocketVersion_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SocketVersion_strings[idx].get();
}
bool SocketVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SocketVersion* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SocketVersion_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SocketVersion>(int_value);
  }
  return success;
}

// ===================================================================

class SocketControlFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<SocketControlFrame>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::location::nearby::mediums::IntroductionFrame& introduction(const SocketControlFrame* msg);
  static void set_has_introduction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::location::nearby::mediums::DisconnectionFrame& disconnection(const SocketControlFrame* msg);
  static void set_has_disconnection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::location::nearby::mediums::PacketAcknowledgementFrame& packet_acknowledgement(const SocketControlFrame* msg);
  static void set_has_packet_acknowledgement(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::location::nearby::mediums::IntroductionFrame&
SocketControlFrame::_Internal::introduction(const SocketControlFrame* msg) {
  return *msg->introduction_;
}
const ::location::nearby::mediums::DisconnectionFrame&
SocketControlFrame::_Internal::disconnection(const SocketControlFrame* msg) {
  return *msg->disconnection_;
}
const ::location::nearby::mediums::PacketAcknowledgementFrame&
SocketControlFrame::_Internal::packet_acknowledgement(const SocketControlFrame* msg) {
  return *msg->packet_acknowledgement_;
}
SocketControlFrame::SocketControlFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:location.nearby.mediums.SocketControlFrame)
}
SocketControlFrame::SocketControlFrame(const SocketControlFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_introduction()) {
    introduction_ = new ::location::nearby::mediums::IntroductionFrame(*from.introduction_);
  } else {
    introduction_ = nullptr;
  }
  if (from._internal_has_disconnection()) {
    disconnection_ = new ::location::nearby::mediums::DisconnectionFrame(*from.disconnection_);
  } else {
    disconnection_ = nullptr;
  }
  if (from._internal_has_packet_acknowledgement()) {
    packet_acknowledgement_ = new ::location::nearby::mediums::PacketAcknowledgementFrame(*from.packet_acknowledgement_);
  } else {
    packet_acknowledgement_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:location.nearby.mediums.SocketControlFrame)
}

inline void SocketControlFrame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&introduction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&introduction_)) + sizeof(type_));
}

SocketControlFrame::~SocketControlFrame() {
  // @@protoc_insertion_point(destructor:location.nearby.mediums.SocketControlFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void SocketControlFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete introduction_;
  if (this != internal_default_instance()) delete disconnection_;
  if (this != internal_default_instance()) delete packet_acknowledgement_;
}

void SocketControlFrame::ArenaDtor(void* object) {
  SocketControlFrame* _this = reinterpret_cast< SocketControlFrame* >(object);
  (void)_this;
}
void SocketControlFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SocketControlFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SocketControlFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:location.nearby.mediums.SocketControlFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(introduction_ != nullptr);
      introduction_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(disconnection_ != nullptr);
      disconnection_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(packet_acknowledgement_ != nullptr);
      packet_acknowledgement_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SocketControlFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.mediums.SocketControlFrame.ControlFrameType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::mediums::SocketControlFrame_ControlFrameType_IsValid(val))) {
            _internal_set_type(static_cast<::location::nearby::mediums::SocketControlFrame_ControlFrameType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.mediums.IntroductionFrame introduction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_introduction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.mediums.DisconnectionFrame disconnection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_disconnection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.mediums.PacketAcknowledgementFrame packet_acknowledgement = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_acknowledgement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SocketControlFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.nearby.mediums.SocketControlFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .location.nearby.mediums.SocketControlFrame.ControlFrameType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .location.nearby.mediums.IntroductionFrame introduction = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::introduction(this), target, stream);
  }

  // optional .location.nearby.mediums.DisconnectionFrame disconnection = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::disconnection(this), target, stream);
  }

  // optional .location.nearby.mediums.PacketAcknowledgementFrame packet_acknowledgement = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::packet_acknowledgement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.nearby.mediums.SocketControlFrame)
  return target;
}

size_t SocketControlFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.nearby.mediums.SocketControlFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .location.nearby.mediums.IntroductionFrame introduction = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *introduction_);
    }

    // optional .location.nearby.mediums.DisconnectionFrame disconnection = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disconnection_);
    }

    // optional .location.nearby.mediums.PacketAcknowledgementFrame packet_acknowledgement = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_acknowledgement_);
    }

    // optional .location.nearby.mediums.SocketControlFrame.ControlFrameType type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketControlFrame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SocketControlFrame*>(
      &from));
}

void SocketControlFrame::MergeFrom(const SocketControlFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:location.nearby.mediums.SocketControlFrame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_introduction()->::location::nearby::mediums::IntroductionFrame::MergeFrom(from._internal_introduction());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_disconnection()->::location::nearby::mediums::DisconnectionFrame::MergeFrom(from._internal_disconnection());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_packet_acknowledgement()->::location::nearby::mediums::PacketAcknowledgementFrame::MergeFrom(from._internal_packet_acknowledgement());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SocketControlFrame::CopyFrom(const SocketControlFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.nearby.mediums.SocketControlFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketControlFrame::IsInitialized() const {
  return true;
}

void SocketControlFrame::InternalSwap(SocketControlFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SocketControlFrame, type_)
      + sizeof(SocketControlFrame::type_)
      - PROTOBUF_FIELD_OFFSET(SocketControlFrame, introduction_)>(
          reinterpret_cast<char*>(&introduction_),
          reinterpret_cast<char*>(&other->introduction_));
}

std::string SocketControlFrame::GetTypeName() const {
  return "location.nearby.mediums.SocketControlFrame";
}


// ===================================================================

class IntroductionFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<IntroductionFrame>()._has_bits_);
  static void set_has_service_id_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_socket_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IntroductionFrame::IntroductionFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:location.nearby.mediums.IntroductionFrame)
}
IntroductionFrame::IntroductionFrame(const IntroductionFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  service_id_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_id_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_service_id_hash()) {
    service_id_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_id_hash(), 
      GetArenaForAllocation());
  }
  socket_version_ = from.socket_version_;
  // @@protoc_insertion_point(copy_constructor:location.nearby.mediums.IntroductionFrame)
}

inline void IntroductionFrame::SharedCtor() {
service_id_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_id_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
socket_version_ = 0;
}

IntroductionFrame::~IntroductionFrame() {
  // @@protoc_insertion_point(destructor:location.nearby.mediums.IntroductionFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IntroductionFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  service_id_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IntroductionFrame::ArenaDtor(void* object) {
  IntroductionFrame* _this = reinterpret_cast< IntroductionFrame* >(object);
  (void)_this;
}
void IntroductionFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntroductionFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntroductionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:location.nearby.mediums.IntroductionFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    service_id_hash_.ClearNonDefaultToEmpty();
  }
  socket_version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IntroductionFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes service_id_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_id_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .location.nearby.mediums.SocketVersion socket_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::mediums::SocketVersion_IsValid(val))) {
            _internal_set_socket_version(static_cast<::location::nearby::mediums::SocketVersion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntroductionFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.nearby.mediums.IntroductionFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes service_id_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_service_id_hash(), target);
  }

  // optional .location.nearby.mediums.SocketVersion socket_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_socket_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.nearby.mediums.IntroductionFrame)
  return target;
}

size_t IntroductionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.nearby.mediums.IntroductionFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes service_id_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_service_id_hash());
    }

    // optional .location.nearby.mediums.SocketVersion socket_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_socket_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntroductionFrame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IntroductionFrame*>(
      &from));
}

void IntroductionFrame::MergeFrom(const IntroductionFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:location.nearby.mediums.IntroductionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_service_id_hash(from._internal_service_id_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      socket_version_ = from.socket_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IntroductionFrame::CopyFrom(const IntroductionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.nearby.mediums.IntroductionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntroductionFrame::IsInitialized() const {
  return true;
}

void IntroductionFrame::InternalSwap(IntroductionFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &service_id_hash_, lhs_arena,
      &other->service_id_hash_, rhs_arena
  );
  swap(socket_version_, other->socket_version_);
}

std::string IntroductionFrame::GetTypeName() const {
  return "location.nearby.mediums.IntroductionFrame";
}


// ===================================================================

class DisconnectionFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<DisconnectionFrame>()._has_bits_);
  static void set_has_service_id_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisconnectionFrame::DisconnectionFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:location.nearby.mediums.DisconnectionFrame)
}
DisconnectionFrame::DisconnectionFrame(const DisconnectionFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  service_id_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_id_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_service_id_hash()) {
    service_id_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_id_hash(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:location.nearby.mediums.DisconnectionFrame)
}

inline void DisconnectionFrame::SharedCtor() {
service_id_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_id_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DisconnectionFrame::~DisconnectionFrame() {
  // @@protoc_insertion_point(destructor:location.nearby.mediums.DisconnectionFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void DisconnectionFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  service_id_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisconnectionFrame::ArenaDtor(void* object) {
  DisconnectionFrame* _this = reinterpret_cast< DisconnectionFrame* >(object);
  (void)_this;
}
void DisconnectionFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisconnectionFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DisconnectionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:location.nearby.mediums.DisconnectionFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    service_id_hash_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisconnectionFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes service_id_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_id_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisconnectionFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.nearby.mediums.DisconnectionFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes service_id_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_service_id_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.nearby.mediums.DisconnectionFrame)
  return target;
}

size_t DisconnectionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.nearby.mediums.DisconnectionFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes service_id_hash = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_service_id_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisconnectionFrame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisconnectionFrame*>(
      &from));
}

void DisconnectionFrame::MergeFrom(const DisconnectionFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:location.nearby.mediums.DisconnectionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_service_id_hash()) {
    _internal_set_service_id_hash(from._internal_service_id_hash());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisconnectionFrame::CopyFrom(const DisconnectionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.nearby.mediums.DisconnectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectionFrame::IsInitialized() const {
  return true;
}

void DisconnectionFrame::InternalSwap(DisconnectionFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &service_id_hash_, lhs_arena,
      &other->service_id_hash_, rhs_arena
  );
}

std::string DisconnectionFrame::GetTypeName() const {
  return "location.nearby.mediums.DisconnectionFrame";
}


// ===================================================================

class PacketAcknowledgementFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<PacketAcknowledgementFrame>()._has_bits_);
  static void set_has_service_id_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_received_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PacketAcknowledgementFrame::PacketAcknowledgementFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:location.nearby.mediums.PacketAcknowledgementFrame)
}
PacketAcknowledgementFrame::PacketAcknowledgementFrame(const PacketAcknowledgementFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  service_id_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_id_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_service_id_hash()) {
    service_id_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_id_hash(), 
      GetArenaForAllocation());
  }
  received_size_ = from.received_size_;
  // @@protoc_insertion_point(copy_constructor:location.nearby.mediums.PacketAcknowledgementFrame)
}

inline void PacketAcknowledgementFrame::SharedCtor() {
service_id_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_id_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
received_size_ = 0;
}

PacketAcknowledgementFrame::~PacketAcknowledgementFrame() {
  // @@protoc_insertion_point(destructor:location.nearby.mediums.PacketAcknowledgementFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void PacketAcknowledgementFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  service_id_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PacketAcknowledgementFrame::ArenaDtor(void* object) {
  PacketAcknowledgementFrame* _this = reinterpret_cast< PacketAcknowledgementFrame* >(object);
  (void)_this;
}
void PacketAcknowledgementFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketAcknowledgementFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketAcknowledgementFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:location.nearby.mediums.PacketAcknowledgementFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    service_id_hash_.ClearNonDefaultToEmpty();
  }
  received_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PacketAcknowledgementFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes service_id_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_id_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 received_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_received_size(&has_bits);
          received_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PacketAcknowledgementFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.nearby.mediums.PacketAcknowledgementFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes service_id_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_service_id_hash(), target);
  }

  // optional int32 received_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_received_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.nearby.mediums.PacketAcknowledgementFrame)
  return target;
}

size_t PacketAcknowledgementFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.nearby.mediums.PacketAcknowledgementFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes service_id_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_service_id_hash());
    }

    // optional int32 received_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_received_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketAcknowledgementFrame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PacketAcknowledgementFrame*>(
      &from));
}

void PacketAcknowledgementFrame::MergeFrom(const PacketAcknowledgementFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:location.nearby.mediums.PacketAcknowledgementFrame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_service_id_hash(from._internal_service_id_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      received_size_ = from.received_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PacketAcknowledgementFrame::CopyFrom(const PacketAcknowledgementFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.nearby.mediums.PacketAcknowledgementFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketAcknowledgementFrame::IsInitialized() const {
  return true;
}

void PacketAcknowledgementFrame::InternalSwap(PacketAcknowledgementFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &service_id_hash_, lhs_arena,
      &other->service_id_hash_, rhs_arena
  );
  swap(received_size_, other->received_size_);
}

std::string PacketAcknowledgementFrame::GetTypeName() const {
  return "location.nearby.mediums.PacketAcknowledgementFrame";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mediums
}  // namespace nearby
}  // namespace location
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::location::nearby::mediums::SocketControlFrame* Arena::CreateMaybeMessage< ::location::nearby::mediums::SocketControlFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::nearby::mediums::SocketControlFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::location::nearby::mediums::IntroductionFrame* Arena::CreateMaybeMessage< ::location::nearby::mediums::IntroductionFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::nearby::mediums::IntroductionFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::location::nearby::mediums::DisconnectionFrame* Arena::CreateMaybeMessage< ::location::nearby::mediums::DisconnectionFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::nearby::mediums::DisconnectionFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::location::nearby::mediums::PacketAcknowledgementFrame* Arena::CreateMaybeMessage< ::location::nearby::mediums::PacketAcknowledgementFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::nearby::mediums::PacketAcknowledgementFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
