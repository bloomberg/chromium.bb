// These targets are appended to the autogenerated Android.bp by tools/gen_android_bp.
cc_library_static {
  name: "perfetto_cts_deps",
  srcs: [
    "src/base/test/test_task_runner.cc",
    "src/traced/probes/ftrace/cpu_reader.cc",
    "src/traced/probes/ftrace/event_info.cc",
    "src/traced/probes/ftrace/format_parser.cc",
    "src/traced/probes/ftrace/ftrace_controller.cc",
    "src/traced/probes/ftrace/ftrace_procfs.cc",
    "src/traced/probes/ftrace/proto_translation_table.cc",
    "src/traced/probes/probes_producer.cc",
    "test/end_to_end_integrationtest.cc",
    "test/fake_producer.cc",
    "test/task_runner_thread.cc",
    "test/task_runner_thread_delegates.cc",
    "test/test_helper.cc",
  ],
  shared_libs: [
    "libprotobuf-cpp-lite",
  ],
  static_libs: [
    "libgmock",
    "libgtest",
    "perfetto_src_tracing_ipc",
    "perfetto_trace_protos",
  ],
  defaults: [
    "perfetto_defaults",
  ],
}

cc_library_static {
  name: "perfetto_cts_jni_deps",
  srcs: [
    "src/base/test/test_task_runner.cc",
    "test/fake_producer.cc",
    "test/task_runner_thread_delegates.cc",
  ],
  shared_libs: [
    "libprotobuf-cpp-lite",
  ],
  static_libs: [
    "libgtest",
    "perfetto_src_tracing_ipc",
  ],
  defaults: [
    "perfetto_defaults",
  ],
}

java_library_host {
  name: "perfetto_config-full",
  proto: {
      type: "full",
  },
  srcs: [
    "protos/perfetto/config/perfetto_config.proto",
  ],
}

// This sample target shows how to use the perfetto client API from within the
// Android tree.
cc_binary {
  name: "libperfetto_client_example",
  srcs: [
    "test/client_api_example.cc",
  ],
  static_libs: [
    "libperfetto_client_experimental",
    "perfetto_src_tracing_ipc",
    "perfetto_trace_protos",
  ],
  shared_libs: [
    "libprotobuf-cpp-lite",
    "liblog",
  ],
  cflags: [
    "-DGOOGLE_PROTOBUF_NO_RTTI",
    "-DGOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
  ],
  defaults: [
    "perfetto_defaults",
  ],
}
