/*
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";
option optimize_for = LITE_RUNTIME;

import "perfetto/trace/track_event/debug_annotation.proto";
import "perfetto/trace/track_event/task_execution.proto";

package perfetto.protos;

// Trace events emitted by client instrumentation library (TRACE_EVENT macros),
// which describe activity on a track, such as a thread, task sequence, or
// asynchronous track.
//
// This message is optimized for writing and makes heavy use of data interning
// and delta encoding (e.g. of timestamps) to reduce data repetition and encoded
// data size.
//
// A TrackEvent exists in the context of its packet sequence (TracePackets
// emitted by the same producer + writer) and refers to data in preceding
// TracePackets emitted on the same sequence, both directly and indirectly. For
// example, interned data entries are emitted as part of a TracePacket and
// directly referred to from TrackEvents by their interning IDs. Attributes
// shared by all events on the same sequence (e.g. their thread and process
// association) are emitted as part of ProcessDescriptor and ThreadDescriptor
// messages in separate TracePackets instead.
//
// Next reserved id: 7 (up to 15).
// Next id: 20.
message TrackEvent {
  // Timestamp in microseconds (usually CLOCK_MONOTONIC).
  oneof timestamp {
    // Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
    // calculate the absolute timestamp value, sum up all delta values of the
    // preceding TrackEvents since the last ThreadDescriptor and add the sum to
    // the |reference_timestamp| in ThreadDescriptor. This value should always
    // be positive.
    int64 timestamp_delta_us = 1;
    // Absolute value (e.g. a manually specified timestamp in the macro).
    // This is a one-off value that does not affect delta timestamp computation
    // in subsequent TrackEvents.
    int64 timestamp_absolute_us = 16;
  }

  // CPU time for the current thread (e.g., CLOCK_THREAD_CPUTIME_ID) in
  // microseconds.
  oneof thread_time {
    // Same encoding as |timestamp| fields above.
    int64 thread_time_delta_us = 2;
    // TODO(eseckler): Consider removing absolute thread time support. It's
    // currently required to support writing PHASE_COMPLETE events out-of-order,
    // but shouldn't be required anymore when we split them into begin/end.
    int64 thread_time_absolute_us = 17;
  }

  // We intend to add a binary symbol version of this in the future.
  repeated uint32 category_iids = 3;  // interned EventCategoryName.

  // TODO(eseckler): May also want a debug_name for untyped debug-only events.

  // Unstable key/value annotations shown in the trace viewer but not intended
  // for metrics use.
  repeated DebugAnnotation debug_annotations = 4;

  // Typed event arguments:
  optional TaskExecution task_execution = 5;
  // TODO(eseckler): New argument types go here :)

  // Apart from {category, time, thread time, tid, pid}, other legacy trace
  // event attributes are initially simply proxied for conversion to a JSON
  // trace. We intend to gradually transition these attributes to similar native
  // features in TrackEvent (e.g. async + flow events), or deprecate them
  // without replacement where transition is unsuitable.
  //
  // Next reserved id: 15 (up to 16).
  // Next id: 20.
  message LegacyEvent {
    optional uint32 name_iid = 1;  // interned LegacyEventName.
    optional int32 phase = 2;
    optional int64 duration_us = 3;
    optional int64 thread_duration_us = 4;

    reserved 5;  // used to be |flags|.

    oneof id {
      uint64 unscoped_id = 6;
      uint64 local_id = 10;
      uint64 global_id = 11;
    }
    // Additional optional scope for |id|.
    optional string id_scope = 7;

    // Consider the thread timestamps for async BEGIN/END event pairs as valid.
    optional bool use_async_tts = 9;

    // Idenfifies a flow. Flow events with the same bind_id are connected.
    optional uint64 bind_id = 8;
    // Use the enclosing slice as binding point for a flow end event instead of
    // the next slice. Flow start/step events always bind to the enclosing
    // slice.
    optional bool bind_to_enclosing = 12;

    enum FlowDirection {
      FLOW_UNSPECIFIED = 0;
      FLOW_IN = 1;
      FLOW_OUT = 2;
      FLOW_INOUT = 3;
    }
    optional FlowDirection flow_direction = 13;

    enum InstantEventScope {
      SCOPE_UNSPECIFIED = 0;
      SCOPE_GLOBAL = 1;
      SCOPE_PROCESS = 2;
      SCOPE_THREAD = 3;
    }
    optional InstantEventScope instant_event_scope = 14;

    // Override the pid/tid if the writer needs to emit events on behalf of
    // another process/thread. This should be the exception. Normally, the
    // pid+tid from ThreadDescriptor is used.
    optional int32 pid_override = 18;
    optional int32 tid_override = 19;
  }

  optional LegacyEvent legacy_event = 6;
}

// --------------------
// Interned data types:
// --------------------

message EventCategory {
  optional uint32 iid = 1;
  optional string name = 2;
}

message LegacyEventName {
  optional uint32 iid = 1;
  optional string name = 2;
}
