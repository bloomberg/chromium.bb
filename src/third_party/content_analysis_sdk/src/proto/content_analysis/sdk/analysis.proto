// Copyright 2022 The Chromium Authors.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto2";

option optimize_for = LITE_RUNTIME;

package content_analysis.sdk;

// A Handshake is sent when opening a new connection from browser to agent.
message Handshake {
  // Process ID of the browser initiating the session.
  optional int32 process_id = 1;
  // Indicates whether a content analysis is being requested in this session.
  // If set to True, then a request will be sent by the browser after the
  // handshake and the browser is expecting to then receive a verdict response
  // from the agent following the request.  If set to False, the browser is 
  // performing a startup check or an intermittent heartbeat, and no response 
  // is expected from the agent.
  optional bool content_analysis_requested = 2;
}

// An Acknowledgement is sent by the browser following the receipt of a response
// from the agent.
message Acknowledgement {
  // Indicates whether a verdict was successfully received by the browser.
  // This should be logged by agents, especially if it's False.
  optional bool verdict_received = 1;
}

// The values in this enum can be extended in future versions of Chrome to
// support new analysis triggers.
enum AnalysisConnector {
  ANALYSIS_CONNECTOR_UNSPECIFIED = 0;
  FILE_DOWNLOADED = 1;
  FILE_ATTACHED = 2;
  BULK_DATA_ENTRY = 3;
  PRINT = 4;
}

message ContentMetaData {
  // The URL containing the file download/upload or to which web content is
  // being uploaded.
  optional string url = 1;

  // Name of file on user system (if applicable).
  optional string filename = 2;

  // Sha256 digest of file.
  optional string digest = 3;

  reserved 4, 5, 6;
}

// Analysis request sent from chrome to backend.
// The proto in the Chromium codebase is the source of truth, the version here
// should always be in sync with it (https://osscs.corp.google.com/chromium/chromium/src/+/main:components/enterprise/common/proto/connectors.proto;l=87;drc=a8fb6888aff535f27654f03cd1643868ba066de9).
message ContentAnalysisRequest {
  // Token used to correlate requests and responses. This is different than the
  // FCM token in that it is unique for each request.
  optional string request_token = 5;

  // Which enterprise connector fired this request.
  optional AnalysisConnector analysis_connector = 9;

  // Information about the data that triggered the content analysis request.
  optional ContentMetaData request_data = 10;

  // The tags configured for the URL that triggered the content analysis.
  repeated string tags = 11;

  oneof content_data {
    // The text content to analyze in local content analysis request. This field
    // is mutually exclusive with file_path.
    string text_content = 13;

    // The full path to the file to analyze in local content analysis request.
    // The path is expressed in a platform dependent way. This field is mutually
    // exclusive with text_content.
    string file_path = 14;
  }

  // The absolute deadline (timestamp in UTC Epoch time) that Chrome will wait
  // until a response from the agent is received.
  optional int64 expires_at = 15;

  // Reserved to make sure there is no overlap with DeepScanningClientRequest.
  reserved 1 to 4, 6 to 8, 12;
}

// Verdict response sent from agent to Google Chrome.
message ContentAnalysisResponse {
  // Token used to correlate requests and responses. Corresponds to field in
  // ContentAnalysisRequest with the same name.
  optional string request_token = 1;

  // Represents the analysis result from a given tag.
  message Result {
    optional string tag = 1;

    // The status of this result.
    enum Status {
      STATUS_UNKNOWN = 0;
      SUCCESS = 1;
      FAILURE = 2;
    }
    optional Status status = 2;

    // Identifies the detection rules that were triggered by the analysis.
    // Only relevant when status is SUCCESS.
    message TriggeredRule {
      enum Action {
        ACTION_UNSPECIFIED = 0;
        REPORT_ONLY = 1;
        WARN = 2;
        BLOCK = 3;
      }
      optional Action action = 1;
      optional string rule_name = 2;
      optional string rule_id = 3;
      reserved 4;
    }
    repeated TriggeredRule triggered_rules = 3;

    reserved 4 to 7;
  }
  repeated Result results = 4;

  reserved 2 to 3;
}
