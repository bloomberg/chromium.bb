Tests that Runtime.callFunctionOn works with awaitPromise flag.

Running test: testArguments
{
    result : {
        type : string
        value : undefined|NaN|[object Object]|[object Window]
    }
}

Running test: testSyntaxErrorInFunction
{
    exceptionDetails : {
        columnNumber : 2
        exception : {
            className : SyntaxError
            description : SyntaxError: Unexpected token }
            objectId : <number>
            subtype : error
            type : object
        }
        exceptionId : 0
        lineNumber : 1
        scriptId : <number>
        text : Uncaught
    }
    result : {
        className : SyntaxError
        description : SyntaxError: Unexpected token }
        objectId : <string>
        subtype : error
        type : object
    }
}

Running test: testExceptionInFunctionExpression
{
    exceptionDetails : {
        columnNumber : 15
        exception : {
            className : Error
            description : Error     at <anonymous>:1:22     at <anonymous>:1:36
            objectId : <number>
            subtype : error
            type : object
        }
        exceptionId : 0
        lineNumber : 0
        scriptId : <number>
        text : Uncaught
    }
    result : {
        className : Error
        description : Error     at <anonymous>:1:22     at <anonymous>:1:36
        objectId : <string>
        subtype : error
        type : object
    }
}

Running test: testFunctionReturnNotPromise
{
    result : {
        description : 239
        type : number
        value : 239
    }
}

Running test: testFunctionReturnResolvedPromiseReturnByValue
{
    result : {
        type : object
        value : {
            a : 3
        }
    }
}

Running test: testFunctionReturnResolvedPromiseWithPreview
{
    result : {
        className : Object
        description : Object
        objectId : <string>
        preview : {
            description : Object
            overflow : false
            properties : [
                [0] : {
                    name : a
                    type : number
                    value : 3
                }
            ]
            type : object
        }
        type : object
    }
}

Running test: testFunctionReturnRejectedPromise
{
    exceptionDetails : {
        columnNumber : 0
        exception : {
            objectId : <number>
            type : object
            value : {
                a : 3
            }
        }
        exceptionId : 0
        lineNumber : 0
        text : Uncaught (in promise)
    }
    result : {
        type : object
        value : {
            a : 3
        }
    }
}

