// RUN: xla-gpu-opt -lowering-stage=GPU %s | FileCheck %s
HloModule AddMultiply

ENTRY %AddMultiply (x: f32[2,2], y: f32[2,2], z: f32[2,2]) -> f32[2,2] {
  %x = f32[2,2]{1,0} parameter(0)
  %y = f32[2,2]{1,0} parameter(1)
  %z = f32[2,2]{1,0} parameter(2)
  %add = f32[2,2]{1,0} add(f32[2,2]{1,0} %x, f32[2,2]{1,0} %y)
  ROOT %mul = f32[2,2]{1,0} multiply(f32[2,2]{1,0} %add, f32[2,2]{1,0} %z)
}

//  CHECK: func @fusion_kernel(%[[ARG0:.*]]: [[TYPE:.*]], %[[ARG1:.*]]: [[TYPE]], %[[ARG2:.*]]: [[TYPE]], %[[RESULT:.*]]: [[TYPE]])
//  CHECK-DAG: subview %[[ARG0]]{{\[}}[[INDEX:.*]]]
//  CHECK-DAG: subview %[[ARG1]]{{\[}}[[INDEX]]]
//  CHECK-DAG: subview %[[ARG2]]{{\[}}[[INDEX]]]
//  CHECK-DAG: subview %[[RESULT]]{{\[}}[[INDEX]]]
//  CHECK:   %[[V0:.*]] = load %{{.*\[}}[[CSTIDX:.*]]]
//  CHECK:   %[[V1:.*]] = load %{{.*\[}}[[CSTIDX:.*]]]
//  CHECK:   %[[ADD:.*]] = addf %[[V0]], %[[V1]]
//  CHECK:   %[[V2:.*]] = load %{{.*\[}}[[CSTIDX:.*]]]
//  CHECK:   %[[MUL:.*]] = mulf %[[ADD]], %[[V2]]
//  CHECK:   store %[[MUL]], %{{.*\[}}[[CSTIDX:.*]]]
//  CHECK: return
