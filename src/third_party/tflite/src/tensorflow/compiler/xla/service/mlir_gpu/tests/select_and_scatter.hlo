// RUN: xla-gpu-opt %s | FileCheck %s
HloModule SelectAndScatter

%ge (x: f32[], y: f32[]) -> pred[] {
  %x = f32[] parameter(0)
  %y = f32[] parameter(1)
  ROOT %compare = pred[] compare(f32[] %x, f32[] %y), direction=GE
}

%add (x: f32[], y: f32[]) -> f32[] {
  %x = f32[] parameter(0)
  %y = f32[] parameter(1)
  ROOT %add = f32[] add(f32[] %x, f32[] %y)
}

ENTRY %SelectAndScatter (x: f32[128,64,112,112],
                         y: f32[128,64,56,56],
                         z: f32[]) -> f32[128,64,112,112] {
  %x = f32[128,64,112,112] parameter(0)
  %y = f32[128,64,56,56] parameter(1)
  %z = f32[] parameter(2)
  ROOT %result = f32[128,64,112,112] select-and-scatter(
    f32[128,64,112,112] %x,
    f32[128,64,56,56] %y,
    f32[] %z),
  window={size=1x1x3x3 stride=1x1x2x2 pad=0_0x0_0x0_1x0_1},
  select=%ge,
  scatter=%add
}

// CHECK: func @"select-and-scatter"(
// CHECK-SAME: [[ARG:%.*]]: [[ARGT:.*]], [[SRC:%.*]]: [[SRCT:.*]], [[CST:%.*]]: memref<f32>, [[RES:%.*]]: [[REST:.*]]) {
// CHECK: "xla_lhlo.select_and_scatter"([[ARG]], [[SRC]], [[CST]], [[RES]]) ( {
// CHECK:   ^bb0([[LHS:%.*]]: memref<f32>, [[RHS:%.*]]: memref<f32>,
// CHECK-SAME:   [[OUT:%.*]]: memref<i1>):
// CHECK:     [[LHS_TENSOR:%.*]] = tensor_load [[LHS]]
// CHECK:     [[RHS_TENSOR:%.*]] = tensor_load [[RHS]]
// CHECK:     [[OUT_TENSOR:%.*]] = "xla_hlo.compare"
// CHECK-SAME:    ([[LHS_TENSOR]], [[RHS_TENSOR]]) {comparison_direction = "GE"}
// CHECK:     tensor_store [[OUT_TENSOR]], [[OUT]]
// CHECK:     xla_lhlo.terminator
// CHECK:   },  {
// CHECK:   ^bb0([[LHS_:%.*]]: memref<f32>, [[RHS_:%.*]]: memref<f32>,
// CHECK-SAME:   [[OUT_:%.*]]: memref<f32>):
// CHECK:     [[LHS_TENSOR_:%.*]] = tensor_load [[LHS_]]
// CHECK:     [[RHS_TENSOR_:%.*]] = tensor_load [[RHS_]]
// CHECK:     [[OUT_TENSOR_:%.*]] = xla_hlo.add [[LHS_TENSOR_]], [[RHS_TENSOR_]]
// CHECK:     tensor_store [[OUT_TENSOR_]], [[OUT_]]
// CHECK:     xla_lhlo.terminator
// CHECK:   }) {
// CHECK-SAME: padding = dense<{{\[}}[0, 0], [0, 0], [0, 1], [0, 1]]>
// CHECK-SAME: window_dimensions = dense<[1, 1, 3, 3]>
// CHECK-SAME: window_strides = dense<[1, 1, 2, 2]>
// CHECK-SAME: } : ([[ARGT]], [[SRCT]], memref<f32>, [[REST]]) -> ()
