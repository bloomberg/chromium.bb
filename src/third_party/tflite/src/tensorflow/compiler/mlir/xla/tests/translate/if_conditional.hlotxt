// RUN: tf-mlir-translate -hlo-text-to-mlir-hlo %s -o - | FileCheck %s

HloModule tfcompile.20

%then_branch {
  %arg_tuple.7 = (f32[]) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.8 = f32[] get-tuple-element(%arg_tuple.7), index=0, metadata={op_name="XLA_Args"}
  %log.9 = f32[] log(%get-tuple-element.8), metadata={op_type="Log" op_name="cond/Log"}
  ROOT %tuple.10 = (f32[]) tuple(%log.9), metadata={op_name="XLA_Retvals"}
}

%else_branch {
  %arg_tuple.12 = (f32[]) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.13 = f32[] get-tuple-element(%arg_tuple.12), index=0, metadata={op_name="XLA_Args"}
  %exponential.14 = f32[] exponential(%get-tuple-element.13), metadata={op_type="Exp" op_name="cond/Exp"}
  ROOT %tuple.15 = (f32[]) tuple(%exponential.14), metadata={op_name="XLA_Retvals"}
}

// CHECK: func @main([[A0:%.+]]: tensor<f32>)
ENTRY %tfcompile.20 {
  %arg0.1 = f32[] parameter(0), parameter_replication={false}, metadata={op_name="XLA_Args"}

  // CHECK: [[C0:%.+]] = mhlo.constant
  %constant.3 = f32[] constant(10), metadata={op_type="Less" op_name="Less"}

  // CHECK: [[R1:%.+]] = "mhlo.compare"([[A0]], [[C0]])
  %compare.4 = pred[] compare(%arg0.1, %constant.3), direction=LT, metadata={op_type="Less" op_name="Less"}

  // CHECK: [[R2:%.+]] = "mhlo.tuple"([[A0]])
  %tuple.5 = (f32[]) tuple(%arg0.1), metadata={op_type="If" op_name="cond/Merge_if"}

  // CHECK: [[R3:%.+]] = "mhlo.if"([[R1]], [[R2]], [[R2]]) ( {
  // CHECK: ^bb0([[A1:%.+]]: tuple<tensor<f32>>):
  // CHECK:   [[R7:%.+]] = "mhlo.get_tuple_element"([[A1]])
  // CHECK:   [[R8:%.+]] = "mhlo.log"([[R7]])
  // CHECK:   [[R9:%.+]] = "mhlo.tuple"([[R8]])
  // CHECK:   "mhlo.return"([[R9]])
  // CHECK: },  {
  // CHECK: ^bb0([[A1:%.+]]: tuple<tensor<f32>>):
  // CHECK:   [[R7:%.+]] = "mhlo.get_tuple_element"([[A1]])
  // CHECK:   [[R8:%.+]] = "mhlo.exponential"([[R7]])
  // CHECK:   [[R9:%.+]] = "mhlo.tuple"([[R8]])
  // CHECK:   "mhlo.return"([[R9]])
  // CHECK: })
  %conditional.16 = (f32[]) conditional(%compare.4, %tuple.5, %tuple.5), true_computation=%then_branch, false_computation=%else_branch, metadata={op_type="If" op_name="cond/Merge_if"}

  // CHECK: [[R4:%.+]] = "mhlo.get_tuple_element"([[R3]])
  %get-tuple-element.17 = f32[] get-tuple-element(%conditional.16), index=0, metadata={op_type="If" op_name="cond/Merge_if"}

  // CHECK: [[R5:%.+]] = "mhlo.tuple"([[R4]])
  // CHECK:   return [[R5]]
  ROOT %tuple.19 = (f32[]) tuple(%get-tuple-element.17), metadata={op_name="XLA_Retvals"}
}
