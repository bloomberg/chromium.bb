// RUN: tf-mlir-translate -split-input-file -hlo-text-to-lhlo -optimize-xla-hlo=false %s | FileCheck %s

HloModule indexed_conditional

%Negate (x: f32[]) -> f32[] {
  %x = f32[] parameter(0)
  ROOT %negate = f32[] negate(f32[] %x)
}

%Identity (y: f32[]) -> f32[] {
  %y = f32[] parameter(0)
  ROOT %copy = f32[] copy(f32[] %y)
}

%Floor (z: f32[]) -> f32[] {
  %z = f32[] parameter(0)
  ROOT %floor = f32[] floor(f32[] %z)
}

// CHECK: "lmhlo.case"(%{{.*}}) ({
// CHECK:   %{{.*}} = memref.view
// CHECK:   "mhlo.negate"
// CHECK:   "lmhlo.terminator"() : () -> ()
// CHECK: },  {
// CHECK:   %{{.*}} = memref.view
// CHECK:   "mhlo.copy"
// CHECK:   "lmhlo.terminator"() : () -> ()
// CHECK: },  {
// CHECK:   %{{.*}} = memref.view
// CHECK:   "mhlo.floor"
// CHECK:   "lmhlo.terminator"() : () -> ()
// CHECK: }) : (memref<i32>) -> ()

ENTRY %Parameters1.v4 () -> (f32[]) {
  %constant = s32[] parameter(0)
  %constant.1 = f32[] parameter(1)
  %constant.2 = f32[] parameter(2)
  %constant.3 = f32[] parameter(3)
  %conditional = f32[] conditional(s32[] %constant, f32[] %constant.1, f32[] %constant.2, f32[] %constant.3), branch_computations={%Negate, %Identity, %Floor}
  ROOT %t = (f32[]) tuple(%conditional)
}

// -----

HloModule WhileWithScalarS32Result_module

%body.v3 (prev.1: s32[]) -> s32[] {
  %constant = s32[] constant(1)
  %prev.1 = s32[] parameter(0)
  ROOT %add = s32[] add(s32[] %constant, s32[] %prev.1)
}

%condition.v3 (prev.2: s32[]) -> pred[] {
  %constant.1 = s32[] constant(5)
  %prev.2 = s32[] parameter(0)
  ROOT %greater-than = pred[] compare(s32[] %constant.1, s32[] %prev.2), direction=GT
}

// CHECK: "lmhlo.while"(%{{.*}}) ({
// CHECK:   %{{.*}} = memref.view
// CHECK:   "mhlo.compare"
// CHECK:   "lmhlo.terminator"() : () -> ()
// CHECK: },  {
// CHECK:   mhlo.add
// CHECK:   "lmhlo.terminator"() : () -> ()
// CHECK: }) : (memref<i1>) -> ()
ENTRY %WhileWithScalarS32Result.v2 () -> s32[] {
  %constant.2 = s32[] constant(0)
  ROOT %while = s32[] while(s32[] %constant.2), condition=%condition.v3, body=%body.v3
}
