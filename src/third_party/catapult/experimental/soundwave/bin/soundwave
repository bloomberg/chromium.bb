#!/usr/bin/env python
# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import argparse
import oauth2client.tools
import os
import sys

SOUNDWAVE_ROOT_PATH = os.path.normpath(os.path.join(
    os.path.dirname(__file__), '..'))
PY_UTILS_PATH = os.path.normpath(os.path.join(
    SOUNDWAVE_ROOT_PATH, '..', '..', 'common', 'py_utils'))

sys.path.append(SOUNDWAVE_ROOT_PATH)
sys.path.append(PY_UTILS_PATH)

from common import utils
from soundwave import commands

# For help creating service account credentials see:
# https://developers.google.com/api-client-library/python/auth/service-accounts#creatinganaccount

DEFAULT_DATABASE_PATH = os.path.join(
    SOUNDWAVE_ROOT_PATH, 'soundwave.db')


def Main():
  # Args for API access.
  parser = argparse.ArgumentParser(parents=[oauth2client.tools.argparser])
  # Default args for all actions.
  parser.add_argument(
      '-s', '--sheriff', default='Chromium Perf Sheriff',
      help='Only get data for this sheriff rotation, default: "%(default)s". '
           'You can use the special value "all" to disable filtering by '
           'sheriff rotation.')
  parser.add_argument(
      '-d', '--days', default=30, type=int,
      help='Number of days to collect data for (default: %(default)s)')
  parser.add_argument(
      '--continue', action='store_true', dest='use_cache',
      help='Skip refreshing some data for elements already in local db.')
  parser.add_argument(
      '--processes', type=int, default=40,
      help='Number of concurrent processes to use for fetching data.')
  parser.add_argument(
      '--database-file', default=DEFAULT_DATABASE_PATH,
      help='File path for database where to store data.')
  parser.add_argument(
      '-v', '--verbose', action='count', default=0,
      help='Increase verbosity level')
  subparsers = parser.add_subparsers(dest='action')
  subparsers.required = True
  # Subparser args for fetching alerts data.
  subparser = subparsers.add_parser('alerts')
  subparser.add_argument(
      '-b', '--benchmark', required=True,
      help='Fetch alerts for this benchmark.')
  # Subparser args for fetching timeseries data.
  subparser = subparsers.add_parser('timeseries')
  group = subparser.add_mutually_exclusive_group(required=True)
  group.add_argument(
      '-b', '--benchmark', help='Fetch timeseries for this benchmark.')
  group.add_argument(
      '-i', '--input-file',
      help='Fetch timeseries for test paths listed in this file, one path '
           'per line.')
  subparser.add_argument(
      '-f', '--filters', action='append',
      help=('Only get data for timeseries whose path contains all the given '
            'substrings.'))

  args = parser.parse_args()

  utils.ConfigureLogging(args.verbose)
  if args.action == 'alerts':
    commands.FetchAlertsData(args)
  elif args.action == 'timeseries':
    commands.FetchTimeseriesData(args)
  else:
    raise NotImplementedError(args.action)


if __name__ == '__main__':
  Main()
