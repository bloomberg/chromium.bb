// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be found
// in the LICENSE file.
syntax = "proto3";

package catapult.dashboard.dashboard.proto;

// A Pattern message identifies patterns which apply to the various metrics,
// expressed as test paths in the dashboard.
message Pattern {
  // Only one of a glob or a regular expression can be used when defining a
  // pattern matcher.
  oneof pattern {
    // Used for path-based globbing.
    string glob = 1;

    // Use for regular expression matching.
    string regex = 2;
  }

  // We support a number of statistic-based patterns, specific to the metrics we
  // store and available from the dashboard. A pattern will appply to any of the
  // statistics defined in the `stats` repeated field.
  enum StatType {
    STAT_TYPE_UNSPECIFIED = 0;
    MIN = 1;
    MEDIAN = 2;
    MEAN = 3;
    PCT_90 = 4;
    PCT_99 = 5;
    PCT_999 = 6;
    MAX = 7;
    STD_DEV = 8;
    COUNT = 9;
    SUM = 10;
  }

  // The pattern will match for any stats defined in this repeated field for the
  // metrics that match. If this is empty, it applies to the default set of
  // stats we alert for -- currently, [MEAN].
  repeated StatType stats = 3;
}

// An AnomalyConfig defines the bounds for which a change in a matching metric
// can be considered "anomalous". For metrics that are matched, we apply the
// anomaly config to determine whether we should create an alert.
message AnomalyConfig {
  uint64 max_window_size = 1;
  uint64 min_segment_size = 2;
  float min_absolute_change = 3;
  float min_relative_change = 4;
  float min_steppiness = 5;
  float multiple_of_std_dev = 6;
  repeated Pattern patterns = 7;
}

// A Subscription describes a configuration through which we determine routing
// information for alerts generated to matching metrics.
message Subscription {
  // A name is a free-form name for human readability purposes. It does not
  // serve as a unique key nor have any value other than for identifying a
  // subscription in logs, error messages, and in human readable contexts.
  string name = 1;

  // An optional URL for more information about the subscription. This can be a
  // URL to a team's sheriff rotation, a link to a team mailing list, etc.
  string rotation_url = 2;

  // The notification email address where reports are sent.
  string notification_email = 3;

  // A list of labels applied to the alerts (Monorail issues) associated with
  // this subscription.
  repeated string bug_labels = 4;

  // A list of components to associate alerts to for this subscription.
  repeated string bug_components = 5;

  // A list of email addresses to CC for issues filed by the dashboard.
  repeated string bug_cc_emails = 6;

  enum VisibilityTag {
    INTERNAL_ONLY = 0;
    PUBLIC = 1;
  }

  // Controls the visibility of this subscription, on whether the data that
  // match the patterns should be considered "internal only" or "public".
  //
  // Consider two subscriptions, a public one, and an internal-only one. If
  // there are alerts that come up for internal-only bots but match a public
  // subscription, we shouldn't match that subscription. Consequently if there
  // is an alert for a public bot which matches both subscriptions, we should
  // file two different issues (i.e. we should not let the publicly raised
  // issues know that there are internal-only subscribers to those).
  //
  // This also controls whether the subscription shows up in the UI for users
  // that are considered "internal" or "public".
  VisibilityTag visibility = 7;

  // A list of patterns to which a subscription applies. This means any alerts
  // generated for the patterns that match will include the `notification_email`
  // in the list of CC'ed email addresses.
  repeated Pattern patterns = 8;

  // Subscription-specific anomaly configurations. These refine the thresholds
  // for alerts generated for this subscription specifically. If an alert would
  // have been generated for multiple subscriptions, these anomaly
  // configurations apply to the individual alert to determine whether this
  // subscription even gets alerted for the particular alert.
  repeated AnomalyConfig anomaly_configs = 9;
}

// A SheriffConfig lists the subscriptions for a project with their own sheriff
// rotations. Typically, a project will have a single subscription
// configuration. However, a project can define sub-teams and higher fidelity
// subscriptions for certain groups of metrics with different anomaly
// configurations. Given a hypothetical team which has sub-teams which care
// about different kinds of metrics, we can have a configuration like the
// following:
//
//   subscriptions {
//     name: "Release Team"
//     notification_email: "release-team@example.com"
//     bug_labels: ["release-blocker"]
//     patterns {
//       glob: "project/**"
//     }
//   }
//
//   subscriptions {
//     name: "Memory Team"
//     notification_email: "memory-team@example.com"
//     bug_labels: ["memory-regressions"]
//
//     // Get all default alerts for memory regressions from 'project/'.
//     patterns {
//       regex: "^project/.*memory_.*$"
//     }
//
//     // Only look at peak memory usage changes of at least 1%.
//     anomaly_configs {
//       min_relative_change: 0.01  // 1%
//       patterns {
//         regex: "^project/platform/.*/memory_peak$"
//       }
//     }
//   }
//
// Note that Sheriff configurations apply globally, for all metrics that get
// uploaded to the dashboard. It is possible to define broad patterns which will
// catch all anomalies found for every metric.
message SheriffConfig {
  repeated Subscription subscriptions = 1;
}
