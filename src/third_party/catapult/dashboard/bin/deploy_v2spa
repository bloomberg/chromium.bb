#!/usr/bin/python
# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import re
import os
import shutil
import subprocess
import sys
import tempfile
import time

_DASHBOARD_PATH = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
_CATAPULT_PATH = os.path.dirname(_DASHBOARD_PATH)
_SPA_PATH = os.path.join(_DASHBOARD_PATH, 'dashboard', 'spa')


def _AddToPathIfNeeded(path):
  if path not in sys.path:
    sys.path.insert(0, path)

_AddToPathIfNeeded(_DASHBOARD_PATH)
_AddToPathIfNeeded(_CATAPULT_PATH)
_AddToPathIfNeeded(os.path.join(_CATAPULT_PATH, 'tracing'))
_AddToPathIfNeeded(os.path.join(_CATAPULT_PATH, 'common', 'node_runner'))
_AddToPathIfNeeded(os.path.join(_CATAPULT_PATH, 'common', 'py_utils'))

import dashboard
import py_utils
from node_runner import node_util


NODE_MODULES = node_util.GetNodeModulesPath()
NODE_VULCANIZE = os.path.join(NODE_MODULES, 'vulcanize', 'bin', 'vulcanize')
MINIFY = os.path.join(NODE_MODULES, '..', 'minify')
WEBPACK = os.path.join(NODE_MODULES, '.bin', 'webpack-command')


def _TimestampScript():
  # V2SPA displays its version as this timestamp in this format to make it easy
  # to check whether a change is visible.
  now = time.time()
  print 'vulcanized', time.strftime(
      '%Y-%m-%d %H:%M:%S', time.gmtime(now - (60 * 60 * 7)))
  return '<script>VULCANIZED_TIMESTAMP = new Date(%d);</script>' % (now * 1000)


def VulcanizeIndex(temp_dir):
  filename = os.path.join(temp_dir, 'index.vulcanized.html')
  html = subprocess.check_output([
    NODE_VULCANIZE, '--strip-comments', '--inline-scripts', '--inline-css',
    '-p', _DASHBOARD_PATH, 'dashboard/spa/index.html',
  ])
  html += _TimestampScript()
  open(filename, 'w').write(html)
  subprocess.check_output([MINIFY, filename])
  return filename


def VulcanizeHistogramsViewer(temp_dir):
  from tracing_build import vulcanize_histograms_viewer
  viewer_dir_path = os.path.join(temp_dir, 'vulcanized_histograms_viewer')
  viewer_html_path = os.path.join(viewer_dir_path, 'vulcanized_histograms_viewer.html')
  os.mkdir(viewer_dir_path)
  with open(viewer_html_path, 'w') as f:
    s = vulcanize_histograms_viewer.VulcanizeHistogramsViewer()
    f.write(s.encode('utf-8'))
  return viewer_dir_path


def Webpack(temp_dir):
  output_path = os.path.join(temp_dir, 'webpack')
  config_filename = os.path.join(_SPA_PATH, 'webpack.config.js')

  os.environ['WEBPACK_OUTPUT_PATH'] = output_path
  os.environ['WEBPACK_NODE_MODULES'] = NODE_MODULES
  os.environ['WEBPACK_THIRD_PARTY'] = os.path.join(_CATAPULT_PATH, 'third_party')

  proc = subprocess.Popen([WEBPACK, '--config', config_filename],
      stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  webpack_out, webpack_err = proc.communicate()
  if proc.returncode != 0:
    print 'ERROR from webpack:'
    print webpack_out
    raise RuntimeError('Webpack failed with exit code', proc.returncode)

  return output_path


def Main():
  temp_dir = tempfile.mkdtemp()

  try:
    deployment_paths = dashboard.PathsForDeployment()
    deployment_paths.append(Webpack(temp_dir))
    deployment_paths.append(VulcanizeIndex(temp_dir))
    deployment_paths.append(VulcanizeHistogramsViewer(temp_dir))

    from catapult_build import appengine_deploy
    version = None
    if len(sys.argv) > 1:
      version = sys.argv[1]
    appengine_deploy.Deploy(deployment_paths, ['v2spa.yaml'], version)
  except RuntimeError:
    pass
  finally:
    try:
      shutil.rmtree(temp_dir)
    except OSError as e:
      logging.error('Error cleaning up temp dir %s: %s', temp_dir, e)


if __name__ == '__main__':
  Main()
