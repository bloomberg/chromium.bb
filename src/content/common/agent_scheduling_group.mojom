// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module content.mojom;

import "content/common/associated_interfaces.mojom";
import "content/common/frame.mojom";
import "content/common/native_types.mojom";
import "mojo/public/mojom/base/unguessable_token.mojom";
import "third_party/blink/public/mojom/frame/frame_replication_state.mojom";
import "third_party/blink/public/mojom/frame/tree_scope_type.mojom";
import "third_party/blink/public/mojom/tokens/tokens.mojom";

// Interface for general communication between the renderer process's
// AgentSchedulingGroup and the browser process's AgentSchedulingGroupHost.
// Implemented by AgentSchedulingGroupHost (in the browser process).
//
// This interface is associated with this AgentSchedulingGroup's channel.
// The renderer process retrieves it via
// AgentSchedulingGroup.BindAssociatedInterfaces(). See comments on
// AgentSchedulingGroup for more about channels.
interface AgentSchedulingGroupHost {
  // Acknowledge a RenderFrame was unloaded due to NavigationControl::Unload().
  // This is not simply a reply callback on NavigationControl::Unload() because
  // it needs to be invoked after the AssociatedReceiver (owned by RenderFrame)
  // is already destroyed. This timing is required to ensure that any scheduled
  // postMessages are dispatched prior to acknowledging the unload (which tears
  // down the browser-side RFHI by removing it from the pending delete list)
  DidUnloadRenderFrame(blink.mojom.LocalFrameToken frame_token);
};

// Interface for general communication between the browser process's
// AgentSchedulingGroupHost and the renderer process's AgentSchedulingGroup.
// Implemented by content::AgentSchedulingGroup (in the renderer process).
//
// The interface's message pipe depends on the mode that the Multiple Blink
// Isolate (MBI) feature is using (https://crbug.com/1051790).
//
// In non-kLegacy mode: there is a legacy IPC channel per AgentSchedulingGroup.
// The channel is created along with this interface, which it is associated
// with. Messages are *not* ordered with the per-process legacy IPC channel.
//
// In kLegacy mode: there is one legacy IPC channel per renderer and this
// interface is channel-associated with it. The browser process retrieves it via
// GetRemoteAssociatedInterface().
//
// See the comments for MBIMode in content/public/common/content_features.h for
// more details.
interface AgentSchedulingGroup {
  // Tells the renderer to bind the AgentSchedulingGroup's associated
  // interfaces. This includes the host remote (mojom::AgentSchedulingGroupHost)
  // as well as RouteProvider remote/receiver pair.
  // We have this as a method on this interface, as opposed to passing the
  // pending interfaces over the method that creates the AgentSchedulingGroup:
  // Renderer.CreateAgentSchedulingGroup() or
  // Renderer.CreateAgentAssociatedSchedulingGroup() (depending on the mode, see
  // the interface comments). This is because we need these interfaces to be
  // associated with the message pipe that the AgentSchedulingGroup is
  // associated with, which may be different than the message pipe that we
  // create the AgentSchedulingGroup over.
  BindAssociatedInterfaces(
    pending_associated_remote<AgentSchedulingGroupHost> remote_host,
    pending_associated_remote<RouteProvider> remote_route_provider,
    pending_associated_receiver<RouteProvider> route_provider_receiver);

  // Tells the renderer to create a new view.
  CreateView(CreateViewParams params);

  // Tells the renderer to destroy an existing view. This method must be called
  // exactly once for each invocation of CreateView. |view_id| is synonymous
  // with |routing_id|. A callback is provided so the browser receives
  // notification the destruction is complete.
  DestroyView(int32 view_id);

  // Tells the renderer to create a new RenderFrame.
  CreateFrame(CreateFrameParams params);

  // Tells the renderer to create a new RenderFrameProxy.
  //
  // `token`: The frame token. Used to map between RemoteFrame and
  //     RenderFrameProxyHost.
  // `routing_id`: The legacy IPC routing ID.
  // `opener_frame_token`: Frame token that identifies the opener frame if one
  //     exists, or absl::nullopt otherwise.
  // `view_routing_id`: routing ID of the RenderView for this RenderFrameProxy.
  //     Must not be `MSG_ROUTING_NONE`.
  // `parent_routing_id`: `MSG_ROUTING_NONE` for a top-level RenderFrameProxy;
  //     otherwise, Identifies the parent frame of the RenderFrameProxy.
  // `tree_scope_type`: Whether the owner element (e.g. <iframe>, <object>, et
  //     cetera) for this frame is in the document tree or the shadow tree. This
  //     parameter has no meaning for main frames, and any passed value will be
  //     ignored for main frames.
  // `devtools_frame_token`: Used for devtools instrumentation and
  //    trace-ability. The token is shared across all frames (local or remotes)
  //    representing the same logical frame tree node, and is used by Blink and
  //    content to tag calls and requests for instrumentation purposes,
  //    allowing them to be attributed to a context frame.
  //
  //    Must not be used to look up a RenderFrameHostImpl or
  //    RenderFrameProxyHost in the browser process, as the token is shared,
  //    making the mapping ambiguous and non-authoritative.
  CreateFrameProxy(blink.mojom.RemoteFrameToken token, int32 routing_id,
                   blink.mojom.FrameToken? opener_frame_token,
                   int32 view_routing_id, int32 parent_routing_id,
                   blink.mojom.TreeScopeType tree_scope_type,
                   blink.mojom.FrameReplicationState replication_state,
                   mojo_base.mojom.UnguessableToken devtools_frame_token,
                   RemoteMainFrameInterfaces remote_main_frame_interfaces);

};
