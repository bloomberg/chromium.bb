// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module auction_worklet.mojom;

import "mojo/public/mojom/base/time.mojom";
import "services/network/public/mojom/url_loader_factory.mojom";
import "third_party/blink/public/mojom/devtools/devtools_agent.mojom";
import "third_party/blink/public/mojom/interest_group/interest_group_types.mojom";
import "url/mojom/origin.mojom";
import "url/mojom/url.mojom";

struct PreviousWin {
  // Approximate time a particular group won an auction.
  //
  // TODO(mmenke): Provide this as an integer time since an auction was won, in
  // seconds, to reduce time resolution of cross-site information provided to an
  // untrusted service.
  //
  // TODO(https://crbug.com/1207135): Decide what to do when wins are
  // "in the future" due to clock changes.
  mojo_base.mojom.Time time;

  // The ad object returned by that group's bidding function with the winning
  // bid.
  string ad_json;
};

// Browser signals passed to the BidderWorklet's generateBid() method. Some
// fields are cached to pass to the reportWin() method as well.
struct BiddingBrowserSignals {
  // How many times this interest group has been joined in the period history
  // is maintained.
  int32 join_count;

  // How many times this interest group has made bids in auctions.
  int32 bid_count;

  // Previous times the group won auctions.
  array<PreviousWin> prev_wins;
};

struct BiddingInterestGroup {
  blink.mojom.InterestGroup group;  // User JS specified, stored by browser.
  BiddingBrowserSignals signals;  // Collected by browser.
};

// The results of running a FLEDGE generateBid() script.
struct BidderWorkletBid {
  // JSON string to be passed to the scoring function.
  string ad;

  // Offered bid value. Always greater than 0.
  double bid;

  // Render URL of the bid.
  url.mojom.Url render_url;

  // Ad components associated with bid, if any. These allow a single ad to be
  // composed of multiple smaller ads. The `render_url` is the main URL, and
  // is responsible for laying out these ads URLs in its subframes.
  //
  // May only contain URLs matching the `render_url`s of the `ad_components`
  // of the InterestGroup that made this bid. May have at most 20 URLs. Must
  // be null if the InterestGroup making this bid has a null `ad_components`
  // field.
  array<url.mojom.Url>? ad_components;

  // How long it took to run the generateBid() script.
  mojo_base.mojom.TimeDelta bid_duration;
};

// Manages the auction workflow for one loaded FLEDGE bidder worklet.
// See https://github.com/WICG/turtledove/blob/main/FLEDGE.md
//
// The BidderWorklet is functionally stateless, so methods are idempotent
// and can be called multiple times, in any order, for multiple auctions
// using the same worklet. There is no need to wait for one callback to be
// invoked before calling another method. There is no guarantee methods will
// complete in the order they are invoked.
interface BidderWorklet {
  // Loads the same-origin realtime bidding signals URL (if necessary), and
  // invokes the worklet's generateBid() method, returning the generated bid
  // and associated data. Waits for the worklet script to be loaded first, if
  // needed.
  //
  // Arguments:
  // `auction_signals_json` The JSON representation of the auction signals for
  //  the auction, specified by the publisher page and provided to bidder
  //  worklets competing in an auction.
  //
  // `per_buyer_signals_json` The JSON representation of the auction signals
  //  for the specific owner of this interest group, specified by the
  //  publisher page and provided to all interest groups with the same owner
  //  as the one specified `interest_group`.
  //
  // `browser_signal_top_window_origin` The origin of the top-level frame
  //  where the auction is running.
  //
  // `browser_signal_seller_origin` The origin of the seller script running
  //  the auction.
  //
  // `auction_start_time` The time the auction started, used to ensure the
  //  last win times provided to all worklets are relative to the same time.
  //
  // Returns:
  // `bid` If the worklet is successfully loaded and chooses to bid in the
  //  auction, contains information about the bid. Null otherwise.
  //
  // `errors` The various error messages to be used for debugging. These are too
  //  sensitive for the renderer to see. There may be errors even when a bid
  //  is offered, and there may be no errors when there's no bid. Includes
  //  errors from failing to load the worklet script.
  GenerateBid(string? auction_signals_json,
              string? per_buyer_signals_json,
              url.mojom.Origin browser_signal_top_window_origin,
              url.mojom.Origin browser_signal_seller_origin,
              mojo_base.mojom.Time auction_start_time) => (
                  BidderWorkletBid? bid,
                  array<string> errors);

  // Calls the worklet's reportWin() method. Waits for the worklet script to
  // be loaded first, if needed.
  //
  // Arguments:
  // `auction_signals_json` The JSON representation of the auction signals for
  //  the auction, if specified by the publisher page and provided to bidder
  //  worklets competing in an auction. Null if not provided by the  publisher
  //  page. Null will be passed to the worklet in that case.
  //
  // `per_buyer_signals_json` The JSON representation of the auction signals
  //  for the specific owner of this interest group, specified by the
  //  publisher page and provided to all interest groups with the same owner
  //  as the one specified `interest_group`. Null if not provided by the
  //  publisher page. Null will be passed to the worklet in that case.
  //
  // `browser_signal_top_window_origin` The origin of the top-level frame
  //  where the auction is running.
  //
  // `seller_signals_json` is a JSON representation of the object returned by
  //  the seller worklet's ReportResult method.
  //
  // `browser_signal_render_url` is the `render_url` returned by the
  //  BidderWorklet's generateBid() method, invoked as part of BidderWorklet
  //  creation.
  //
  // Returns:
  // `report_url` is the URL to request to report the result of the auction
  //  to the bidder. It will be null if no reports are requested, or the
  //  report script fails to run.
  //
  // `errors` is an array of any errors that occurred while attempting
  //  to run the worklet's reportWin() method. These are too sensitive for
  //  the renderer to see. There may be errors even when a `report_url` is
  //  provided, and there may be no errors when there's no `report_url`.
  //  Includes errors from failing to load the worklet script.
  ReportWin(string? auction_signals_json,
            string? per_buyer_signals_json,
            url.mojom.Origin browser_signal_top_window_origin,
            string seller_signals_json,
            url.mojom.Url browser_signal_render_url,
            double browser_signal_bid) => (
                url.mojom.Url? report_url,
                array<string> errors);

  // Establishes a debugger connection to the worklet.
  ConnectDevToolsAgent(pending_receiver<blink.mojom.DevToolsAgent> agent);
};
