// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module auction_worklet.mojom;

import "content/services/auction_worklet/public/mojom/bidder_worklet.mojom";
import "content/services/auction_worklet/public/mojom/seller_worklet.mojom";
import "mojo/public/mojom/base/time.mojom";
import "sandbox/policy/mojom/sandbox.mojom";
import "services/network/public/mojom/url_loader_factory.mojom";
import "third_party/blink/public/mojom/interest_group/interest_group_types.mojom";
import "url/mojom/origin.mojom";
import "url/mojom/url.mojom";

struct BrowserSignals {
  url.mojom.Origin top_frame_origin;
  url.mojom.Origin seller;
};

// Used by the browser to load and run FLEDGE worklets in a sandboxed utility
// process.
// See https://github.com/WICG/turtledove/blob/main/FLEDGE.md
[ServiceSandbox=sandbox.mojom.Sandbox.kService]
interface AuctionWorkletService {
  // Attempts to load Javascript at the specified URL and create a BidderWorklet
  // from the response body. There is no return value - any error loading the
  // worklet script may only be learned from the BidderWorklet API itself, when
  // trying to run a script. This reduces roundtrips, and allows fetching
  // per-auction bidding signals URL in parallel with fetching the bidding
  // worklet script. It also makes the API more robust, not having any
  // invocation ordering requirements.
  //
  // Arguments:
  // `bidder_worklet` The pipe to communicate with the BidderWorklet. Closing
  // the pipe will abort any in-progress loads and destroy the worklet.
  //
  // `pause_for_debugger_on_start` If this is true, the worklet should not
  //  commence any work until it gets a Runtime.runIfWaitingForDebugger debugger
  //  command.
  //
  // `url_loader_factory` The URLLoaderFactory used to load the worklet script
  //  and trusted bidding signals. It's recommended that the implementation be
  //  restricted to exactly those URLs (keeping in mind query parameter usage
  //  for trusted bidding signals and the allowed coalescing).
  //
  // `bidding_interest_group` Definition of the interest group to fetch and
  //  execute the script of for an ad auction (initially added by client JS in
  //  the renderer, but managed by the browser's interest group store), as well
  //  as some bidding history collected by the interest group store.
  LoadBidderWorklet(
      pending_receiver<BidderWorklet> bidder_worklet,
      bool pause_for_debugger_on_start,
      pending_remote<network.mojom.URLLoaderFactory> url_loader_factory,
      BiddingInterestGroup bidding_interest_group);

  // Attempts to load Javascript at the specified URL and loads a SellerWorklet.
  //
  // Arguments:
  // `seller_worklet` The pipe to communicate with the SellerWorklet. Closing
  //  the pipe will abort any in-progress loads destroy the worklet. The
  //  callback will be invoked on seller worklet destruction if it hasn't
  //  already, since it's on the AuctionWorkletService pipe instead of the
  //  SellerWorklet pipe.
  //
  // `pause_for_debugger_on_start` If this is true, the worklet should not
  //  commence any work until it gets a Runtime.runIfWaitingForDebugger debugger
  //  command.
  //
  // `url_loader_factory` The UrlLoaderFactory used to load the worklet script.
  //  It's recommended that the implementation be restricted to only load the
  //  script URL.
  //
  // `script_source_url` is the URL of the seller worklet script.
  //
  // Returns:
  // `success` is true if the worklet was successfully loaded.
  //
  // `errors` The various error messages to be used for debugging. These are too
  //  sensitive for the renderer to see. There may be errors even when the
  //  worklet is successfully loaded, and there may be no errors when the load
  //  fails.
  LoadSellerWorklet(
      pending_receiver<SellerWorklet> seller_worklet,
      bool pause_for_debugger_on_start,
      pending_remote<network.mojom.URLLoaderFactory> url_loader_factory,
      url.mojom.Url script_source_url) => (
          bool success,
          array<string> errors);
};
