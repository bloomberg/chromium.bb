// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module auction_worklet.mojom;

import "content/services/auction_worklet/public/mojom/bidder_worklet.mojom";
import "content/services/auction_worklet/public/mojom/seller_worklet.mojom";
import "mojo/public/mojom/base/time.mojom";
import "services/network/public/mojom/url_loader_factory.mojom";
import "third_party/blink/public/mojom/interest_group/interest_group_types.mojom";
import "url/mojom/origin.mojom";
import "url/mojom/url.mojom";

struct BrowserSignals {
  url.mojom.Origin top_frame_origin;
  url.mojom.Origin seller;
};

// Used by the browser to load and run FLEDGE worklets in a sandboxed utility
// process.
// See https://github.com/WICG/turtledove/blob/main/FLEDGE.md
interface AuctionWorkletService {
  // Loads a FLEDGE bidder worklet, its same-origin realtime bidding signals
  // URL (if necessary), and invokes its generateBid() method, returning
  // the generate bid and associated data.
  //
  // Arguments:
  // `bidder_worklet` The pipe to communicate with the BidderWorklet.
  //  Closing the pipe will abort any in-progress loads destroy the worklet. The
  //  callback will be invoked on pipe destruction if it hasn't been already,
  //  since it's on the AuctionWorkletService pipe instead of the BidderWorklet
  //  pipe.
  //
  // `url_loader_factory` The URLLoaderFactory used to load the worklet script
  //  and trusted bidding signals. It's recommended that the implementation be
  //  restricted to exactly those URLs (keeping in mind query parameter usage
  //  for trusted bidding signals and the allowed coalescing).
  //
  // `bidding_interest_group` Definition of the interest group to fetch and
  //  execute the bidding script of for an ad auction (initially added by
  //  client JS in the renderer, but managed by the browser's interest group
  //  store), as well as some bidding history collected by the interest group
  //  store.
  //
  // `auction_signals_json` The JSON representation of the auction signals for
  //  the auction, specified by the publisher page and provided to bidder
  //  worklets competing in an auction.
  //
  // `per_buyer_signals_json` The JSON representation of the auction signals
  //  for the specific owner of this interest group, specified by the
  //  publisher page and provided to all interest groups with the same owner
  //  as the one specified `interest_group`.
  //
  // `browser_signal_top_window_origin` The origin of the top-level frame
  //  where the auction is running.
  //
  // `browser_signal_seller_origin` The origin of the seller script running
  //  the auction.
  //
  // `auction_start_time` The time the auction started, use to ensure the
  //  last win times provided to all worklets are relative to the same time.
  //
  // Returns:
  // `bid` If the worklet is successfully loaded and chooses to bid in the
  //  auction, contains information about the bid. Null otherwise.
  //
  // `errors` The various error messages to be used for debugging. These are too
  //  sensitive for the renderer to see. There may be errors even when a bid
  //  is offered, and there may be no errors when there's no bid.
  //
  // TODO(mmenke): Make BidderWorklets with the same URL reuseable, both
  // between auctions, and within an auction, if two interest groups with the
  // same owner share a script URL, and do the same for bidding signals, at
  // least within an auction.
  LoadBidderWorkletAndGenerateBid(
      pending_receiver<BidderWorklet> bidder_worklet,
      pending_remote<network.mojom.URLLoaderFactory> url_loader_factory,
      BiddingInterestGroup bidding_interest_group,
      string? auction_signals_json,
      string? per_buyer_signals_json,
      url.mojom.Origin browser_signal_top_window_origin,
      url.mojom.Origin browser_signal_seller_origin,
      mojo_base.mojom.Time auction_start_time) => (
          BidderWorkletBid? bid,
          array<string> errors);

  // Attempts to load Javascript at the specified URL and loads a SellerWorklet.
  //
  //
  // Arguments:
  // `seller_worklet` The pipe to communicate with the SellerWorklet. Closing
  //  the pipe will abort any in-progress loads destroy the worklet. The
  //  callback will be invoked on seller worklet destruction if it hasn't
  //  already, since it's on the AuctionWorkletService pipe instead of the
  //  SellerWorklet pipe.
  //
  // `url_loader_factory` The UrlLoaderFactory used to load the worklet script.
  //  It's recommended that the implementation be restricted to only load the
  //  script URL.
  //
  // `script_source_url` is the URL of the seller worklet script.
  //
  // Returns:
  // `success` is true if the worklet was successfully loaded.
  //
  // `errors` The various error messages to be used for debugging. These are too
  //  sensitive for the renderer to see. There may be errors even when the
  //  worklet is successfully loaded, and there may be no errors when the load
  //  fails.
  LoadSellerWorklet(
      pending_receiver<SellerWorklet> seller_worklet,
      pending_remote<network.mojom.URLLoaderFactory> url_loader_factory,
      url.mojom.Url script_source_url) => (
          bool success,
          array<string> errors);
};
