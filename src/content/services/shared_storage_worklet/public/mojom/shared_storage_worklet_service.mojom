// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module shared_storage_worklet.mojom;

import "mojo/public/mojom/base/time.mojom";
import "services/network/public/mojom/url_loader_factory.mojom";
import "url/mojom/origin.mojom";
import "url/mojom/url.mojom";

// Used by the Shared Storage sandboxed utility process to access the shared
// storage, log messages, etc.
interface SharedStorageWorkletServiceClient {
 // Handle sharedStorage.set(): set `key`â€™s entry to `value`. If
  // `ignoreIfPresent` is true, the entry is not updated if `key` already
  // exists.
  SetFromWorkletScope(string key, string value, bool ignore_if_present)
    => (bool success, string error_message);

  // Handle sharedStorage.append(): append `value` to the entry for `key`.
  // Equivalent to "set" if the `key` is not present.
  AppendFromWorkletScope(string key, string value)
    => (bool success, string error_message);

  // Handle sharedStorage.delete(): delete the entry at the given `key`.
  DeleteFromWorkletScope(string key)
    => (bool success, string error_message);

  // Handle sharedStorage.clear(): delete all entries.
  ClearFromWorkletScope()
    => (bool success, string error_message);

  // Handle sharedStorage.get(): get the entry at `key`, or an empty string if
  // `key` is not present.
  GetFromWorkletScope(string key)
    => (bool success, string error_message, string value);

  // Handle sharedStorage.key(): get the `pos`th key.
  KeyFromWorkletScope(uint32 pos)
    => (bool success, string error_message, string key);

  // Handle sharedStorage.length(): get the number of keys.
  LengthFromWorkletScope()
    => (bool success, string error_message, uint32 length);

  // Handle console.log(): log the message to the DevTools console.
  ConsoleLogFromWorkletScope(string message);
};

// Used by the browser to load Shared Storage worklet script and run operations
// in a sandboxed utility process.
// See https://github.com/pythagoraskitty/shared-storage/blob/main/README.md
interface SharedStorageWorkletService {
  // Bind to the client
  BindSharedStorageWorkletServiceClient(
    pending_remote<SharedStorageWorkletServiceClient> client);

  // Handle sharedStorage.worklet.addModule(): download and load the script in
  // the worklet environment. The origin of the `script_source_url` should be
  // checked at the Mojo boundary to ensure it's from the same origin of the
  // current context.
  AddModule(pending_remote<network.mojom.URLLoaderFactory> url_loader_factory,
            url.mojom.Url script_source_url)
    => (bool success, string error_message);

  // Handle sharedStorage.runURLSelectionOperation(): run the operation
  // previously registered by registerURLSelectionOperation() with matching
  // `name`. The size limit on `urls` should be checked at the Mojo boundary.
  // When the operation succeeds, the return value `index` will be set to the
  // uint32 value that the promise resolves to; otherwise it will be set to 0.
  RunURLSelectionOperation(string name, array<string> urls,
                           array<uint8> serialized_data)
    => (bool success, string error_message, uint32 index);

  // Handle sharedStorage.runOperation(): run the operation previously
  // registered by registerOperation() with matching `name`.
  RunOperation(string name, array<uint8> serialized_data)
    => (bool success, string error_message);
};
