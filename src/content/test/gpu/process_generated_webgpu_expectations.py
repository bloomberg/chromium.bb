#!/usr/bin/env python3
# Copyright 2022 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""Script for validating/generating WebGPU expectations.

The WebGPU CTS tests are combinatorially generated. In order to cut back on
manual work, test expectations are written using queries and expanded to full
test names. Test queries are stored in
//content/test/gpu/gpu_tests/test_expectations/webgpu_expectation_queries.js.
"""

import argparse
import os
import subprocess
import sys

import gpu_path_util

BEGIN_TAG = '# BEGIN AUTOGENERATED EXPECTATIONS\n'

EXPECTATION_FILE = os.path.join(gpu_path_util.CHROMIUM_SRC_DIR, 'third_party',
                                'dawn', 'webgpu-cts', 'expectations.txt')
QUERIES_FILE = os.path.join(gpu_path_util.GPU_EXPECTATIONS_DIR,
                            'webgpu_cts_expectation_queries.js')
GENERATOR_SCRIPT = os.path.join(gpu_path_util.CHROMIUM_SRC_DIR, 'third_party',
                                'webgpu-cts', 'scripts',
                                'generate_telemetry_expectations.py')
TYPESCRIPT_DIR = os.path.join(gpu_path_util.GPU_DIR, '.webgpu_typescript')


def GenerateExpectationsFromJavaScript():
  p = subprocess.run([
      sys.executable, GENERATOR_SCRIPT, QUERIES_FILE, '--js-out-dir',
      TYPESCRIPT_DIR
  ],
                     stdout=subprocess.PIPE,
                     check=True)
  return p.stdout.decode('utf-8')


def Generate():
  with open(EXPECTATION_FILE) as infile:
    contents = infile.read()

  output_contents = ''
  for line in contents.splitlines(True):
    output_contents += line
    if BEGIN_TAG in line:
      break

  output_contents += GenerateExpectationsFromJavaScript()
  with open(EXPECTATION_FILE, 'w') as outfile:
    outfile.write(output_contents)
  return 0


def Validate():
  expected_contents = GenerateExpectationsFromJavaScript()
  with open(EXPECTATION_FILE) as infile:
    actual_contents = infile.read()
  start_index = actual_contents.find(BEGIN_TAG)
  if start_index < 0:
    raise RuntimeError('WebGPU CTS expectation file is malformed.')
  start_index = start_index + len(BEGIN_TAG)
  actual_contents = actual_contents[start_index:]
  if actual_contents == expected_contents:
    return 0

  actual_set = set(list(actual_contents.splitlines()))
  expected_set = set(list(expected_contents.splitlines()))
  in_actual = []
  in_expected = []
  for line in actual_contents.splitlines():
    if line not in expected_set:
      in_actual.append(line)
  for line in expected_contents.splitlines():
    if line not in actual_set:
      in_expected.append(line)

  print(
      'Actual and expected WebGPU expectation content is out of sync. Please '
      'make any necessary changes to //content/test/gpu/gpu_tests/'
      'test_expectations/webgpu_expectation_queries.js and regenerate using '
      '`//content/test/gpu/process_generated_webgpu_expectations.py generate`.')
  if in_actual:
    print('Lines in actual file that are missing from generated content:')
    for line in in_actual:
      print(line)
    print('')
  if in_expected:
    print('Lines in generated content that are missing from actual file:')
    for line in in_expected:
      print(line)
  return 1


def main():
  parser = argparse.ArgumentParser(
      description=('Validate that WebGPU generated expectations are in sync '
                   'with the generator JavaScript or generate new ones.'))
  parser.add_argument('function',
                      choices=['generate', 'validate'],
                      help='What the script should do.')
  args = parser.parse_args()
  if args.function == 'generate':
    return Generate()
  return Validate()


if __name__ == '__main__':
  sys.exit(main())
