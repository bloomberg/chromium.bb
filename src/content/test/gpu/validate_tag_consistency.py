#!/usr/bin/env vpython
# Copyright 2020 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""Script to ensure that the same tags are in all expectation files."""

from __future__ import print_function

import argparse
import logging
import os
import sys

TAG_HEADER = """\
# OS
# tags: [ android android-lollipop android-marshmallow android-nougat
#             android-pie android-r
#         chromeos
#         fuchsia
#         linux ubuntu
#         mac bigsur catalina lion highsierra mac-10.12 mojave mountainlion
#             sierra
#         win win7 win8 win10 ]
# Devices
# tags: [ android-nexus-5 android-nexus-5x android-nexus-6 android-nexus-9
#             android-pixel-2 android-pixel-4 android-shield-android-tv
#         chromeos-board-amd64-generic chromeos-board-kevin chromeos-board-eve
#         fuchsia-board-astro fuchsia-board-qemu-x64 ]
# Platform
# tags: [ desktop
#         mobile ]
# Browser
# tags: [ android-chromium android-webview-instrumentation
#         debug debug-x64
#         release release-x64 ]
# GPU
# tags: [ amd amd-0x6613 amd-0x679e amd-0x6821 amd-0x7340
#         apple apple-apple-m1 apple-angle-metal-renderer:-apple-m1
#         arm
#         google google-0xffff
#         intel intel-0xa2e intel-0xd26 intel-0xa011 intel-0x3e92 intel-0x3e9b
#               intel-0x5912
#         nvidia nvidia-0xfe9 nvidia-0x1cb3 nvidia-0x2184
#         qualcomm ]
# Decoder
# tags: [ passthrough no-passthrough ]
# ANGLE Backend
# tags: [ angle-disabled
#         angle-d3d9 angle-d3d11
#         angle-metal
#         angle-opengl angle-opengles
#         angle-swiftshader
#         angle-vulkan ]
# Skia Renderer
# tags: [ skia-renderer-dawn
#         skia-renderer-disabled
#         skia-renderer-gl
#         skia-renderer-vulkan ]
# SwiftShader
# tags: [ swiftshader-gl no-swiftshader-gl ]
# Driver
# tags: [ intel_lt_25.20.100.6444 intel_lt_25.20.100.6577
#             intel_lt_26.20.100.7000 intel_lt_26.20.100.7870
#             intel_lt_26.20.100.7323 intel_lt_26.20.100.8141
#             intel_lt_27.20.100.8280
#         mesa_lt_19.1 mesa_ge_20.1 ]
# ASan
# tags: [ asan no-asan ]
# Display Server
# tags: [ display-server-wayland display-server-x ]
# results: [ Failure RetryOnFailure Skip ]
"""

TAG_HEADER_BEGIN =\
    '# BEGIN TAG HEADER (autogenerated, see validate_tag_consistency.py)'
TAG_HEADER_END = '# END TAG HEADER'

EXPECTATION_DIR = os.path.join(os.path.dirname(__file__), 'gpu_tests',
                               'test_expectations')


def Validate():
  retval = 0
  for f in os.listdir(EXPECTATION_DIR):
    with open(os.path.join(EXPECTATION_DIR, f)) as infile:
      if TAG_HEADER not in infile.read():
        retval = 1
        logging.error(
            'Expectation file %s does not have a tag/result header consistent '
            'with the source of truth.', f)
  if retval:
    logging.error(
        'See %s for the expected header or run it in the "apply" mode to apply '
        'the source of truth to all expectation files.', __file__)
  return retval


def Apply():
  retval = 0
  for f in os.listdir(EXPECTATION_DIR):
    filepath = os.path.join(EXPECTATION_DIR, f)
    with open(filepath) as infile:
      content = infile.read()
    start_index = content.find(TAG_HEADER_BEGIN)
    if start_index < 0:
      retval = 1
      logging.error(
          'Expectation file %s did not have tag header start string "%s".', f,
          TAG_HEADER_BEGIN)
      continue
    end_index = content.find(TAG_HEADER_END)
    if end_index < 0:
      retval = 1
      logging.error(
          'Expectation file %s did not have tag header end string "%s".', f,
          TAG_HEADER_END)
      continue
    content = (content[:start_index + len(TAG_HEADER_BEGIN)] + '\n' +
               TAG_HEADER + content[end_index:])
    with open(filepath, 'w') as outfile:
      outfile.write(content)
  return retval


def main():
  parser = argparse.ArgumentParser(
      description=('Validate that all test expectation tags are identical '
                   'across all expectation files or apply the source of truth '
                   'to all expectation files.'))
  parser.add_argument('function',
                      choices=['apply', 'validate'],
                      help='What the script should do.')
  args = parser.parse_args()
  if args.function == 'apply':
    return Apply()
  else:
    return Validate()


if __name__ == '__main__':
  sys.exit(main())
