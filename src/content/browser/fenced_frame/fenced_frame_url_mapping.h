// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_BROWSER_FENCED_FRAME_FENCED_FRAME_URL_MAPPING_H_
#define CONTENT_BROWSER_FENCED_FRAME_FENCED_FRAME_URL_MAPPING_H_

#include <map>
#include <string>

#include "content/common/content_export.h"
#include "third_party/abseil-cpp/absl/types/optional.h"
#include "url/gurl.h"

namespace content {

// Keeps a mapping of fenced frames URN:UUID and URL. See
// https://github.com/shivanigithub/fenced-frame/blob/master/OpaqueSrc.md
// TODO(crbug.com/1216088) Also support asynchronous mapping of urn:uuid to
// url.
class CONTENT_EXPORT FencedFrameURLMapping {
 public:
  FencedFrameURLMapping();
  ~FencedFrameURLMapping();
  FencedFrameURLMapping(FencedFrameURLMapping&) = delete;

  // Converts given |urn_uuid| to the mapped URL. Only returns a GURL if a
  // mapping exists for |urn_uuid|. Should only be invoked with a valid url
  // with the urn scheme.
  absl::optional<GURL> ConvertFencedFrameURNToURL(GURL& urn_uuid);

  // Adds a mapping for |url| to a URN:UUID that will be generated by this
  // function. Should only be invoked with a valid URL which is one of the
  // "potentially trustworthy URLs".
  GURL AddFencedFrameURL(GURL& url);

 private:
  bool IsPresent(GURL& urn_uuid);
  std::map<GURL, GURL> urn_uuid_to_url_map_;
};

}  // namespace content

#endif  // CONTENT_BROWSER_FENCED_FRAME_FENCED_FRAME_URL_MAPPING_H_
