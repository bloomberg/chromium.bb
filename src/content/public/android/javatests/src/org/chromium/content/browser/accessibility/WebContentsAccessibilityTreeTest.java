// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package org.chromium.content.browser.accessibility;

import static org.chromium.content.browser.accessibility.AccessibilityContentShellActivityTestRule.NODE_ERROR;
import static org.chromium.content.browser.accessibility.AccessibilityContentShellActivityTestRule.RESULTS_NULL;
import static org.chromium.content.browser.accessibility.AccessibilityContentShellTestUtils.sClassNameMatcher;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.os.Build;
import android.view.accessibility.AccessibilityNodeInfo;

import androidx.test.filters.SmallTest;

import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

import org.chromium.base.test.util.Batch;
import org.chromium.base.test.util.MinAndroidSdkLevel;
import org.chromium.content_public.browser.test.ContentJUnit4ClassRunner;

/**
 * Tests for WebContentsAccessibilityImpl integration with accessibility services.
 */
@RunWith(ContentJUnit4ClassRunner.class)
@MinAndroidSdkLevel(Build.VERSION_CODES.LOLLIPOP)
@TargetApi(Build.VERSION_CODES.LOLLIPOP)
@SuppressLint("VisibleForTests")
@Batch(Batch.UNIT_TESTS)
public class WebContentsAccessibilityTreeTest {
    // File path that holds all the relevant tests.
    private static final String BASE_ARIA_FILE_PATH = "content/test/data/accessibility/aria/";
    private static final String BASE_HTML_FILE_PATH = "content/test/data/accessibility/html/";
    private static final String DEFAULT_FILE_SUFFIX = "-expected-android-external.txt";

    @Rule
    public AccessibilityContentShellActivityTestRule mActivityTestRule =
            new AccessibilityContentShellActivityTestRule();

    /**
     * Perform a single test which will:
     *      1. Open the given HTML file
     *      2. Generate the full AccessibilityNodeInfo tree
     *      3. Read expectations file and compare with results
     *
     * @param inputFile HTML test input file
     * @param expectationFile TXT expectations file
     * @param expectationFilePath directory that holds the test files
     */
    private void performTest(String inputFile, String expectationFile, String expectationFilePath) {
        // Build page from given file and enable testing framework.
        mActivityTestRule.setupTestFromFile(expectationFilePath + inputFile);

        // Create an extra string to print to logs along with potential error for rebase tool.
        String errorStringPrefix = String.format("\n\nTesting: %s%s\nExpected output: %s%s",
                expectationFilePath, inputFile, expectationFilePath, expectationFile);

        // Generate full AccessibilityNodeInfo tree and verify results.
        assertResults(expectationFilePath + expectationFile, generateAccessibilityNodeInfoTree(),
                errorStringPrefix);
    }

    // Helper methods to pass-through to the performTest method so each individual test does
    // not need to include its own filepath.
    private void performAriaTest(String input) {
        // Remove the '.html' from the input file, and append the standard suffix.
        performAriaTest(input, input.substring(0, input.length() - 5) + DEFAULT_FILE_SUFFIX);
    }

    private void performAriaTest(String inputFile, String expectationFile) {
        performTest(inputFile, expectationFile, BASE_ARIA_FILE_PATH);
    }

    private void performHtmlTest(String input) {
        // Remove the '.html' from the input file, and append the standard suffix.
        performHtmlTest(input, input.substring(0, input.length() - 5) + DEFAULT_FILE_SUFFIX);
    }

    private void performHtmlTest(String inputFile, String expectationFile) {
        performTest(inputFile, expectationFile, BASE_HTML_FILE_PATH);
    }

    /**
     * Helper method to compare test outputs with expected results. Reads content of expectations
     * file, asserts non-null, then compares with results.
     *
     * @param expectationFile File of the expectations for the test (including path)
     * @param actualResults Actual results generated by the accessibility code
     */
    private void assertResults(String expectationFile, String actualResults, String errorPrefix) {
        String expectedResults = mActivityTestRule.readExpectationFile(expectationFile);

        Assert.assertNotNull(RESULTS_NULL, actualResults);
        Assert.assertEquals(NODE_ERROR + errorPrefix + "\n\nExpected\n--------\n" + expectedResults
                        + "\n\nActual\n------\n" + actualResults + "\n<-- End-of-file -->\n\n\n",
                expectedResults, actualResults);
    }

    /**
     * Generate the full AccessibilityNodeInfo tree as a String of text.
     *
     * @return String The AccessibilityNodeInfo tree in text form
     */
    private String generateAccessibilityNodeInfoTree() {
        StringBuilder builder = new StringBuilder();

        // Find the root node and generate its string.
        int rootNodevvId =
                mActivityTestRule.waitForNodeMatching(sClassNameMatcher, "android.webkit.WebView");
        AccessibilityNodeInfo nodeInfo = createAccessibilityNodeInfo(rootNodevvId);
        builder.append(AccessibilityNodeInfoUtils.toString(nodeInfo));

        // Recursively generate strings for all descendants.
        for (int i = 0; i < nodeInfo.getChildCount(); ++i) {
            int childId = mActivityTestRule.getChildId(nodeInfo, i);
            AccessibilityNodeInfo childNodeInfo = createAccessibilityNodeInfo(childId);
            recursivelyFormatTree(childNodeInfo, builder, "++");
        }

        return builder.toString();
    }

    /**
     * Recursively add AccessibilityNodeInfo descendants to the given builder.
     *
     * @param node Given object to print all descendants for
     * @param builder builder to add generated Strings to
     * @param indent prefix to indent each generation, e.g. "++"
     */
    private void recursivelyFormatTree(
            AccessibilityNodeInfo node, StringBuilder builder, String indent) {
        builder.append("\n").append(indent).append(AccessibilityNodeInfoUtils.toString(node));
        for (int j = 0; j < node.getChildCount(); ++j) {
            int childId = mActivityTestRule.getChildId(node, j);
            AccessibilityNodeInfo childNodeInfo = createAccessibilityNodeInfo(childId);
            recursivelyFormatTree(childNodeInfo, builder, indent + "++");
        }
    }

    // Helper method to create an AccessibilityNodeInfo object.
    private AccessibilityNodeInfo createAccessibilityNodeInfo(int virtualViewId) {
        return mActivityTestRule.mNodeProvider.createAccessibilityNodeInfo(virtualViewId);
    }

    // ------------------ ARIA TESTS ------------------ //

    @Test
    @SmallTest
    public void test_annotationRoles() {
        performAriaTest("annotation-roles.html");
    }

    // ------------------ HTML TESTS ------------------ //

    @Test
    @SmallTest
    public void test_a() {
        performHtmlTest("a.html");
    }

    @Test
    @SmallTest
    public void test_aName() {
        performHtmlTest("a-name.html");
    }

    @Test
    @SmallTest
    public void test_aNameCalc() {
        performHtmlTest("a-name-calc.html");
    }

    @Test
    @SmallTest
    public void test_aNestedStructure() {
        performHtmlTest("a-nested-structure.html");
    }

    @Test
    @SmallTest
    public void test_aNoText() {
        performHtmlTest("a-no-text.html");
    }

    @Test
    @SmallTest
    public void test_aOnclick() {
        performHtmlTest("a-onclick.html");
    }

    @Test
    @SmallTest
    public void test_aWithBefore() {
        performHtmlTest("a-with-before.html");
    }

    @Test
    @SmallTest
    public void test_aWithImg() {
        performHtmlTest("a-with-img.html");
    }

    @Test
    @SmallTest
    public void test_tableSimple() {
        performHtmlTest("table-simple.html");
    }

    @Test
    @SmallTest
    public void test_clickableScore() {
        performHtmlTest("clickable-score.html");
    }
}