# Copyright 2021 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/buildflag_header.gni")
import("//build/config/chrome_build.gni")
import("//mojo/public/tools/bindings/mojom.gni")

declare_args() {
  # You can set the variable 'build_with_on_device_clustering_backend' to true
  # to use the on-device clustering backend even in a developer build.
  build_with_on_device_clustering_backend = !is_android && !is_ios
}

buildflag_header("history_clusters_buildflags") {
  header = "history_clusters_buildflags.h"
  flags = [ "BUILD_WITH_ON_DEVICE_CLUSTERING_BACKEND=$build_with_on_device_clustering_backend" ]
}

static_library("core") {
  sources = [
    "clustering_backend.h",
    "features.cc",
    "features.h",
    "history_clusters_db_tasks.cc",
    "history_clusters_db_tasks.h",
    "history_clusters_prefs.cc",
    "history_clusters_prefs.h",
    "history_clusters_service.cc",
    "history_clusters_service.h",
    "history_clusters_types.h",
    "history_clusters_util.cc",
    "history_clusters_util.h",
    "query_clusters_state.cc",
    "query_clusters_state.h",
  ]
  if (build_with_on_device_clustering_backend) {
    sources += [
      "cluster_finalizer.h",
      "cluster_metrics_utils.h",
      "cluster_processor.h",
      "clusterer.cc",
      "clusterer.h",
      "content_annotations_cluster_processor.cc",
      "content_annotations_cluster_processor.h",
      "content_visibility_cluster_finalizer.cc",
      "content_visibility_cluster_finalizer.h",
      "keyword_cluster_finalizer.cc",
      "keyword_cluster_finalizer.h",
      "noisy_cluster_finalizer.cc",
      "noisy_cluster_finalizer.h",
      "on_device_clustering_backend.cc",
      "on_device_clustering_backend.h",
      "on_device_clustering_features.cc",
      "on_device_clustering_features.h",
      "on_device_clustering_util.cc",
      "on_device_clustering_util.h",
      "ranking_cluster_finalizer.cc",
      "ranking_cluster_finalizer.h",
      "similar_visit_deduper_cluster_finalizer.cc",
      "similar_visit_deduper_cluster_finalizer.h",
      "single_visit_cluster_finalizer.cc",
      "single_visit_cluster_finalizer.h",
      "url_deduper_cluster_finalizer.cc",
      "url_deduper_cluster_finalizer.h",
    ]
  }
  deps = [
    ":history_clusters_buildflags",
    "//base",
    "//components/history/core/browser",
    "//components/keyed_service/core",
    "//components/optimization_guide/core:entities",
    "//components/pref_registry",
    "//components/query_parser",
    "//components/search_engines",
    "//components/site_engagement/core",
    "//components/url_formatter",
    "//net",
    "//services/network/public/cpp",
    "//services/network/public/mojom",
    "//ui/base",
    "//url",
  ]
}

source_set("unit_tests") {
  testonly = true
  sources = [
    "features_unittest.cc",
    "history_clusters_db_tasks_unittest.cc",
    "history_clusters_service_unittest.cc",
    "history_clusters_util_unittest.cc",
    "query_clusters_state_unittest.cc",
  ]
  if (build_with_on_device_clustering_backend) {
    sources += [
      "clusterer_unittest.cc",
      "content_annotations_cluster_processor_unittest.cc",
      "content_visibility_cluster_finalizer_unittest.cc",
      "keyword_cluster_finalizer_unittest.cc",
      "noisy_cluster_finalizer_unittest.cc",
      "on_device_clustering_backend_unittest.cc",
      "on_device_clustering_util_unittest.cc",
      "ranking_cluster_finalizer_unittest.cc",
      "similar_visit_deduper_cluster_finalizer_unittest.cc",
      "single_visit_cluster_finalizer_unittest.cc",
      "url_deduper_cluster_finalizer_unittest.cc",
    ]
  }
  deps = [
    ":core",
    ":test_support",
    "//base/test:test_support",
    "//components/history/core/browser",
    "//components/history/core/test",
    "//components/optimization_guide/core:entities",
    "//components/search_engines",
    "//components/site_engagement/core",
    "//services/network:test_support",
    "//testing/gtest",
  ]
}

source_set("test_support") {
  testonly = true
  sources = [
    "clustering_test_utils.cc",
    "clustering_test_utils.h",
    "history_clusters_service_test_api.cc",
    "history_clusters_service_test_api.h",
  ]
  deps = [
    ":core",
    "//base/test:test_support",
    "//components/history/core/browser",
    "//components/history/core/test",
  ]
}
