// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto2";

option optimize_for = LITE_RUNTIME;
option java_package = "org.chromium.chrome.browser.autofill_assistant.proto";
option java_multiple_files = true;

package autofill_assistant;

// An Autofill profile stored on the client. This requires to be selected by
// the user in a CollectUserData step first.
message AutofillProfile {
  optional string identifier = 1;
}

// A value expression.
message ValueExpression {
  message Chunk {
    oneof chunk {
      // An integer representation to resolve a piece of Autofill information.
      // The key is an integer corresponding to entries from field_types.h or
      // |AutofillFormatProto::AutofillAssistantCustomField|.
      // Note that the set of actually available fields are outside of our
      // control and are retrieved automatically from the selected profile or
      // credit card. In case of a credit card, the full card number as well as
      // the CVC are not available.
      int32 key = 1;
      // A plain text.
      string text = 2;
      // A client memory key. This looks up an entry in the previously stored
      // values on the client.
      string memory_key = 4;
    }

    // If the chunk fully matches the key, it will be replaced. When used
    // in a regular expression context, the key needs to be quoted. Similarly,
    // the replacement will be substituted as is, without being quoted.
    map<string, string> replacements = 3;
  }
  repeated Chunk chunk = 1;
}

// A value expression to be used as a regular expression.
message ValueExpressionRegexp {
  optional ValueExpression value_expression = 1;

  // If true, the |value_expression| will be checked case sensitively.
  // Default is case insensitive.
  optional bool case_sensitive = 4;
}

message AutofillValue {
  // The profile to be used. This has to be requested with a
  // |CollectUserDataAction| first.
  optional AutofillProfile profile = 1;
  // If credit card fields are used, the card has to be requested with a
  // |CollectUserDataAction| first.

  // The value expression.
  optional ValueExpression value_expression = 5;

  // The locale, if not specified will default to "en-US".
  optional string locale = 6;

  reserved 2 to 4;
}

message AutofillValueRegexp {
  // The profile to be used. This has to be requested with a
  // |CollectUserDataAction| first.
  optional AutofillProfile profile = 1;
  // If credit card fields are used, the card has to be requested with a
  // |CollectUserDataAction| first.

  // The regular expression value expression.
  optional ValueExpressionRegexp value_expression_re2 = 3;

  // The locale. If not specified will default to "en-US".
  optional string locale = 4;

  reserved 2;
}

// A wrapper for regular expressions, e.g. used for filtering elements by their
// text.
message TextFilter {
  // Javascript RE2 regular expression to apply to the text. This is evaluated
  // with Regexp.test, so it's a "find" and will be satisfied whenever the
  // text contains at least one substring that matches the given regular
  // expression.
  optional string re2 = 1;

  // If true, the regular expression is case-sensitive.
  optional bool case_sensitive = 2;
}

// A value that allows filling usernames and passwords stored in the password
// manager. The credentials have to be selected before in a CollectUserData
// step.
message PasswordManagerValue {
  enum CredentialType {
    NOT_SET = 0;
    PASSWORD = 1;
    USERNAME = 2;
  }

  optional CredentialType credential_type = 1;
}

message TextValue {
  oneof value {
    string text = 1;
    AutofillValue autofill_value = 2;
    PasswordManagerValue password_manager_value = 3;
    string client_memory_key = 4;
  }
}

// A key event, for definition see here:
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchKeyEvent
message KeyEvent {
  // Unique DOM defined string value for each physical key (e.g., 'KeyA').
  optional string code = 2;
  // Text as generated by processing a virtual key code with a keyboard layout.
  optional string text = 3;
  // Unique DOM defined string value describing the meaning of the key in the
  // context of active modifiers, keyboard layout, etc (e.g., 'AltGr').
  optional string key = 4;
  // Editing commands to send with the key event (e.g., 'selectAll').
  // The list of commands can be found here:
  // https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h
  repeated string command = 5;
  // Legacy keyCode for the KeyEvent:
  // https://w3c.github.io/uievents/#dom-keyboardevent-keycode
  // This is populated on a best-effort basis, with some characters mapped
  // assuming content expects US English layout input, as specified by:
  // https://w3c.github.io/uievents/#determine-keydown-keyup-keyCode
  // VKEY_UNKNOWN otherwise.
  optional int32 key_code = 6;

  reserved 1;
}
