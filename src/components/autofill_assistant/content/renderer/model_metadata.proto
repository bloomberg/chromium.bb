// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto2";

option optimize_for = LITE_RUNTIME;

package autofill_assistant;

// Metadata required to preprocess the model inputs and postprocess the model
// outputs.
message ModelMetadata {
  // Metadata to preprocess the tag features.
  message TagMetadata {
    // Vocabulary in the format needed by RegexTokenizer (one token and token
    // index per line).
    optional string vocabulary = 1;
  }
  // Metadata to preprocess the type features.
  message TypeMetadata {
    // Vocabulary in the format needed by RegexTokenizer (one token and token
    // index per line).
    optional string vocabulary = 1;
  }
  // Metadata to preprocess the text features.
  message TextMetadata {
    // Vocabulary in the format needed by RegexTokenizer (one token and token
    // index per line).
    optional string vocabulary = 1;
    // Regex for the RegexTokenizer.
    optional string regex = 2;
  }
  // Metadata needed to preprocess the model inputs.
  message InputMetadata {
    optional TagMetadata tag = 1;
    optional TypeMetadata type = 2;
    optional TextMetadata text = 3;
  }

  // Metadata used to evaluate the semantic role.
  message SemanticRoleMetadata {
    // List of semantic roles corresponding to each index of the semantic role
    // output vector.
    repeated int32 classes = 1 [packed = true];
    // For each index i of the output vector, objective_block_index[i] gives the
    // index of the block of objectives to read to decode the objective. See
    // ObjectiveMetadata.blocks.
    repeated int32 objective_block_index = 2 [packed = true];
  }
  // Metadata used to evaluate the objective.
  message ObjectiveMetadata {
    // List of objectives corresponding to each index of the objective output
    // vector.
    repeated int32 classes = 1 [packed = true];
    // A list of integers describing how to split the objective output vector v
    // into interpretable blocks. The outputs v[blocks[i]:blocks[i+1]]
    // correspond to the scores of a block of objective predictions. In
    // particular, blocks[-1] is always equal to the size of the objective
    // output vector.
    repeated int32 blocks = 2 [packed = true];
  }
  // Metadata needed to interpret the model outputs.
  message OutputMetadata {
    optional SemanticRoleMetadata semantic_role = 1;
    optional ObjectiveMetadata objective = 2;
  }

  optional InputMetadata input = 1;
  optional OutputMetadata output = 2;
}
