# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//third_party/protobuf/proto_library.gni")

static_library("features") {
  sources = [
    "features.cc",
    "features.h",
  ]

  deps = [
    "//base:base",
    "//components/safe_browsing:buildflags",
  ]
}

proto_library("csd_proto") {
  sources = [ "proto/csd.proto" ]
}

proto_library("webui_proto") {
  sources = [ "proto/webui.proto" ]
}

proto_library("realtimeapi_proto") {
  sources = [ "proto/realtimeapi.proto" ]
  deps = [ ":csd_proto" ]
}

proto_library("webprotect_proto") {
  sources = [ "proto/webprotect.proto" ]
}

proto_library("client_model_proto") {
  sources = [ "proto/client_model.proto" ]
  deps = [ ":csd_proto" ]
}

static_library("ping_manager") {
  sources = [
    "ping_manager.cc",
    "ping_manager.h",
  ]

  public_deps = [ "//google_apis:google_apis" ]

  deps = [
    "//base:base",
    "//components/safe_browsing/core/db:hit_report",
    "//components/safe_browsing/core/db:util",
    "//net:net",
    "//services/network/public/cpp",
  ]
}

source_set("ping_manager_unittest") {
  testonly = true
  sources = [ "ping_manager_unittest.cc" ]

  deps = [
    ":ping_manager",
    "//base:base",
    "//components/safe_browsing/core/db:v4_test_util",
    "//net:net",
    "//net:test_support",
    "//testing/gtest",
  ]
}

source_set("verdict_cache_manager") {
  sources = [
    "verdict_cache_manager.cc",
    "verdict_cache_manager.h",
  ]

  deps = [
    ":csd_proto",
    ":realtimeapi_proto",
    "//base",
    "//components/content_settings/core/browser",
    "//components/history/core/browser",
    "//components/keyed_service/core:core",
    "//components/password_manager/core/browser:browser",
    "//components/safe_browsing/core/common:thread_utils",
    "//components/safe_browsing/core/db:v4_protocol_manager_util",
    "//url",
  ]
}

source_set("verdict_cache_manager_unittest") {
  testonly = true
  sources = [ "verdict_cache_manager_unittest.cc" ]

  deps = [
    ":csd_proto",
    ":realtimeapi_proto",
    ":verdict_cache_manager",
    "//base",
    "//components/content_settings/core/browser",
    "//components/safe_browsing/core/common:test_support",
    "//components/sync_preferences:test_support",
    "//testing/gtest",
  ]
}

# safe_browsing/ pulls in content/, which doesn't work on iOS.
# TODO(thakis): This should be `safe_browsing_mode != 0`, but chromecast builds
# set safe_browsing_mode to 0 and build chrome/, and chrome/ currently
# unconditionally depends on things in this build file. Make these dependencies
# conditional on safe_browsing_mode != 0 and then change the conditional here.
if (!is_ios) {
  assert(!is_ios, "safe_browsing/ pulls in content/ which doesn't work on iOS")

  source_set("public") {
    sources = [
      "safe_browsing_service_interface.cc",
      "safe_browsing_service_interface.h",
    ]

    deps = [
      "//base:base",
      "//content/public/browser",
    ]
  }
}

# These files have no content/ dependency, but we still aren't building them on
# on iOS since we don't ship download protection on that platform.
# TODO(crbug/1056278): Enable this on Fuchsia
if (!is_ios && !is_fuchsia) {
  proto_library("download_file_types_proto") {
    sources = [ "proto/download_file_types.proto" ]
  }

  source_set("file_type_policies") {
    sources = [
      "file_type_policies.cc",
      "file_type_policies.h",
    ]

    public_deps = [ ":download_file_types_proto" ]

    deps = [
      "//base",
      "//components/resources:components_resources",
      "//ui/base",
    ]
  }

  source_set("file_type_policies_test_support") {
    testonly = true
    sources = [
      "file_type_policies_test_util.cc",
      "file_type_policies_test_util.h",
    ]

    deps = [ ":file_type_policies" ]
  }

  source_set("file_type_policies_unittest") {
    testonly = true
    sources = [ "file_type_policies_unittest.cc" ]

    deps = [
      ":file_type_policies",
      "//base:base",
      "//testing/gmock:gmock",
      "//testing/gtest:gtest",
    ]
  }
}
