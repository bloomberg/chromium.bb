// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// If you change or add any fields in this file, update proto_visitors.h and
// potentially proto_enum_conversions.{h, cc}.

syntax = "proto2";

option java_multiple_files = true;
option java_package = "org.chromium.components.sync.protocol";

option optimize_for = LITE_RUNTIME;

package sync_pb;

// WebauthnCredentialSpecifics is an entity that backs a WebAuthn
// PublicKeyCredential. Since it contains the authenticator’s view of this
// object, it has a private key rather than a public key.
// (https://www.w3.org/TR/webauthn-2/#iface-pkcredential).
//
// Names of fields are taken from WebAuthn where possible. E.g.
// user.displayName in WebAuthn becomes user_display_name here.
//
// All fields are immutable after creation except for user_display_name, which
// may be updated by a user.
message WebauthnCredentialSpecifics {
  // Sync's ID for this entity (sometimes called the client unique tag), 16
  // random bytes. This value is used within Sync to identify this entity. The
  // credential ID is not used because the (hashed) sync_id is exposed to the
  // Sync server, and we don’t want Google to be able to map a credential ID to
  // an account. Password entities construct this value from the concatenation
  // of many fields and depend on the fact that the server only sees a hash of
  // it. But the only high-entropy secret here is the private key, which will
  // have different encryption in the future, and private keys are not the sort
  // of data to copy into other fields. Therefore this independent value is
  // provided to form the client's ID.
  optional bytes sync_id = 1;

  // The credential ID, 16 random bytes. This is a value surfaced in
  // the WebAuthn API (https://www.w3.org/TR/webauthn-2/#credential-id).
  optional bytes credential_id = 2;

  // An RP ID is a WebAuthn concept:
  // https://www.w3.org/TR/webauthn-2/#rp-id. It’s usually a domain name,
  // although in non-Web contexts it can be a URL with a non-Web scheme.
  optional string rp_id = 3;

  // The user ID, which is also called a “user handle” in WebAuthn
  // (https://www.w3.org/TR/webauthn-2/#user-handle), is an RP-specific
  // identifier that is up to 64-bytes long. An authenticator conceptually only
  // stores a single credential for a given (rp_id, user_id) pair, but there
  // may be several credentials in Sync. They are prioritised using
  // newly_shadowed_credential_ids and creation_time. See below.
  //
  // (We wish to be able to retain several entities for a single (rp_id,
  // user_id) pair because there’s an edge case where we may wish to revert to
  // an older entry and thus need to keep the older entry around in Sync. The
  // revert could happen on a different device too.)
  optional bytes user_id = 4;

  // The id of credentials with the same (rp_id, user_id) that were
  // shadowed by the creation of this entity.
  //
  // A credential is shadowed if one or more other credentials (from the same
  // account, and with the same (rp_id, user_id)) include its credential_id in
  // their list of shadowed IDs. Shadowed credentials are ignored when finding
  // a credential to sign with. If there is more than one candidate remaining
  // after filtering shadowed credentials then the most recently created (based
  // on creation_time) is used.
  //
  // The reason for all this is that sites can replace a credential by creating
  // another one with the same (rp_id, user_id) pair. However, we don't
  // immediately know whether the WebAuthn response reached the website's
  // server. Consider a user with a poor internet connection. Javascript in the
  // site's origin triggers a credential creation that “overwrites” an existing
  // credential, but the Javascript is unable to send the new public key to the
  // website's server. The user is now locked out: the old credential has been
  // over-written but the website's server doesn't know about the new one.
  //
  // Thus we wish to keep “overwritten” credentials around for a while to allow
  // for some sort of recovery. In the simple case, a new credential shadows
  // the single, previous old credential. We could depend on creation_time, but
  // client clocks aren't always accurate, thus this field.
  //
  // In complicated cases two devices might race to replace a credential, in
  // which case (after mutual syncing) two candidate credentials exist for the
  // same (rp_id, user_id) pair because neither shadows the other. In this case
  // we pick the newest based on |creation_time| but it's quite possible that
  // some recovery will be needed because the website's server thinks the other
  // one is correct.
  //
  // A generation counter isn't used because a single device might replace a
  // series of credentials as it tries to update the website's server. But that
  // doesn't mean that it should dominate a different device that replaced it
  // only once, but later.
  repeated bytes newly_shadowed_credential_ids = 5;

  // The local time on the device when this credential was created. Given in
  // milliseconds since the UNIX epoch. This is used to break ties between
  // credentials. See newly_shadowed_credential_ids.
  optional int64 creation_time = 6;

  // The human-readable account identifier. Usually an email address.
  // https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialentity-name
  optional string user_name = 7;

  // The human-readable name. Usually a legal name. This is the only mutable
  // field in a credential.
  // https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-displayname.
  optional string user_display_name = 8;

  // The bytes of the private key, in a format known to the consumers of these
  // sync entities. In the future the private key may be encrypted with a
  // different key and then stored in a future encrypted_private_key field.
  optional bytes private_key = 9;

  // Credentials may optionally be used as part of Web Payments Secure Payment
  // Confirmation[1]. This is opt-in at creation time.
  //
  // [1] https://www.w3.org/TR/secure-payment-confirmation/
  enum PaymentsSupport {
    // Indicates that this credential cannot be used to authenticate a payment.
    NONE = 0;
    // Indicates that the credential may authenticate a payment, but only for
    // the same RP ID (i.e. same site) that created it.
    FIRST_PARTY = 1;
    // Indicates that the credential may authenticate a payment on any site.
    FIRST_AND_THIRD_PARTY = 2;
  };
  optional PaymentsSupport payments_support = 10;

  // Support for CTAP 2.1 may require the addition of fields such as cred_blob
  // and hmac_secret_key in the future, but they are not currently supported.
}
