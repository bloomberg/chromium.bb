// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto2";
option optimize_for = LITE_RUNTIME;
option java_package = "org.chromium.components.optimization_guide.proto";
option java_outer_classname = "CommonTypesProto";

package optimization_guide.proto;

// Loading milestones that Perfect Heuristics experiments can use as delays.
enum PerfectHeuristicsDelayType {
  DELAY_TYPE_UNKNOWN = 0;
  DELAY_TYPE_FINISHED_PARSING = 1;
  DELAY_TYPE_FIRST_PAINT_OR_FINISHED_PARSING = 2;
  DELAY_TYPE_FIRST_PAINT = 3;
  DELAY_TYPE_FIRST_CONTENTFUL_PAINT = 4;
}

// The possible effective connection type values.
//
// The values should match those of //net/nqe/effective_connection_type.h in the
// Chromium repository.
enum EffectiveConnectionType {
  // Effective connection type reported when the network quality is unknown.
  EFFECTIVE_CONNECTION_TYPE_UNKNOWN = 0;

  // Effective connection type reported when the Internet is unreachable,
  // either because the device does not have a connection or because the
  // connection is too slow to be usable.
  EFFECTIVE_CONNECTION_TYPE_OFFLINE = 1;

  // Effective connection type reported when the network has the quality of a
  // poor 2G connection.
  EFFECTIVE_CONNECTION_TYPE_SLOW_2G = 2;

  // Effective connection type reported when the network has the quality of a
  // faster 2G connection.
  EFFECTIVE_CONNECTION_TYPE_2G = 3;

  // Effective connection type reported when the network has the quality of a
  // 3G connection.
  EFFECTIVE_CONNECTION_TYPE_3G = 4;

  // Effective connection type reported when the network has the quality of a
  // 4G connection.
  EFFECTIVE_CONNECTION_TYPE_4G = 5;
}

// Context in which the items are requested.
enum RequestContext {
  reserved 1;
  // Context not specified.
  CONTEXT_UNSPECIFIED = 0;
  // Requesting items on page navigation.
  CONTEXT_PAGE_NAVIGATION = 2;
  // Requesting items as part of a batch update.
  CONTEXT_BATCH_UPDATE = 3;
}

message FieldTrial {
  // The hash of a field trial.
  optional uint32 name_hash = 1;
  // The hash of the active group within the field trial.
  optional uint32 group_hash = 2;
}

// A Duration represents a signed, fixed-length span of time represented
// as a count of seconds and fractions of seconds at nanosecond
// resolution. It is independent of any calendar and concepts like "day"
// or "month". It is related to Timestamp in that the difference between
// two Timestamp values is a Duration and it can be added or subtracted
// from a Timestamp. Range is approximately +-10,000 years.
// This is local definition matching server side duration.proto definition.
message Duration {
  // Signed seconds of the span of time. Must be from -315,576,000,000
  // to +315,576,000,000 inclusive.
  optional int64 seconds = 1;

  // Signed fractions of a second at nanosecond resolution of the span
  // of time. Durations less than one second are represented with a 0
  // `seconds` field and a positive or negative `nanos` field. For durations
  // of one second or more, a non-zero value for the `nanos` field must be
  // of the same sign as the `seconds` field. Must be from -999,999,999
  // to +999,999,999 inclusive.
  optional int32 nanos = 2;
}
