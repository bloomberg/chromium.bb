// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Next MinVersion: 37

module arc.mojom;

import "components/arc/mojom/bitmap.mojom";
import "components/arc/mojom/camera_intent.mojom";
import "components/arc/mojom/intent_common.mojom";
import "components/arc/mojom/scale_factor.mojom";

[Extensible]
enum PatternType {
  PATTERN_LITERAL,
  PATTERN_PREFIX,
  PATTERN_SIMPLE_GLOB,
};

[Extensible]
enum ShareFiles {
  // 0 and 3: capture that everything went great, the files were copied.
  SINGLE_FILE_SUCCESS = 0,
  // 1 and 4: Whenever we fail to copy, we try to delete the partially copied
  // files, if the backroll goes well we call this entry.
  SINGLE_FILE_BACKROLLED = 1,
  // 2 and 5: Whenever we are unable to backroll because something else went
  // wrong, we place this error on the MISC_ERROR bin. (it could have been a bad
  // file descriptor, or just a read/write error)
  SINGLE_FILE_MISC_ERROR = 2,
  MULTIPLE_FILES_SUCCESS = 3,
  MULTIPLE_FILES_BACKROLLED = 4,
  MULTIPLE_FILES_MISC_ERROR = 5,
  // This records a faulty response from DocumentsUI, since our implementation
  // relies on DocumentsUI, sometimes it may return a bad response that we
  // cannot process (e.g. for a single file DocumentsUI is in charge of creating
  // the new file where we will copy, if it fails it can send us a bad response
  // or maybe DocumentsUI is not returning the expected flags).
  BAD_RESPONSE_FROM_DOCUMENTS_UI = 6,
};

struct PatternMatcher {
  string pattern;
  PatternType type;
};

struct AuthorityEntry {
  string host;
  int32 port;
};

struct UriComponents {
  string scheme; // Scheme to create URI in ARC.
  string authority; // Authority to create URI in ARC.
  string path; // Path to create URI in ARC.
};

struct IntentInfo {
  string action;
  array<string>? categories;
  string? data;  // URI
  string? type;  // explicit MIME type for data
  [MinVersion=13] string? clip_data_uri;  // optional URI to provide as ClipData.
  [MinVersion=20] bool ui_bypassed; // Whether or not the user saw the UI.

  // Optional string extras. These are the key-value pairs stored in android
  // intents to carry additional data. See:
  // https://developer.android.com/reference/android/content/Intent#putExtra(java.lang.String,%20java.lang.String)
  [MinVersion=22] map<string, string>? extras;

  // Optional URI components to build data URI in ARC. If |IntentInfo.data| is
  // set, this field will be ignored.
  [MinVersion=30] UriComponents? uri_components;
};

struct IntentFilter {
  array<string> actions;
  array<string> categories;
  array<string> data_schemes;
  [MinVersion=10] array<AuthorityEntry>? data_authorities;
  [MinVersion=10] array<PatternMatcher>? data_paths;
  [MinVersion=10] array<PatternMatcher>? deprecated_data_scheme_specific_parts;
  [MinVersion=21] string? package_name; // Package which registered the filter.
};

// Describes a package that can handle an intent.
struct IntentHandlerInfo {
  string name;
  string package_name;
  string activity_name;  // A hint for retrieving the package's icon.
  [MinVersion=4] ActionType action_type;
  [MinVersion=6] bool is_preferred;
  [MinVersion=11] string? action;  // e.g. "android.intent.action.VIEW"
  // RequestUrlHandlerList may fill |fallback_url| when it is called with an
  // intent: URL.
  [MinVersion=14] string? fallback_url;
};

// Describes an icon for the activity.
struct ActivityIcon {
  ActivityName activity;
  uint32 width;  // in px
  uint32 height;  // in px
  array<uint8> icon;  // in BGRA8888 format
};

// URL associated with its mime type.
struct UrlWithMimeType {
  string url;
  string mime_type;
};

// Describes a specific page in chrome://, about:blank, about:downloads and about:history.
[Extensible]
enum ChromePage {
  MULTIDEVICE,
  MAIN,
  POWER,
  BLUETOOTH,
  DATETIME,
  DISPLAY,
  WIFI,
  LANGUAGES,
  PRIVACY,
  HELP,
  ACCOUNTS,
  APPEARANCE,
  AUTOFILL,
  BLUETOOTHDEVICES,
  CHANGEPICTURE,
  CLEARBROWSERDATA,
  CLOUDPRINTERS,
  CUPSPRINTERS,
  DOWNLOADS,
  KEYBOARDOVERLAY,
  LOCKSCREEN,
  MANAGEACCESSIBILITY,
  NETWORKSTYPEVPN,
  ONSTARTUP,
  PASSWORDS,
  POINTEROVERLAY,
  RESET,
  SEARCH,
  STORAGE,
  SYNCSETUP,
  ABOUTBLANK,
  ABOUTDOWNLOADS,
  ABOUTHISTORY,
  CROSTINIDISKRESIZE,
  ACCESSIBILITY,
  ACCOUNTMANAGER,
  ANDROIDAPPSDETAILS,
  ANDROIDAPPSDETAILSINBROWSERSETTINGS,
  APPMANAGEMENT,
  APPMANAGEMENTDETAILS,
  ASSISTANT,
  CONNECTEDDEVICES,
  CROSTINISHAREDPATHS,
  CROSTINISHAREDUSBDEVICES,
  CROSTINIEXPORTIMPORT,
  EXTERNALSTORAGE,
  INTERNET,
  KERBEROSACCOUNTS,
  KNOWNNETWORKS,
  MANAGEACCESSIBILITYTTS,
  SMARTLOCKSETTINGS,
  SWITCHACCESS,
  STYLUS,
  TETHERSETTINGS,
  ETHERNET,
  CELLULAR,
  AMBIENTMODE,
  DEPRECATED_PLUGINVMDETAILS,
  PLUGINVMSHAREDPATHS,
  OSACCESSIBILITY,
  OSLANGUAGES,
  OSLANGUAGESDETAILS,
  OSLANGUAGESINPUTMETHODS,
  OSPRINTING,
  PRINTING,
  OSPEOPLE,
  OSPRIVACY,
  OSSEARCH,
  OSRESET,
  OSLANGUAGESSMARTINPUTS,
  DOWNLOADEDCONTENT,

  LAST = DOWNLOADEDCONTENT
};

// Describes an unique chrome app.
[Extensible]
enum ChromeApp {
  CAMERA,

  LAST = CAMERA,
};

// Describes an action given by the android text selection delegate (e.g. open
// maps).
struct TextSelectionAction {
  // The icon of the component that can handle the action intent.
  ActivityIcon icon;

  // The activity and package name of the component that handle the intent.
  ActivityName activity;

  // The title of the action that will be shown in the UI, e.g. "Map", "Call",
  // "Open".
  string title;

  // The intent to launch when the action is clicked.
  IntentInfo action_intent;

  // Whether the action was generated by the Android TextClassifier.
  [MinVersion=23] bool text_classifier_action;

  // The bitmap icon of the component that can handle the action intent.
  [MinVersion=23] ArcBitmap? bitmap_icon;
};

// Interface to interact with a custom tab.
// Close the interface pointer to close the custom tab.
// Next method ID: 1
interface CustomTabSession {
  // Called when "Open in Chrome" button on the custom tab is clicked.
  [MinVersion=26] OnOpenInChromeClicked@0();
};

// Handles intents from ARC in Chrome.
// Deprecated method ID: 4
// Next method ID: 17
interface IntentHelperHost {
  // Called when icons associated with the package are no longer up to date.
  [MinVersion=3] OnIconInvalidated@1(string package_name);

  // Called when intent filters are updated on startup.
  [MinVersion=9] OnIntentFiltersUpdated@5(array<IntentFilter> intent_filters);

  // Opens the downloads directory in the Chrome OS file manager.
  [MinVersion=5] OnOpenDownloads@2();

  // Opens the url with Chrome for Chrome OS.
  // This function is intended to only open URLs that other web content in Chrome would be able to
  // navigate to as well. No special URLs that allow access to privileged functions are allowed.
  OnOpenUrl@0(string url);

  // Opens the url with a custom tab.
  // |task_id| and |surface_id| specify the Android task and the surface on
  // which the custom tab should be shown.
  // |top_margin| is the height of the space at the top of the window which
  // needs to be vacant to display the top bar rendered by Android code.
  [MinVersion=25] OnOpenCustomTab@10(string url,
                                     int32 task_id,
                                     int32 surface_id,
                                     int32 top_margin)
      => (CustomTabSession? session);

  // Opens the wallpaper picker dialog.
  [MinVersion=6] OpenWallpaperPicker@3();

  // Sets an image as the wallpaper.
  // |jpeg_data| is a JPEG encoded wallpaper image.
  [MinVersion=8] SetWallpaperDeprecated@4(array<uint8> jpeg_data);

  // Opens the volume control.
  [MinVersion=16] OpenVolumeControl@6();

  // Opens the specified Chrome page in the Chrome browser.
  [MinVersion=17] OnOpenChromePage@7([MinVersion=18] ChromePage page);

  // Opens the specified URL as a web app if it is installed. Otherwise falls
  // back to the behaviour of OnOpenUrl. |url| must have a HTTPS scheme.
  [MinVersion=23] OnOpenWebApp@8(string url);

  // Records Sharing files feature's metrics via Chrome.
  [MinVersion=24] RecordShareFilesMetrics@9(ShareFiles flag);

  // Does a reset of ARC; this wipes /data, and then re-calls on OOBE for
  // account binding to happen again, as if the user just went through OOBE.
  [MinVersion=27] FactoryResetArc@11();

  // Launches camera app from the camera intent.
  // |intent_id| is an unique id that used to recognize different intents.
  // |mode| indicates which mode should camera app land on. If
  // |should_handle_result| is true, the intent expects the captured result
  // will be returned after capturing. If |should_down_scale| is true, the
  // intent expects the captured image would be down-scaled to a small enough
  // size. If |is_secure| is true, the intent is fired when the device is
  // secured, which means the camera app should not show any user-sensitive
  // data. |task_id| represents the id of the caller task in ARC.
  [MinVersion=28] LaunchCameraApp@12(uint32 intent_id,
                                     CameraIntentMode mode,
                                     bool should_handle_result,
                                     bool should_down_scale,
                                     bool is_secure,
                                     [MinVersion=36] int32 task_id);

  // Called when intent filters are updated for one package. This will be
  // called when apps are installed, uninstalled or updated.
  [MinVersion=29] OnIntentFiltersUpdatedForPackage@13(
      string package_name, array<IntentFilter> intent_filters);

  // Closes Chrome camera app.
  [MinVersion=31] CloseCameraApp@14();

  // Checks if given chrome app is enabled.
  [MinVersion=33] IsChromeAppEnabled@15(ChromeApp app) => (bool is_enabled);

  // Send the preferred app changes from ARC to Chrome.
  [MinVersion=34] OnPreferredAppsChanged@16(array<IntentFilter> added,
                                            array<IntentFilter> deleted);
};

// Sends intents to ARC on behalf of Chrome.
// Next method ID: 19
interface IntentHelperInstance {
  // Sets the given package as a preferred package. The next time an ACTION_VIEW
  // intent is sent with a URL that requires disambiguation, instead of opening
  // the ResolverActivity, this package will be picked if it is on the list.
  // When multiple packages are set as preferred, the most recent setting wins.
  [MinVersion=7] AddPreferredPackage@8(string package_name);

  // Sets the given package as a preferred app for the given |intent_filter|
  // and |intent_info|.
  // The |package_name| is selected by the user on Chrome-side to remember the
  // user preference. The |intent_info| is used to generate the components set
  // and match for setting the preferred activity.
  // This is used to sync the preferred app setting from Chrome OS.
  [MinVersion=32] AddPreferredApp@17(string package_name,
                                     IntentFilter intent_filter,
                                     IntentInfo intent_info);

  // Reset the verified link domain status to always ask for the
  // |package_names|.
  // This method will be called when Chrome OS replaced the preferred package
  // from an ARC app to something else.
  [MinVersion=35] ResetVerifiedLinks@18(array<string> package_names);

  // DEPRECATED. Use FileSystemInstance.GetFileSize() instead.
  [MinVersion=15] GetFileSizeDeprecated@11(string url) => (int64 size);

  // Passes an intent to an activity.
  [MinVersion=12] HandleIntent@10(IntentInfo intent, ActivityName activity);

  // Handles the URL by sending an ACTION_VIEW intent to the package. The
  // most suitable activity for the URL within the package will be started.
  [MinVersion=2] HandleUrl@2(string url, string package_name);

  // DEPRECATED. Use FileSystemInstance.OpenUrlsWithPermission() instead.
  [MinVersion=5] HandleUrlListDeprecated@7(array<UrlWithMimeType> urls,
                                           ActivityName activity,
                                           ActionType action_type);

  // DEPRECATED: Please use Init@13 instead.
  InitDeprecated@0(IntentHelperHost host_ptr);

  // Establishes full-duplex communication with the host.
  [MinVersion=19] Init@13(IntentHelperHost host_ptr) => ();

  // DEPRECATED. Use FileSystemInstance.OpenFileToRead() instead.
  [MinVersion=15] OpenFileToReadDeprecated@12(string url) => (handle? fd);

  // Requests 48dp * 48dp icons of the |activities| suitable for the
  // |scale_factor|. An array of icon data will be returned.
  [MinVersion=3] RequestActivityIcons@4(array<ActivityName> activities,
                                        ScaleFactor scale_factor)
      => (array<ActivityIcon> icons);

  // Requests a list of packages that can handle |intent|.
  [MinVersion=12] RequestIntentHandlerList@9(IntentInfo intent)
      => (array<IntentHandlerInfo> handlers);

  // Requests a list of packages that can handle the URL.
  [MinVersion=2] RequestUrlHandlerList@3(string url)
      => (array<IntentHandlerInfo> handlers);

  // Requests a list of packages that can handle the list of files.
  [MinVersion=4] RequestUrlListHandlerList@6(array<UrlWithMimeType> urls)
      => (array<IntentHandlerInfo> handlers);

  // Send an Android broadcast message to the Android package and class
  // specified.  Data can be sent as extras by including a JSON map string which
  // will be automatically converted to a bundle accessible by the receiver.
  //
  // Note: Broadcasts can only be sent to whitelisted packages.  Packages can be
  // added to the whitelist in ArcBridgeService.java in the Android source.
  [MinVersion=1] SendBroadcast@1(string action,
                                 string package_name,
                                 string cls,
                                 string extras);

  // Asks TextClassifier to generate an action that can handle the |text|.
  // |scale_factor| is used to find a suitable icon to show in the context menu.
  [MinVersion=21] ClassifySelectionDeprecated@14(string text,
                                                 ScaleFactor scale_factor)
      => (TextSelectionAction? action);

  // Asks ChromeTextSelectionDelegate to generate actions that can handle the
  // |text|. |scale_factor| is used to find a suitable icon to show in the
  // context menu.
  [MinVersion=22] RequestTextSelectionActions@15(string text,
                                                 ScaleFactor scale_factor)
      => (array<TextSelectionAction> actions);

  // Sends the captured result |data| for corresponding intent recognized by
  // |intent_id| back to ARC. The handler should handle |data| and maybe notify
  // the intent caller according to the intention of the |action|. |is_success|
  // will be set to true if the ARC received the result and set to false for
  // invalid input.
  [MinVersion=28] HandleCameraResult@16(uint32 intent_id,
                                        CameraIntentAction action,
                                        array<uint8> data)
      => (bool is_success);
};
