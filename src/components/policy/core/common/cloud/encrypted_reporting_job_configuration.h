// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_POLICY_CORE_COMMON_CLOUD_ENCRYPTED_REPORTING_JOB_CONFIGURATION_H_
#define COMPONENTS_POLICY_CORE_COMMON_CLOUD_ENCRYPTED_REPORTING_JOB_CONFIGURATION_H_

#include <memory>
#include <string>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"
#include "base/values.h"
#include "components/policy/core/common/cloud/device_management_service.h"
#include "components/policy/core/common/cloud/reporting_job_configuration_base.h"
#include "components/policy/policy_export.h"
#include "components/policy/proto/record.pb.h"
#include "components/policy/proto/record_constants.pb.h"

namespace policy {

class CloudPolicyClient;

// EncryptedReportingJobConfiguration configures a payload for the Encrypted
// server endpoint. A JSON version of the payload looks like this:
// {
//   "encryptedRecord": [
//     {
//       "encryptedWrappedRecord": "EncryptedMessage",
//       "encryptionInfo" : {
//         "encryptionKey": "EncryptedMessage",
//         "publicKeyId": 1
//       },
//       "sequencingInformation": {
//         "sequencingId": 1,
//         "generationId": 123456789,
//         "priority": 1
//       }
//    },
//    {
//       "encryptedWrappedRecord": "EncryptedMessage",
//       "encryptionInfo" : {
//         "encryptionKey": "EncryptedMessage",
//         "publicKeyId": 2
//       },
//       "sequencingInformation": {
//         "sequencingId": 2,
//         "generationId": 123456789,
//         "priority": 1
//       }
//    }
//   },
//   "device": {
//     "client_id": "abcdef1234",
//     "dmToken": "abcdef1234",
//     "name": "George",
//     "osPlatform": "Windows",
//     "osVersion": "10.0.0.0"
//   },
//   "browser": {
//     "browserId": "abcdef1234",
//     "chromeVersion": "10.0.0.0",
//     "machineUser": "abcdef1234",
//     "userAgent": "abcdef1234"
//   }
// }
class POLICY_EXPORT EncryptedReportingJobConfiguration
    : public ReportingJobConfigurationBase {
 public:
  EncryptedReportingJobConfiguration(CloudPolicyClient* client,
                                     const std::string& server_url,
                                     UploadCompleteCallback callback);
  ~EncryptedReportingJobConfiguration() override;

  // Adds a record to the request.
  // returns true if record was successfully added to the payload, otherwise
  // returns false.
  bool AddEncryptedRecord(const ::reporting::EncryptedRecord& record);

  // |context| is a base::Value item as generated by |reporting::GetContext|.
  // |context| will be stored and applied to the payload on the proceeding
  // |GetPayload| call. |context| mostly fills out the profile dictionary, but
  // does overwrite a few of the device and browser fields (check
  // reporting::GetContext for specifics).
  void UpdateContext(base::Value& context);

  static std::string GetEncryptedRecordListKey();

 protected:
  std::string GetUmaString() const override;

 private:
  // Builds a |base::Value| dictionary from a |reporting::EncryptedRecord|
  // proto.
  class POLICY_EXPORT EncryptedRecordDictionaryBuilder {
   public:
    EncryptedRecordDictionaryBuilder() = delete;

    static base::Optional<base::Value> ConvertEncryptedRecordProtoToValue(
        const ::reporting::EncryptedRecord& record);

    // Path for EncryptedWrappedRecord
    static std::string GetEncryptedWrappedRecordPath();

    // Paths for SequencingInformation
    static std::string GetSequencingInformationSequencingIdPath();
    static std::string GetSequencingInformationGenerationIdPath();
    static std::string GetSequencingInformationPriorityPath();

    // Paths for EncryptionInfo
    static std::string GetEncryptionInfoEncryptionKeyPath();
    static std::string GetEncryptionInfoPublicKeyIdPath();

   private:
    static const char kEncryptedWrappedRecord_[];
    static const char kSequencingInformationKey_[];
    static const char kEncryptionInfoKey_[];
  };

  // Builds a |base::Value| dictionary from a |reporting::SequencingInformation|
  // proto.
  class SequencingInformationDictionaryBuilder {
   public:
    SequencingInformationDictionaryBuilder() = delete;

    static base::Optional<base::Value> ConvertSequencingInformationProtoToValue(
        const ::reporting::SequencingInformation& sequencing_information);

    static std::string GetSequencingIdPath();
    static std::string GetGenerationIdPath();
    static std::string GetPriorityPath();

   private:
    static const char kSequencingId_[];
    static const char kGenerationId_[];
    static const char kPriority_[];
  };

  // Builds a |base::Value| dictionary from a |reporting::EncryptionInfo| proto.
  class EncryptionInfoDictionaryBuilder {
   public:
    EncryptionInfoDictionaryBuilder() = delete;

    static base::Optional<base::Value> ConvertEncryptionInfoProtoToValue(
        const ::reporting::EncryptionInfo& encryption_info);

    static std::string GetEncryptionKeyPath();
    static std::string GetPublicKeyIdPath();

   private:
    static const char kEncryptionKey_[];
    static const char kPublicKeyId_[];
  };

  friend class EncryptedReportingJobConfigurationTest;

  void AddEncryptedRecordListToPayload();

  static const char kEncryptedRecordListKey_[];
};

}  // namespace policy

#endif  // COMPONENTS_POLICY_CORE_COMMON_CLOUD_ENCRYPTED_REPORTING_JOB_CONFIGURATION_H_
