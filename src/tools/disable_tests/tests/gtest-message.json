{
  "args": [
    "./disable",
    "--message",
    "Disabling this test for no reason!",
    "CannedSharedWorkerHelperTest.Delete"
  ],
  "requests": "{\"GetTestResultHistory/{\\\"realm\\\": \\\"chromium:ci\\\", \\\"testIdRegexp\\\": \\\"ninja://.*/CannedSharedWorkerHelperTest.Delete(/.*)?\\\", \\\"pageSize\\\": 1}\": \"{\\\"entries\\\":[{\\\"invocationTimestamp\\\":\\\"2022-01-31T04:54:45.727021Z\\\",\\\"result\\\":{\\\"name\\\":\\\"invocations/task-chromium-swarm.appspot.com-58c74f4b4da93d11/tests/ninja:%2F%2Fcomponents:components_unittests%2FCannedSharedWorkerHelperTest.Delete/results/b9ca6ed4-05452\\\",\\\"testId\\\":\\\"ninja://components:components_unittests/CannedSharedWorkerHelperTest.Delete\\\",\\\"resultId\\\":\\\"b9ca6ed4-05452\\\",\\\"variant\\\":{\\\"def\\\":{\\\"builder\\\":\\\"Mac10.11 Tests\\\",\\\"os\\\":\\\"Mac-10.11\\\",\\\"test_suite\\\":\\\"components_unittests\\\"}},\\\"expected\\\":true,\\\"status\\\":\\\"PASS\\\",\\\"duration\\\":\\\"0.024s\\\",\\\"variantHash\\\":\\\"1c4ba1429dce38ef\\\"}}],\\\"nextPageToken\\\":\\\"CgJ0cwoYMDg5NWQ3ZGQ4ZjA2MTBjOGViZDVkYTAyCgEx\\\"}\\n\", \"GetTestResult/{\\\"name\\\": \\\"invocations/task-chromium-swarm.appspot.com-58c74f4b4da93d11/tests/ninja:%2F%2Fcomponents:components_unittests%2FCannedSharedWorkerHelperTest.Delete/results/b9ca6ed4-05452\\\"}\": \"{\\\"name\\\":\\\"invocations/task-chromium-swarm.appspot.com-58c74f4b4da93d11/tests/ninja:%2F%2Fcomponents:components_unittests%2FCannedSharedWorkerHelperTest.Delete/results/b9ca6ed4-05452\\\",\\\"testId\\\":\\\"ninja://components:components_unittests/CannedSharedWorkerHelperTest.Delete\\\",\\\"resultId\\\":\\\"b9ca6ed4-05452\\\",\\\"variant\\\":{\\\"def\\\":{\\\"builder\\\":\\\"Mac10.11 Tests\\\",\\\"os\\\":\\\"Mac-10.11\\\",\\\"test_suite\\\":\\\"components_unittests\\\"}},\\\"expected\\\":true,\\\"status\\\":\\\"PASS\\\",\\\"summaryHtml\\\":\\\"\\\\u003cp\\\\u003e\\\\u003ctext-artifact artifact-id=\\\\\\\"snippet\\\\\\\" /\\\\u003e\\\\u003c/p\\\\u003e\\\",\\\"duration\\\":\\\"0.024s\\\",\\\"tags\\\":[{\\\"key\\\":\\\"gtest_global_tag\\\",\\\"value\\\":\\\"CPU_64_BITS\\\"},{\\\"key\\\":\\\"gtest_global_tag\\\",\\\"value\\\":\\\"MODE_RELEASE\\\"},{\\\"key\\\":\\\"gtest_global_tag\\\",\\\"value\\\":\\\"OS_APPLE\\\"},{\\\"key\\\":\\\"gtest_global_tag\\\",\\\"value\\\":\\\"OS_MAC\\\"},{\\\"key\\\":\\\"gtest_global_tag\\\",\\\"value\\\":\\\"OS_POSIX\\\"},{\\\"key\\\":\\\"gtest_status\\\",\\\"value\\\":\\\"SUCCESS\\\"},{\\\"key\\\":\\\"lossless_snippet\\\",\\\"value\\\":\\\"true\\\"},{\\\"key\\\":\\\"orig_format\\\",\\\"value\\\":\\\"chromium_gtest\\\"},{\\\"key\\\":\\\"step_name\\\",\\\"value\\\":\\\"components_unittests on Mac-10.11\\\"},{\\\"key\\\":\\\"test_name\\\",\\\"value\\\":\\\"CannedSharedWorkerHelperTest.Delete\\\"}],\\\"variantHash\\\":\\\"1c4ba1429dce38ef\\\",\\\"testMetadata\\\":{\\\"name\\\":\\\"CannedSharedWorkerHelperTest.Delete\\\",\\\"location\\\":{\\\"repo\\\":\\\"https://chromium.googlesource.com/chromium/src\\\",\\\"fileName\\\":\\\"//components/browsing_data/content/shared_worker_helper_unittest.cc\\\",\\\"line\\\":43}}}\\n\"}",
  "read_data": {
    "components/browsing_data/content/shared_worker_helper_unittest.cc": "// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n#include \"components/browsing_data/content/shared_worker_helper.h\"\n\n#include \"base/threading/thread_task_runner_handle.h\"\n#include \"content/public/browser/browser_context.h\"\n#include \"content/public/browser/storage_partition.h\"\n#include \"content/public/test/browser_task_environment.h\"\n#include \"content/public/test/test_browser_context.h\"\n#include \"testing/gtest/include/gtest/gtest.h\"\n#include \"url/origin.h\"\n\nnamespace browsing_data {\nnamespace {\n\nclass CannedSharedWorkerHelperTest : public testing::Test {\n public:\n  content::BrowserContext* browser_context() { return &browser_context_; }\n\n private:\n  content::BrowserTaskEnvironment task_environment_;\n  content::TestBrowserContext browser_context_;\n};\n\nTEST_F(CannedSharedWorkerHelperTest, Empty) {\n  const GURL worker(\"https://host1:1/worker.js\");\n  std::string name(\"test\");\n  const blink::StorageKey storage_key =\n      blink::StorageKey(url::Origin::Create(worker));\n\n  auto helper = base::MakeRefCounted<CannedSharedWorkerHelper>(\n      browser_context()->GetDefaultStoragePartition());\n\n  EXPECT_TRUE(helper->empty());\n  helper->AddSharedWorker(worker, name, storage_key);\n  EXPECT_FALSE(helper->empty());\n  helper->Reset();\n  EXPECT_TRUE(helper->empty());\n}\n\nTEST_F(CannedSharedWorkerHelperTest, Delete) {\n  const GURL worker1(\"http://host1:9000/worker.js\");\n  std::string name1(\"name\");\n  const blink::StorageKey storage_key1(url::Origin::Create(worker1));\n  const GURL worker2(\"https://example.com/worker.js\");\n  std::string name2(\"name\");\n  const blink::StorageKey storage_key2(url::Origin::Create(worker2));\n\n  auto helper = base::MakeRefCounted<CannedSharedWorkerHelper>(\n      browser_context()->GetDefaultStoragePartition());\n\n  EXPECT_TRUE(helper->empty());\n  helper->AddSharedWorker(worker1, name1, storage_key1);\n  helper->AddSharedWorker(worker2, name2, storage_key2);\n  EXPECT_EQ(2u, helper->GetSharedWorkerCount());\n  helper->DeleteSharedWorker(worker2, name2, storage_key2);\n  EXPECT_EQ(1u, helper->GetSharedWorkerCount());\n}\n\nTEST_F(CannedSharedWorkerHelperTest, IgnoreExtensionsAndDevTools) {\n  const GURL worker1(\"chrome-extension://abcdefghijklmnopqrstuvwxyz/worker.js\");\n  const GURL worker2(\"devtools://abcdefghijklmnopqrstuvwxyz/worker.js\");\n  std::string name(\"name\");\n  const blink::StorageKey storage_key1(url::Origin::Create(worker1));\n  const blink::StorageKey storage_key2(url::Origin::Create(worker2));\n\n  auto helper = base::MakeRefCounted<CannedSharedWorkerHelper>(\n      browser_context()->GetDefaultStoragePartition());\n\n  EXPECT_TRUE(helper->empty());\n  helper->AddSharedWorker(worker1, name, storage_key1);\n  EXPECT_TRUE(helper->empty());\n  helper->AddSharedWorker(worker2, name, storage_key2);\n  EXPECT_TRUE(helper->empty());\n}\n\n}  // namespace\n}  // namespace browsing_data\n"
  },
  "written_data": {
    "components/browsing_data/content/shared_worker_helper_unittest.cc": "// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n#include \"components/browsing_data/content/shared_worker_helper.h\"\n\n#include \"base/threading/thread_task_runner_handle.h\"\n#include \"content/public/browser/browser_context.h\"\n#include \"content/public/browser/storage_partition.h\"\n#include \"content/public/test/browser_task_environment.h\"\n#include \"content/public/test/test_browser_context.h\"\n#include \"testing/gtest/include/gtest/gtest.h\"\n#include \"url/origin.h\"\n\nnamespace browsing_data {\nnamespace {\n\nclass CannedSharedWorkerHelperTest : public testing::Test {\n public:\n  content::BrowserContext* browser_context() { return &browser_context_; }\n\n private:\n  content::BrowserTaskEnvironment task_environment_;\n  content::TestBrowserContext browser_context_;\n};\n\nTEST_F(CannedSharedWorkerHelperTest, Empty) {\n  const GURL worker(\"https://host1:1/worker.js\");\n  std::string name(\"test\");\n  const blink::StorageKey storage_key =\n      blink::StorageKey(url::Origin::Create(worker));\n\n  auto helper = base::MakeRefCounted<CannedSharedWorkerHelper>(\n      browser_context()->GetDefaultStoragePartition());\n\n  EXPECT_TRUE(helper->empty());\n  helper->AddSharedWorker(worker, name, storage_key);\n  EXPECT_FALSE(helper->empty());\n  helper->Reset();\n  EXPECT_TRUE(helper->empty());\n}\n\n// Disabling this test for no reason!\nTEST_F(CannedSharedWorkerHelperTest, DISABLED_Delete) {\n  const GURL worker1(\"http://host1:9000/worker.js\");\n  std::string name1(\"name\");\n  const blink::StorageKey storage_key1(url::Origin::Create(worker1));\n  const GURL worker2(\"https://example.com/worker.js\");\n  std::string name2(\"name\");\n  const blink::StorageKey storage_key2(url::Origin::Create(worker2));\n\n  auto helper = base::MakeRefCounted<CannedSharedWorkerHelper>(\n      browser_context()->GetDefaultStoragePartition());\n\n  EXPECT_TRUE(helper->empty());\n  helper->AddSharedWorker(worker1, name1, storage_key1);\n  helper->AddSharedWorker(worker2, name2, storage_key2);\n  EXPECT_EQ(2u, helper->GetSharedWorkerCount());\n  helper->DeleteSharedWorker(worker2, name2, storage_key2);\n  EXPECT_EQ(1u, helper->GetSharedWorkerCount());\n}\n\nTEST_F(CannedSharedWorkerHelperTest, IgnoreExtensionsAndDevTools) {\n  const GURL worker1(\"chrome-extension://abcdefghijklmnopqrstuvwxyz/worker.js\");\n  const GURL worker2(\"devtools://abcdefghijklmnopqrstuvwxyz/worker.js\");\n  std::string name(\"name\");\n  const blink::StorageKey storage_key1(url::Origin::Create(worker1));\n  const blink::StorageKey storage_key2(url::Origin::Create(worker2));\n\n  auto helper = base::MakeRefCounted<CannedSharedWorkerHelper>(\n      browser_context()->GetDefaultStoragePartition());\n\n  EXPECT_TRUE(helper->empty());\n  helper->AddSharedWorker(worker1, name, storage_key1);\n  EXPECT_TRUE(helper->empty());\n  helper->AddSharedWorker(worker2, name, storage_key2);\n  EXPECT_TRUE(helper->empty());\n}\n\n}  // namespace\n}  // namespace browsing_data\n"
  }
}