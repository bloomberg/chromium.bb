{
  "args": [
    "./disable",
    "-b",
    "1234567",
    "CastSocketServiceTest.TestAddSocket"
  ],
  "requests": "{\"GetTestResultHistory/{\\\"realm\\\": \\\"chromium:ci\\\", \\\"testIdRegexp\\\": \\\"ninja://.*/CastSocketServiceTest.TestAddSocket(/.*)?\\\", \\\"pageSize\\\": 1}\": \"{\\\"entries\\\":[{\\\"invocationTimestamp\\\":\\\"2022-01-31T04:54:45.727021Z\\\",\\\"result\\\":{\\\"name\\\":\\\"invocations/task-chromium-swarm.appspot.com-58c74f4b4da93d11/tests/ninja:%2F%2Fcomponents:components_unittests%2FCastSocketServiceTest.TestAddSocket/results/b9ca6ed4-05650\\\",\\\"testId\\\":\\\"ninja://components:components_unittests/CastSocketServiceTest.TestAddSocket\\\",\\\"resultId\\\":\\\"b9ca6ed4-05650\\\",\\\"variant\\\":{\\\"def\\\":{\\\"builder\\\":\\\"Mac10.11 Tests\\\",\\\"os\\\":\\\"Mac-10.11\\\",\\\"test_suite\\\":\\\"components_unittests\\\"}},\\\"expected\\\":true,\\\"status\\\":\\\"PASS\\\",\\\"duration\\\":\\\"0.063s\\\",\\\"variantHash\\\":\\\"1c4ba1429dce38ef\\\"}}],\\\"nextPageToken\\\":\\\"CgJ0cwoYMDg5NWQ3ZGQ4ZjA2MTBjOGViZDVkYTAyCgEx\\\"}\\n\", \"GetTestResult/{\\\"name\\\": \\\"invocations/task-chromium-swarm.appspot.com-58c74f4b4da93d11/tests/ninja:%2F%2Fcomponents:components_unittests%2FCastSocketServiceTest.TestAddSocket/results/b9ca6ed4-05650\\\"}\": \"{\\\"name\\\":\\\"invocations/task-chromium-swarm.appspot.com-58c74f4b4da93d11/tests/ninja:%2F%2Fcomponents:components_unittests%2FCastSocketServiceTest.TestAddSocket/results/b9ca6ed4-05650\\\",\\\"testId\\\":\\\"ninja://components:components_unittests/CastSocketServiceTest.TestAddSocket\\\",\\\"resultId\\\":\\\"b9ca6ed4-05650\\\",\\\"variant\\\":{\\\"def\\\":{\\\"builder\\\":\\\"Mac10.11 Tests\\\",\\\"os\\\":\\\"Mac-10.11\\\",\\\"test_suite\\\":\\\"components_unittests\\\"}},\\\"expected\\\":true,\\\"status\\\":\\\"PASS\\\",\\\"summaryHtml\\\":\\\"\\\\u003cp\\\\u003e\\\\u003ctext-artifact artifact-id=\\\\\\\"snippet\\\\\\\" /\\\\u003e\\\\u003c/p\\\\u003e\\\",\\\"duration\\\":\\\"0.063s\\\",\\\"tags\\\":[{\\\"key\\\":\\\"gtest_global_tag\\\",\\\"value\\\":\\\"CPU_64_BITS\\\"},{\\\"key\\\":\\\"gtest_global_tag\\\",\\\"value\\\":\\\"MODE_RELEASE\\\"},{\\\"key\\\":\\\"gtest_global_tag\\\",\\\"value\\\":\\\"OS_APPLE\\\"},{\\\"key\\\":\\\"gtest_global_tag\\\",\\\"value\\\":\\\"OS_MAC\\\"},{\\\"key\\\":\\\"gtest_global_tag\\\",\\\"value\\\":\\\"OS_POSIX\\\"},{\\\"key\\\":\\\"gtest_status\\\",\\\"value\\\":\\\"SUCCESS\\\"},{\\\"key\\\":\\\"lossless_snippet\\\",\\\"value\\\":\\\"true\\\"},{\\\"key\\\":\\\"monorail_component\\\",\\\"value\\\":\\\"Internals\\\\u003eCast\\\\u003eProviders\\\"},{\\\"key\\\":\\\"orig_format\\\",\\\"value\\\":\\\"chromium_gtest\\\"},{\\\"key\\\":\\\"step_name\\\",\\\"value\\\":\\\"components_unittests on Mac-10.11\\\"},{\\\"key\\\":\\\"test_name\\\",\\\"value\\\":\\\"CastSocketServiceTest.TestAddSocket\\\"}],\\\"variantHash\\\":\\\"1c4ba1429dce38ef\\\",\\\"testMetadata\\\":{\\\"name\\\":\\\"CastSocketServiceTest.TestAddSocket\\\",\\\"location\\\":{\\\"repo\\\":\\\"https://chromium.googlesource.com/chromium/src\\\",\\\"fileName\\\":\\\"//components/cast_channel/cast_socket_service_unittest.cc\\\",\\\"line\\\":47}}}\\n\"}",
  "read_data": {
    "components/cast_channel/cast_socket_service_unittest.cc": "// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n#include \"components/cast_channel/cast_socket_service.h\"\n\n#include \"base/memory/ptr_util.h\"\n#include \"base/test/gmock_callback_support.h\"\n#include \"base/test/mock_callback.h\"\n#include \"base/test/test_simple_task_runner.h\"\n#include \"components/cast_channel/cast_test_util.h\"\n#include \"content/public/test/browser_task_environment.h\"\n\n#include \"testing/gmock/include/gmock/gmock.h\"\n#include \"testing/gtest/include/gtest/gtest.h\"\n\nusing testing::_;\nusing testing::DoAll;\nusing testing::Invoke;\nusing testing::Return;\nusing testing::ReturnRef;\nusing testing::SaveArg;\nusing testing::WithArgs;\n\nnamespace cast_channel {\n\nclass CastSocketServiceTest : public testing::Test {\n public:\n  CastSocketServiceTest() : cast_socket_service_(new CastSocketServiceImpl()) {\n    cast_socket_service_->SetTaskRunnerForTest(\n        base::MakeRefCounted<base::TestSimpleTaskRunner>());\n  }\n\n  CastSocket* AddSocket(std::unique_ptr<CastSocket> socket) {\n    return cast_socket_service_->AddSocket(std::move(socket));\n  }\n\n  void TearDown() override { cast_socket_service_ = nullptr; }\n\n protected:\n  content::BrowserTaskEnvironment task_environment_;\n  std::unique_ptr<CastSocketServiceImpl> cast_socket_service_;\n  base::MockCallback<CastSocket::OnOpenCallback> mock_on_open_callback_;\n  MockCastSocketObserver mock_observer_;\n};\n\nTEST_F(CastSocketServiceTest, TestAddSocket) {\n  auto socket1 = std::make_unique<MockCastSocket>();\n  auto* socket_ptr1 = AddSocket(std::move(socket1));\n  EXPECT_NE(0, socket_ptr1->id());\n\n  auto socket2 = std::make_unique<MockCastSocket>();\n  auto* socket_ptr2 = AddSocket(std::move(socket2));\n  EXPECT_NE(socket_ptr1->id(), socket_ptr2->id());\n\n  auto removed_socket = cast_socket_service_->RemoveSocket(socket_ptr2->id());\n  EXPECT_EQ(socket_ptr2, removed_socket.get());\n\n  auto socket3 = std::make_unique<MockCastSocket>();\n  auto* socket_ptr3 = AddSocket(std::move(socket3));\n  EXPECT_NE(socket_ptr1->id(), socket_ptr3->id());\n  EXPECT_NE(socket_ptr2->id(), socket_ptr3->id());\n}\n\nTEST_F(CastSocketServiceTest, TestRemoveAndGetSocket) {\n  int channel_id = 1;\n  auto* socket_ptr = cast_socket_service_->GetSocket(channel_id);\n  EXPECT_FALSE(socket_ptr);\n  auto socket = cast_socket_service_->RemoveSocket(channel_id);\n  EXPECT_FALSE(socket);\n\n  auto mock_socket = std::make_unique<MockCastSocket>();\n\n  auto* mock_socket_ptr = AddSocket(std::move(mock_socket));\n  channel_id = mock_socket_ptr->id();\n  EXPECT_EQ(mock_socket_ptr, cast_socket_service_->GetSocket(channel_id));\n\n  socket = cast_socket_service_->RemoveSocket(channel_id);\n  EXPECT_TRUE(socket);\n}\n\nTEST_F(CastSocketServiceTest, TestOpenChannel) {\n  auto* mock_socket = new MockCastSocket();\n  auto ip_endpoint = CreateIPEndPointForTest();\n  mock_socket->SetIPEndpoint(ip_endpoint);\n  cast_socket_service_->SetSocketForTest(base::WrapUnique(mock_socket));\n\n  EXPECT_CALL(*mock_socket, Connect_(_))\n      .WillOnce(base::test::RunOnceCallback<0>(mock_socket));\n  EXPECT_CALL(mock_on_open_callback_, Run(mock_socket));\n  EXPECT_CALL(*mock_socket, AddObserver(_));\n\n  cast_socket_service_->AddObserver(&mock_observer_);\n  CastSocketOpenParams open_param(ip_endpoint, base::Seconds(20));\n  cast_socket_service_->OpenSocket(CastSocketService::NetworkContextGetter(),\n                                   open_param, mock_on_open_callback_.Get());\n}\n\n}  // namespace cast_channel\n"
  },
  "written_data": {
    "components/cast_channel/cast_socket_service_unittest.cc": "// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n#include \"components/cast_channel/cast_socket_service.h\"\n\n#include \"base/memory/ptr_util.h\"\n#include \"base/test/gmock_callback_support.h\"\n#include \"base/test/mock_callback.h\"\n#include \"base/test/test_simple_task_runner.h\"\n#include \"components/cast_channel/cast_test_util.h\"\n#include \"content/public/test/browser_task_environment.h\"\n\n#include \"testing/gmock/include/gmock/gmock.h\"\n#include \"testing/gtest/include/gtest/gtest.h\"\n\nusing testing::_;\nusing testing::DoAll;\nusing testing::Invoke;\nusing testing::Return;\nusing testing::ReturnRef;\nusing testing::SaveArg;\nusing testing::WithArgs;\n\nnamespace cast_channel {\n\nclass CastSocketServiceTest : public testing::Test {\n public:\n  CastSocketServiceTest() : cast_socket_service_(new CastSocketServiceImpl()) {\n    cast_socket_service_->SetTaskRunnerForTest(\n        base::MakeRefCounted<base::TestSimpleTaskRunner>());\n  }\n\n  CastSocket* AddSocket(std::unique_ptr<CastSocket> socket) {\n    return cast_socket_service_->AddSocket(std::move(socket));\n  }\n\n  void TearDown() override { cast_socket_service_ = nullptr; }\n\n protected:\n  content::BrowserTaskEnvironment task_environment_;\n  std::unique_ptr<CastSocketServiceImpl> cast_socket_service_;\n  base::MockCallback<CastSocket::OnOpenCallback> mock_on_open_callback_;\n  MockCastSocketObserver mock_observer_;\n};\n\n// TODO(crbug.com/1234567): Re-enable this test\nTEST_F(CastSocketServiceTest, DISABLED_TestAddSocket) {\n  auto socket1 = std::make_unique<MockCastSocket>();\n  auto* socket_ptr1 = AddSocket(std::move(socket1));\n  EXPECT_NE(0, socket_ptr1->id());\n\n  auto socket2 = std::make_unique<MockCastSocket>();\n  auto* socket_ptr2 = AddSocket(std::move(socket2));\n  EXPECT_NE(socket_ptr1->id(), socket_ptr2->id());\n\n  auto removed_socket = cast_socket_service_->RemoveSocket(socket_ptr2->id());\n  EXPECT_EQ(socket_ptr2, removed_socket.get());\n\n  auto socket3 = std::make_unique<MockCastSocket>();\n  auto* socket_ptr3 = AddSocket(std::move(socket3));\n  EXPECT_NE(socket_ptr1->id(), socket_ptr3->id());\n  EXPECT_NE(socket_ptr2->id(), socket_ptr3->id());\n}\n\nTEST_F(CastSocketServiceTest, TestRemoveAndGetSocket) {\n  int channel_id = 1;\n  auto* socket_ptr = cast_socket_service_->GetSocket(channel_id);\n  EXPECT_FALSE(socket_ptr);\n  auto socket = cast_socket_service_->RemoveSocket(channel_id);\n  EXPECT_FALSE(socket);\n\n  auto mock_socket = std::make_unique<MockCastSocket>();\n\n  auto* mock_socket_ptr = AddSocket(std::move(mock_socket));\n  channel_id = mock_socket_ptr->id();\n  EXPECT_EQ(mock_socket_ptr, cast_socket_service_->GetSocket(channel_id));\n\n  socket = cast_socket_service_->RemoveSocket(channel_id);\n  EXPECT_TRUE(socket);\n}\n\nTEST_F(CastSocketServiceTest, TestOpenChannel) {\n  auto* mock_socket = new MockCastSocket();\n  auto ip_endpoint = CreateIPEndPointForTest();\n  mock_socket->SetIPEndpoint(ip_endpoint);\n  cast_socket_service_->SetSocketForTest(base::WrapUnique(mock_socket));\n\n  EXPECT_CALL(*mock_socket, Connect_(_))\n      .WillOnce(base::test::RunOnceCallback<0>(mock_socket));\n  EXPECT_CALL(mock_on_open_callback_, Run(mock_socket));\n  EXPECT_CALL(*mock_socket, AddObserver(_));\n\n  cast_socket_service_->AddObserver(&mock_observer_);\n  CastSocketOpenParams open_param(ip_endpoint, base::Seconds(20));\n  cast_socket_service_->OpenSocket(CastSocketService::NetworkContextGetter(),\n                                   open_param, mock_on_open_callback_.Get());\n}\n\n}  // namespace cast_channel\n"
  }
}