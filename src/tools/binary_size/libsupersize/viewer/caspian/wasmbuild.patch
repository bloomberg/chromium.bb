diff --git a/build/config/BUILDCONFIG.gn b/build/config/BUILDCONFIG.gn
index fcc7e12834733..11d4044003cb3 100644
--- a/build/config/BUILDCONFIG.gn
+++ b/build/config/BUILDCONFIG.gn
@@ -299,10 +299,11 @@ is_ios = current_os == "ios"
 is_linux = current_os == "linux"
 is_mac = current_os == "mac"
 is_nacl = current_os == "nacl"
+is_wasm = current_os == "wasm"
 is_win = current_os == "win" || current_os == "winuwp"
 
 is_apple = is_ios || is_mac
-is_posix = !is_win && !is_fuchsia
+is_posix = !is_win && !is_fuchsia && !is_wasm
 
 # =============================================================================
 # TARGET DEFAULTS
diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index e49fc28c0893d..5120334fbf373 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -643,6 +643,20 @@ config("compiler") {
     ldflags += [ "-stdlib=libc++" ]
   }
 
+  if (is_wasm) {
+    ldflags += [
+      "-s",
+      "ALLOW_MEMORY_GROWTH=1",
+      "-s",
+      "LLD_REPORT_UNDEFINED=1",
+    ]
+
+    if (is_official_build) {
+      cflags += ["-flto=full"]
+      ldflags += ["-flto=full"]
+    }
+  }
+
   # Add flags for link-time optimization. These flags enable
   # optimizations/transformations that require whole-program visibility at link
   # time, so they need to be applied to all translation units, and we may end up
@@ -758,9 +772,7 @@ config("compiler") {
   if (use_lld && !enable_call_graph_profile_sort) {
     if (is_win) {
       ldflags += [ "/call-graph-profile-sort:no" ]
-    } else if (!is_apple) {
-      # TODO(thakis): Once LLD's Mach-O port basically works, implement call
-      # graph profile sorting for it, add an opt-out flag, and pass it here.
+    } else if (!is_wasm) {
       ldflags += [ "-Wl,--no-call-graph-profile-sort" ]
     }
   }
@@ -2294,6 +2306,9 @@ config("symbols") {
 
     # All configs using /DEBUG should include this:
     configs = [ ":win_pdbaltpath" ]
+  } else if (is_wasm) {
+    cflags = [ "-gseparate-dwarf" ]
+    ldflags = [ "-gseparate-dwarf" ]
   } else {
     cflags = []
     if (is_mac && enable_dsyms) {
diff --git a/build/toolchain/toolchain.gni b/build/toolchain/toolchain.gni
index b2d0b44b102c6..eb6de8775dff7 100644
--- a/build/toolchain/toolchain.gni
+++ b/build/toolchain/toolchain.gni
@@ -47,6 +47,9 @@ if (is_apple) {
   shlib_extension = ".so"
 } else if (is_win) {
   shlib_extension = ".dll"
+} else if (is_wasm) {
+  # WebAssembly does not stably support shared libraries. (as of Oct 2019)
+  shlib_extension = ".wasm"
 } else {
   assert(false, "Platform not supported")
 }
diff --git a/build/toolchain/wasm/BUILD.gn b/build/toolchain/wasm/BUILD.gn
new file mode 100644
index 0000000000000..fdc5120981de5
--- /dev/null
+++ b/build/toolchain/wasm/BUILD.gn
@@ -0,0 +1,30 @@
+# Copyright 2019 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//build/toolchain/gcc_toolchain.gni")
+
+gcc_toolchain("wasm") {
+  cc = "emcc"
+  cxx = "em++"
+  nm = "emcc"
+  ar = "emar"
+  ld = cxx
+
+  toolchain_args = {
+    current_cpu = "wasm"
+    current_os = "wasm"
+
+    is_clang = true
+    use_goma = false
+    use_debug_fission = false
+    clang_use_chrome_plugins = false
+    use_allocator_shim = false
+    is_component_build = false
+  }
+  executable_extension = ".js"
+  link_outputs = [
+    "{{output_dir}}/{{target_output_name}}.wasm",
+    "{{output_dir}}/{{target_output_name}}.wasm.debug.wasm",
+  ]
+}
