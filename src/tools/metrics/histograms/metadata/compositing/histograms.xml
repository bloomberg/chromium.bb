<!--
Copyright 2020 The Chromium Authors. All rights reserved.
Use of this source code is governed by a BSD-style license that can be
found in the LICENSE file.
-->

<!--
This file is used to generate a comprehensive list of Compositing histograms
along with a detailed description for each histogram.

For best practices on writing histogram descriptions, see
https://chromium.googlesource.com/chromium/src.git/+/HEAD/tools/metrics/histograms/README.md

Please follow the instructions in the OWNERS file in this directory to find a
reviewer. If no OWNERS file exists, please consider signing up at
go/reviewing-metrics (Googlers only), as all subdirectories are expected to
have an OWNERS file. As a last resort you can send the CL to
chromium-metrics-reviews@google.com.
-->

<histogram-configuration>

<histograms>

<histogram name="Compositing.Browser.GPUMemoryForTilingsInKb" units="Kb"
    expires_after="2022-11-09">
  <owner>pdr@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <owner>sky@chromium.org</owner>
  <summary>
    Warning: this histogram was expired from ~9/2020 to ~8/2021.

    The GPU memory allocated for tilings (in a browser process), summed over all
    picture layers. Emitted once per drawing. Nothing is recorded if there are
    no picture layers.

    Tilings are used for decomposition of the layer's entire contents at a
    picture screenspace resolution to do threaded rasterization.
  </summary>
</histogram>

<histogram name="Compositing.Browser.LayersUpdateTime" units="microseconds"
    expires_after="2022-07-11">
  <owner>schenney@chromium.org</owner>
  <owner>animations-dev@chromium.org</owner>
  <summary>
    Time spent updating layers, in microseconds. Recorded when layers are
    updated (in a browser process).

    Warning: This metric may include reports from clients with low-resolution
    clocks (i.e. on Windows, ref. |TimeTicks::IsHighResolution()|). Such reports
    will cause this metric to have an abnormal distribution. When considering
    revising this histogram, see UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES for the
    solution.
  </summary>
</histogram>

<histogram name="Compositing.Browser.LayerTreeImpl.CalculateDrawPropertiesUs"
    units="microseconds" expires_after="2022-07-11">
  <owner>schenney@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <summary>
    Time spent updating layer draw properties, in microseconds. Recorded when a
    LayerTreeImpl's draw properties are updated (in a browser process).

    Warning: This metric may include reports from clients with low-resolution
    clocks (i.e. on Windows, ref. |TimeTicks::IsHighResolution()|). Such reports
    will cause this metric to have an abnormal distribution. When considering
    revising this histogram, see UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES for the
    solution.
  </summary>
</histogram>

<histogram name="Compositing.Browser.NumActiveLayers" units="layers"
    expires_after="2022-04-17">
  <owner>schenney@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <summary>
    The number of layers in the active tree for each compositor frame. This is
    logged once per frame, before the frame is drawn (in a browser process).
  </summary>
</histogram>

<histogram name="Compositing.Browser.NumActivePictureLayers" units="layers"
    expires_after="2022-06-19">
  <owner>schenney@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <summary>
    The number of PictureLayers in the active tree for each compositor frame.
    This is logged once per frame, before the frame is drawn (in a browser
    process).
  </summary>
</histogram>

<histogram name="Compositing.Browser.NumRenderSurfaces" units="surfaces"
    expires_after="2022-06-19">
  <owner>schenney@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <summary>
    The number of render surfaces in the render surface layer list. Recorded
    each time the render surface layer list is constructed (in a browser
    process).
  </summary>
</histogram>

<histogram name="Compositing.ColorGamut" enum="ColorGamut"
    expires_after="2022-02-06">
  <owner>cblume@chromium.org</owner>
  <owner>khushalsagar@chromium.org</owner>
  <summary>
    Every time a frame is presented, record the generalized color gamut of that
    frame.
  </summary>
</histogram>

<histogram name="Compositing.CopyFromSurfaceTime" units="ms"
    expires_after="2018-08-30">
  <owner>wychen@chromium.org</owner>
  <summary>
    The turn around time taken for the async readback of pixels is measured
    here. This should be marked as obsolete once some tests no longer rely on
    this histogram. See crbug/1110961 for more details.
  </summary>
</histogram>

<histogram name="Compositing.DirectRenderer.GL.DrawFrameUs"
    units="microseconds" expires_after="2022-06-26">
  <owner>weiliangc@chromium.org</owner>
  <summary>
    Time spent drawing of composited layers by GLRenderer, in microseconds. This
    is logged once per frame, when a frame should be drawn.

    Warning: This metric may include reports from clients with low-resolution
    clocks (i.e. on Windows, ref. |TimeTicks::IsHighResolution()|). Such reports
    will cause this metric to have an abnormal distribution. When considering
    revising this histogram, see UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES for the
    solution.
  </summary>
</histogram>

<histogram name="Compositing.DirectRenderer.OverlayProcessingUs"
    units="microseconds" expires_after="2022-07-03">
  <owner>khaslett@chromium.org</owner>
  <owner>kylechar@chromium.org</owner>
  <summary>
    Time spent processing quads to see which can be replaced with overlays. This
    is logged once per frame, when a frame should be drawn. Only reported for
    platforms supporting high resolution clocks.
  </summary>
</histogram>

<histogram name="Compositing.DirectRenderer.PartialSwap.ExtraDamage" units="%"
    expires_after="2022-06-12">
  <owner>vasilyt@chromium.org</owner>
  <owner>backer@chromium.org</owner>
  <summary>
    The area of the display damage that was added to current frame damage after
    all adjustments, including FrameBufferDamage from buffer queue and render
    pass filters.

    This metric is reported once per frame only on platforms/devices that
    support partial swap and does not include &quot;empty swap&quot; (no frame
    damage) case.
  </summary>
</histogram>

<histogram name="Compositing.DirectRenderer.PartialSwap.FrameBufferDamage"
    units="%" expires_after="2022-06-19">
  <owner>vasilyt@chromium.org</owner>
  <owner>backer@chromium.org</owner>
  <summary>
    The area of the display that was damaged since previous draw to this frame
    buffer.

    This metric is reported once per frame only on platforms/devices that
    support partial swap and does not include &quot;empty swap&quot; (no frame
    damage) case.
  </summary>
</histogram>

<histogram name="Compositing.DirectRenderer.PartialSwap.RootDamage" units="%"
    expires_after="2022-06-19">
  <owner>vasilyt@chromium.org</owner>
  <owner>backer@chromium.org</owner>
  <summary>
    The area of the display that was damaged in current frame.

    This metric is reported only on platforms/devices that support partial swap
    and does not include &quot;empty swap&quot; (no frame damage) case.
  </summary>
</histogram>

<histogram name="Compositing.DirectRenderer.PartialSwap.TotalDamage" units="%"
    expires_after="2022-06-19">
  <owner>vasilyt@chromium.org</owner>
  <owner>backer@chromium.org</owner>
  <summary>
    The total area of the display that will be redrawn this frame.

    This metric is reported only on platforms/devices that support partial swap
    and does not include &quot;empty swap&quot; (no frame damage) case.
  </summary>
</histogram>

<histogram name="Compositing.DirectRenderer.Software.DrawFrameUs"
    units="microseconds" expires_after="2021-08-09">
  <owner>weiliangc@chromium.org</owner>
  <summary>
    Time spent drawing of composited layers by SoftwareRenderer, in
    microseconds. This is logged once per frame, when a frame should be drawn.

    Warning: This metric may include reports from clients with low-resolution
    clocks (i.e. on Windows, ref. |TimeTicks::IsHighResolution()|). Such reports
    will cause this metric to have an abnormal distribution. When considering
    revising this histogram, see UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES for the
    solution.
  </summary>
</histogram>

<histogram name="Compositing.DirectRenderer.VK.DrawFrameUs"
    units="microseconds" expires_after="2020-11-29">
  <owner>penghuang@chromium.org</owner>
  <owner>backer@chromium.org</owner>
  <summary>
    Time spent drawing of composited layers by SkiaRenderer with Vulkan backend,
    in microseconds. This is logged once per frame, when a frame should be
    drawn.

    Warning: This metric may include reports from clients with low-resolution
    clocks (i.e. on Windows, ref. |TimeTicks::IsHighResolution()|). Such reports
    will cause this metric to have an abnormal distribution. When considering
    revising this histogram, see UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES for the
    solution.
  </summary>
</histogram>

<histogram name="Compositing.Display.AdpfHintUs" units="microseconds"
    expires_after="2022-06-30">
  <owner>boliu@chromium.org</owner>
  <owner>vasilyt@chromium.org</owner>
  <summary>
    This is logged once for every ADPF performance hint report, which is
    generally once every frame on Android device that supports ADPF and ADPF is
    enabled. It's the interval reported to ADPF, which is currently implemented
    as the wall clock time from vsync frame time to swap_start. Only reported
    for platforms supporting high resolution clocks.
  </summary>
</histogram>

<histogram name="Compositing.Display.Draw.Occlusion.Calculation.Time"
    units="microseconds" expires_after="2022-06-12">
  <owner>yiyix@chromium.org</owner>
  <owner>chromeos-gfx@chromium.org</owner>
  <summary>
    Time spent to remove invisible quads from the quad_list in CompositorFrame.

    Warning: This metric may include reports from clients with low-resolution
    clocks (i.e. on Windows, ref. |TimeTicks::IsHighResolution()|). Such reports
    will cause this metric to have an abnormal distribution. When considering
    revising this histogram, see UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES for the
    solution.
  </summary>
</histogram>

<histogram name="Compositing.Display.Draw.Occlusion.Drawing.Area.Saved2"
    units="px" expires_after="M77">
  <owner>yiyix@chromium.org</owner>
  <summary>
    It records the total drawing area skipped to show on screen as a result of
    applying draw occlusion. This is logged once per frame, when the frame is
    drawn.
  </summary>
</histogram>

<histogram name="Compositing.Display.Draw.Occlusion.Percentage.Saved" units="%"
    expires_after="M77">
  <owner>yiyix@chromium.org</owner>
  <summary>
    It records the percentage of total area drawing skipped by draw occlusion of
    the total area of damage rects in a compositor frame. This is logged once
    per frame, when the frame is drawn.
  </summary>
</histogram>

<histogram name="Compositing.Display.DrawToSwapUs" units="microseconds"
    expires_after="2022-05-29">
  <owner>backer@chromium.org</owner>
  <owner>rjkroege@chromium.org</owner>
  <summary>
    This is logged once per frame, if the output surface provides timing
    information. It measures the time from the display compositor starting a
    draw on the Viz Compositor thread to issuing all related draw calls to the
    driver on the Gpu Main thread. Only reported for platforms supporting high
    resolution clocks.
  </summary>
</histogram>

<histogram name="Compositing.Display.DrmOverlayManager.CacheHit" enum="Boolean"
    expires_after="2020-09-01">
  <owner>samans@chromium.org</owner>
  <owner>rjkroege@chromium.org</owner>
  <summary>
    Indicates whether DrmOverlayManager was able to find the overlay
    configuration in its cache. Recorded when DrmOverlayManager is asked to
    verify an overlay configuration.
  </summary>
</histogram>

<histogram name="Compositing.Display.DrmOverlayManager.TestPageFlipCount"
    units="units" expires_after="2022-06-30">
  <owner>khaslett@chromium.org</owner>
  <owner>kylechar@chromium.org</owner>
  <summary>
    Logged zero or more times per frame, the number of times TestPageFlip is
    called on the HardwareDisplayController.
  </summary>
</histogram>

<histogram name="Compositing.Display.DrmOverlayManager.TestPageFlipUs"
    units="microseconds" expires_after="2022-06-30">
  <owner>khaslett@chromium.org</owner>
  <owner>kylechar@chromium.org</owner>
  <summary>
    Logged zero or more times per frame, the duration of calling TestPageFlip on
    the HardwareDisplayController. Only reported for platforms supporting high
    resolution clocks.
  </summary>
</histogram>

<histogram
    name="Compositing.Display.DrmOverlayManager.TotalTestBufferMemorySize"
    units="KB" expires_after="2020-09-01">
  <owner>samans@chromium.org</owner>
  <owner>rjkroege@chromium.org</owner>
  <summary>
    The amount of memory allocated for the purpose of performing a pageflip
    test. Recorded every time DRM thread is asked to validate an overlay
    configuration.
  </summary>
</histogram>

<histogram name="Compositing.Display.DrmThread.CheckOverlayCapabilitiesSyncUs"
    units="microseconds" expires_after="2022-06-30">
  <owner>khaslett@chromium.org</owner>
  <owner>kylechar@chromium.org</owner>
  <summary>
    Logged zero or more times per frame, the duration of
    DrmThread::CheckOverlayCapabilitiesSync(). This is the total time spent on
    the DRM thread to check a set of overlay candidates. Only reported for
    platforms supporting high resolution clocks.
  </summary>
</histogram>

<histogram name="Compositing.Display.FlattenedRenderPassCount" units="units"
    expires_after="2022-06-26">
  <owner>backer@chromium.org</owner>
  <owner>rjkroege@chromium.org</owner>
  <summary>
    This is logged once per frame. It is the number of renderer passes after
    flattening all possible render passes. If the value is more than one, then
    an intermediate rendering target must be used during the rendering of the
    frame for each render pass greater than one.
  </summary>
</histogram>

<histogram
    name="Compositing.Display.OverlayProcessorOzone.IsCandidateSharedImage"
    enum="Boolean" expires_after="2021-09-19">
  <owner>samans@chromium.org</owner>
  <owner>rjkroege@chromium.org</owner>
  <summary>
    Indicates whether the OverlayCandidate passed to
    OverlayCandidateValidatorOzone is backed by a SharedImage (as opposed to a
    legacy mailbox). Recorded for every candidate in every overlay configuration
    passed to OverlayProcessorOzone.
  </summary>
</histogram>

<histogram name="Compositing.Display.OverlayProcessorOzone.SharedImageExists"
    enum="Boolean" expires_after="2021-09-19">
  <owner>samans@chromium.org</owner>
  <owner>rjkroege@chromium.org</owner>
  <summary>
    Indicates whether the SharedImage corresponding to the OverlayCandidate was
    found. Reported for every OverlayCandidate that is backed by a SharedImage.
  </summary>
</histogram>

<histogram
    name="Compositing.Display.OverlayProcessorUsingStrategy.CheckOverlaySupportCallCount"
    units="units" expires_after="2022-06-30">
  <owner>khaslett@chromium.org</owner>
  <owner>kylechar@chromium.org</owner>
  <summary>
    This is logged once per frame, the number of times CheckOverlaySupport is
    called this frame.
  </summary>
</histogram>

<histogram
    name="Compositing.Display.OverlayProcessorUsingStrategy.CheckOverlaySupportUs"
    units="microseconds" expires_after="2022-06-30">
  <owner>khaslett@chromium.org</owner>
  <owner>kylechar@chromium.org</owner>
  <summary>
    Logged zero or more times per frame, the time spent checking if a set of
    candidates can be promoted to overlay. Only reported for platforms
    supporting high resolution clocks.
  </summary>
</histogram>

<histogram name="Compositing.Display.VizDependencyResolvedToGpuStartedDrawUs"
    units="microseconds" expires_after="2022-06-12">
  <owner>vasilyt@chromium.org</owner>
  <owner>backer@chromium.org</owner>
  <summary>
    This is logged once per frame, if the output surface provides timing
    information. It measures delta between the time when display compositor draw
    task's dependencies have been solved and the time when the Gpu Thread
    started processing it. Only reported for platforms supporting high
    resolution clocks.
  </summary>
</histogram>

<histogram name="Compositing.Display.VizScheduledDrawToDependencyResolvedUs"
    units="microseconds" expires_after="2022-06-12">
  <owner>vasilyt@chromium.org</owner>
  <owner>backer@chromium.org</owner>
  <summary>
    This is logged once per frame if the output surface provides timing
    information. It measures delta between the time when display compositor
    scheduled first draw task for the current frame on Viz Compositor thread and
    the time when the task's dependencies have been resolved and the task is
    ready for the Gpu Thread to start processing it. Recorded when swap
    completes. Only reported for platforms supporting high resolution clocks.
  </summary>
</histogram>

<histogram name="Compositing.Display.VizScheduledDrawToGpuStartedDrawUs"
    units="microseconds" expires_after="2022-06-12">
  <owner>vasilyt@chromium.org</owner>
  <owner>backer@chromium.org</owner>
  <summary>
    This is logged once per frame if the output surface provides timing
    information. It measures delta between the time when display compositor
    scheduled first draw task for the current frame on Viz Compositor thread and
    the time when Gpu Thread started processing it. Recorded when swap
    completes. Only reported for platforms supporting high resolution clocks.
  </summary>
</histogram>

<histogram name="Compositing.Renderer.CALayerResult" enum="CALayerResult"
    expires_after="2022-07-03">
  <owner>ccameron@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    The outcome of attempting to replace all renderer tiles with CALayers.
    Either success, or the first reason why a DrawQuad couldn't be replaced by a
    CALayer.
  </summary>
</histogram>

<histogram name="Compositing.Renderer.GPUMemoryForTilingsInKb" units="Kb"
    expires_after="2022-11-09">
  <owner>pdr@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <summary>
    The GPU memory allocated for tilings (in a renderer process), summed over
    all picture layers. Emitted once per drawing. Nothing is recorded if there
    are no picture layers.

    Tilings are used for decomposition of the layer's entire contents at a
    picture screenspace resolution to do threaded rasterization.
  </summary>
</histogram>

<histogram
    name="Compositing.Renderer.LayerSkippedForDrawPropertiesDueToBackface"
    units="boolean" expires_after="2022-02-01">
  <owner>chrishtr@chromium.org</owner>
  <owner>dbaron@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <summary>
    Records whether layer draw properties updates were skipped due to the layer
    being back-facing and not being double-sided, but were otherwise going to be
    updated.
  </summary>
</histogram>

<histogram name="Compositing.Renderer.LayersUpdateTime" units="microseconds"
    expires_after="2022-06-12">
  <owner>schenney@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <summary>
    Time spent updating layers, in microseconds. Recorded when layers are
    updated (in a renderer process).

    Warning: This metric may include reports from clients with low-resolution
    clocks (i.e. on Windows, ref. |TimeTicks::IsHighResolution()|). Such reports
    will cause this metric to have an abnormal distribution. When considering
    revising this histogram, see UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES for the
    solution.
  </summary>
</histogram>

<histogram name="Compositing.Renderer.LayerTreeImpl.CalculateDrawPropertiesUs"
    units="microseconds" expires_after="M81">
  <owner>schenney@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <summary>
    Time spent updating layer draw properties, in microseconds. Recorded when a
    LayerTreeImpl's draw properties are updated (in a renderer process).

    Warning: This metric may include reports from clients with low-resolution
    clocks (i.e. on Windows, ref. |TimeTicks::IsHighResolution()|). Such reports
    will cause this metric to have an abnormal distribution. When considering
    revising this histogram, see UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES for the
    solution.
  </summary>
</histogram>

<histogram name="Compositing.Renderer.LayerUpdateSkippedDueToBackface"
    units="boolean" expires_after="2022-02-01">
  <owner>chrishtr@chromium.org</owner>
  <owner>dbaron@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <summary>
    Records whether a layer update was skipped due to the layer being
    back-facing and not being double-sided, but was otherwise going to be
    updated.
  </summary>
</histogram>

<histogram name="Compositing.Renderer.LCDTextDisallowedReasonKPixels"
    enum="LCDTextDisallowedReason" expires_after="2022-06-05">
  <owner>wangxianzhu@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <summary>
    Records the approximate kilo-pixels covered by text drawing operations by
    LCD-text disallowed reasons. Hence the histogram value for each reason is
    the approximate number of non-LCD kilo-pixels resulting from that reason.
    Recorded when the renderer is idle, at minimum interval of the longer of 1
    minute and 500 begin frames for each local frame tree.
  </summary>
</histogram>

<histogram name="Compositing.Renderer.LCDTextDisallowedReasonLayers"
    enum="LCDTextDisallowedReason" expires_after="2022-06-12">
  <owner>wangxianzhu@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <summary>
    Records the number of layers containing text by LCD-text disallowed reasons.
    Recorded along with Compositing.Renderer.LCDTextDisallowedReasonKPixels.
  </summary>
</histogram>

<histogram name="Compositing.Renderer.NumActiveLayers" units="layers"
    expires_after="2022-06-12">
  <owner>schenney@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <summary>
    The number of layers in the active tree for each compositor frame. This is
    logged once per frame, before the frame is drawn (in a renderer process).
  </summary>
</histogram>

<histogram name="Compositing.Renderer.NumActivePictureLayers" units="layers"
    expires_after="2022-06-12">
  <owner>schenney@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <summary>
    The number of PictureLayers in the active tree for each compositor frame.
    This is logged once per frame, before the frame is drawn (in a renderer
    process).
  </summary>
</histogram>

<histogram name="Compositing.Renderer.NumRenderSurfaces" units="surfaces"
    expires_after="2022-06-26">
  <owner>schenney@chromium.org</owner>
  <owner>paint-dev@chromium.org</owner>
  <summary>
    The number of render surfaces in the render surface layer list. Recorded
    each time the render surface layer list is constructed (in a renderer
    process).
  </summary>
</histogram>

<histogram
    name="Compositing.RenderPass.AppendQuadData.CheckerboardedNeedRasterContentArea"
    units="pixels/frame" expires_after="2020-04-19">
  <owner>weiliangc@chromium.org</owner>
  <summary>
    Checkerboarded area, in number of pixels, that has recording but does not
    have time to finish rastering yet. A sample is recorded everytime a frame is
    drawn while a scroll is in progress. Tracking bug 535732.
  </summary>
</histogram>

<histogram
    name="Compositing.RenderPass.AppendQuadData.CheckerboardedNoRecordingContentArea"
    units="pixels/frame" expires_after="M82">
  <owner>weiliangc@chromium.org</owner>
  <summary>
    Checkerboarded area, in number of pixels, that has no recording to raster
    from. A sample is recorded everytime a frame is drawn while a scroll is in
    progress. Tracking bug 535732.
  </summary>
</histogram>

<histogram name="Compositing.RenderPass.AppendQuadData.NumIncompleteTiles"
    units="units" expires_after="M81">
  <owner>weiliangc@chromium.org</owner>
  <summary>
    Keeps track of number of incomplete tiles in a drawn compositor frame while
    scrolling. This is a rough measurement of ugliness during user interaction.
    Incomplete tiles are non ideal scaled. A sample is recorded everytime a
    frame is drawn while a scroll is in progress. Tracking bug 381695.
  </summary>
</histogram>

<histogram name="Compositing.RenderPass.AppendQuadData.NumMissingTiles"
    units="units" expires_after="M81">
  <owner>weiliangc@chromium.org</owner>
  <summary>
    Keeps track of number of missing tiles in a drawn compositor frame while
    scrolling. This is a rough measurement of ugliness during user interaction.
    Incomplete tiles are checkerboard or solid color. A sample is recorded
    everytime a frame is drawn while a scroll is in progress. Tracking bug
    381695.
  </summary>
</histogram>

<histogram base="true" name="Compositing.ResourcePoolMemoryUsage" units="MB"
    expires_after="2022-05-01">
  <owner>sunnyps@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Size of the in-use portion of the ResourcePool for CC layer tree. Recorded
    each time resources are reclaimed after tile work completes.
  </summary>
</histogram>

<histogram name="Compositing.SkiaRenderer.DrawTileDrawQuad.CDT.IsTranslateOnly"
    units="boolean" expires_after="2022-05-29">
  <owner>penghuang@chromium.org</owner>
  <owner>herb@google.com</owner>
  <summary>
    Records if the content to device transform (CDT) used in
    SkiaRenderer::DrawTileDrawQuad is a translate only transfrom.
  </summary>
</histogram>

<histogram name="Compositing.SurfaceAggregator.AggregateUs"
    units="microseconds" expires_after="2022-08-19">
  <owner>weiliangc@chromium.org</owner>
  <owner>kylechar@chromium.org</owner>
  <summary>
    Time spent aggregating compositor frames from different surfaces in
    microseconds. This is logged once per frame.

    Warning: This metric may include reports from clients with low-resolution
    clocks (i.e. on Windows, ref. |TimeTicks::IsHighResolution()|). Such reports
    will cause this metric to have an abnormal distribution. When considering
    revising this histogram, see UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES for the
    solution.
  </summary>
</histogram>

<histogram name="Compositing.SurfaceAggregator.CopiedSurfaceCount"
    units="surfaces" expires_after="2022-07-03">
  <owner>kylechar@chromium.org</owner>
  <owner>jonross@chromium.org</owner>
  <summary>
    The number of surfaces where the active CompositorFrame was copied into the
    AggregateFrame during surface aggregation. This is logged once per frame.
  </summary>
</histogram>

<histogram name="Compositing.SurfaceAggregator.CopyUs" units="microseconds"
    expires_after="2022-06-19">
  <owner>kylechar@chromium.org</owner>
  <owner>jonross@chromium.org</owner>
  <summary>
    Time spent copying quads during surface aggregation. This is a subset of the
    time recorded for Compositing.SurfaceAggregator.AggregateUs and is logged
    once per frame.

    Warning: This metric does not include reports from clients with
    low-resolution clocks.
  </summary>
</histogram>

<histogram name="Compositing.SurfaceAggregator.DeclareResourceCount"
    units="resources" expires_after="2022-06-19">
  <owner>kylechar@chromium.org</owner>
  <owner>jonross@chromium.org</owner>
  <summary>
    The number of TransferableResources processed while declaring resources as
    used during surface aggregation. This is logged once per frame.
  </summary>
</histogram>

<histogram name="Compositing.SurfaceAggregator.DeclareResourcesUs"
    units="microseconds" expires_after="2022-06-05">
  <owner>kylechar@chromium.org</owner>
  <owner>jonross@chromium.org</owner>
  <summary>
    Time spent declaring resources as used during surface aggregation. This is a
    subset of the time recorded for Compositing.SurfaceAggregator.AggregateUs
    and is logged once per frame.

    Warning: This metric does not include reports from clients with
    low-resolution clocks.
  </summary>
</histogram>

<histogram name="Compositing.SurfaceAggregator.FrameContainsVideo"
    enum="TypeOfVideoInFrame" expires_after="2021-10-04">
  <owner>vikassoni@chromium.org</owner>
  <owner>khushalsagar@chromium.org</owner>
  <summary>
    Whether an aggregated frame contains video or not. This metric will be used
    to analyze the percentage of displayed frame with video. This metric will be
    extended in future to specify whether the video is inline or fullscreen.
  </summary>
</histogram>

<histogram name="Compositing.SurfaceAggregator.PrewalkedSurfaceCount"
    units="surfaces" expires_after="2022-06-26">
  <owner>kylechar@chromium.org</owner>
  <owner>jonross@chromium.org</owner>
  <summary>
    The number of surfaces that were looked at during the prewalk phase of
    surface aggregation. This is logged once per frame.
  </summary>
</histogram>

<histogram name="Compositing.SurfaceAggregator.PrewalkUs" units="microseconds"
    expires_after="2022-06-05">
  <owner>kylechar@chromium.org</owner>
  <owner>jonross@chromium.org</owner>
  <summary>
    Time spent doing prewalk during surface aggregation. This is a subset of the
    time recorded for Compositing.SurfaceAggregator.AggregateUs and is logged
    once per frame.

    Warning: This metric does not include reports from clients with
    low-resolution clocks.
  </summary>
</histogram>

<histogram base="true" name="CompositorLatency" units="microseconds"
    expires_after="2022-05-22">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the duration of various stages in the pipeline as a single frame goes
    through the various stages in the compositor. This is reported for frames
    that went through all the compositor stages in chromium, and was presented
    to the user.

    Warning: This metric may include reports from clients with low-resolution
    clocks (i.e. on Windows, ref. |TimeTicks::IsHighResolution()|). Such reports
    will cause this metric to have an abnormal distribution. When considering
    revising this histogram, see UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES for the
    solution.
  </summary>
</histogram>

<histogram base="true" name="CompositorLatency.CompositorOnlyFrame"
    units="microseconds" expires_after="2022-06-19">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the duration of various stages in the pipeline as a single frame goes
    through the various stages in the compositor in the cases that there is no
    damage from main thread.

    Warning: This metric may include reports from clients with low-resolution
    clocks (i.e. on Windows, ref. |TimeTicks::IsHighResolution()|). Such reports
    will cause this metric to have an abnormal distribution. When considering
    revising this histogram, see UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES for the
    solution.
  </summary>
</histogram>

<histogram base="true" name="CompositorLatency.DroppedFrame"
    units="microseconds" expires_after="2022-06-26">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the duration of various stages in the pipeline as a single frame goes
    through the various stages in the compositor. This is reported for frames
    that the user did not see: this includes frames that are dropped in various
    stages inside chromium, or even frames that went through all stages in
    chromium, but ultimately was not presented to the user.

    Warning: This metric may include reports from clients with low-resolution
    clocks (i.e. on Windows, ref. |TimeTicks::IsHighResolution()|). Such reports
    will cause this metric to have an abnormal distribution. When considering
    revising this histogram, see UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES for the
    solution.
  </summary>
</histogram>

<histogram base="true" name="CompositorLatency.MissedDeadlineFrame"
    units="microseconds" expires_after="2022-06-12">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the duration of various stages in the pipeline as a single frame goes
    through the various stages in the compositor. This is reported for frames
    that went through all the compositor stages in chromium, and was presented
    to the user, but were delayed and missed their deadline.

    Warning: This metric may include reports from clients with low-resolution
    clocks (i.e. on Windows, ref. |TimeTicks::IsHighResolution()|). Such reports
    will cause this metric to have an abnormal distribution. When considering
    revising this histogram, see UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES for the
    solution.
  </summary>
</histogram>

<histogram name="CompositorLatency.Type" enum="FrameReportType"
    expires_after="2022-06-12">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Whether frame is dropped or presented meeting or missing the deadline or is
    a compositor only frame.
  </summary>
</histogram>

<histogram name="Graphics.PresentationTimestamp.InvalidBeforeSwap" units="ms"
    expires_after="2022-05-01">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Presentation timestamp comes from the driver when showing a display frame on
    screen. These timestamps could be invalid, and be earlier than the swap
    time. This metric records how much time before the swap-time such invalid
    timestamps are. If the presentation timestamp is after the swap-time, then
    this metric is not recorded.
  </summary>
</histogram>

<histogram name="Graphics.PresentationTimestamp.InvalidFromFuture" units="ms"
    expires_after="2022-01-02">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Presentation timestamp comes from the driver when showing a display frame on
    screen. These timestamps can sometimes be in the future. This metric records
    how far in the future these timestamps can be. If the timestamp is not in
    the future, then this metric is not recorded.
  </summary>
</histogram>

<histogram name="Graphics.PresentationTimestamp.LargePresentationDelta"
    units="ms" expires_after="2022-01-02">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Measures very large (more than 3 minutes) delay in presenting display
    frames. Presentation timestamp comes from the driver when showing a display
    frame on screen. There are times when the presentation can be delayed a long
    time. This metric reports how often this can happen. This is reported only
    if the presentation takes 3 minutes or more.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.95pctPercentDroppedFrames_1sWindow"
    units="%" expires_after="2022-06-19">
  <owner>behdadb@chromium.org</owner>
  <owner>sadrul@chromium.org</owner>
  <summary>
    The percent dropped frame is calculated for each sliding window of 1 second
    length and added to a histogram, and then the 95 percentile of that
    histogram is reported as 95pctPercentDroppedFrames_1sWindow.

    The sliding windows cover the duration of page-load (From start of page-load
    until user navigates away, or closes the tab/chrome, or when app goes to
    background). Note that this means that this metric will bias toward tabs
    that are closed more quickly, and might underreport tabs that remain open
    for a long duration.

    PercentDroppedFrames is measured by tracking the number of frames which were
    not displayed on screen out of the total number of frames expected to be
    produced and displayed. In other words, the lower this number is, the
    smoother experience.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.Checkerboarding" units="%"
    expires_after="2022-05-22">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the percent of frames that were shown with checkerboards during a
    particular sequence of frames (e.g. during scroll, animation, etc.). Note
    that this is only recorded for sequences of length &gt; 4.

    Checkerboarding is measured by tracking the number of times checkerboard
    frames are displayed (as opposed to the number of checkerboard frames
    produced), since the same checkerboard frame can be displayed more than
    once.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.Diagnostic.DiscardedDependentCount"
    units="dependent reporters" expires_after="2022-06-19">
  <owner>sadrul@chromium.org</owner>
  <owner>behdadb@chromium.org</owner>
  <summary>
    Diagnostic metric to measure how many dependent reporters have been
    discarded.

    The reporters might be dependant on another reporter (when having partial
    updates) but if the number of dependents go over a limit we would discard
    them earlier. This metric count how many of such reporters been discarded
    earlier than expected as a result of outstanding number of dependent
    reporters. The metric will be reported at the end of each frame if there has
    been any discarded dependent reporters.
  </summary>
</histogram>

<histogram
    name="Graphics.Smoothness.Diagnostic.DroppedFrameAfterScrollStart2.Frames"
    units="vsyncs" expires_after="2022-11-29">
  <owner>sadrul@chromium.org</owner>
  <owner>behdadb@chromium.org</owner>
  <summary>
    Diagnostic metric to measure how long after scroll-start a frame is dropped.

    For every frame dropped during a scroll, this metric reports how long after
    scroll started the frame dropped (in number of vsyncs).
  </summary>
</histogram>

<histogram
    name="Graphics.Smoothness.Diagnostic.DroppedFrameAfterScrollStart2.Time"
    units="ms" expires_after="2022-11-29">
  <owner>sadrul@chromium.org</owner>
  <owner>behdadb@chromium.org</owner>
  <summary>
    Diagnostic metric to measure how long after scroll-start a frame is dropped.

    For every frame dropped during a scroll, this metric reports how long after
    scroll started the frame dropped (in milliseconds).
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.Diagnostic.ReadSharedMemoryDuration"
    units="microseconds" expires_after="2021-09-01">
  <owner>sadrul@chromium.org</owner>
  <owner>behdadb@chromium.org</owner>
  <summary>
    Diagnostic metric to track how long it takes to read the smoothness data
    from shared memory.

    Warning: This metric may include reports from clients with low-resolution
    clocks (i.e. on Windows, ref. |TimeTicks::IsHighResolution()|). Such reports
    will cause this metric to have an abnormal distribution.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.Diagnostic.ReadSharedMemoryUKMSuccess"
    units="boolean" expires_after="2021-09-01">
  <owner>sadrul@chromium.org</owner>
  <owner>fangzhoug@chromium.org</owner>
  <summary>
    Diagnostic metric to track how often reading the smoothness data for UKM
    from the shared memory (using atomic memcpy) fails (or succeeds).
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.Jank" units="%" expires_after="2022-06-01">
  <owner>sadrul@chromium.org</owner>
  <owner>mjzhang@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the percent of janks for a particular sequence of frames (e.g. during
    scroll, animation, etc.). This is reported in various sub-metrics with
    suffixes describing the type of the sequence (e.g. TouchScroll etc.).

    Jank is measured by tracking the number of abrupt increases in frame
    presentation interval, divided by the total number of frames expected to be
    produced and displayed. The lower this number is, the less the smoothness
    varies over time.

    Note that this metric is reported only when there are sufficient number of
    frames (&gt;= 100). If there are sequences with fewer frames, then these are
    aggregated until there are enough frames to produce the metric.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.Jank.All{Type}" units="%"
    expires_after="2022-06-01">
  <owner>sadrul@chromium.org</owner>
  <owner>mjzhang@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the percent of janks for a particular frame sequence. {Type}

    Jank is measured by tracking the number of abrupt increases in frame
    presentation interval, divided by the total number of frames expected to be
    produced and displayed. The lower this number is, the less the smoothness
    varies over time.

    Note that this metric is reported only when there are sufficient number of
    frames (&gt;= 100). If there are sequences with fewer frames, then these are
    aggregated until there are enough frames to produce the metric.
  </summary>
  <token key="Type">
    <variant name="Animations"
        summary="This metric aggregates data reported from all types of
                 animations (e.g. comositor-driven animations, main-thread
                 driven animations, and raf-driven animations, etc.)."/>
    <variant name="Interactions"
        summary="This metric aggregates data reported for all supported
                 combinations of interaction types (e.g. scrolling, pinching,
                 etc.) and input device types (e.g. touchscreen, touchpad,
                 mousewheel, etc.)."/>
    <variant name="Sequences"
        summary="This metric aggregates data from all animations and all
                 interactions."/>
  </token>
</histogram>

<histogram name="Graphics.Smoothness.MaxPercentDroppedFrames_1sWindow"
    units="%" expires_after="2022-06-12">
  <owner>behdadb@chromium.org</owner>
  <owner>sadrul@chromium.org</owner>
  <summary>
    Tracks the percent of dropped frames for in a 1 second sliding window.

    PercentDroppedFrames is measured by tracking the number of frames which were
    not displayed on screen out of the total number of frames expected to be
    produced and displayed. In other words, the lower this number is, the
    smoother experience.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.MaxStale" units="ms"
    expires_after="2022-06-12">
  <owner>sadrul@chromium.org</owner>
  <owner>mjzhang@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the maximum staleness value for all presentations for a particular
    sequence of frames (e.g. during scroll, animation, etc.). This is reported
    in various sub-metrics with suffixes describing the type of the sequence
    (e.g. TouchScroll etc.).

    Typically, a frame presentation is expected to last at least one vsync
    cycle, plus any number of additional vsync cycles if no updates are expected
    duration that time. If the presentation interval is prolonged due to reasons
    other than listed above, then that prolonged portion will be considered
    staleness for that frame.

    Note that this metric is reported only when there are sufficient number of
    frames (&gt;= 100). If there are sequences with fewer frames, then these are
    aggregated until there are enough frames to produce the metric.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.PercentDroppedFrames" units="%"
    expires_after="2022-09-30">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the percent of dropped frames for a particular sequence of frames
    (e.g. during scroll, animation, etc.). This is reported in various
    sub-metrics with suffixes describing the type of the sequence (e.g.
    TouchScroll etc.).

    PercentDroppedFrames is measured by tracking the number of frames which were
    not displayed on screen out of the total number of frames expected to be
    produced and displayed. In other words, the lower this number is, the
    smoother experience.

    Note that this metric is reported only when there are sufficient number of
    frames (&gt;= 100). If there are sequences with fewer frames, then these are
    aggregated until there are enough frames to produce the metric.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.PercentDroppedFrames.AllAnimations"
    units="%" expires_after="2022-06-12">
  <owner>sadrul@chromium.org</owner>
  <owner>ericrk@chromium.org</owner>
  <summary>
    Tracks the percent of dropped frames for a particular sequence of frames for
    all animations. This metric is reported for all animations (e.g.
    comositor-driven animations, main-thread driven animations, and raf-driven
    animations).

    PercentDroppedFrames is measured by tracking the number of frames which were
    not displayed on screen out of the total number of frames expected to be
    produced and displayed. In other words, the lower this number is, the
    smoother experience.

    Note that this metric is reported only when there are sufficient number of
    frames (&gt;= 100). If there are sequences with fewer frames, then these are
    aggregated until there are enough frames to produce the metric.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.PercentDroppedFrames.AllInteractions"
    units="%" expires_after="2022-06-12">
  <owner>sadrul@chromium.org</owner>
  <owner>ericrk@chromium.org</owner>
  <summary>
    Tracks the percent of dropped frames for a particular sequence of frames
    where a user-input (e.g. scroll, pinch) is active. This metric is reported
    for all sources of user-input (i.e. both touchscreen and
    touchpad/mouse-wheel).

    PercentDroppedFrames is measured by tracking the number of frames which were
    not displayed on screen out of the total number of frames expected to be
    produced and displayed. In other words, the lower this number is, the
    smoother experience.

    Note that this metric is reported only when there are sufficient number of
    frames (&gt;= 100). If there are sequences with fewer frames, then these are
    aggregated until there are enough frames to produce the metric.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.PercentDroppedFrames.AllSequences"
    units="%" expires_after="2022-06-12">
  <owner>sadrul@chromium.org</owner>
  <owner>ericrk@chromium.org</owner>
  <summary>
    Tracks the percent of dropped frames for a particular sequence of frames.
    This metric is reported for all animations and all interactions.

    PercentDroppedFrames is measured by tracking the number of frames which were
    not displayed on screen out of the total number of frames expected to be
    produced and displayed. In other words, the lower this number is, the
    smoother experience.

    Note that this metric is reported only when there are sufficient number of
    frames (&gt;= 100). If there are sequences with fewer frames, then these are
    aggregated until there are enough frames to produce the metric.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.PercentDroppedFrames2.AllAnimations"
    units="%" expires_after="2022-09-10">
  <owner>sadrul@chromium.org</owner>
  <owner>behdadb@chromium.org</owner>
  <summary>
    Tracks the percent of dropped frames for a particular sequence of frames for
    all animations. This metric is reported for all animations (e.g.
    comositor-driven animations, main-thread driven animations, and raf-driven
    animations).

    PercentDroppedFrames is measured by tracking the number of frames which were
    not displayed on screen out of the total number of frames expected to be
    produced and displayed. In other words, the lower this number is, the
    smoother experience.

    Note that this metric is reported only when there are sufficient number of
    frames (&gt;= 100). If there are sequences with fewer frames, then these are
    aggregated until there are enough frames to produce the metric.

    This is a new implementation of the older
    Graphics.Smoothness.PercentDroppedFrames.AllAnimations metric.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.PercentDroppedFrames2.AllInteractions"
    units="%" expires_after="2022-09-10">
  <owner>sadrul@chromium.org</owner>
  <owner>behdadb@chromium.org</owner>
  <summary>
    Tracks the percent of dropped frames for a particular sequence of frames
    where a user-input (e.g. scroll, pinch) is active. This metric is reported
    for all sources of user-input (i.e. both touchscreen and
    touchpad/mouse-wheel).

    PercentDroppedFrames is measured by tracking the number of frames which were
    not displayed on screen out of the total number of frames expected to be
    produced and displayed. In other words, the lower this number is, the
    smoother experience.

    Note that this metric is reported only when there are sufficient number of
    frames (&gt;= 100). If there are sequences with fewer frames, then these are
    aggregated until there are enough frames to produce the metric.

    This is a new implementation of the older
    Graphics.Smoothness.PercentDroppedFrames.AllInteractions metric.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.PercentDroppedFrames2.AllSequences"
    units="%" expires_after="2022-09-10">
  <owner>sadrul@chromium.org</owner>
  <owner>behdadb@chromium.org</owner>
  <summary>
    Tracks the percent of dropped frames for a particular sequence of frames.
    This metric is reported for all animations and all interactions.

    PercentDroppedFrames is measured by tracking the number of frames which were
    not displayed on screen out of the total number of frames expected to be
    produced and displayed. In other words, the lower this number is, the
    smoother experience.

    Note that this metric is reported only when there are sufficient number of
    frames (&gt;= 100). If there are sequences with fewer frames, then these are
    aggregated until there are enough frames to produce the metric.

    This is a new implementation of the older
    Graphics.Smoothness.PercentDroppedFrames.AllSequences metric.
  </summary>
</histogram>

<histogram base="true" name="Graphics.Smoothness.PercentMissedDeadlineFrames"
    units="%" expires_after="2022-09-30">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the percent of frames that missed the deadline for a particular
    sequence of frames (e.g. during scroll, animation, etc.). This is reported
    in various sub-metrics with suffixes describing the type of the sequence
    (e.g. TouchScroll etc.).

    PercentMissedDeadlineFrames is measured by tracking the number of frames
    which were displayed on screen but missed the vsync interval.

    Note that this metric is reported only when there are sufficient number of
    frames (&gt;= 100). If there are sequences with fewer frames, then these are
    aggregated until there are enough frames to produce the metric.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.PercentMissedDeadlineFrames.AllAnimations"
    units="%" expires_after="2022-09-30">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the percent of frames that missed the deadline for a particular
    sequence of frames for all animations. This metric is reported for all
    animations (e.g. comositor-driven animations, main-thread driven animations,
    and raf-driven animations).

    PercentMissedDeadlineFrames is measured by tracking the number of frames
    which were displayed on screen but missed the vsync interval.

    Note that this metric is reported only when there are sufficient number of
    frames (&gt;= 100). If there are sequences with fewer frames, then these are
    aggregated until there are enough frames to produce the metric.
  </summary>
</histogram>

<histogram
    name="Graphics.Smoothness.PercentMissedDeadlineFrames.AllInteractions"
    units="%" expires_after="2022-09-30">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the percent of frames that missed the deadline for a particular
    sequence of frames where a user-input (e.g. scroll, pinch) is active. This
    metric is reported for all sources of user-input (i.e. both touchscreen and
    touchpad/mouse-wheel).

    PercentMissedDeadlineFrames is measured by tracking the number of frames
    which were displayed on screen but missed the vsync interval.

    Note that this metric is reported only when there are sufficient number of
    frames (&gt;= 100). If there are sequences with fewer frames, then these are
    aggregated until there are enough frames to produce the metric.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.PercentMissedDeadlineFrames.AllSequences"
    units="%" expires_after="2022-09-30">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the percent of frames that missed the deadline for a particular
    sequence of frames. This metric is reported for all animations and all
    interactions.

    PercentMissedDeadlineFrames is measured by tracking the number of frames
    which were displayed on screen but missed the vsync interval.

    Note that this metric is reported only when there are sufficient number of
    frames (&gt;= 100). If there are sequences with fewer frames, then these are
    aggregated until there are enough frames to produce the metric.
  </summary>
</histogram>

<histogram
    name="Graphics.Smoothness.PerSession.95pctPercentDroppedFrames_1sWindow"
    units="%" expires_after="2022-04-17">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the 95th percentile of dropped frames percent of a sliding window of
    1 second. The metric is reported once per page-load when the page closes. If
    there are fewer than 20 sliding windows for calculating 95th percentile, the
    max value will be used instead of 95th percentile.

    PercentDroppedFrames is measured by tracking the number of frames which were
    not displayed on screen out of the total number of frames expected to be
    produced and displayed. In other words, the lower this number is, the
    smoother experience.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.PerSession.AveragePercentDroppedFrames"
    units="%" expires_after="2022-06-05">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the percent of dropped frames. The metric is reported once per
    page-load when the page closes.

    AveragePercentDroppedFrames is measured by tracking the number of frames
    which were not displayed on screen out of the total number of frames
    expected to be produced and displayed. In other words, the lower this number
    is, the smoother experience.
  </summary>
</histogram>

<histogram
    name="Graphics.Smoothness.PerSession.MaxPercentDroppedFrames_1sWindow"
    units="%" expires_after="2022-05-29">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the Max of dropped frames percent of a sliding window of 1 second.
    The metric is reported once per page-load when the page closes.

    PercentDroppedFrames is measured by tracking the number of frames which were
    not displayed on screen out of the total number of frames expected to be
    produced and displayed. In other words, the lower this number is, the
    smoother experience.
  </summary>
</histogram>

<histogram
    name="Graphics.Smoothness.PerSession.TimeMaxPercentDroppedFrames_1sWindow"
    units="ms" expires_after="2021-11-18">
  <owner>sadrul@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the time since First Contentful Paint when the sliding window with
    the max percent of dropped frames occurs, up to 25 seconds. The metric is
    reported once per page-load when the page closes.

    PercentDroppedFrames is measured by tracking the number of frames which were
    not displayed on screen out of the total number of frames expected to be
    produced and displayed. In other words, the lower this number is, the
    smoother experience.
  </summary>
</histogram>

<histogram name="Graphics.Smoothness.Stale" units="ms"
    expires_after="2022-06-12">
  <owner>sadrul@chromium.org</owner>
  <owner>mjzhang@chromium.org</owner>
  <owner>graphics-dev@chromium.org</owner>
  <summary>
    Tracks the staleness value for each frame presentation for a particular
    sequence of frames (e.g. during scroll, animation, etc.). This is reported
    in various sub-metrics with suffixes describing the type of the sequence
    (e.g. TouchScroll etc.).

    Typically, a frame presentation is expected to last at least one vsync
    cycle, plus any number of additional vsync cycles if no updates are expected
    duration that time. If the presentation interval is prolonged due to reasons
    other than listed above, then that prolonged portion will be considered
    staleness.

    Note that the reporting of this metric occurs as soon as a frame is
    presented, and is not affected by the length of the frame sequence.
  </summary>
</histogram>

</histograms>

</histogram-configuration>
