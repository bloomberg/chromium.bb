#!/usr/bin/env python
#
# Copyright 2021 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""
This executable script runs perfetto traces on the specified device.
See the README.md file for more information.
"""

import optparse
import os
import sys

import adb_profile_chrome_startup

sys.path.insert(0, os.path.join(os.path.dirname(__file__),
                                os.pardir, os.pardir, 'third_party',
                                'catapult', 'systrace'))

from profile_chrome import chrome_startup_tracing_agent
from profile_chrome import flags
from systrace import util


_DEFAULT_CHROME_CATEGORIES = '_DEFAULT_CHROME_CATEGORIES'


def _CreateOptionParser():
  # TODO(rhuckleberry): Update description when adding script functionality.
  parser = optparse.OptionParser(description='Record Perfetto tracing profiles '
                                 'from Android browsers startup. See '
                                 'http://dev.chromium.org'
                                 '/developers/how-tos/trace-event-profiling-'
                                 'tool for detailed instructions for '
                                 'profiling.', conflict_handler='resolve')
  parser = util.get_main_options(parser)

  browsers = sorted(util.get_supported_browsers().keys())
  parser.add_option('--browser', help='Select among installed browsers. '
                    'One of ' + ', '.join(browsers) + ', "stable" is used by '
                    'default.', type='choice', choices=browsers,
                    default='stable')
  parser.add_option('--verbose', help='Verbose logging.',
                    action='store_true')
  parser.add_option('--compress', help='Compress the resulting trace '
                    'with gzip. ', action='store_true')
  parser.add_option('--time', help='Stops tracing after N seconds, 0 to '
                    'manually stop (startup trace ends after at most 5s).',
                    default=5, metavar='N', type='int', dest='trace_time')
  parser.add_option('--chrome_categories', help='Chrome tracing '
                    'categories to record.', default=_DEFAULT_CHROME_CATEGORIES,
                    type='string')
  parser.add_option('--platform', help='Device to system profile.',
                    dest='platform', default='android')

  parser.add_option_group(chrome_startup_tracing_agent.add_options(parser))
  parser.add_option_group(flags.OutputOptions(parser))

  return parser


def main():
  parser = _CreateOptionParser()
  options, _ = parser.parse_args()

  # Run Tracing
  trace_file = None
  if options.platform.lower() == 'android':
    trace_file = adb_profile_chrome_startup.ProfileChrome(options)
  else:
    raise ValueError('Platform "%s" is not supported. '
                    'Specify platform with the --platform flag.' % (options.platform))

if __name__ == '__main__':
  sys.exit(main())
