// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

{%- if variant -%}
{%-   set variant_path = "%s-%s"|format(module.path, variant) -%}
{%- else -%}
{%-   set variant_path = module.path -%}
{%- endif %}

{%- set header_guard_for_jumbo = "%s_JUMBO_H_"|format(
        variant_path|upper|replace("/","_")|replace(".","_")|
            replace("-", "_")) %}

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

{%- macro namespace_begin() %}
{%-   for namespace in namespaces_as_array %}
namespace {{namespace}} {
{%-   endfor %}
{%-   if variant %}
namespace {{variant}} {
{%-   endif %}
{%- endmacro %}

{%- macro namespace_end() %}
{%-   if variant %}
}  // namespace {{variant}}
{%-   endif %}
{%-   for namespace in namespaces_as_array|reverse %}
}  // namespace {{namespace}}
{%-   endfor %}
{%- endmacro %}


#include "{{variant_path}}-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"

{%- if for_blink %}
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"
{%- endif %}

{%- for import in imports %}
{%-   if variant %}
#include "{{"%s-%s.h"|format(import.path, variant)}}"
{%-   else %}
#include "{{import.path}}.h"
{%-   endif %}
{%- endfor %}

{# This is include guard for jumbo build. #}
#ifndef {{header_guard_for_jumbo}}
#define {{header_guard_for_jumbo}}
{%- for header in extra_traits_headers %}
#include "{{header}}"
{%- endfor %}
#endif

{{namespace_begin()}}

{%- import "interface_macros.tmpl" as interface_macros %}

{%  for interface in interfaces %}

{#--- Testing interceptor #}
{%- for method in interface.methods %}
void {{interface.name}}InterceptorForTesting::{{method.name}}({{interface_macros.declare_request_params("", method)}}) {
  GetForwardingInterface()->{{method.name}}(
    {%- for param in method.parameters -%}
    std::move({{param.name}}){%- if not loop.last %}, {% endif %}
    {%- endfor %}
    {%-   if method.response_parameters != None -%}
    {%-     if method.parameters %}, {% endif -%}
    std::move(callback)
    {%-   endif -%}
  );
}
{%- endfor %}

{#--- Async wait helper for testing #}
{{interface.name}}AsyncWaiter::{{interface.name}}AsyncWaiter(
    {{interface.name}}* proxy) : proxy_(proxy) {}

{{interface.name}}AsyncWaiter::~{{interface.name}}AsyncWaiter() = default;

{%  for method in interface.methods if method.response_parameters != None -%}
void {{interface.name}}AsyncWaiter::{{method.name}}(
    {{interface_macros.declare_sync_method_params("", method)}}) {
  base::RunLoop loop;
  proxy_->{{method.name}}(
{%-   for param in method.parameters -%}
      std::move({{param.name}}),
{%-   endfor %}
      base::BindOnce(
          [](base::RunLoop* loop
{%-   for param in method.response_parameters -%},
             {{param.kind|cpp_wrapper_call_type}}* out_{{param.name}}
{%    endfor -%}
{%-   for param in method.response_parameters -%},
             {{param.kind|cpp_wrapper_param_type}} {{param.name}}
{%-   endfor %}) {
{%-   for param in method.response_parameters -%}
            *out_{{param.name}} = std::move({{param.name}});
{%-   endfor %}
            loop->Quit();
          },
          &loop
{%-   for param in method.response_parameters -%},
          out_{{param.name}}
{%-   endfor %}));
  loop.Run();
}
{% endfor %}

{% endfor %}

{{namespace_end()}}

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
