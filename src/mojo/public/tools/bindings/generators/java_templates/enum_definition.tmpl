{%- macro enum_def(enum, top_level) -%}
public {{ 'static ' if not top_level }}final class {{enum|name}} {
    private static final boolean IS_EXTENSIBLE = {% if enum.extensible %}true{% else %}false{% endif %};
{% for field in enum.fields %}
    public static final int {{field|name}} = {{field.numeric_value}};
{%- endfor %}
{%- if enum.min_value is not none %}
    public static final int MIN_VALUE = {{enum.min_value}};
{%- endif %}
{%- if enum.max_value is not none %}
    public static final int MAX_VALUE = {{enum.max_value}};
{%- endif %}

{%- if enum|covers_continuous_range %}

    public static boolean isKnownValue(int value) {
        return value >= {{enum.min_value}} && value <= {{enum.max_value}};
    }
{%- else %}

    public static boolean isKnownValue(int value) {
{%-   if enum.fields %}
        switch (value) {
{%-     for enum_field in enum.fields|groupby('numeric_value') %}
            case {{enum_field[0]}}:
{%-     endfor %}
                return true;
        }
{%-   endif %}
        return false;
    }
{%- endif %}

    public static void validate(int value) {
        if (IS_EXTENSIBLE || isKnownValue(value)) return;
        throw new org.chromium.mojo.bindings.DeserializationException("Invalid enum value.");
    }

    private {{enum|name}}() {}
}
{%- endmacro -%}
