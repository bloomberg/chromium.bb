GtkSettings* gtk_settings_get_default(void);
void gtk_widget_path_iter_set_object_name(GtkWidgetPath* path, gint pos, const gchar* name);
void gtk_widget_path_iter_add_class(GtkWidgetPath* path, gint pos, const gchar* name);
GtkWidgetPath* gtk_widget_path_copy(const GtkWidgetPath* path);
GtkWidgetPath* gtk_widget_path_new(void);
const GtkWidgetPath* gtk_style_context_get_path(GtkStyleContext* context);
gint gtk_widget_path_append_type(GtkWidgetPath* path, GType type);
void gtk_widget_path_iter_set_name(GtkWidgetPath* path, gint pos, const gchar* name);
void gtk_widget_path_iter_set_state(GtkWidgetPath* path, gint pos, GtkStateFlags state);
GtkStyleContext* gtk_style_context_new(void);
void gtk_style_context_set_path(GtkStyleContext* context, GtkWidgetPath* path);
void gtk_style_context_set_parent(GtkStyleContext* context, GtkStyleContext* parent);
void gtk_widget_path_unref(GtkWidgetPath* path);
GtkStyleContext* gtk_style_context_get_parent(GtkStyleContext* context);
void gtk_widget_set_css_classes(GtkWidget* widget, const char** classes);
void gtk_widget_measure(GtkWidget* widget, GtkOrientation orientation, int for_size, int* minimum, int* natural, int* minimum_baseline, int* natural_baseline);
GtkWidget* gtk_offscreen_window_new(void);
void gtk_container_add(GtkContainer* container, GtkWidget* widget);
void gtk_widget_destroy(GtkWidget* widget);
gboolean gtk_bindings_activate_event(GObject* object, GdkEventKey* event);
void gtk_widget_set_events(GtkWidget* widget, gint events);
GType gtk_container_get_type(void);
cairo_surface_t* gtk_icon_info_load_surface(GtkIconInfo* icon_info, GdkWindow* for_window, GError** error);
void gtk_style_context_get_valist(GtkStyleContext* context, GtkStateFlags state, va_list args);
void gtk_style_context_get_style_valist(GtkStyleContext* context, va_list args);
GtkSnapshot* gtk_snapshot_new(void);
GskRenderNode* gtk_snapshot_free_to_node(GtkSnapshot* snapshot);
void gtk_im_context_set_client_widget(GtkIMContext* context, GtkWidget* widget);
GtkNative* gtk_widget_get_native(GtkWidget* widget);
GdkSurface* gtk_native_get_surface(GtkNative* native);
gboolean gtk_im_context_filter_key(GtkIMContext* context, gboolean press, GdkSurface* surface, GdkDevice* device, guint32 time, guint keycode, GdkModifierType state, int group);
void gtk_im_context_set_client_window(GtkIMContext* context, GdkWindow* window);
gboolean gtk_file_chooser_set_filename(GtkFileChooser* chooser, const char* filename);
GSList* gtk_file_chooser_list_filters(GtkFileChooser* chooser);
gchar* gtk_file_chooser_get_filename(GtkFileChooser* chooser);
GSList* gtk_file_chooser_get_filenames(GtkFileChooser* chooser);
char* gtk_file_chooser_get_preview_filename(GtkFileChooser* chooser);
void gtk_file_chooser_set_preview_widget_active(GtkFileChooser* chooser, gboolean active);
void gtk_file_chooser_set_preview_widget(GtkFileChooser* chooser, GtkWidget* preview_widget);
gboolean gtk_widget_hide_on_delete(GtkWidget* widget);
void gtk_widget_show_all(GtkWidget* widget);
void gtk_file_chooser_set_do_overwrite_confirmation(GtkFileChooser* chooser, gboolean do_overwrite_confirmation);
GListModel* gtk_file_chooser_get_filters(GtkFileChooser* chooser);
void gtk_window_set_hide_on_close(GtkWindow* window, gboolean setting);
GtkIconInfo* gtk_icon_theme_lookup_icon_for_scale(GtkIconTheme* icon_theme, const gchar* icon_name, gint size, gint scale, GtkIconLookupFlags flags);
GdkPixbuf* gtk_icon_info_load_symbolic_for_context(GtkIconInfo* icon_info, GtkStyleContext* context, gboolean* was_symbolic, GError** error);
void gtk_snapshot_render_background(GtkSnapshot* snapshot, GtkStyleContext* context, double x, double y, double width, double height);
GType gtk_menu_get_type(void);
GType gtk_menu_bar_get_type(void);
GType gtk_menu_item_get_type(void);
void gtk_style_context_add_provider_for_screen(GdkScreen* screen, GtkStyleProvider* provider, guint priority);
void gtk_style_context_add_provider_for_display(GdkDisplay* display, GtkStyleProvider* provider, guint priority);
void gtk_style_context_remove_provider_for_screen(GdkScreen* screen, GtkStyleProvider* provider);
void gtk_style_context_remove_provider_for_display(GdkDisplay* display, GtkStyleProvider* provider);
