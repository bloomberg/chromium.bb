// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ui.mojom;

import "mojo/public/mojom/base/string16.mojom";
import "ui/gfx/range/mojo/range.mojom";

// Text input type which is based on blink::WebTextInputType.
enum TextInputType {
  NONE,
  TEXT,
  PASSWORD,
  SEARCH,
  EMAIL,
  NUMBER,
  TELEPHONE,
  URL,
  DATE,
  DATE_TIME,
  DATE_TIME_LOCAL,
  MONTH,
  TIME,
  WEEK,
  TEXT_AREA,
  CONTENT_EDITABLE,
  DATE_TIME_FIELD,
  MAX = DATE_TIME_FIELD,
};

// See comments for ui::TextInputMode for more details.
enum TextInputMode {
  kDefault,
  kNone,
  kText,
  kTel,
  kUrl,
  kEmail,
  kNumeric,
  kDecimal,
  kSearch,
};

// Text input flag which is based on blink::WebTextInputFlags.
enum TextInputFlag {
  NONE,
  AUTOCOMPLETE_ON = 0x001,
  AUTOCOMPLETE_OFF = 0x002,
  AUTOCORRECT_ON = 0x004,
  AUTOCORRECT_OFF = 0x008,
  SPELLCHECK_ON = 0x010,
  SPELLCHECK_OFF = 0x020,
  AUTOCAPITALIZE_NONE = 0x040,
  AUTOCAPITALIZE_CHARACTERS = 0x080,
  AUTOCAPITALIZE_WORDS = 0x100,
  AUTOCAPITALIZE_SENTENCES = 0x200,
  ALL = 0x3FF,
};

// See comments for ui::ImeTextSpan::Type for more details.
enum ImeTextSpanType {
  kComposition,
  kSuggestion,
  kMisspellingSuggestion,
};

// This enum represents the thickness of an underline segment of text,
// the thickness of a ui::ImeTextSpan element.
// The possible values are:
// * kNone: When you don't want to paint the underline.
// * kThin: For regular size.
// * kThick: For thick underlines.
enum ImeTextSpanThickness {
  kNone,
  kThin,
  kThick,
};

// Represents an underlined segment of text currently composed by IME.
// Corresponds to ui::ImeTextSpan.
struct ImeTextSpan {
  ImeTextSpanType type;
  uint32 start_offset;
  uint32 end_offset;
  uint32 underline_color;
  ImeTextSpanThickness thickness;
  uint32 background_color;
  uint32 suggestion_highlight_color;
  bool remove_on_finish_composing;
  array<string> suggestions;
};

// Represents a text currently being composed by IME. Corresponds to
// ui::CompositionText.
struct CompositionText {
  mojo_base.mojom.String16 text;
  array<ImeTextSpan> ime_text_spans;
  gfx.mojom.Range selection;
};

// Represents how a text client gets focused. Corresponds to
// ui::TextInputClient::FocusReason.
enum FocusReason {
  kNone,   // Not focused.
  kMouse,  // User initiated with mouse.
  kTouch,  // User initiated with touch.
  kPen,    // User initiated with pen.
  kOther,  // All other reasons (e.g. system initiated, mouse)
};
