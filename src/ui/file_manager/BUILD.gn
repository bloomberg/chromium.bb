# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//chrome/common/features.gni")
import("//third_party/closure_compiler/compile_js.gni")
import("//tools/grit/grit_rule.gni")
import("//tools/grit/preprocess_if_expr.gni")
import("//tools/typescript/ts_library.gni")
import("//ui/file_manager/file_names.gni")
import("//ui/webui/resources/tools/generate_grd.gni")

grit("resources") {
  source = "file_manager_resources.grd"
  defines = [ "optimize_webui=$optimize_webui" ]
  outputs = [
    "grit/file_manager_resources.h",
    "grit/file_manager_resources_map.cc",
    "grit/file_manager_resources_map.h",
    "file_manager_resources.pak",
    "file_manager_resources.rc",
  ]
}

component("file_manager") {
  sources = [ "file_manager_export.h" ]
  public_deps = [
    ":file_manager_gen_resources",
    ":resources",
    "//base",
  ]
  defines = [ "FILE_MANAGER_IMPLEMENTATION" ]
}

group("closure_compile") {
  # Subfolders' closure_compile groups bundle the non-test "module" type-check
  # groups as well as unittests and test_support.
  testonly = true

  deps = [
    "audio_player/elements:closure_compile",
    "audio_player/js:closure_compile",
    "file_manager/background/js:closure_compile",
    "file_manager/common/js:closure_compile",
    "file_manager/foreground/elements:closure_compile",
    "file_manager/foreground/js:closure_compile",
    "file_manager/foreground/js/metadata:closure_compile",
    "file_manager/foreground/js/ui:closure_compile",
    "file_manager/foreground/js/ui/banners:closure_compile",
    "image_loader:closure_compile",
    "integration_tests:closure_compile",
    "integration_tests/file_manager:closure_compile",
  ]
}

group("unit_test_data") {
  testonly = true
  deps = [
    "file_manager/background/js:js_test_gen_html_modules",
    "file_manager/common/js:js_test_gen_html_modules",
    "file_manager/foreground/elements:js_test_gen_html_modules",
    "file_manager/foreground/js:js_test_gen_html_modules",
    "file_manager/foreground/js/metadata:js_test_gen_html_modules",
    "file_manager/foreground/js/ui:js_test_gen_html_modules",
    "file_manager/foreground/js/ui/banners:js_test_gen_html_modules",
    "image_loader:js_test_gen_html_modules",
  ]
  data_deps = [ "image_loader:copy_from_filesapp" ]
}

preprocess_folder = "$target_gen_dir/preprocessed"

# Move files to the preprocessed folder to combine all resources in the same
# folder for JS bundling with rollup.
# This is for files direct from the src/:  input_folder="./".
preprocess_if_expr("preprocess_static") {
  in_folder = "./"
  out_folder = preprocess_folder
  out_manifest = "$target_gen_dir/manifest_preprocess_static.json"

  in_files = static_js_files

  deps = [
    "//ui/file_manager/file_manager/background/js:js_modules",
    "//ui/file_manager/file_manager/background/js:main_background.m",
    "//ui/file_manager/file_manager/common/js:js_modules",
    "//ui/file_manager/file_manager/foreground/elements:web_components",
    "//ui/file_manager/file_manager/foreground/js:deferred_elements.m",
    "//ui/file_manager/file_manager/foreground/js:main",
  ]
}

preprocess_if_expr("preprocess_static_image_loader") {
  in_folder = "."
  out_folder = preprocess_folder
  out_manifest = "$target_gen_dir/manifest_preprocess_static_image_loader.json"

  in_files = audio_static_js_files + image_loader_static_js_files

  deps = [
    "//ui/file_manager/audio_player/js:js_modules",
    "//ui/file_manager/image_loader:background.m",
    "//ui/file_manager/image_loader:js_modules",
  ]
}

# This is for files that are generated in "gen/": input_folder=target_gen_dir.
preprocess_if_expr("preprocess_generated") {
  in_folder = target_gen_dir
  out_folder = preprocess_folder
  out_manifest = "$target_gen_dir/manifest_preprocess_generated.json"

  in_files = generated_js_files

  deps = [
    "//ui/file_manager/base/gn:file_types_data_gen_js",
    "//ui/file_manager/file_manager/foreground/elements:elements",
    "//ui/file_manager/file_manager/foreground/elements:web_components",
    "//ui/file_manager/file_manager/foreground/js/ui:web_components",
    "//ui/file_manager/file_manager/foreground/js/ui/banners:web_components",
  ]
}

preprocess_if_expr("preprocess_generated_image_loader") {
  in_folder = target_gen_dir
  out_folder = preprocess_folder
  out_manifest =
      "$target_gen_dir/manifest_preprocess_generated_image_loader.json"

  in_files = audio_generated_js_files + image_loader_generated_js_files

  deps = [
    "//ui/file_manager/audio_player/elements:web_components",
    "//ui/file_manager/image_loader:copy_from_filesapp",
  ]
}

grd_prefix = "file_manager_gen"
generated_grd = "$target_gen_dir/${grd_prefix}_resources.grd"

generate_grd("build_grd") {
  out_grd = generated_grd

  grdp_files = [
    "$target_gen_dir/audio_player/static_resources.grdp",
    "$target_gen_dir/file_manager/static_resources.grdp",
  ]

  deps = [
    ":build_ts",
    "audio_player:build_static_grdp",
    "file_manager:build_static_grdp",
    "//ui/file_manager/audio_player/js:build",
    "//ui/file_manager/audio_player/js:build_background",
    "//ui/file_manager/audio_player/js:build_worker",
    "//ui/file_manager/file_manager:fix_broken_images",
    "//ui/file_manager/image_loader:build",
  ]

  input_files_base_dir = rebase_path(target_gen_dir, root_build_dir)
  input_files = [
    "audio_player/js/main.rollup.js",
    "audio_player/js/main_background.rollup.js",
    "audio_player/js/metadata_worker.rollup.js",
    "audio_player/js/shared.m.rollup.js",
    "audio_player/js/runtime_loaded_test_util.rollup.js",

    # Fix broken images:
    "file_manager/images/files/ui/arrow_right.svg",
    "file_manager/images/files/ui/state_banner_icon.svg",
    "file_manager/images/files/ui/warning_banner_icon.svg",
    "file_manager/images/files/ui/menu_ng.svg",

    "image_loader/background.m.rollup.js",
  ]

  resource_path_rewrites = [
    "audio_player/js/main.rollup.js|audio_player/js/main.js",
    "audio_player/js/main_background.rollup.js|audio_player/js/main_background.js",
    "audio_player/js/metadata_worker.rollup.js|audio_player/js/metadata_worker.js",
    "audio_player/js/runtime_loaded_test_util.rollup.js|audio_player/js/runtime_loaded_test_util.js",
    "image_loader/background.m.rollup.js|image_loader/background.m.js",
  ]

  if (optimize_webui) {
    input_files += [
      "file_manager/background/js/main_background.m.rollup.js",
      "file_manager/background/js/runtime_loaded_test_util.rollup.js",
      "file_manager/background/js/shared.m.rollup.js",
      "file_manager/foreground/js/deferred_elements.m.rollup.js",
      "file_manager/foreground/js/main.rollup.js",
      "file_manager/foreground/js/metadata_dispatcher.rollup.js",
      "file_manager/foreground/js/shared.m.rollup.js",

      "image_loader/image_orientation.js",
      "image_loader/lru_cache.js",

      "file_manager/common/js/file_types_data.js",
    ]

    resource_path_rewrites += [
      "file_manager/background/js/main_background.m.rollup.js|file_manager/background/js/main_background.m.js",
      "file_manager/background/js/runtime_loaded_test_util.rollup.js|file_manager/background/js/runtime_loaded_test_util.js",
      "file_manager/foreground/js/deferred_elements.m.rollup.js|file_manager/foreground/js/deferred_elements.m.js",
      "file_manager/foreground/js/main.rollup.js|file_manager/foreground/js/main.js",
      "file_manager/foreground/js/metadata_dispatcher.rollup.js|file_manager/foreground/js/metadata/metadata_dispatcher.js",
    ]

    deps += [
      "//ui/file_manager/file_manager/background/js:build",
      "//ui/file_manager/file_manager/foreground/elements:elements",
      "//ui/file_manager/file_manager/foreground/js:build",
      "//ui/file_manager/file_manager/foreground/js:build_worker",
    ]
  } else {
    manifest_files = [
      "$target_gen_dir/manifest_preprocess_generated_image_loader.json",
      "$target_gen_dir/manifest_preprocess_static_image_loader.json",
      "$target_gen_dir/tsconfig.manifest",
    ]

    deps += [
      ":preprocess_generated_image_loader",
      ":preprocess_static_image_loader",
    ]
  }
}

# Resources for the JS modules.
grit("file_manager_gen_resources") {
  defines = chrome_grit_defines

  # These arguments are needed since the grd is generated at build time.
  enable_input_discovery_for_gn_analyze = false

  source = generated_grd
  deps = [ ":build_grd" ]

  outputs = [
    "grit/file_manager_gen_resources.h",
    "grit/file_manager_gen_resources_map.cc",
    "grit/file_manager_gen_resources_map.h",
    "file_manager_gen_resources.pak",
  ]
  output_dir = target_gen_dir
}

copy("copy_ts") {
  sources = ts_files
  outputs = [ "$preprocess_folder/{{source_target_relative}}" ]
}

ts_library("build_ts") {
  root_dir = preprocess_folder
  out_dir = "$target_gen_dir/tsc"
  tsconfig_base = "tsconfig_base.json"

  extra_deps = [
    ":copy_ts",
    ":preprocess_generated",
    ":preprocess_static",
  ]

  deps = [ "//ui/webui/resources:library" ]

  in_files = static_js_files + generated_js_files + ts_files
}
