# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/chromeos/ui_mode.gni")
import("//third_party/closure_compiler/compile_js.gni")
import("//tools/typescript/ts_definitions.gni")
import("//tools/typescript/ts_library.gni")
import("//ui/webui/resources/tools/generate_grd.gni")

include_polymer = !is_android && !is_ios

generate_grd("build_grd") {
  grd_prefix = "webui_generated"
  out_grd = "$target_gen_dir/${grd_prefix}_resources.grd"

  deps = [
    ":build_ts_grdp",
    "css:build_grdp",
    "html:build_grdp",
    "images:build_grdp",
    "js:build_grdp",
    "js/cr/ui:build_grdp",
    "//third_party/jstemplate:build_grdp",
  ]
  grdp_files = [
    "$target_gen_dir/ts_resources.grdp",
    "$target_gen_dir/css/resources.grdp",
    "$target_gen_dir/html/resources.grdp",
    "$target_gen_dir/images/resources.grdp",
    "$target_gen_dir/js/cr/ui/resources.grdp",
    "$target_gen_dir/js/resources.grdp",
    "$root_gen_dir/third_party/jstemplate/resources.grdp",
  ]

  if (!is_chromeos_ash && !is_android) {
    # Roboto Font. Roboto-Regular and Roboto-Light is already available on
    # Android, and Roboto-Medium is not used on Android. All 6 weights of
    # Roboto are available on Chrome OS.
    input_files_base_dir = rebase_path(".", "//")
    input_files = [
      "roboto/roboto-bold.woff2",
      "roboto/roboto-medium.woff2",
      "roboto/roboto-regular.woff2",
    ]
  }

  if (include_polymer) {
    deps += [
      "cr_components:build_grdp",
      "cr_elements:build_grdp",
      "//third_party/polymer/v3_0:build_grdp",
    ]
    grdp_files += [
      "$root_gen_dir/third_party/polymer/v3_0/polymer_3_0_resources.grdp",
      "$root_gen_dir/ui/webui/resources/cr_components/cr_components_resources.grdp",
      "$root_gen_dir/ui/webui/resources/cr_elements/cr_elements_resources.grdp",
    ]

    # TODO(crbug.com/1184053): Fully remove once no longer used by CrOS.
    if (is_chromeos_ash) {
      deps += [ "//third_party/polymer/v1_0:build_grdp" ]
      grdp_files += [
        "$root_gen_dir/third_party/polymer/v1_0/polymer_1_0_resources.grdp",
      ]
    }
  }

  if (is_chromeos_ash) {
    deps += [
      "//ash/content/common/resources:build_grdp",
      "//third_party/web-animations-js:build_grdp",
    ]
    grdp_files += [
      "$root_gen_dir/third_party/web-animations-js/web_animations_resources.grdp",
      "$root_gen_dir/ash/content/common/resources/ash_common_resources.grdp",
    ]
  }

  if (!is_android && !is_ios) {
    deps += [ "//third_party/lottie:build_grdp" ]
    grdp_files += [ "$root_gen_dir/third_party/lottie/resources.grdp" ]
  }
}

group("preprocess") {
  public_deps = [
    "cr_components:preprocess",
    "cr_elements:preprocess",
    "js:preprocess",
  ]
}

group("closure_compile") {
  deps = [
    "js:closure_compile",
    "js:closure_compile_modules",
  ]

  if (!is_android) {
    deps += [
      "cr_components:closure_compile",
      "cr_elements:closure_compile",
    ]
  }
}

group("modulize") {
  public_deps = [
    "js:modulize",
    "js/cr:modulize",
    "js/cr/ui:modulize",
  ]

  if (!is_android) {
    public_deps += [
      "cr_components:polymer3_elements",
      "cr_elements:polymer3_elements",
    ]
  }
}

# Experimental TypeScript targets, to test how TS files can depend on
# chrome://resources files.
# TODO(dpapad): Delete once the TypeScript demo page is no longer needed.

generate_grd("build_ts_grdp") {
  grd_prefix = "webui"
  out_grd = "$target_gen_dir/ts_resources.grdp"
  deps = [ ":library" ]
  manifest_files = [ "$target_gen_dir/tsconfig.manifest" ]
}

preprocessed_folder = "$target_gen_dir/preprocessed"

checked_in_dts_files = [
  "cr_components/managed_footnote/managed_footnote.d.ts",
  "cr_elements/cr_action_menu/cr_action_menu.m.d.ts",
  "cr_elements/cr_button/cr_button.m.d.ts",
  "cr_elements/cr_checkbox/cr_checkbox.m.d.ts",
  "cr_elements/cr_container_shadow_behavior.m.d.ts",
  "cr_elements/cr_dialog/cr_dialog.m.d.ts",
  "cr_elements/cr_drawer/cr_drawer.d.ts",
  "cr_elements/cr_icon_button/cr_icon_button.m.d.ts",
  "cr_elements/cr_input/cr_input.m.d.ts",
  "cr_elements/cr_lazy_render/cr_lazy_render.m.d.ts",
  "cr_elements/cr_search_field/cr_search_field_behavior.d.ts",
  "cr_elements/cr_toast/cr_toast.m.d.ts",
  "cr_elements/cr_toolbar/cr_toolbar_search_field.d.ts",
  "cr_elements/cr_view_manager/cr_view_manager.d.ts",
  "cr_elements/find_shortcut_behavior.d.ts",
  "js/cr/ui/focus_row_behavior.m.d.ts",
  "js/i18n_behavior.m.d.ts",
  "js/web_ui_listener_behavior.m.d.ts",
]

# Copies checked-in .d.ts files to the preprocess folder so that they are
# discovered by TSC the same way generated .d.ts files are.
copy("copy_checked_in_dts_files") {
  sources = checked_in_dts_files
  outputs = [ "$preprocessed_folder/{{source_target_relative}}" ]
}

ts_library("library") {
  root_dir = preprocessed_folder
  out_dir = preprocessed_folder
  composite = true
  in_files = [
    "js/cr/world.ts",
    "js/hello_world.ts",
  ]

  definitions = []

  # Checked-in .d.ts files.
  foreach(_file, checked_in_dts_files) {
    definitions += [ "$root_dir/$_file" ]
  }

  definitions += [
    # Auto-generated .d.ts files.
    "$root_dir/cr_elements/cr_grid/cr_grid.d.ts",
    "$root_dir/cr_elements/cr_input/cr_input_style_css.m.d.ts",
    "$root_dir/cr_elements/cr_menu_selector/cr_menu_selector.d.ts",
    "$root_dir/cr_elements/cr_splitter/cr_splitter.d.ts",
    "$root_dir/cr_elements/cr_toolbar/cr_toolbar.d.ts",
    "$root_dir/cr_elements/cr_toolbar/cr_toolbar_selection_overlay.d.ts",
    "$root_dir/cr_elements/hidden_style_css.m.d.ts",
    "$root_dir/cr_elements/icons.m.d.ts",
    "$root_dir/cr_elements/md_select_css.m.d.ts",
    "$root_dir/cr_elements/shared_style_css.m.d.ts",
    "$root_dir/cr_elements/shared_vars_css.m.d.ts",
    "$root_dir/js/assert.m.d.ts",
    "$root_dir/js/cr/event_target.m.d.ts",
    "$root_dir/js/cr.m.d.ts",
    "$root_dir/js/cr/ui/focus_grid.m.d.ts",
    "$root_dir/js/cr/ui/focus_outline_manager.m.d.ts",
    "$root_dir/js/cr/ui/focus_row.m.d.ts",
    "$root_dir/js/cr/ui/store.m.d.ts",
    "$root_dir/js/cr/ui/store_client.m.d.ts",
    "$root_dir/js/event_tracker.m.d.ts",
    "$root_dir/js/load_time_data.m.d.ts",
    "$root_dir/js/parse_html_subset.m.d.ts",
    "$root_dir/js/promise_resolver.m.d.ts",
    "$root_dir/js/icon.m.d.ts",
    "$root_dir/js/util.m.d.ts",
  ]

  if (!is_android) {
    definitions += [ "$root_dir/js/cr/ui/focus_without_ink.m.d.ts" ]
  }

  deps = [ "//third_party/polymer/v3_0:library" ]
  extra_deps = [
    ":copy_checked_in_dts_files",
    ":generate_definitions",
    "js:preprocess_src_ts",
  ]
}

ts_definitions("generate_definitions") {
  root_dir = preprocessed_folder
  out_dir = preprocessed_folder
  js_files = [
    "cr_elements/cr_grid/cr_grid.js",
    "cr_elements/cr_input/cr_input_style_css.m.js",
    "cr_elements/cr_menu_selector/cr_menu_selector.js",
    "cr_elements/cr_splitter/cr_splitter.js",
    "cr_elements/cr_toolbar/cr_toolbar.js",
    "cr_elements/cr_toolbar/cr_toolbar_selection_overlay.js",
    "cr_elements/hidden_style_css.m.js",
    "cr_elements/icons.m.js",
    "cr_elements/md_select_css.m.js",
    "cr_elements/shared_style_css.m.js",
    "cr_elements/shared_vars_css.m.js",
    "js/assert.m.js",
    "js/cr.m.js",
    "js/cr/event_target.m.js",
    "js/cr/ui/focus_grid.m.js",
    "js/cr/ui/focus_outline_manager.m.js",
    "js/cr/ui/store.m.js",
    "js/cr/ui/store_client.m.js",
    "js/cr/ui/focus_row.m.js",
    "js/event_tracker.m.js",
    "js/load_time_data.m.js",
    "js/parse_html_subset.m.js",
    "js/promise_resolver.m.js",
    "js/icon.m.js",
    "js/util.m.js",
  ]

  if (!is_android) {
    js_files += [ "js/cr/ui/focus_without_ink.m.js" ]
  }

  extra_deps = [
    # Copy checked-in d.ts files first, so that |generate_definitions| leverages
    # these files, instead of accidentally auto-generating them.
    ":copy_checked_in_dts_files",
    ":preprocess",
  ]
}
