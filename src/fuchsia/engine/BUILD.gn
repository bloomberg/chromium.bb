# Copyright 2019 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

assert(is_fuchsia)

import("//build/config/fuchsia/generate_runner_scripts.gni")
import("//build/config/fuchsia/symbol_archive.gni")
import("//build/config/locales.gni")
import("//testing/test.gni")
import("//third_party/fuchsia-sdk/sdk/build/fidl_library.gni")
import("//tools/grit/repack.gni")

config("web_engine_implementation") {
  defines = [ "WEB_ENGINE_IMPLEMENTATION" ]
  visibility = [ ":*" ]
}

fidl_library("fidl") {
  library_name = "chromium.internal"
  sources = [ "fidl/dev_tools.fidl" ]
  public_deps = [ "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.web" ]
  visibility = [ ":*" ]
}

repack("web_engine_pak") {
  sources = [
    "$root_gen_dir/components/components_resources.pak",
    "$root_gen_dir/content/app/resources/content_resources_100_percent.pak",
    "$root_gen_dir/content/browser/tracing/tracing_resources.pak",
    "$root_gen_dir/content/content_resources.pak",
    "$root_gen_dir/content/dev_ui_content_resources.pak",
    "$root_gen_dir/mojo/public/js/mojo_bindings_resources.pak",
    "$root_gen_dir/net/net_resources.pak",
    "$root_gen_dir/third_party/blink/public/resources/blink_resources.pak",
    "$root_gen_dir/third_party/blink/public/resources/blink_scaled_resources_100_percent.pak",
    "$root_gen_dir/ui/resources/ui_resources_100_percent.pak",
  ]

  deps = [
    "//components/resources:components_resources",
    "//content:content_resources",
    "//content:dev_ui_content_resources",
    "//content/app/resources",
    "//content/browser/tracing:resources",
    "//gpu/command_buffer/service",
    "//mojo/public/js:resources",
    "//net:net_resources",
    "//third_party/blink/public:resources",
    "//third_party/blink/public:scaled_resources_100_percent",
    "//ui/resources",
  ]

  # TODO(crbug.com/1092804): Move this into ${target_gen_dir} and have a
  # GN SDK fuchsia_resource() rule map it into place in the web_engine package.
  output = "$root_gen_dir/web_engine_common_resources.pak"
  visibility = [ ":*" ]
}

foreach(locale, locales_with_pseudolocales) {
  repack("web_engine_locale_${locale}_pak") {
    # WebEngine requires the following locale-specific resources:
    # 1. Locale settings (e.g. default encoding, accept-languages per locale).
    # 2. Blink strings for UI elements, e.g. drop-down lists.
    # 3. //ui strings used to configure e.g. preferred font family.

    sources = [
      "$root_gen_dir/components/strings/components_locale_settings_${locale}.pak",
      "$root_gen_dir/third_party/blink/public/strings/blink_strings_${locale}.pak",
      "$root_gen_dir/ui/strings/app_locale_settings_${locale}.pak",
    ]

    deps = [
      "//components/strings:components_locale_settings",
      "//third_party/blink/public/strings",
      "//ui/strings:app_locale_settings",
    ]

    output = "$root_gen_dir/locales/${locale}.pak"
    visibility = [ ":*" ]
  }
}

component("web_engine_core") {
  deps = [
    ":fidl",
    ":switches",
    "//base",
    "//base:base_static",
    "//components/cast/message_port:message_port_fuchsia",
    "//components/cast_streaming/browser",
    "//components/cast_streaming/public:config_conversions",
    "//components/cast_streaming/public/mojom",
    "//components/cast_streaming/renderer",
    "//components/cdm/renderer",
    "//components/embedder_support:browser_util",
    "//components/embedder_support/origin_trials",
    "//components/favicon/content",
    "//components/favicon/core",
    "//components/keyed_service/content",
    "//components/media_control/browser",
    "//components/media_control/renderer",
    "//components/memory_pressure",
    "//components/on_load_script_injector/browser",
    "//components/on_load_script_injector/renderer",
    "//components/permissions",
    "//components/policy/content:safe_sites_navigation_throttle",
    "//components/profile_metrics",
    "//components/site_isolation",
    "//components/strings:components_locale_settings",
    "//components/url_rewrite/browser",
    "//components/url_rewrite/common",
    "//components/url_rewrite/mojom",
    "//components/url_rewrite/renderer",
    "//components/version_info",
    "//content/public/app",
    "//content/public/browser",
    "//content/public/child",
    "//content/public/common",
    "//content/public/renderer",
    "//fuchsia/base",
    "//fuchsia/base:legacymetrics",
    "//fuchsia/base:message_port",
    "//fuchsia/base:modular",
    "//fuchsia/engine/mojom",
    "//fuchsia/engine/web_instance_host",
    "//google_apis",
    "//gpu/command_buffer/service",
    "//media",
    "//media/fuchsia/cdm/service",
    "//media/fuchsia/mojom:cdm_provider",
    "//media/mojo/common",
    "//media/mojo/services",
    "//mojo/public/cpp/bindings",
    "//services/media_session/public/mojom",
    "//services/network/public/cpp",
    "//services/network/public/mojom",
    "//skia",
    "//skia/public/mojom",
    "//third_party/blink/public:blink",
    "//third_party/blink/public/common",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.accessibility.semantics",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.feedback",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.math",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.media.sessions2",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.mem",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.settings",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.ui.gfx",
    "//third_party/fuchsia-sdk/sdk/pkg/fit-promise",
    "//third_party/fuchsia-sdk/sdk/pkg/scenic_cpp",
    "//third_party/fuchsia-sdk/sdk/pkg/sys_cpp",
    "//third_party/fuchsia-sdk/sdk/pkg/sys_inspect_cpp",
    "//third_party/widevine/cdm:headers",
    "//ui/accessibility",
    "//ui/aura",
    "//ui/base",
    "//ui/base/ime",
    "//ui/display",
    "//ui/gfx",
    "//ui/ozone",
    "//ui/platform_window",
    "//ui/wm",
    "//ui/wm/public",
  ]

  # Technically the PAK files are only data dependencies, but specifying them
  # as |data_deps| causes metadata (.info) files to also be pulled-in to the
  # package.
  deps += [ ":web_engine_pak" ]

  data = [ "$root_gen_dir/web_engine_common_resources.pak" ]
  foreach(locale, locales_with_pseudolocales) {
    deps += [ ":web_engine_locale_${locale}_pak" ]
    data += [ "$root_gen_dir/locales/${locale}.pak" ]
  }

  public_deps = [
    "//content/public/browser",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.accessibility.semantics",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.web",

    # Public because tests include Context, Frame, etc headers, which include
    # Inspect properties.
    "//third_party/fuchsia-sdk/sdk/pkg/inspect",
  ]

  configs += [ ":web_engine_implementation" ]

  sources = [
    "browser/accessibility_bridge.cc",
    "browser/accessibility_bridge.h",
    "browser/ax_tree_converter.cc",
    "browser/ax_tree_converter.h",
    "browser/cdm_provider_service.cc",
    "browser/cdm_provider_service.h",
    "browser/content_directory_loader_factory.cc",
    "browser/content_directory_loader_factory.h",
    "browser/context_impl.cc",
    "browser/context_impl.h",
    "browser/cookie_manager_impl.cc",
    "browser/cookie_manager_impl.h",
    "browser/event_filter.cc",
    "browser/event_filter.h",
    "browser/frame_impl.cc",
    "browser/frame_impl.h",
    "browser/frame_layout_manager.cc",
    "browser/frame_layout_manager.h",
    "browser/frame_permission_controller.cc",
    "browser/frame_permission_controller.h",
    "browser/frame_window_tree_host.cc",
    "browser/frame_window_tree_host.h",
    "browser/media_player_impl.cc",
    "browser/media_player_impl.h",
    "browser/navigation_controller_impl.cc",
    "browser/navigation_controller_impl.h",
    "browser/navigation_policy_handler.cc",
    "browser/navigation_policy_handler.h",
    "browser/navigation_policy_throttle.cc",
    "browser/navigation_policy_throttle.h",
    "browser/receiver_session_client.cc",
    "browser/receiver_session_client.h",
    "browser/theme_manager.cc",
    "browser/theme_manager.h",
    "browser/url_request_rewrite_type_converters.cc",
    "browser/url_request_rewrite_type_converters.h",
    "browser/web_engine_browser_context.cc",
    "browser/web_engine_browser_context.h",
    "browser/web_engine_browser_interface_binders.cc",
    "browser/web_engine_browser_interface_binders.h",
    "browser/web_engine_browser_main.cc",
    "browser/web_engine_browser_main.h",
    "browser/web_engine_browser_main_parts.cc",
    "browser/web_engine_browser_main_parts.h",
    "browser/web_engine_content_browser_client.cc",
    "browser/web_engine_content_browser_client.h",
    "browser/web_engine_devtools_controller.cc",
    "browser/web_engine_devtools_controller.h",
    "browser/web_engine_media_resource_provider_impl.cc",
    "browser/web_engine_media_resource_provider_impl.h",
    "browser/web_engine_memory_inspector.cc",
    "browser/web_engine_memory_inspector.h",
    "browser/web_engine_net_log_observer.cc",
    "browser/web_engine_net_log_observer.h",
    "browser/web_engine_permission_delegate.cc",
    "browser/web_engine_permission_delegate.h",
    "common/cast_streaming.cc",
    "common/cast_streaming.h",
    "common/cors_exempt_headers.cc",
    "common/cors_exempt_headers.h",
    "common/web_engine_content_client.cc",
    "common/web_engine_content_client.h",
    "context_provider_impl.cc",
    "context_provider_impl.h",
    "context_provider_main.cc",
    "context_provider_main.h",
    "renderer/web_engine_audio_device_factory.cc",
    "renderer/web_engine_audio_device_factory.h",
    "renderer/web_engine_audio_renderer.cc",
    "renderer/web_engine_audio_renderer.h",
    "renderer/web_engine_content_renderer_client.cc",
    "renderer/web_engine_content_renderer_client.h",
    "renderer/web_engine_media_renderer_factory.cc",
    "renderer/web_engine_media_renderer_factory.h",
    "renderer/web_engine_render_frame_observer.cc",
    "renderer/web_engine_render_frame_observer.h",
    "renderer/web_engine_url_loader_throttle_provider.cc",
    "renderer/web_engine_url_loader_throttle_provider.h",
    "web_engine_export.h",
    "web_engine_main_delegate.cc",
    "web_engine_main_delegate.h",
  ]
  visibility = [ ":*" ]
}

# TODO(crbug.com/1081525): Rename to features_and_switches or collapse into
# common. Consider moving these and other files in engine/ to common/ or
# elsewhere.
source_set("switches") {
  deps = [ "//base" ]

  sources = [
    "features.h",
    "switches.cc",
    "switches.h",
  ]

  visibility = [
    ":*",
    "web_instance_host",
  ]
}

executable("web_engine_exe") {
  deps = [
    ":switches",
    ":web_engine_core",
    "//base",
    "//content/public/app",
  ]
  sources = [ "web_engine_main.cc" ]
  visibility = [ ":*" ]
}

source_set("webui_resources") {
  data = [
    "$root_gen_dir/ui/resources/webui_generated_resources.pak",
    "$root_gen_dir/ui/resources/webui_resources.pak",
  ]
  deps = [ "//ui/resources" ]
  visibility = [ ":*" ]
}

_web_engine_excluded_files = [
  # TODO(crbug.com/1022542): SwiftShader is used only in tests. It should
  # not be included in the WebEngine package.
  # Whenever this list is updated the exclusions in the cast_runner package
  # should be updated as well (see fuchsia/runners/BUILD.gn).
  "lib/libswiftshader_libEGL.so",
  "lib/libswiftshader_libGLESv2.so",
  "lib/libvk_swiftshader.so",
  "vk_swiftshader_icd.json",
]

# Definitions for the main web_engine package. The package contains the
# context_provider component definition, and its dependencies.  An installer
# script is declared for the package, for ease of development.

# Component definition for WebEngine instances, each hosting one or more
# browsing contexts, accessed via fuchsia.web.Context or fuchsia.web.FrameHost
# capabilities.
fuchsia_component("web_instance_component") {
  manifest = "web_instance.cmx"
  data_deps = [ ":web_engine_exe" ]
  visibility = [ ":*" ]
}

# Component definition for the legacy fuchsia.web.ContextProvider service.
# TODO(crbug.com/1010222): Remove once all callers have migrated to launching
# instances directly as Components.
fuchsia_component("context_provider_component") {
  manifest = "context_provider.cmx"
  data_deps = [ ":web_engine_exe" ]
  visibility = [ ":*" ]
}

fuchsia_package("web_engine") {
  deps = [
    ":context_provider_component",
    ":web_instance_component",
  ]
  excluded_files = _web_engine_excluded_files
  excluded_dirs = FUCHSIA_PACKAGED_CONTENT_EMBEDDER_EXCLUDED_DIRS
}

fuchsia_package_installer("web_engine_installer") {
  package = ":web_engine"
}

# Definitions for a variant of the web_engine package that bundles the WebUI
# resources, to allow e.g. chrome://gpu to be used.  An installer script is
# defined, for ease of development.

# TODO(crbug.com/1010222): Remove the with-WebUI ContextProvider component
# definition once all callers have migrated to launching instances directly as
# Components, or the launcher supports relative component URLs.
cmc_merge("context_provider_with_webui_manifest") {
  sources = [
    "context_provider.cmx",
    "context_provider_with_webui.test-cmx-fragment",
  ]
  output_name = "context_provider_with_webui.cmx"
  visibility = [ ":*" ]
}

fuchsia_component("context_provider_with_webui_component") {
  deps = [ ":context_provider_with_webui_manifest" ]
  manifest = "$target_out_dir/context_provider_with_webui.cmx"
  manifest_output_name = "context_provider"
  data_deps = [ ":web_engine_exe" ]
  visibility = [ ":*" ]
}

fuchsia_package("web_engine_with_webui") {
  deps = [
    ":context_provider_with_webui_component",
    ":web_instance_component",
    ":webui_resources",
  ]
  excluded_files = _web_engine_excluded_files
  excluded_dirs = FUCHSIA_PACKAGED_CONTENT_EMBEDDER_EXCLUDED_DIRS
}

fuchsia_package_installer("web_engine_with_webui_installer") {
  package = ":web_engine_with_webui"
}

source_set("browsertest_core") {
  testonly = true
  sources = [
    "test/frame_for_test.cc",
    "test/frame_for_test.h",
    "test/scenic_test_helper.cc",
    "test/scenic_test_helper.h",
    "test/test_data.cc",
    "test/test_data.h",
    "test/web_engine_browser_test.cc",
    "test/web_engine_browser_test.h",
    "test/web_engine_test_launcher.cc",
  ]
  data = [ "test/data" ]
  deps = [
    ":switches",
    ":web_engine_core",
    "//content/public/browser",
    "//content/test:test_support",
    "//fuchsia/base/test:test_support",
    "//net:test_support",
    "//testing/gtest",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.web",
    "//third_party/fuchsia-sdk/sdk/pkg/scenic_cpp",
    "//ui/ozone",
  ]
  visibility = [
    ":*",
    "//fuchsia/runners:*",
  ]
}

test("web_engine_browsertests") {
  sources = [
    "browser/accessibility_bridge_browsertest.cc",
    "browser/autoplay_browsertest.cc",
    "browser/cast_streaming_browsertest.cc",
    "browser/content_directory_browsertest.cc",
    "browser/context_impl_browsertest.cc",
    "browser/fake_navigation_policy_provider.cc",
    "browser/fake_navigation_policy_provider.h",
    "browser/fake_semantic_tree.cc",
    "browser/fake_semantic_tree.h",
    "browser/fake_semantics_manager.cc",
    "browser/fake_semantics_manager.h",
    "browser/favicon_browsertest.cc",
    "browser/frame_host_impl_browsertest.cc",
    "browser/frame_impl_browser_test_base.cc",
    "browser/frame_impl_browser_test_base.h",
    "browser/frame_impl_browsertest.cc",
    "browser/headless_browsertest.cc",
    "browser/input_browsertest.cc",
    "browser/javascript_browsertest.cc",
    "browser/media_browsertest.cc",
    "browser/mock_virtual_keyboard.cc",
    "browser/mock_virtual_keyboard.h",
    "browser/navigation_policy_browsertest.cc",
    "browser/permissions_browsertest.cc",
    "browser/popup_browsertest.cc",
    "browser/post_message_browsertest.cc",
    "browser/request_monitoring_browsertest.cc",
    "browser/theme_manager_browsertest.cc",
    "browser/virtual_keyboard_browsertest.cc",
  ]

  # TODO(crbug.com/1157909): Move to the list above when the bug is fixed.
  if (!is_component_build) {
    sources += [ "browser/explicit_sites_filter_browsertest.cc" ]
  }
  defines = [ "HAS_OUT_OF_PROC_TEST_RUNNER" ]
  deps = [
    ":browsertest_core",
    ":switches",
    ":web_engine_core",
    "//base/test:test_support",
    "//components/cast/message_port:message_port",
    "//components/cast_streaming/browser",
    "//components/cast_streaming/browser:test_sender",
    "//components/policy/content:safe_sites_navigation_throttle",
    "//components/safe_search_api:safe_search_api",
    "//components/safe_search_api:test_support",
    "//content/public/browser",
    "//content/test:test_support",
    "//fuchsia/base",
    "//fuchsia/base/test:test_support",
    "//net:test_support",
    "//testing/gmock",
    "//testing/gtest",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.accessibility.semantics",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.input.virtualkeyboard",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.mediacodec",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.mem",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.ui.input3",
    "//third_party/fuchsia-sdk/sdk/pkg/scenic_cpp",
    "//ui/gfx",
    "//ui/ozone",
  ]
  additional_manifest_fragments = [
    "//build/config/fuchsia/test/jit_capabilities.test-cmx",
    "//build/config/fuchsia/test/network_capabilities.test-cmx",
    "//build/config/fuchsia/test/present_view_capabilities.test-cmx",
    "//build/config/fuchsia/test/vulkan_capabilities.test-cmx",
    "//build/config/fuchsia/test/web_engine_required_capabilities.test-cmx",
  ]
}

# Creates a component manifest based on the production web_instance.cmx, with
# the program name replaced with the web_engine_unittests binary name.
action("web_engine_unittests_fake_instance_manifest") {
  _manifest_input = "web_instance.cmx"
  _manifest_output = "$target_gen_dir/web_engine_unittests_fake_instance.cmx"

  script = "//build/config/fuchsia/build_cmx_from_fragment.py"

  inputs = [ _manifest_input ]
  outputs = [ _manifest_output ]

  args = [
    "--cmx-fragment",
    rebase_path(_manifest_input),
    "--cmx",
    rebase_path(_manifest_output),
    "--program",
    "web_engine_unittests__exec",
  ]

  visibility = [ ":*" ]
}

test("web_engine_unittests") {
  sources = [
    "browser/ax_tree_converter_unittest.cc",
    "browser/cookie_manager_impl_unittest.cc",
    "browser/event_filter_unittest.cc",
    "browser/fake_navigation_policy_provider.cc",
    "browser/fake_navigation_policy_provider.h",
    "browser/media_player_impl_unittest.cc",
    "browser/navigation_controller_impl_unittest.cc",
    "browser/navigation_policy_throttle_unittest.cc",
    "browser/url_request_rewrite_type_converters_unittest.cc",
    "context_provider_impl_unittest.cc",
    "fake_context.cc",
    "fake_context.h",
    "renderer/web_engine_audio_renderer_test.cc",
    "test/run_all_unittests.cc",
  ]
  deps = [
    ":switches",
    ":web_engine_core",
    ":web_engine_unittests_fake_instance_manifest",
    "//base/test:test_support",
    "//components/cast_streaming/public/mojom",
    "//components/url_rewrite/browser",
    "//components/url_rewrite/common",
    "//components/url_rewrite/mojom",
    "//content/test:test_support",
    "//fuchsia/base/test:test_support",
    "//fuchsia/engine/web_instance_host",
    "//mojo/core/embedder",
    "//services/media_session/public/mojom",
    "//services/network:network_service",
    "//services/network:test_support",
    "//services/network/public/mojom",
    "//testing/gmock",
    "//testing/gtest",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.accessibility.semantics",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.web",
    "//third_party/fuchsia-sdk/sdk/pkg/scenic_cpp",
    "//ui/ozone",
  ]
  additional_manifest_fragments = [
    # TODO(crbug.com/1185811): Figure out why jit_capabilities is needed.
    "//build/config/fuchsia/test/jit_capabilities.test-cmx",

    "//build/config/fuchsia/test/network_capabilities.test-cmx",
    "//build/config/fuchsia/test/vulkan_capabilities.test-cmx",
  ]
  additional_manifests = [
    # Required by ContextProvider unit-tests to launch the FakeContext process.
    "$target_gen_dir/web_engine_unittests_fake_instance.cmx",
  ]
}

test("web_engine_integration_tests") {
  sources = [
    "test_debug_listener.cc",
    "test_debug_listener.h",
    "web_engine_debug_integration_test.cc",
    "web_engine_integration_logging_test.cc",
    "web_engine_integration_test.cc",
    "web_engine_integration_test_base.cc",
    "web_engine_integration_test_base.h",
    "web_instance_host_integration_test.cc",
  ]
  data = [ "test/data" ]
  deps = [
    ":browsertest_core",
    "//base",
    "//base:test_log_listener_safe",
    "//components/version_info",
    "//fuchsia/base",
    "//fuchsia/base:run_all_integration_tests",
    "//fuchsia/base/test:test_support",
    "//fuchsia/engine/web_instance_host",
    "//media",
    "//media/fuchsia/audio:test_support",
    "//media/fuchsia/camera:test_support",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.mediacodec",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.mem",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.sys",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.web",
  ]
  package_deps = [ [
        ":web_engine",
        "web_engine",
      ] ]
  additional_manifest_fragments = [
    "//build/config/fuchsia/test/network_capabilities.test-cmx",
    "//build/config/fuchsia/test/read_debug_data.test-cmx",
    "//build/config/fuchsia/test/vulkan_capabilities.test-cmx",
    "//build/config/fuchsia/test/web_engine_required_capabilities.test-cmx",
    "//build/config/fuchsia/test/web_instance_host_capabilities.test-cmx",
  ]
}

cr_fuchsia_package("web_engine_shell_pkg") {
  testonly = true
  manifest = "test/web_engine_shell.cmx"
  binary = ":web_engine_shell_exec"
  package_name = "web_engine_shell"
}

fuchsia_package_installer("web_engine_shell") {
  testonly = true
  package = ":web_engine_shell_pkg"
  package_name = "web_engine_shell"
  package_deps = [
    [
      ":web_engine",
      "web_engine",
    ],
    [
      ":web_engine_with_webui",
      "web_engine_with_webui",
    ],
  ]
}

executable("web_engine_shell_exec") {
  testonly = true
  sources = [ "test/web_engine_shell.cc" ]

  data = [ "test/shell_data" ]

  deps = [
    "//base",
    "//fuchsia/base",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.ui.policy",
    "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.web",
    "//third_party/fuchsia-sdk/sdk/pkg/scenic_cpp",
    "//third_party/fuchsia-sdk/sdk/pkg/sys_cpp",
    "//url",
  ]

  visibility = [ ":*" ]
}
