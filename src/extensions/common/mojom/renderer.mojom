// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module extensions.mojom;

import "extensions/common/mojom/channel.mojom";
import "extensions/common/mojom/feature_session_type.mojom";
import "extensions/common/mojom/url_pattern_set.mojom";

// This should be used for implementing browser-to-renderer control messages
// which need to retain FIFO with respect to other mojo interfaces like
// content.mojom.Renderer.
interface Renderer {
  // Marks an extension as 'active' in an extension process. 'Active' extensions
  // have more privileges than other extension content that might end up running
  // in the process (e.g. because of iframes or content scripts).
  ActivateExtension(string extension_id);

  // Tells the renderer whether or not activity logging is enabled. This is only
  // sent if logging is or was previously enabled; not being enabled is assumed
  // otherwise.
  SetActivityLoggingEnabled(bool enabled);

  // Notifies the renderer that an extension was unloaded in the browser.
  UnloadExtension(string extension_id);

  // Informs the renderer what channel (dev, beta, stable, etc) and user session
  // type is running. |is_lock_screen_context| represents whether the browser
  // context is associated with Chrome OS lock screen.
  SetSessionInfo(Channel channel,
                 FeatureSessionType session,
                 bool is_lock_screen_context);

  // Tells the renderer process the platform's system font.
  SetSystemFont(string font_family, string font_size);

  // Reports the WebView partition ID to the WebView guest renderer process.
  SetWebViewPartitionID(string partition_id);

  // Updates the scripting allowlist for extensions in the render process. This
  // is only used for testing.
  SetScriptingAllowlist(array<string> extension_ids);

  // Tells the renderer to update an extension's policy_blocked_hosts set.
  UpdateDefaultPolicyHostRestrictions(
        URLPatternSet default_policy_blocked_hosts,
        URLPatternSet default_policy_allowed_hosts);
};
