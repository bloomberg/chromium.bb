// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module extensions.mojom;

import "mojo/public/mojom/base/shared_memory.mojom";
import "extensions/common/mojom/channel.mojom";
import "extensions/common/mojom/host_id.mojom";
import "extensions/common/mojom/feature_session_type.mojom";
import "extensions/common/mojom/url_pattern_set.mojom";

// This should be used for implementing browser-to-renderer control messages
// which need to retain FIFO with respect to other mojo interfaces like
// content.mojom.Renderer.
interface Renderer {
  // Marks an extension as 'active' in an extension process. 'Active' extensions
  // have more privileges than other extension content that might end up running
  // in the process (e.g. because of iframes or content scripts).
  ActivateExtension(string extension_id);

  // Tells the renderer whether or not activity logging is enabled. This is only
  // sent if logging is or was previously enabled; not being enabled is assumed
  // otherwise.
  SetActivityLoggingEnabled(bool enabled);

  // Notifies the renderer that an extension was unloaded in the browser.
  UnloadExtension(string extension_id);

  // Tells the page to dispatch the suspend event. If we complete a round of
  // ShouldSuspend Mojo method and the reply without the lazy background page
  // becoming active again, we are ready to unload.
  SuspendExtension(string extension_id) => ();

  // Cancels suspending the extension.
  CancelSuspendExtension(string extension_id);

  // Informs the renderer what channel (dev, beta, stable, etc) and user session
  // type is running. |is_lock_screen_context| represents whether the browser
  // context is associated with Chrome OS lock screen.
  SetSessionInfo(Channel channel,
                 FeatureSessionType session,
                 bool is_lock_screen_context);

  // Tells the renderer process the platform's system font.
  SetSystemFont(string font_family, string font_size);

  // Reports the WebView partition ID to the WebView guest renderer process.
  SetWebViewPartitionID(string partition_id);

  // Updates the scripting allowlist for extensions in the render process. This
  // is only used for testing.
  SetScriptingAllowlist(array<string> extension_ids);

  // Asks the lazy background page if it is ready to be suspended and replies
  // back to the browser. This is sent when the page is considered idle.
  ShouldSuspend() => ();

  // Sent by the browser to indicate a Blob handle has been transferred to the
  // renderer. The reply is sent back to the browser when it has received the
  // Blob handle.
  // This is sent after the actual extension response, and depends on the
  // sequential nature of IPCs so that the blob has already been caught.
  TransferBlobs() => ();

  // Tells the renderer to update an extension's policy_blocked_hosts set.
  UpdateDefaultPolicyHostRestrictions(
        URLPatternSet default_policy_blocked_hosts,
        URLPatternSet default_policy_allowed_hosts);

  // Tells the render view about new tab-specific permissions for an extension.
  UpdateTabSpecificPermissions(string extension_id,
                               URLPatternSet new_hosts,
                               int32 tab_id,
                               bool update_origin_whitelist);

  // Notifies the renderer that the user scripts have been updated. It has one
  // ReadOnlySharedMemoryRegion argument consisting of the pickled script data.
  // This memory region is valid in the context of the renderer.
  // If |owner| is not empty, then the shared memory handle refers to |owner|'s
  // programmatically-defined scripts. Otherwise, the handle refers to all
  // hosts' statically defined scripts. So far, only extension-hosts support
  // statically defined scripts; WebUI-hosts don't.
  // If |changed_hosts| is not empty, only the host in that set will be updated.
  // Otherwise, all hosts that have scripts in the shared memory region will be
  // updated. Note that the empty set => all hosts case is not supported for
  // per-extension programmatically-defined script regions; in such regions, the
  // owner is expected to list itself as the only changed host. If
  // |allowlisted_only| is true, this process should only run allowlisted
  // scripts and not all user scripts.
  UpdateUserScripts(mojo_base.mojom.ReadOnlySharedMemoryRegion region,
                    HostID owner,
                    array<HostID> changed_hosts,
                    bool allowlisted_only);

  // Tells the render view to clear tab-specific permissions for some
  // extensions.
  ClearTabSpecificPermissions(array<string> extension_ids,
                              int32 tab_id,
                              bool update_origin_whitelist);

  // Notifies the renderer that an extension wants notifications when certain
  // searches match the active page. This method replaces the old set of
  // searches, and triggers ExtensionHostMsg_OnWatchedPageChange messages from
  // each tab to keep the browser updated about changes.
  WatchPages(array<string> css_selectors);
};
