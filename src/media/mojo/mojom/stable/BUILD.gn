# Copyright 2021 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//mojo/public/tools/bindings/mojom.gni")

mojom("stable_video_decoder") {
  sources = [
    "stable_video_decoder.mojom",
    "stable_video_decoder_types.mojom",
  ]

  public_deps = [
    ":native_pixmap_handle",
    "//media/mojo/mojom",
    "//mojo/public/mojom/base",
    "//ui/gfx/geometry/mojom",
  ]

  cpp_typemaps = [
    {
      types = [
        {
          mojom = "media.stable.mojom.ColorSpacePrimaryID"
          cpp = "::gfx::ColorSpace::PrimaryID"
        },
        {
          mojom = "media.stable.mojom.ColorSpaceTransferID"
          cpp = "::gfx::ColorSpace::TransferID"
        },
        {
          mojom = "media.stable.mojom.ColorSpaceMatrixID"
          cpp = "::gfx::ColorSpace::MatrixID"
        },
        {
          mojom = "media.stable.mojom.ColorSpaceRangeID"
          cpp = "::gfx::ColorSpace::RangeID"
        },
        {
          mojom = "media.stable.mojom.ColorSpace"
          cpp = "::gfx::ColorSpace"
        },
        {
          mojom = "media.stable.mojom.ColorVolumeMetadata"
          cpp = "::gfx::ColorVolumeMetadata"
        },
        {
          mojom = "media.stable.mojom.DecryptConfig"
          cpp = "::std::unique_ptr<::media::DecryptConfig>"
          move_only = true
          nullable_is_same_type = true
        },
        {
          mojom = "media.stable.mojom.EncryptionScheme"
          cpp = "::media::EncryptionScheme"
        },
        {
          mojom = "media.stable.mojom.HDRMetadata"
          cpp = "::gfx::HDRMetadata"
        },
        {
          mojom = "media.stable.mojom.MediaLogRecord.Type"
          cpp = "::media::MediaLogRecord::Type"
        },
        {
          mojom = "media.stable.mojom.MediaLogRecord"
          cpp = "::media::MediaLogRecord"
        },
        {
          mojom = "media.stable.mojom.NativeGpuMemoryBufferHandle"
          cpp = "::gfx::GpuMemoryBufferHandle"
          move_only = true
        },
        {
          mojom = "media.stable.mojom.SubsampleEntry"
          cpp = "::media::SubsampleEntry"
        },
        {
          mojom = "media.stable.mojom.SupportedVideoDecoderConfig"
          cpp = "::media::SupportedVideoDecoderConfig"
        },
        {
          mojom = "media.stable.mojom.VideoCodec"
          cpp = "::media::VideoCodec"
        },
        {
          mojom = "media.stable.mojom.VideoCodecProfile"
          cpp = "::media::VideoCodecProfile"
        },
        {
          mojom = "media.stable.mojom.VideoDecoderConfig"
          cpp = "::media::VideoDecoderConfig"
        },
        {
          mojom = "media.stable.mojom.VideoDecoderType"
          cpp = "::media::VideoDecoderType"
        },
        {
          mojom = "media.stable.mojom.VideoFrame"
          cpp = "::scoped_refptr<::media::VideoFrame>"
          nullable_is_same_type = true
        },
        {
          mojom = "media.stable.mojom.VideoFrameMetadata"
          cpp = "::media::VideoFrameMetadata"
        },
        {
          mojom = "media.stable.mojom.VideoPixelFormat"
          cpp = "::media::VideoPixelFormat"
        },
        {
          mojom = "media.stable.mojom.WaitingReason"
          cpp = "::media::WaitingReason"
        },
      ]
      traits_headers = [ "stable_video_decoder_types_mojom_traits.h" ]
      traits_sources = [ "stable_video_decoder_types_mojom_traits.cc" ]
      traits_public_deps = [ "//media/gpu" ]
    },
  ]

  cpp_proxy_target = "//media/mojo/services"
  export_class_attribute = "MEDIA_MOJO_EXPORT"
  export_define = "MEDIA_MOJO_IMPLEMENTATION"
  export_header = "media/mojo/services/media_mojo_export.h"
}

mojom("native_pixmap_handle") {
  sources = [ "native_pixmap_handle.mojom" ]

  public_deps = [ "//ui/gfx/mojom:native_handle_types" ]

  cpp_typemaps = [
    {
      types = [
        {
          mojom = "media.stable.mojom.NativePixmapHandle"
          cpp = "::gfx::NativePixmapHandle"
          move_only = true
        },
      ]
      traits_headers = [ "native_pixmap_handle_mojom_traits.h" ]
      traits_sources = [ "native_pixmap_handle_mojom_traits.cc" ]
    },
  ]
}
