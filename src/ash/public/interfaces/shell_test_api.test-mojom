// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.mojom;

import "ash/public/interfaces/app_list_view.mojom";

enum OverviewAnimationState {
  kEnterAnimationComplete,
  kExitAnimationComplete,
};

interface ShellTestApi {
  // Returns true if a system modal window is open (e.g. the Wi-Fi network
  // password dialog).
  IsSystemModalWindowOpen() => (bool visible);

  // Enables or disables the tablet mode window manager.
  EnableTabletModeWindowManager(bool enable);

  // Enables the keyboard and associates it with the primary root window
  // controller. In tablet mode, enables the virtual keyboard.
  EnableVirtualKeyboard() => ();

  // Tells the SplitViewController to snap the given window to the left or
  // right. The client name is used to find the client's WindowTree.
  SnapWindowInSplitView(string client_name, uint64 window_id, bool left) => ();

  // Fullscreens the active window, as if the user had pressed the hardware
  // fullscreen button.
  ToggleFullscreen() => ();

  // Enters or exits overview mode.
  ToggleOverviewMode() => ();

  // Returns true if it is in overview selecting mode.
  IsOverviewSelecting() => (bool is_selecting);

  // Used to emulate display change when run in a desktop environment instead
  // of on a device.
  AddRemoveDisplay();

  // Set the minimum velocity to cause fling gesture.
  SetMinFlingVelocity(float velocity);

  // Runs the callback when the WindowTreeHost of the primary display is no
  // longer holding pointer events. See
  // |aura::WindowTreeHost::holding_pointer_moves_| for details.
  WaitForNoPointerHoldLock() => ();

  // Runs the callback when the compositor of the primary display has presented
  // a frame on screen.
  WaitForNextFrame() => ();

  // Runs the callback when the overview state becomes |state|.
  WaitForOverviewAnimationState(OverviewAnimationState state) => ();

  // Runs the callback when the launcher state becomes |state| after
  // state transition animation.
  WaitForLauncherAnimationState(AppListViewState state) => ();
};
