// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Updates to this file must be backwards-compatible, as it is used outside of
// the Chromium repo. This file should be updated first, before syncing in the
// other repos.

// Next MinVersion: 9

module chromeos.ime.mojom;

// Do not modify this enum. If new values are needed, deprecate the entire enum.
[Stable]
enum KeyEventType {
  kKeyDown = 0,
  kKeyUp = 1,
};

// List of specific keys from:
// https://www.w3.org/TR/uievents-key/#named-key-attribute-values
//
// If a key is not listed here, then it means that the Chrome OS first-party
// IMEs do not handle it and it is safe for the OS to handle the key itself.
//
// Next ordinal: 18
[Stable, Extensible]
enum NamedDomKey {
  [Default] kOther = 0,
  kAlt = 1,
  kAltGraph = 2,
  kCapsLock = 3,
  kControl = 4,
  kShift = 5,
  kEnter = 6,
  kBackspace = 7,
  [MinVersion=2] kEscape = 10,
  // Korean keyboard specific keys
  [MinVersion=1] kHangeulMode = 8,
  [MinVersion=1] kHanjaMode = 9,
  // Navigation keys
  [MinVersion=2] kArrowDown = 11,
  [MinVersion=2] kArrowLeft = 12,
  [MinVersion=2] kArrowRight = 13,
  [MinVersion=2] kArrowUp = 14,
  [MinVersion=2] kPageDown = 15,
  [MinVersion=2] kPageUp = 16,
  [MinVersion=8] kTab = 17,
};

// Represents a key pressed by the user, taking into account aspects like
// modifiers and keyboard layout.
//
// It is either a single Unicode codepoint corresponding to the key, or a
// NamedDomKey for special keys (e.g. Shift), as specified by:
// https://www.w3.org/TR/uievents/#dom-keyboardevent-key
//
// TODO(crbug/1201949): Note that the Extensible keyword is not supported for
// union types. We may need to revisit this type in the future.
//
// Next ordinal: 2
[Stable, Extensible]
union DomKey {
  // If the key is a key with a "named key attribute" in:
  // https://www.w3.org/TR/uievents-key/#named-key-attribute-value
  // then `named_key` is set to that named key.
  NamedDomKey named_key@0;

  // Otherwise, the key is represented as a single Unicode codepoint,
  // encoded in UTF-32.
  uint32 codepoint@1;
};

// Whether modifier keys are held down or not.
// Modifier keys are specified by:
// https://www.w3.org/TR/uievents-key/#keys-modifier
//
// Next ordinal: 6
[Stable]
struct ModifierState {
  bool alt@0;
  bool alt_graph@1;
  bool caps_lock@2;
  bool control@3;
  bool meta@4;
  bool shift@5;
};

// Represents the physical location of the key on a set of standard keyboard
// layouts, as specified by:
// https://www.w3.org/TR/uievents-code/
//
// Avoid adding new values here if possible. If any value here is not used by
// Chrome OS first-party IMEs, consider deprecating the value.
//
// Next ordinal: 61
[Stable, Extensible]
enum DomCode {
  [Default] kOther = 0,
  kBackquote = 1,
  kBackslash = 2,
  kBracketLeft = 3,
  kBracketRight = 4,
  kComma = 5,
  kDigit0 = 6,
  kDigit1 = 7,
  kDigit2 = 8,
  kDigit3 = 9,
  kDigit4 = 10,
  kDigit5 = 11,
  kDigit6 = 12,
  kDigit7 = 13,
  kDigit8 = 14,
  kDigit9 = 15,
  kEqual = 16,
  kIntlBackslash = 17,
  kIntlRo = 18,
  kIntlYen = 19,
  kKeyA = 20,
  kKeyB = 21,
  kKeyC = 22,
  kKeyD = 23,
  kKeyE = 24,
  kKeyF = 25,
  kKeyG = 26,
  kKeyH = 27,
  kKeyI = 28,
  kKeyJ = 29,
  kKeyK = 30,
  kKeyL = 31,
  kKeyM = 32,
  kKeyN = 33,
  kKeyO = 34,
  kKeyP = 35,
  kKeyQ = 36,
  kKeyR = 37,
  kKeyS = 38,
  kKeyT = 39,
  kKeyU = 40,
  kKeyV = 41,
  kKeyW = 42,
  kKeyX = 43,
  kKeyY = 44,
  kKeyZ = 45,
  kMinus = 46,
  kPeriod = 47,
  kQuote = 48,
  kSemicolon = 49,
  kSlash = 50,
  kBackspace = 51,
  kEnter = 52,
  kSpace = 53,
  kAltLeft = 54,
  kAltRight = 55,
  kShiftLeft = 56,
  kShiftRight = 57,
  kControlLeft = 58,
  kControlRight = 59,
  kCapsLock = 60,
};

// Information about a physical key event.
//
// Next ordinal: 4
[Stable]
struct PhysicalKeyEvent {
  KeyEventType type@0;
  DomKey key@1;

  // Using this field is discouraged, as it makes it difficult for an IME to be
  // used with different keyboard layouts. Prefer to isolate locational logic in
  // the XKB layout file, if possible.
  DomCode code@2;

  ModifierState modifier_state@3;
};

// Do not modify this enum. If new values are needed, deprecate the entire enum.
[Stable]
enum KeyEventResult {
  // The event should be handled by the system.
  kNeedsHandlingBySystem = 0,
  // The event was consumed by the IME and should not be handled by the system.
  kConsumedByIme = 1,
};

// Represents a directional text selection range.
// |anchor| is the index of where the selection began and |focus| is where the
// selection ended. The |anchor| can be before |focus| or vice versa depending
// on the direction the selection is in.
// See https://developer.mozilla.org/en-US/docs/Web/API/Selection
//
// Next ordinal: 2
[Stable]
struct SelectionRange {
   uint32 anchor@0;
   uint32 focus@1;
};

// Type of input field.
// Based off ui::TextInputType in ui/base/ime/text_input_type.h.
[Stable, Extensible]
enum InputFieldType {
  // Does not support IME editing. IMEs should only send physical key events,
  // and not perform complex operations such as composition.
  kNoIME = 0,
  // Supports general text input.
  kText = 1,
  kSearch = 2,
  kTelephone = 3,
  kURL = 4,
  kEmail = 5,
  kNumber = 6,
  // Input represents a password. IMEs should ensure the password is not stored
  // without the user's permission.
  kPassword = 7,
};

// Next ordinal: 2
[Stable, Extensible]
enum AutocorrectMode {
  // The IME must not perform autocorrect.
  [Default] kDisabled = 0,
  // The IME may perform autocorrect as the user is typing.
  kEnabled = 1,
};

// Next ordinal: 2
[Stable, Extensible]
enum PersonalizationMode {
  // The IME should not use anything from the input field to update any
  // personalized data (e.g. to improve suggestions quality). Personalization
  // may be disabled if the content is privacy-sensitive (e.g. incognito mode in
  // Chrome browser), or if using personalization does not make sense (e.g.
  // playing a typing game may pollute the IME dictionary with uncommon words).
  kDisabled = 0,
  // The IME may use the input field contents for personalization.
  kEnabled = 1,
};

// Next ordinal: 3
[Stable]
struct InputFieldInfo {
  InputFieldType type@0;
  AutocorrectMode autocorrect@1;
  PersonalizationMode personalization@2;
};

// Next ordinal: 4
// TODO(crbug/1201949): Note that the Extensible keyword is not supported for
// union types. We may need to revisit this type in the future.
[Stable, Extensible]
union InputMethodSettings {
  KoreanSettings korean_settings@0;
  LatinSettings latin_settings@1;
  PinyinSettings pinyin_settings@2;
  ZhuyinSettings zhuyin_settings@3;
};

// Next ordinal: 9
[Stable, Extensible]
enum KoreanLayout {
  [Default] kDubeolsik = 0,
  kDubeolsikOldHangeul = 1,
  kSebeolsik390 = 2,
  kSebeolsikFinal = 3,
  kSebeolsikNoShift = 4,
  kSebeolsikOldHangeul = 5,
  kSebeolsikDubeol = 6,
  kRomaja = 7,
  kAhnmatae = 8,
};

// Next ordinal: 2
[Stable]
struct KoreanSettings {
  // Whether to allow users to type multiple syllables in one composition.
  bool input_multiple_syllables@0;

  // The keyboard layout used by the IME.
  KoreanLayout layout@1;
};

// Next ordinal: 2
[Stable]
struct LatinSettings {
  // Whether to enable autocorrect as the user is typing.
  bool autocorrect@0;

  // Whether to enable predictive writing as the user is typing.
  [MinVersion=5] bool predictive_writing@1;
};

// Fuzzy Pinyin allows users to input similar sounding syllables as if they were
// the same thing. For example, if `an_ang` is enabled, then inputting the "an"
// syllable will also show results for "ang".
// This is useful for users with different regional accents.
// Next ordinal: 12
[Stable]
struct FuzzyPinyinSettings {
  bool an_ang@0;
  bool en_eng@1;
  bool ian_iang@2;
  bool k_g@3;
  bool r_l@4;
  bool uan_uang@5;
  bool c_ch@6;
  bool f_h@7;
  bool in_ing@8;
  bool l_n@9;
  bool s_sh@10;
  bool z_zh@11;
};

// Next ordinal: 3
[Stable, Extensible]
enum PinyinLayout {
  [Default] kUsQwerty = 0,
  kDvorak = 1,
  kColemak = 2,
};

// Next ordinal: 7
[Stable]
struct PinyinSettings {
  [MinVersion=6] FuzzyPinyinSettings? fuzzy_pinyin@0;
  [MinVersion=6] PinyinLayout layout@1;
  [MinVersion=6] bool use_hyphen_and_equals_to_page_candidates@2;
  [MinVersion=6] bool use_comma_and_period_to_page_candidates@3;
  [MinVersion=6] bool default_to_chinese@4;
  [MinVersion=6] bool default_to_full_width_characters@5;
  [MinVersion=6] bool default_to_full_width_punctuation@6;
};

// Next ordinal: 3
[Stable, Extensible, MinVersion=7]
enum ZhuyinLayout {
  [Default] kStandard = 0,
  kIbm = 1,
  kEten = 2,
};

// The keys used to select candidates for Zhuyin.
// There is a limited set of possible shortcut schemes.
// Each scheme can be represented by a string, where the 1st character of the
// string is used to select the 1st candidate, the 2nd character for the 2nd
// candidate and so on.
// See the default enum value for an example.
//
// Next ordinal: 5
[Stable, Extensible, MinVersion=7]
enum ZhuyinSelectionKeys {
  // Corresponds to '1234567890'.
  // '1' selects the 1st candidate, '2' selects the 2nd, and so on, and '0'
  // selects the 10th candidate.
  [Default] k1234567890 = 0,
  // Corresponds to 'asdfghjkl;'.
  kAsdfghjkl = 1,
  // Corresponds to 'asdfzxcv89'.
  kAsdfzxcv89 = 2,
  // Corresponds to 'asdfjkl789'.
  kAsdfjkl789 = 3,
  // Corresponds to '1234qweras'.
  k1234Qweras = 4,
};

// Next ordinal: 3
[Stable]
struct ZhuyinSettings {
  [MinVersion=7] ZhuyinLayout layout@0;
  [MinVersion=7] ZhuyinSelectionKeys selection_keys@1;

  // Maximum number of candidates to display per page.
  [MinVersion=7] uint32 page_size@2;
};

// An input method that is provided natively by the IME Service.
// The browser process uses this interface to communicate with IMEs hosted in
// a Chrome utility process, and this interface uses the InputMethodHost
// interface to communicate back to the browser process.
//
// Next ordinal: 6
[Stable]
interface InputMethod {
  // Called when there's a new focused input field.
  OnFocus@0(InputFieldInfo input_field_info,
            [MinVersion=4] InputMethodSettings? settings);

  // Called when the input field loses focus.
  OnBlur@1();

  // Processes a PhysicalKeyEvent and returns the processing result.
  ProcessKeyEvent@2(PhysicalKeyEvent event) => (KeyEventResult result);

  // Informs the IME that the surrounding text has changed.
  // |text| is the text around the current text cursor position, including any
  // composition text. To improve efficiency, |text| may not contain all the
  // text that is in the current input field, but it's guaranteed to contain at
  // least the text within the text selection.
  // |offset| is the index of |text| relative to the full input field. If set to
  // 0, then |text| represents the full contents of the input field.
  // |selection_range| is relative to |text|.
  OnSurroundingTextChanged@3(string text,
                           uint32 offset,
                           SelectionRange selection_range);

  // Informs the IME that composition was canceled by the system. This can
  // for example happen if the user presses the Escape key.
  OnCompositionCanceledBySystem@4();

  // Informs the IME that a candidate from the candidates window was selected by
  // the user. This is usually from the user clicking the candidate.
  // |selected_candidate_index| is the index of the selected candidate.
  [MinVersion=3] OnCandidateSelected@5(uint32 selected_candidate_index);
};
