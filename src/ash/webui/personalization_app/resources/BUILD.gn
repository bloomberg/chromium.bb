# Copyright 2021 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/chromeos/ui_mode.gni")
import("//chrome/browser/resources/tools/optimize_webui.gni")
import("//third_party/closure_compiler/compile_js.gni")
import("//tools/grit/preprocess_if_expr.gni")
import("//tools/polymer/css_to_wrapper.gni")
import("//tools/polymer/html_to_wrapper.gni")
import("//tools/typescript/ts_library.gni")
import("//ui/webui/resources/tools/generate_grd.gni")
import("//ui/webui/webui_features.gni")

assert(is_chromeos_ash)

preprocess_folder = "preprocessed"

# When adding a new file to personalization app, add it to one of the lists
# below. `non_web_component_files` are plain ts files, `web_component_files` are
# polymer based ts files, `css_wrapper_files` are Polymer css files,
# `static_resource_files` are non-js files, e.g. image, html, css
non_web_component_files = [
  "common/constants.ts",
  "common/utils.ts",

  "trusted/ambient/ambient_actions.ts",
  "trusted/ambient/ambient_controller.ts",
  "trusted/ambient/ambient_interface_provider.ts",
  "trusted/ambient/ambient_observer.ts",
  "trusted/ambient/ambient_reducers.ts",
  "trusted/ambient/ambient_state.ts",
  "trusted/iframe_api.ts",
  "trusted/keyboard_backlight/keyboard_backlight_actions.ts",
  "trusted/keyboard_backlight/keyboard_backlight_controller.ts",
  "trusted/keyboard_backlight/keyboard_backlight_interface_provider.ts",
  "trusted/keyboard_backlight/keyboard_backlight_observer.ts",
  "trusted/keyboard_backlight/keyboard_backlight_reducers.ts",
  "trusted/keyboard_backlight/keyboard_backlight_state.ts",
  "trusted/personalization_actions.ts",
  "trusted/personalization_app.ts",
  "trusted/personalization_metrics_logger.ts",
  "trusted/personalization_reducers.ts",
  "trusted/personalization_state.ts",
  "trusted/personalization_store.ts",
  "trusted/personalization_test_api.ts",
  "trusted/theme/theme_actions.ts",
  "trusted/theme/theme_controller.ts",
  "trusted/theme/theme_interface_provider.ts",
  "trusted/theme/theme_observer.ts",
  "trusted/theme/theme_reducers.ts",
  "trusted/theme/theme_state.ts",
  "trusted/user/user_actions.ts",
  "trusted/user/user_controller.ts",
  "trusted/user/user_image_observer.ts",
  "trusted/user/user_interface_provider.ts",
  "trusted/user/user_reducers.ts",
  "trusted/user/user_selectors.ts",
  "trusted/user/user_state.ts",
  "trusted/user/webcam_utils_proxy.ts",
  "trusted/utils.ts",
  "trusted/wallpaper/google_photos_metrics_logger.ts",
  "trusted/wallpaper/wallpaper_actions.ts",
  "trusted/wallpaper/untrusted_message_handler.ts",
  "trusted/wallpaper/wallpaper_controller.ts",
  "trusted/wallpaper/wallpaper_interface_provider.ts",
  "trusted/wallpaper/wallpaper_observer.ts",
  "trusted/wallpaper/wallpaper_reducers.ts",
  "trusted/wallpaper/wallpaper_state.ts",
  "trusted/wallpaper/index.ts",

  "untrusted/iframe_api.ts",
  "untrusted/setup.ts",
]

# Files holding a Polymer element definition AND have an equivalent .html file.
web_component_files = [
  "trusted/ambient/album_list_element.ts",
  "trusted/ambient/albums_subpage_element.ts",
  "trusted/ambient/art_album_dialog_element.ts",
  "trusted/ambient/ambient_preview_element.ts",
  "trusted/ambient/ambient_subpage_element.ts",
  "trusted/ambient/ambient_weather_element.ts",
  "trusted/ambient/animation_theme_item_element.ts",
  "trusted/ambient/animation_theme_list_element.ts",
  "trusted/ambient/toggle_row_element.ts",
  "trusted/ambient/topic_source_item_element.ts",
  "trusted/ambient/topic_source_list_element.ts",
  "trusted/ambient/zero_state_element.ts",
  "trusted/keyboard_backlight/keyboard_backlight_element.ts",
  "trusted/personalization_main_element.ts",
  "trusted/personalization_router_element.ts",
  "trusted/personalization_theme_element.ts",
  "trusted/personalization_toast_element.ts",
  "trusted/personalization_breadcrumb_element.ts",
  "trusted/user/avatar_camera_element.ts",
  "trusted/user/avatar_list_element.ts",
  "trusted/user/user_preview_element.ts",
  "trusted/user/user_subpage_element.ts",
  "trusted/wallpaper/google_photos_albums_element.ts",
  "trusted/wallpaper/google_photos_collection_element.ts",
  "trusted/wallpaper/google_photos_photos_by_album_id_element.ts",
  "trusted/wallpaper/google_photos_photos_element.ts",
  "trusted/wallpaper/google_photos_zero_state_element.ts",
  "trusted/wallpaper/local_images_element.ts",
  "trusted/wallpaper/wallpaper_collections_element.ts",
  "trusted/wallpaper/wallpaper_error_element.ts",
  "trusted/wallpaper/wallpaper_fullscreen_element.ts",
  "trusted/wallpaper/wallpaper_grid_item_element.ts",
  "trusted/wallpaper/wallpaper_images_element.ts",
  "trusted/wallpaper/wallpaper_preview_element.ts",
  "trusted/wallpaper/wallpaper_selected_element.ts",
  "trusted/wallpaper/wallpaper_subpage_element.ts",

  "untrusted/collections_grid.ts",
  "untrusted/images_grid.ts",
]

# Files that are passed as input to html_to_wrapper().
html_files = []
foreach(f, web_component_files) {
  html_files += [ string_replace(f, ".ts", ".html") ]
}

icons_html_files = [ "common/icons.html" ]

# Files that are generated by html_to_wrapper().
html_wrapper_files = []
foreach(f, html_files + icons_html_files) {
  html_wrapper_files += [ f + ".ts" ]
}

ts_files = web_component_files + non_web_component_files

# Files that are passed as input to css_to_wrapper().
css_files = [
  "common/common_style.css",

  "trusted/cros_button_style.css",
  "trusted/wallpaper/trusted_style.css",
]

# Files that are generated by css_to_wrapper().
css_wrapper_files = []
foreach(f, css_files) {
  css_wrapper_files += [ f + ".ts" ]
}

static_resource_files = [
  "hub_icon_64.png",
  "hub_icon_128.png",
  "hub_icon_192.png",
  "hub_icon_256.png",
  "icon_192.png",

  "common/ambient_mode_disabled.svg",
  "common/ambient_mode_disabled_dark.svg",
  "common/base.css",
  "common/feel_the_breeze.png",
  "common/float_on_by.png",
  "common/google_photos.svg",
  "common/no_images.svg",
  "common/no_google_photos_images.svg",
  "common/no_google_photos_images_dark.svg",
  "common/slideshow.png",

  "trusted/index.html",
]

css_to_wrapper("css_wrapper_files") {
  in_files = css_files
}

html_to_wrapper("html_to_wrapper_files") {
  in_files = html_files + icons_html_files
}

preprocess_if_expr("preprocess") {
  in_folder = "."
  out_folder = "$target_gen_dir/$preprocess_folder"
  in_files = ts_files
}

preprocess_if_expr("preprocess_generated") {
  deps = [
    ":css_wrapper_files",
    ":html_to_wrapper_files",
  ]
  in_folder = target_gen_dir
  out_folder = "$target_gen_dir/$preprocess_folder"
  in_files = html_wrapper_files + css_wrapper_files
}

copy("copy_mojo_to_trusted") {
  deps = [ "../mojom:mojom_webui_js" ]
  sources = [ "$root_gen_dir/mojom-webui/ash/webui/personalization_app/mojom/personalization_app.mojom-webui.js" ]
  outputs =
      [ "$target_gen_dir/$preprocess_folder/trusted/{{source_file_part}}" ]
}

ts_library("build_ts") {
  composite = true
  root_dir = "$target_gen_dir/$preprocess_folder"
  out_dir = "$target_gen_dir/tsc"
  tsconfig_base = "tsconfig_base.json"

  in_files = ts_files + css_wrapper_files + html_wrapper_files +
             [ "trusted/personalization_app.mojom-webui.js" ]

  definitions = [ "//tools/typescript/definitions/metrics_private.d.ts" ]

  deps = [
    "//third_party/polymer/v3_0:library",
    "//ui/webui/resources:library",
    "//ui/webui/resources/mojo:library",
  ]

  extra_deps = [
    ":copy_mojo_to_trusted",
    ":preprocess",
    ":preprocess_generated",
    "//ui/webui/resources:generate_definitions",
  ]
}

if (optimize_webui) {
  build_manifest = "build_manifest.json"

  optimize_webui("build") {
    host = "personalization"
    input = rebase_path("$target_gen_dir/tsc", root_build_dir)
    js_out_files = [ "personalization_app.rollup.js" ]
    js_module_in_files = [ "trusted/personalization_app.js" ]
    out_manifest = "$target_gen_dir/$build_manifest"

    deps = [
      ":build_ts",
      "//ui/webui/resources:preprocess",
    ]

    excludes = [ "chrome://resources/mojo/mojo/public/js/bindings.js" ]
  }
}

generate_grd("build_grd") {
  input_files_base_dir = rebase_path(".", "//")
  input_files = static_resource_files

  if (optimize_webui) {
    deps = [ ":build" ]
    manifest_files = [ "$target_gen_dir/$build_manifest" ]
    resource_path_rewrites =
        [ "personalization_app.rollup.js|trusted/personalization_app.js" ]
  } else {
    deps = [ ":build_ts" ]
    manifest_files = [ "$target_gen_dir/tsconfig.manifest" ]
  }
  grd_prefix = "ash_personalization_app"
  out_grd = "$target_gen_dir/${grd_prefix}_resources.grd"
}
