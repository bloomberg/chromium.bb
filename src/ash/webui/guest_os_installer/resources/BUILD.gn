# Copyright 2022 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//third_party/closure_compiler/compile_js.gni")
import("//tools/grit/preprocess_if_expr.gni")
import("//tools/polymer/html_to_js.gni")
import("//tools/typescript/ts_library.gni")
import("//ui/webui/resources/tools/generate_grd.gni")

assert(is_chromeos_ash)

# This is a relatively complicated build file, so let me try to
# explain things...

# Polymer components are made up of a HTML template and a typescript
# class. For ease of development we keep these in separate files, but
# at run-time the HTML template needs to be generated by the
# typescript code. This build rule substitiutes the contents of
# `app.html` for the string "{__html_template__}" in `app.ts`.
html_to_js("web_components") {
  js_files = [ "app.ts" ]
}

# We have three different files that needs to be passed to the
# typescript compiler (the mojom file is included because the mojo
# bindings generator currently doesn't handle typescript, see
# crbug.com/1002798) in the same directory, but are currently in three
# different locations. These three build rules copy them all into
# $target_gen_dir/ts_inputs.

copy("copy_mojom") {
  sources = [ "$target_gen_dir/../mojom/guest_os_installer.mojom-lite.js" ]
  outputs = [ "$target_gen_dir/ts_inputs/guest_os_installer.mojom-lite.js" ]
  deps = [ "../mojom:mojom_js" ]
}

copy("copy_browser_proxy") {
  sources = [ "browser_proxy.ts" ]
  outputs = [ "$target_gen_dir/ts_inputs/browser_proxy.ts" ]
}

copy("copy_app") {
  sources = [ "$target_gen_dir/app.ts" ]
  outputs = [ "$target_gen_dir/ts_inputs/app.ts" ]
  deps = [ ":web_components" ]
}

# Run the typescript compiler, putting the outputs in
# $target_gen_dir. This has to be a different directory to the inputs
# because the mojom file has the same name in both input and output,
# and they'd conflict otherwise.
ts_library("build_ts") {
  root_dir = "$target_gen_dir/ts_inputs"
  in_files = [
    "app.ts",
    "browser_proxy.ts",
    "guest_os_installer.mojom-lite.js",
  ]

  # Allow javascript files in input
  tsconfig_base = "tsconfig_base.json"

  # Dependencies that are typescript libraries
  deps = [ "//ui/webui/resources:library" ]

  # Dependencies that are arbitrary build targets
  extra_deps = [
    ":copy_app",
    ":copy_browser_proxy",
    ":copy_mojom",
  ]
}

# Generate "manifest" files for assets that can be processed into .grd
# files. Relative paths are significant here, so we have one for the
# generated assets and one for the static assets. Assets end up
# available in the WebUI context at the same path as is listed in
# `in_files`, e.g. chrome://guest-os-installer/app.js

preprocess_if_expr("preprocess_generated") {
  deps = [ ":build_ts" ]
  in_folder = target_gen_dir
  in_files = [
    "app.js",
    "browser_proxy.js",
    "guest_os_installer.mojom-lite.js",
  ]
  out_folder = "$target_gen_dir/preprocessed"
  out_manifest = "$target_gen_dir/manifest_generated.json"
}

preprocess_if_expr("preprocess_static") {
  in_folder = "."
  in_files = [ "index.html" ]
  out_folder = "$target_gen_dir/preprocessed"
  out_manifest = "$target_gen_dir/manifest_static.json"
}

# Generate the actual grd file from the manifests. This is pulled in
# by //ash/webui/resources:guest_os_installer_resources, which is in
# turn pulled in by //chrome/chrome_paks.gni (to add the resources to
# the final resource pack), by //ash/webui/guest_os_installer to add
# them to the WebUI context, and by anyone else who needs to use these
# resources.
generate_grd("build_grd") {
  deps = [
    ":preprocess_generated",
    ":preprocess_static",
  ]
  manifest_files = [
    "$target_gen_dir/manifest_generated.json",
    "$target_gen_dir/manifest_static.json",
  ]
  grd_prefix = "ash_guest_os_installer"
  out_grd = "$target_gen_dir/${grd_prefix}_resources.grd"
}
