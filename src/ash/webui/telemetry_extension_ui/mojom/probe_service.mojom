// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// API and definitions exposed by the Telemetry Services. This API is normally
// consumed by the Telemetry Extension APIs implementation.

// Note: this is a subset of the cros_healthd probe service interface which is
// located in //chromeos/services/cros_healthd/public/mojom/cros_healthd.mojom.
// This interface serves as PII filtering and data post-processing service
// between the source (cros_healthd) and the clients
// (third-party telemetry extensions).

// The subset is not as is but has the following differences:
//   1) Introduce DoubleValue, Int64Value, UInt32Value, UInt64Value structs
//      since numeric primitives are not nullable in Mojo.
//   2) Make all fields in the following structures optional in case we want to
//      filter them out later:
//           - NonRemovableBlockDeviceInfo
//           - CpuCStateInfo
//           - LogicalCpuInfo
//           - PhysicalCpuInfo
//           - CpuInfo
//           - TimezoneInfo
//           - MemoryInfo
//           - BacklightInfo
//           - FanInfo
//           - StatefulPartitionInfo
//           - BluetoothAdapterInfo
//   3) NonRemovableBlockDeviceInfo:
//      3.1) use uint32 to store manufacturer_id instead of uint8 in case we
//           want to extend manufacturer range.
//      3.2) use string to store serial in a decimal numeral system instead
//           of uint32 in case we want to extend serial number range.
//   4) LogicalCpuInfo:
//      4.1) rename idle_time_user_hz to idle_time_ms and use milliseconds
//           instead of USER_HZ units, because USER_HZ system constant is not
//           available in the web.
//      4.2) use uint64 to store idle_time_ms instead of uint32, idle_time_ms
//           can easily be more than uint32 range.
//   5) MemoryInfo: use uint64 to store page_faults_since_last_boot instead of
//      uint32, it can be more than uint32 range.

module ash.health.mojom;

// Interface for getting device telemetry information. Implemented in
// ash-chrome.
[Stable, Uuid="f3dbbe3b-a810-43a9-889e-b130b4f94869"]
interface ProbeService {
  // Returns telemetry information for the desired categories.
  //
  // The request:
  // * |categories| - list of each of the categories that ProbeTelemetryInfo
  //                  should return information for.
  //
  // The response:
  // * |telemetry_info| - information for each of the requested categories. Only
  //                      the fields corresponding to the requested categories
  //                      will be non-null.
  ProbeTelemetryInfo@0(array<ProbeCategoryEnum> categories)
      => (TelemetryInfo telemetry_info);

  // Returns OEM data.
  //
  // The response:
  // * |oem_data| - OEM data.
  GetOemData@1() => (OemData oem_data);
};

// An enumeration of each category of information that cros_healthd can report.
//
// Next ID: 12
[Stable, Extensible]
enum ProbeCategoryEnum {
  [Default] kUnknown = 11,
  kBattery = 0,
  kNonRemovableBlockDevices = 1,
  kCachedVpdData = 2,
  kCpu = 3,
  kTimezone = 4,
  kMemory = 5,
  kBacklight = 6,
  kFan = 7,
  kStatefulPartition = 8,
  kBluetooth = 9,
  kSystem = 10,
};

// An enumeration of the different categories of errors that can occur when
// probing telemetry information.
//
// Next ID: 5
[Stable, Extensible]
enum ErrorType {
  // Default value.
  [Default] kUnknown = 4,
  // An error reading a system file.
  kFileReadError = 0,
  // An error parsing data into a consumable form.
  kParseError = 1,
  // An error using a system utility.
  kSystemUtilityError = 2,
  // The external service used to probe the information is not available.
  kServiceUnavailable = 3,
};

// Structure that contains error information for a telemetry probe.
//
// Next ID: 2
[Stable]
struct ProbeError {
  // The type of error that occurred.
  ErrorType type@0;
  // A debug message with more information about the error. This string is not
  // intended to be shown to the user.
  string msg@1;
};

// Optional double field. Since primitives numeric types cannot be optional,
// wrap double in a struct that can be nulled.
[Stable]
struct DoubleValue {
  // The value of the double.
  double value@0;
};

// Optional int64 field. Since primitives numeric types cannot be optional,
// wrap int64 in a struct that can be nulled.
[Stable]
struct Int64Value {
  // The value of the int64.
  int64 value@0;
};

// Optional uint32 field. Since primitives numeric types cannot be optional,
// wrap uint32 in a struct that can be nulled.
[Stable]
struct UInt32Value {
  // The value of the uint32.
  uint32 value@0;
};

// Optional uint64 field. Since primitives numeric types cannot be optional,
// wrap uint64 in a struct that can be nulled.
[Stable]
struct UInt64Value {
  // The value of the uint64.
  uint64 value@0;
};

// Optional bool field. Since primitives numeric types cannot be optional,
// wrap bool in a struct that can be nulled.
[Stable]
struct BoolValue {
  // The value of the bool.
  bool value@0;
};

// Information related to the main battery.
//
// Next ID: 14
[Stable]
struct BatteryInfo {
  // Cycle count.
  Int64Value? cycle_count@0;
  // Current battery voltage (V)
  DoubleValue? voltage_now@1;
  // Manufacturer of the battery
  string? vendor@2;
  // Serial number of the battery
  string? serial_number@3;
  // Design capacity (Ah)
  DoubleValue? charge_full_design@4;
  // Full capacity (Ah)
  DoubleValue? charge_full@5;
  // Desired minimum output voltage (V)
  DoubleValue? voltage_min_design@6;
  // Model name.
  string? model_name@7;
  // Current battery charge (Ah)
  DoubleValue? charge_now@8;
  // Current battery current (A)
  DoubleValue? current_now@9;
  // Technology of the battery
  string? technology@10;
  // Status of the battery
  string? status@11;

  // The fields below are optionally included if the main battery is a Smart
  // Battery as defined in http://sbs-forum.org/specs/sbdat110.pdf.

  // Manufacture date converted to yyyy-mm-dd format.
  string? manufacture_date@12;
  // Temperature in 0.1K. Included when the main battery is a Smart Battery.
  UInt64Value? temperature@13;
};

// Battery probe result. Can either be populated with the BatteryInfo or an
// error retrieving the information.
[Stable]
union BatteryResult {
  // Valid BatteryInfo. Null value if a battery is not present.
  BatteryInfo? battery_info;
  // The error that occurred attempting to retrieve the BatteryInfo.
  ProbeError error;
};

// Information related to a specific non-removable block device.
//
// Next ID: 12
[Stable]
struct NonRemovableBlockDeviceInfo {
  // The path of this storage on the system. It is useful if caller needs to
  // correlate with other information.
  string? path@0;
  // Exact size of this storage, reported in bytes.
  UInt64Value? size@1;
  // Storage type, could be MMC / NVMe / ATA, based on udev subsystem.
  string? type@2;
  // Manufacturer ID, 8 bits.
  UInt32Value? manufacturer_id@3;
  // PNM: Product name, ASCII characters for 6 bytes.
  string? name@4;
  // PSN: Product serial number, encoded unsigned integer in decimal numeral
  // system.
  string? serial@5;
  // Bytes read since last boot.
  UInt64Value? bytes_read_since_last_boot@6;
  // Bytes written since last boot.
  UInt64Value? bytes_written_since_last_boot@7;
  // Time spent reading since last boot.
  UInt64Value? read_time_seconds_since_last_boot@8;
  // Time spent writing since last boot.
  UInt64Value? write_time_seconds_since_last_boot@9;
  // Time spent doing I/O since last boot. Counts the time the disk and queue
  // were busy, so unlike the fields above, parallel requests are not counted
  // multiple times.
  UInt64Value? io_time_seconds_since_last_boot@10;
  // Time spent discarding since last boot. Discarding is writing to clear
  // blocks which are no longer in use. Supported on kernels 4.18+.
  UInt64Value? discard_time_seconds_since_last_boot@11;
};

// Non-removable block device probe result. Can either be populated with the
// NonRemovableBlockDeviceInfo or an error retrieving the information.
[Stable]
union NonRemovableBlockDeviceResult {
  // Valid NonRemovableBlockDeviceInfo.
  array<NonRemovableBlockDeviceInfo> block_device_info;
  // The error that occurred attempting to retrieve the
  // NonRemovableBlockDeviceInfo.
  ProbeError error;
};

// Cached VPD read from sysfs.
//
// Next ID: 4
[Stable]
struct CachedVpdInfo {
  // Contents of /sys/firmware/vpd/rw/ActivateDate, if the device supports it.
  string? first_power_date@0;
  // Contents of /sys/firmware/vpd/ro/sku_number, if the device supports it.
  string? sku_number@1;
  // Contents of /sys/firmware/vpd/ro/serial_number, if the device supports it.
  string? serial_number@2;
  // Contents of /sys/firmware/vpd/ro/model_name, if the device supports it.
  string? model_name@3;
};

// Cached VPD probe result. Can either be populated with the CachedVpdInfo or an
// error retrieving the information.
[Stable]
union CachedVpdResult {
  // Valid CachedVpdInfo.
  CachedVpdInfo vpd_info;
  // The error that occurred attempting to retrieve the CachedVpdInfo.
  ProbeError error;
};

// Information about a CPU's C-states.
//
// Next ID: 2
[Stable]
struct CpuCStateInfo {
  // Name of the state.
  string? name@0;
  // Time spent in the state since the last reboot, in microseconds.
  UInt64Value? time_in_state_since_last_boot_us@1;
};

// Information related to a particular logical CPU.
//
// Next ID: 5
[Stable]
struct LogicalCpuInfo {
  // The max CPU clock speed in kHz.
  UInt32Value? max_clock_speed_khz@0;
  // Maximum frequency the CPU is allowed to run at, by policy.
  UInt32Value? scaling_max_frequency_khz@1;
  // Current frequency the CPU is running at.
  UInt32Value? scaling_current_frequency_khz@2;
  // Idle time since last boot, in milliseconds.
  UInt64Value? idle_time_ms@3;
  // Information about the logical CPU's time in various C-states.
  array<CpuCStateInfo> c_states@4;
};

// Information related to a particular physical CPU.
//
// Next ID: 2
[Stable]
struct PhysicalCpuInfo {
  // The CPU model name.
  string? model_name@0;
  // Logical CPUs corresponding to this physical CPU.
  array<LogicalCpuInfo> logical_cpus@1;
};

// An enumeration of CPU architectures.
//
// Next ID: 4
[Stable, Extensible]
enum CpuArchitectureEnum {
  [Default] kUnknown = 3,
  kX86_64 = 0,
  kAArch64 = 1,
  kArmv7l = 2,
};

// Information about the device's CPUs.
//
// Next ID: 3
[Stable]
struct CpuInfo {
  // Number of total threads available.
  UInt32Value? num_total_threads@0;
  // The CPU architecture - it's assumed all of a device's CPUs share an
  // architecture.
  CpuArchitectureEnum architecture@1;
  // Information about the device's physical CPUs.
  array<PhysicalCpuInfo> physical_cpus@2;
};

// CPU probe result. Can either be populated with the CpuInfo or an error
// retrieving the information.
[Stable]
union CpuResult {
  // Valid CpuInfo.
  CpuInfo cpu_info;
  // The error that occurred attempting to retrieve the CpuInfo.
  ProbeError error;
};

// Timezone information.
//
// Next ID: 2
[Stable]
struct TimezoneInfo {
  // The timezone of the device in POSIX standard.
  string? posix@0;
  // The timezone region of the device.
  string? region@1;
};

// Timezone probe result. Can either be populated with the TimezoneInfo or an
// error retrieving the information.
[Stable]
union TimezoneResult {
  // Valid TimezoneInfo.
  TimezoneInfo timezone_info;
  // The error that occurred attempting to retrieve the TimezoneInfo.
  ProbeError error;
};

// Memory information.
//
// Next ID: 4
[Stable]
struct MemoryInfo {
  // Total memory, in KiB.
  UInt32Value? total_memory_kib@0;
  // Free memory, in KiB.
  UInt32Value? free_memory_kib@1;
  // Available memory, in KiB.
  UInt32Value? available_memory_kib@2;
  // Number of page faults since the last boot.
  UInt64Value? page_faults_since_last_boot@3;
};

// Memory probe result. Can either be populated with the MemoryInfo or an
// error retrieving the information.
[Stable]
union MemoryResult {
  // Valid MemoryInfo.
  MemoryInfo memory_info;
  // The error that occurred attempting to retrieve the MemoryInfo.
  ProbeError error;
};

// Backlight information.
//
// Next ID: 3
[Stable]
struct BacklightInfo {
  // Path to this backlight on the system. Useful if the caller needs to
  // correlate with other information.
  string? path@0;
  // Maximum brightness for the backlight.
  UInt32Value? max_brightness@1;
  // Current brightness of the backlight, between 0 and max_brightness.
  UInt32Value? brightness@2;
};

// Backlight probe result. Can either be populated with the BacklightInfo or an
// error retrieving the information.
[Stable]
union BacklightResult {
  // Valid BacklightInfo.
  array<BacklightInfo> backlight_info;
  // The error that occurred attempting to retrieve the BacklightInfo.
  ProbeError error;
};

// Fan information.
[Stable]
struct FanInfo {
  // Fan speed in RPM.
  UInt32Value? speed_rpm@0;
};

// Fan probe result. Can either be populated with the FanInfo or an error
// retrieving the information.
[Stable]
union FanResult {
  // A list of valid FanInfo.
  array<FanInfo> fan_info;
  // The error that occurred attempting to retrieve the FanInfo.
  ProbeError error;
};

// Stateful partition info
//
// Next ID: 2
[Stable]
struct StatefulPartitionInfo {
  // Available space for user data storage in the device in bytes. Rounded down
  // to multiples of 100MiB (100 * 1024 * 1024 bytes).
  UInt64Value? available_space@0;
  // Total space for user data storage in the device in bytes.
  UInt64Value? total_space@1;
};

// Stateful partition probe result. Can either be populated with a valid
// StatefulPartitionInfo or an error retrieving the information.
[Stable]
union StatefulPartitionResult {
  // A valid StatefulPartitionInfo.
  StatefulPartitionInfo partition_info;
  // The error that occurred attempting to retrieve the StatefulPartitionInfo.
  ProbeError error;
};

// Information related to one of a device's Bluetooth adapters.
//
// Next ID: 4
[Stable]
struct BluetoothAdapterInfo {
  // The name of the adapter.
  string? name@0;
  // The MAC address of the adapter.
  string? address@1;
  // Indicates whether the adapter is on or off.
  BoolValue? powered@2;
  // The number of devices connected to this adapter.
  UInt32Value? num_connected_devices@3;
};

// Bluetooth probe result. Can either be populated with the BluetoothAdapterInfo
// or an error retrieving the information.
[Stable]
union BluetoothResult {
  // Valid BluetoothAdapterInfo.
  array<BluetoothAdapterInfo> bluetooth_adapter_info;
  // The error that occurred attempting to retrieve the BluetoothAdapterInfo.
  ProbeError error;
};

// The OS information.
[Stable]
struct OsInfo {
  // Contents of CrosConfig in /branding/oem-name.
  string? oem_name@0;
};

// System Information.
[Stable]
struct SystemInfo {
  // The info related to the OS.
  OsInfo os_info@0;
};

// System probe result. Can either be populated with the SystemInfo or an
// error retrieving the information.
[Stable]
union SystemResult {
  // Valid SystemInfo.
  SystemInfo system_info;
  // The error that occurred attempting to retrieve SystemInfo.
  ProbeError error;
};

// A collection of all the device's telemetry information that cros_healthd is
// capable of reporting. Note that every field in TelemetryInfo is nullable, and
// the response for a particular ProbeTelemetryInfo request will only contain
// fields corresponding to the categories passed to the ProbeTelemetryInfo
// request. All optional array members will be null if cros_healthd did not
// attempt to fetch that information, and size zero if cros_healthd did attempt
// to fetch that information, but was unable to.
//
// Next ID: 11
[Stable]
struct TelemetryInfo {
  // Information about the device's main battery. Only present when kBattery was
  // included in the categories input to ProbeTelemetryInfo.
  BatteryResult? battery_result@0;
  // Information about all of the device's non-removable block devices. Only
  // present when kNonRemovableBlockDevices was included in the categories input
  // to ProbeTelemetryInfo.
  NonRemovableBlockDeviceResult? block_device_result@1;
  // Only present when kCachedVpdData was included in the categories input to
  // ProbeTelemetryInfo.
  CachedVpdResult? vpd_result@2;
  // Information about each of the device's CPUs. Only present when kCpu was
  // included in the categories input to ProbeTelemetryInfo.
  CpuResult? cpu_result@3;
  // Information about the device's timezone. Only present when kTimezone was
  // included in the categories input to ProbeTelemetryInfo.
  TimezoneResult? timezone_result@4;
  // Information about the system's memory. Only present when kMemory was
  // included in the categories input to ProbeTelemetryInfo.
  MemoryResult? memory_result@5;
  // Information about all of the device's backlights. Only present when
  // kBacklight was included in the categories input to ProbeTelemetryInfo.
  BacklightResult? backlight_result@6;
  // Information about each of the device's fans. Only present when kFan was
  // included in the categories input to ProbeTelemetryInfo.
  FanResult? fan_result@7;
  // Information about the stateful partition. Only present when
  // kStatefulPartition was included in the categories input to
  // ProbeTelemetryInfo.
  StatefulPartitionResult? stateful_partition_result@8;
  // Information about the device's Bluetooth adapters and devices. Only present
  // when kBluetooth was included in the categories input to ProbeTelemetryInfo.
  BluetoothResult? bluetooth_result@9;
  // Information about the system. Only present when kSystem was included in
  // the categories input to ProbeTelemetryInfo.
  SystemResult? system_result@10;
};

// Result of running /usr/share/cros/oemdata.sh script.
[Stable]
struct OemData {
  string? oem_data@0;
};
