// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// API exposed by the Telemetry Services. This API is expected to be consumed by
// the Telemetry Extension APIs implementation but it is not currently used.

// Note: this is a subset of the cros_healthd probe service interface which is
// located in //chromeos/services/cros_healthd/public/mojom/cros_healthd.mojom.

module ash.health.mojom;

// System Events interface exposed by the Telemetry Services. Implemented in
// ash-chrome.
//
// Next ID: 3
[Stable, Uuid="e0884110-1da1-4b67-a9a9-6911ed52e451"]
interface SystemEventsService {
  // Adds an observer to be notified on Bluetooth events. The caller can remove
  // the observer created by this call by closing their end of the message pipe.
  //
  // The request:
  // * |observer| - Bluetooth observer to be added to system events service.
  AddBluetoothObserver@0(pending_remote<BluetoothObserver> observer);

  // Adds an observer to be notified on lid events. The caller can remove the
  // observer created by this call by closing their end of the message pipe.
  //
  // The request:
  // * |observer| - lid observer to be added to system events service.
  AddLidObserver@1(pending_remote<LidObserver> observer);

  // Adds an observer to be notified on power events. The caller can remove the
  // observer created by this call by closing their end of the message pipe.
  //
  // The request:
  // * |observer| - power observer to be added to system events service.
  AddPowerObserver@2(pending_remote<PowerObserver> observer);
};

// Implemented by clients who desire Bluetooth notifications. Normally, this
// should be the Telemetry Extension APIs implementation.
//
// Next ID: 6
[Stable, Uuid="c0e15f10-d799-4c0d-a68f-50e3d8ce1ab5"]
interface BluetoothObserver {
  // Fired when a Bluetooth adapter is added.
  OnAdapterAdded@0();
  // Fired when a Bluetooth adapter is removed.
  OnAdapterRemoved@1();
  // Fired when a property of a Bluetooth adapter is changed.
  OnAdapterPropertyChanged@2();
  // Fired when a Bluetooth device is added.
  OnDeviceAdded@3();
  // Fired when a Bluetooth device is removed.
  OnDeviceRemoved@4();
  // Fired when a property of a Bluetooth device is changed.
  OnDevicePropertyChanged@5();
};

// Implemented by clients who desire lid notifications. Normally, this
// should be the Telemetry Extension APIs implementation.
//
// Next ID: 2
[Stable, Uuid="3e445741-2889-4365-9487-12107d3dfbbf"]
interface LidObserver {
  // Fired when the device's lid is closed.
  OnLidClosed@0();
  // Fired when the device's lid is opened.
  OnLidOpened@1();
};

// Implemented by clients who desire power notifications. Normally, this
// should be the Telemetry Extension APIs implementation.
//
// Next ID: 4
[Stable, Uuid="428a78e3-e776-4b80-aa76-523cad4a7921"]
interface PowerObserver {
  // Fired when the power cable is plugged in.
  OnAcInserted@0();
  // Fired when the power cable is unplugged.
  OnAcRemoved@1();
  // Fired when the system is going to be suspended.
  OnOsSuspend@2();
  // Fired when the system was resumed after being suspended or when the suspend
  // process was cancelled.
  OnOsResume@3();
};
