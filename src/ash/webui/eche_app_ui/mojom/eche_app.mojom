// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.eche_app.mojom;

import "mojo/public/mojom/base/string16.mojom";

// Interface for sending signal messages from the SWA to the browser. The
// signals are used to bootstrap a full WebRTC connection between a Nearby
// endpoint and the SWA. Any further data exchange happens directly over the
// WebRTC connection.
interface SignalingMessageExchanger {
  // Called when a new signaling message is ready for transmission. The
  // `signal` is a serialized WebRtcSignal.
  SendSignalingMessage(array<uint8> signal);
  // Sets the listener for replies sent from the browser process to the SWA.
  SetSignalingMessageObserver(
      pending_remote<SignalingMessageObserver> observer);
  // Called when we no longer need the signal channel.
  TearDownSignaling();
};

// Interface for dispatching response signaling messages as they are received.
interface SignalingMessageObserver {
  // Dispatch message to recipient. The `signal` is a serialized WebRtcSignal.
  OnReceivedSignalingMessage(array<uint8> signal);
};

// Screen backlight state.
// Reference from ash/public/cpp/screen_backlight_type.h
enum ScreenBacklightState {
    ON,
    OFF,
    OFF_AUTO,
};

// Interface for getting system information.
interface SystemInfoProvider {
  // Get the system info such as board name and device name. The
  // output parameter is JSON encoded set of data.
  GetSystemInfo() => (string system_info);

  // Registers a generic interface to observe events from browser-to-renderer.
  SetSystemInfoObserver(pending_remote<SystemInfoObserver> observer);
};

// A generic interface to observe events of browser process, all events from
// browser-to-render should be added in this interface if there is no other
// reason.
interface SystemInfoObserver {
  // Interface for monitoring screen backlight state of device. The state is
  // detected from Chrome browser process and is notified to Eche App in
  // renderer process. Updates with the latest screen backlight state.
  OnScreenBacklightStateChanged(ScreenBacklightState state);

  // Interface for monitoring tablet mode state of device. The state is detected
  // from Chrome browser process and is notified to eche app in renderer
  // process. TODO(b/184119538): Need to handle the resize issue and virtual
  // keyboard in table mode.
  OnReceivedTabletModeChanged(bool is_tablet_mode);
};

// Interface for generating uid. The uid is unique and persistent.
interface UidGenerator {
  // Get the uid.
  GetUid() => (string local_uid);
};

// Enum representing notifications from webUI. Numerical values should not
// be changed because they must stay in sync with value on google3
enum WebNotificationType {
    APP_CRAHSED,
    AUTHORIZATION_NEEDED,
    CONNECTION_FAILED,
    CONNECTION_LOST,
    DEVICE_IDLE,
    INITIALIZATION_ERROR,
    INVALID_NOTIFICATION,
    NOTIFICATION_ACTION_NOT_LAUNCHED,
    LAUNCH_NOTIFICATION_FAILED,
    TABLET_MODE,
};

// Interface for showing a native notification which was generated from WebUI.
interface NotificationGenerator {
  // Show a native notification, title and message are from WebUI.
  ShowNotification(mojo_base.mojom.String16 title,
          mojo_base.mojom.String16 message, WebNotificationType type);
};
