// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.diagnostics.mojom;

enum ConnectionType {
  kInternal,  // Includes internal USB devices.
  kUsb,
  kBluetooth,
  kUnknown,
};

// The physical style of a keyboard.
enum PhysicalLayout {
  kUnknown,
  // A typical Chrome OS keyboard with action keys on the top row, reduced
  // navigation keys, etc.
  kChromeOS,
  // The slightly-modified Chrome OS keyboard found on Dell Enterprise
  // Chromebooks or Dell WWCB keyboards (like the KM713 Chrome Keyboard).
  kChromeOSDellEnterprise,
};

// The international standard that the layout follows.
enum MechanicalLayout {
  kUnknown,
  kAnsi,
  kIso,
  kJis,
};

// Describes a connected keyboard.
struct KeyboardInfo {
  // The number of the keyboard's /dev/input/event* node.
  uint32 id;
  ConnectionType connection_type;
  string name;
  PhysicalLayout physical_layout;
  MechanicalLayout mechanical_layout;
  bool has_assistant_key;
};

enum TouchDeviceType {
  kDirect,   // e.g. touchscreens, drawing tablets with screens.
  kPointer,  // e.g. touchpads, drawing tablets without displays.
};

// Describes a touch surface (pad or screen).
struct TouchDeviceInfo {
  // The number of the touch device's /dev/input/event* node.
  uint32 id;
  ConnectionType connection_type;
  TouchDeviceType type;
  string name;
};

// Implemented by clients that wish to be updated when input devices are
// connected or disconnected.
interface ConnectedDevicesObserver {
  // OnKeyboardConnected calls are triggered when a new keyboard is connected.
  OnKeyboardConnected(KeyboardInfo new_keyboard);
  // OnKeyboardDisconnected calls are triggered when a keyboard is disconnected.
  OnKeyboardDisconnected(uint32 id);
  // OnTouchDeviceConnected calls are triggered when a new touch device is
  // connected.
  OnTouchDeviceConnected(TouchDeviceInfo new_touch_device);
  // OnTouchDeviceDisconnected calls are triggered when a touch device is
  // disconnected.
  OnTouchDeviceDisconnected(uint32 id);
};

// Provides information about input devices connected to the system. Implemented
// in the browser process and called by the Diagnostics SWA (a renderer
// process).
interface InputDataProvider {
  // Returns a snapshot of the devices connected to the system.
  GetConnectedDevices() =>
    (array<KeyboardInfo> keyboards,
     array<TouchDeviceInfo> touch_devices);
  // Registers an observer of connected input devices.
  ObserveConnectedDevices(pending_remote<ConnectedDevicesObserver> observer);
};
