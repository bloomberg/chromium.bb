// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// NOTE: This mojom should be kept in sync with the copy in the Chromium OS
// repo: src/platform2/diagnostics/mojo/network_diagnostics.mojom.

module chromeos.network_diagnostics.mojom;

import "mojo/public/mojom/base/time.mojom";

// Enumeration of the possible network diagnostic routines. See
// NetworkDiagnosticsRoutines interface for more details.
[Extensible]
enum RoutineType {
  kLanConnectivity,
  kSignalStrength,
  kGatewayCanBePinged,
  kHasSecureWiFiConnection,
  kDnsResolverPresent,
  kDnsLatency,
  kDnsResolution,
  kCaptivePortal,
  kHttpFirewall,
  kHttpsFirewall,
  kHttpsLatency,
  kVideoConferencing,
  kArcHttp,
  kArcDnsResolution,
};

// Each routine can result in one of the possible verdicts.
[Extensible]
enum RoutineVerdict {
  // Routine ran successfully and no connectivity problem found.
  kNoProblem,
  // Routine ran successfully and connectivity problem found.
  kProblem,
  // Routine has not been run.
  kNotRun,
};

// Problems related to the LanConnectivity routine.
[Extensible]
enum LanConnectivityProblem {
  kNoLanConnectivity,
};

// Problems related to the SignalStrength routine.
[Extensible]
enum SignalStrengthProblem {
  kWeakSignal,
};

// Problems related to the GatewayCanBePinged routine.
[Extensible]
enum GatewayCanBePingedProblem {
  // All gateways are unreachable, hence cannot be pinged.
  kUnreachableGateway,
  // The default network cannot be pinged.
  kFailedToPingDefaultNetwork,
  // The default network has a latency above the threshold.
  kDefaultNetworkAboveLatencyThreshold,
  // One or more of the non-default networks has failed pings.
  kUnsuccessfulNonDefaultNetworksPings,
  // One or more of the non-default networks has a latency above the threshold.
  kNonDefaultNetworksAboveLatencyThreshold,
};

// Problems related to the HasSecureWiFiConnection routine.
[Extensible]
enum HasSecureWiFiConnectionProblem {
  kSecurityTypeNone,
  kSecurityTypeWep8021x,
  kSecurityTypeWepPsk,
  kUnknownSecurityType,
};

// Problems related to the DnsResolverPresent routine.
[Extensible]
enum DnsResolverPresentProblem {
  kNoNameServersFound,
  kMalformedNameServers,
  kEmptyNameServers,
};

// Problems related to the DnsLatencyProblem routine.
[Extensible]
enum DnsLatencyProblem {
  // The routine was unable to resolve one or more hosts.
  kHostResolutionFailure,
  // Average DNS latency across hosts is slightly above expected threshold
  kSlightlyAboveThreshold,
  // Average DNS latency across hosts is significantly above expected threshold
  kSignificantlyAboveThreshold,
};

// Problems related to the DnsResolution routine.
[Extensible]
enum DnsResolutionProblem {
  // The routine was unable to successfully resolve the test host
  kFailedToResolveHost,
};

// Problems related to the CaptivePortal routine.
[Extensible]
enum CaptivePortalProblem {
  // No active networks found.
  kNoActiveNetworks,
  // The active network is not connected or the portal state is not available.
  kUnknownPortalState,
  // A portal is suspected but no redirect was provided.
  kPortalSuspected,
  // The network is in a portal state with a redirect URL.
  kPortal,
  // A proxy requiring authentication is detected.
  kProxyAuthRequired,
  // The active network is connected but no internet is available and no proxy
  // was detected.
  kNoInternet,
};

// Problems related to the HttpFirewall routine.
[Extensible]
enum HttpFirewallProblem {
  // DNS resolution failures above threshold.
  kDnsResolutionFailuresAboveThreshold,
  // Firewall detected.
  kFirewallDetected,
  // A firewall may potentially exist.
  kPotentialFirewall,
};

// Problems related to the HttpsFirewall routine.
[Extensible]
enum HttpsFirewallProblem {
  // DNS resolution failure rate is high.
  kHighDnsResolutionFailureRate,
  // Firewall detected.
  kFirewallDetected,
  // A firewall may potentially exist.
  kPotentialFirewall,
};

// Problems related to the HttpsLatency routine.
[Extensible]
enum HttpsLatencyProblem {
  // One or more DNS resolutions resulted in a failure.
  kFailedDnsResolutions,
  // One or more HTTPS requests resulted in a failure.
  kFailedHttpsRequests,
  // HTTPS request latency is high.
  kHighLatency,
  // HTTPS request latency is very high.
  kVeryHighLatency,
};

// Problems related to the VideoConferencing routine.
[Extensible]
enum VideoConferencingProblem {
  // Failed requests to a STUN server via UDP.
  kUdpFailure,
  // Failed requests to a STUN server via TCP.
  kTcpFailure,
  // Failed to establish a TLS connection to media hostnames.
  kMediaFailure,
};

// Problems related to the ArcHttp routine.
[Extensible]
enum ArcHttpProblem {
  // Failed to get the ARC Service Manager.
  kFailedToGetArcServiceManager,
  // Failed to get instance of the NetInstance service.
  kFailedToGetNetInstanceForHttpTest,
  // HTTPS request latency is high.
  kHighLatency,
  // HTTPS request latency is very high.
  kVeryHighLatency,
  // One or more HTTP requests resulted in a failure.
  kFailedHttpRequests,
};

// Problems related to the ArcDnsResolution routine.
[Extensible]
enum ArcDnsResolutionProblem {
  // Failed to get the ARC Service Manager.
  kFailedToGetArcServiceManager,
  // Failed to get instance of the NetInstance service.
  kFailedToGetNetInstanceForDnsResolutionTest,
  // DNS query latency is high.
  kHighLatency,
  // DNS query latency is very high.
  kVeryHighLatency,
  // One or more DNS queries resulted in a failure.
  kFailedDnsQueries,
};

// Union of all possible routine problems. See each problem enum definition for
// more details.
union RoutineProblems {
  array<LanConnectivityProblem> lan_connectivity_problems;
  array<SignalStrengthProblem> signal_strength_problems;
  array<GatewayCanBePingedProblem> gateway_can_be_pinged_problems;
  array<HasSecureWiFiConnectionProblem> has_secure_wifi_connection_problems;
  array<DnsResolverPresentProblem> dns_resolver_present_problems;
  array<DnsLatencyProblem> dns_latency_problems;
  array<DnsResolutionProblem> dns_resolution_problems;
  array<CaptivePortalProblem> captive_portal_problems;
  array<HttpFirewallProblem> http_firewall_problems;
  array<HttpsFirewallProblem> https_firewall_problems;
  array<HttpsLatencyProblem> https_latency_problems;
  array<VideoConferencingProblem> video_conferencing_problems;
  array<ArcHttpProblem> arc_http_problems;
  array<ArcDnsResolutionProblem> arc_dns_resolution_problems;
};

// A single routine's result.
struct RoutineResult {
  // The result of the routine.
  RoutineVerdict verdict;
  // The list of detected problems, if any.
  RoutineProblems problems;
  // The timestamp when the routine was completed.
  mojo_base.mojom.Time timestamp;
};

// A map of routine results by routine type.
struct RoutineResults {
  map<RoutineType, RoutineResult> results;
};

// This interface is to be used by any clients that need to run specific
// network-related diagnostics. Expected clients of this interface are
// NetworkHealth, cros_healthd, and a connectivity diagnostics Web UI (to name
// a few). The bound implementation is intended to live in the browser process.
interface NetworkDiagnosticsRoutines {
  // DEPRECATED: See RunLanConnectivity
  LanConnectivity() => (RoutineVerdict verdict);

  // DEPRECATED: See RunSignalStrength
  SignalStrength() => (RoutineVerdict verdict,
      array<SignalStrengthProblem> problems);

  // DEPRECATED: See RunGatewayCanBePinged
  GatewayCanBePinged() => (RoutineVerdict verdict,
      array<GatewayCanBePingedProblem> problems);

  // DEPRECATED: See RunHasSecureWiFiConnection
  HasSecureWiFiConnection() => (RoutineVerdict verdict,
      array<HasSecureWiFiConnectionProblem> problems);

  // DEPRECATED: See RunDnsResolverPresent
  DnsResolverPresent() => (RoutineVerdict verdict,
      array<DnsResolverPresentProblem> problems);

  // DEPRECATED: See RunDnsLatency
  DnsLatency() => (RoutineVerdict verdict,
      array<DnsLatencyProblem> problem);

  // DEPRECATED: See RunDnsResolution
  DnsResolution() => (RoutineVerdict verdict,
      array<DnsResolutionProblem> problems);

  // DEPRECATED: See RunCaptivePortal
  CaptivePortal() => (RoutineVerdict verdict,
      array<CaptivePortalProblem> problems);

  // DEPRECATED: See RunHttpFirewall
  HttpFirewall() => (RoutineVerdict verdict,
      array<HttpFirewallProblem> problems);

  // DEPRECATED: See RunHttpsFirewall
  HttpsFirewall() => (RoutineVerdict verdict,
      array<HttpsFirewallProblem> problems);

  // DEPRECATED: See RunHttpsLatency
  HttpsLatency() => (RoutineVerdict verdict,
      array<HttpsLatencyProblem> problems);

  // DEPRECATED: See RunVideoConferencing
  VideoConferencing(string? stun_server_hostname) => (RoutineVerdict verdict,
      array<VideoConferencingProblem> problems, string? support_details);

  // Tests whether the device is connected to a LAN. It is possible that the
  // device may be trapped in a captive portal yet pass this test successfully.
  // Captive portal checks are done separately and are outside of the scope of
  // this routine. See CaptivePortal() below.
  RunLanConnectivity() => (RoutineResult result);

  // Tests whether there is an acceptable signal strength on wireless networks.
  RunSignalStrength() => (RoutineResult result);

  // Tests whether the gateway of connected networks is pingable.
  RunGatewayCanBePinged() => (RoutineResult result);

  // Tests whether the WiFi connection is secure. Note that if WiFi is not
  // connected, the routine will result in a |kNotRun| verdict.
  RunHasSecureWiFiConnection() => (RoutineResult result);

  // Tests whether a DNS resolver is available to the browser.
  RunDnsResolverPresent() => (RoutineResult result);

  // Tests whether the DNS latency is below an acceptable threshold.
  RunDnsLatency() => (RoutineResult result);

  // Tests whether a DNS resolution can be completed successfully.
  RunDnsResolution() => (RoutineResult result);

  // Tests whether the internet connection is behind a captive portal.
  RunCaptivePortal() => (RoutineResult result);

  // Tests whether a firewall is blocking HTTP port 80.
  RunHttpFirewall() => (RoutineResult result);

  // Tests whether a firewall is blocking HTTPS port 443.
  RunHttpsFirewall() => (RoutineResult result);

  // Tests whether the HTTPS latency is within established tolerance levels for
  // the system.
  RunHttpsLatency() => (RoutineResult result);

  // Tests the device's video conferencing capabilities by testing whether the
  // device can:
  // (1) Contact either a default or specified STUN server via UDP.
  // (2) Contact either a default or specified STUN server via TCP.
  // (3) Reach common media endpoints.
  RunVideoConferencing(string? stun_server_hostname) => (RoutineResult result);

  // Tests whether ARC can make successful HTTP GET requests to the resources
  // needed during the ARC Provisioning step.
  RunArcHttp() => (RoutineResult result);

  // Tests whether ARC can make successful DNS queries to the hostnames
  // needed during the ARC Provisioning step.
  RunArcDnsResolution() => (RoutineResult result);

  // Returns the most recent result for the specified routine type, if it has
  // been run.
  GetResult(RoutineType routine) => (RoutineResult? result);

  // Returns a map of all previously run routine types and their most recent
  // result.
  GetAllResults() => (map<RoutineType, RoutineResult> results);
};
