// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module chromeos.ime.mojom;

import "mojo/public/mojom/base/file_path.mojom";
import "url/mojom/url.mojom";

// IME on ChromeOS consists of three parts:
// - The IME running in an extension to provide a soft keyboard
// - The sandboxed, core IME service running in ChromeOS (responsible for
//   processing input and turning it into characters/symbols)
// - The IME framework running in the Chrome browser process, that brokers
//   between the IME extension and the IME service. It also provides additional
//   functionality to the IME service (for downloading IME data as needed).

// Method of an operation to apply to a text field.
enum OperationMethodForRulebased {
  COMMIT_TEXT = 0,
  SET_COMPOSITION = 1,
};

// Operation to apply to a text field, in response to a Keypress.
struct OperationForRulebased {
  // The operation we wish to apply to the text field.
  OperationMethodForRulebased method;

  // Additional arguments of the method to apply to the text field.
  string arguments;
};

// KeypressResponse represents the Rulebased engine response to a keypress.
struct KeypressResponseForRulebased {
  // result indicates if the function call was successful
  // There must be a valid engine and the keypress must be valid for
  // this to be the case.
  bool result;

  // An array of operations to apply to the text field in respoonse to
  // the Keypress.
  array<OperationForRulebased> operations;
};

// Information about a specific keypress.
struct KeypressInfoForRulebased {
  // Keypress Type (Eg; "keydown", "keyup", etc).
  string type;

  // Keypress key code (eg; "KeyA", "KeyB", "Enter", etc ).
  string code;

  // Booleans to indicate if an option key is active / pressed down.
  bool shift;
  bool altgr;
  bool caps;
  bool ctrl = false; // DEPRECATED
  bool alt = false; // DEPRECATED
};

// Manages access to a set of IME engines, implemented by the IME service
// itself. The IME framework in the browser process is responsible for brokering
// the connection between the IME service and the IME extension, but does not
// otherwise participate.
interface InputEngineManager {
  // Sets up the connection by binding the |to_engine_request| to the input
  // engine identified by the |ime_spec|. The |extra| is an optional serialized
  // protobuf data for setting up the IME engine. On success, return |success|
  // as true, and the input data can be sent to the engine by the channel using
  // the interface of |to_engine_request|. The channel interface |from_engine|
  // is implmented on the client and used to receive data sent from the engine.
  // On failure (e.g. input engine is not found), |success| is false.
  ConnectToImeEngine(string ime_spec,
                     pending_receiver<InputChannel> to_engine_request,
                     pending_remote<InputChannel> from_engine,
                     array<uint8> extra)
                     => (bool success);
};

// A message channel is a paired message sender and receiver. It provides the
// communication channel between the IME extension process and the core IME
// service in ChromeOS.
// In order to encapsulate all the communication, (e.g. access to some
// closed-sourced input engine with decoders), implement the method that takes
// a serialized protobuf message (instead of a plaintext) as its argument.
interface InputChannel {
  // Returns a serialized protobuf result after processing a serialized
  // protobuf message.
  ProcessMessage(array<uint8> message) => (array<uint8> result);

  // Process a KeypressInfoForRulebased mojo object and return a
  // KeypressResponseForRulebased object with a list of operations to be
  // handled by the caller's callback (for rulebased logic).
  ProcessKeypressForRulebased(KeypressInfoForRulebased message)
                              => (KeypressResponseForRulebased result);

  // Resets the engine for rulebased logic.
  ResetForRulebased();

  // Gets the keypress count for rulebased logic.
  GetRulebasedKeypressCountForTesting() => (int32 count);
};

// Implemented in the browser process, used to perform network requests or
// access privileged resources on behalf of the core IME service in ChromeOS.
interface PlatformAccessProvider {
  // Download language module from a whitelisted url to a given path.
  // Provider will validate the url and return an empty file path if it's
  // invalid or downloading fails.
  DownloadImeFileTo(url.mojom.Url url,
                    mojo_base.mojom.FilePath file_path) =>
                        (mojo_base.mojom.FilePath file_path);
};

// The main interface to the IME service.
interface ImeService {
  // Injects a remote PlatformAccessProvider interface that the service can use
  // to request privileged operations from the client (i.e. the browser).
  SetPlatformAccessProvider(pending_remote<PlatformAccessProvider> provider);

  // Binds an InputEngineManager interface.
  BindInputEngineManager(pending_receiver<InputEngineManager> receiver);
};
