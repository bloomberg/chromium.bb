// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module chromeos.ime.mojom;

import "mojo/public/mojom/base/file_path.mojom";
import "url/mojom/url.mojom";
import "ui/gfx/range/mojom/range.mojom";

// IME on ChromeOS consists of three parts:
// - The IME running in an extension to provide a soft keyboard
// - The sandboxed, core IME service running in ChromeOS (responsible for
//   processing input and turning it into characters/symbols)
// - The IME framework running in the Chrome browser process, that brokers
//   between the IME extension and the IME service. It also provides additional
//   functionality to the IME service (for downloading IME data as needed).

// Method of an operation to apply to a text field.
enum OperationMethodForRulebased {
  COMMIT_TEXT = 0,
  SET_COMPOSITION = 1,
};

// Operation to apply to a text field, in response to a Keypress.
struct OperationForRulebased {
  // The operation we wish to apply to the text field.
  OperationMethodForRulebased method;

  // Additional arguments of the method to apply to the text field.
  string arguments;
};

// KeypressResponse represents the Rulebased engine response to a keypress.
struct KeypressResponseForRulebased {
  // result indicates if the function call was successful
  // There must be a valid engine and the keypress must be valid for
  // this to be the case.
  bool result;

  // An array of operations to apply to the text field in respoonse to
  // the Keypress.
  array<OperationForRulebased> operations;
};

enum KeyEventType {
  kKeyDown = 0,
  kKeyUp = 1,
};

// Whether modifier keys are held down or not.
// Modifier keys are specified by:
// https://www.w3.org/TR/uievents-key/#keys-modifier
struct ModifierState {
  bool alt;
  bool alt_graph;
  bool caps_lock;
  bool control;
  bool meta;
  bool shift;
};

// Information about a physical key event.
struct PhysicalKeyEvent {
  // Whether this is a key down or key up event.
  KeyEventType type;

  // The physical key event code, as specified by:
  // https://www.w3.org/TR/uievents/#dom-keyboardevent-code
  //
  // A full list of valid key codes can be found in:
  // https://www.w3.org/TR/uievents-code/
  string code;

  // A string corresponding to the character the user typed, or a special
  // value for special keys (e.g. Shift), as specified by:
  // https://www.w3.org/TR/uievents/#dom-keyboardevent-key
  //
  // If this information is not available, it is set to "Unidentifed":
  // https://www.w3.org/TR/uievents-key/#key-Unidentified
  string key;

  ModifierState modifier_state;
};

// Represents a directional text selection range.
// |anchor| is the index of where the selection began and |focus| is where the
// selection ended. The |anchor| can be before |focus| or vice versa depending
// on the direction the selection is in.
// See https://developer.mozilla.org/en-US/docs/Web/API/Selection
struct SelectionRange {
   uint32 anchor;
   uint32 focus;
};

// Type of input field.
// Based off ui::TextInputType in ui/base/ime/text_input_type.h.
enum InputFieldType {
  // Does not support IME editing. IMEs should only send physical key events,
  // and not perform complex operations such as composition.
  kNoIME = 0,
  // Supports general text input.
  kText = 1,
  kSearch = 2,
  kTelephone = 3,
  kURL = 4,
  kEmail = 5,
  kNumber = 6,
  // Input represents a password. IMEs should ensure the password is not stored
  // without the user's permission.
  kPassword = 7,
};

enum AutocorrectMode {
  // The IME must not perform autocorrect.
  kDisabled = 0,
  // The IME may perform autocorrect as the user is typing.
  kEnabled = 1,
};

enum PersonalizationMode {
  // The IME should not use anything from the input field to update any
  // personalized data (e.g. to improve suggestions quality). Personalization
  // may be disabled if the content is privacy-sensitive (e.g. incognito mode in
  // Chrome browser), or if using personalization does not make sense (e.g.
  // playing a typing game may pollute the IME dictionary with uncommon words).
  kDisabled = 0,
  // The IME may use the input field contents for personalization.
  kEnabled = 1,
};

struct InputFieldInfo {
  InputFieldType type;
  AutocorrectMode autocorrect;
  PersonalizationMode personalization;
};

enum CommitTextCursorBehavior {
  kMoveCursorAfterText = 0,
  kMoveCursorBeforeText = 1,
};

struct AutocorrectSpan {
  // The range to set the autocorrect span to, currently having `current_text`.
  gfx.mojom.Range autocorrect_range;

  // The original text that was replaced by autocorrect.
  string original_text;

  // The current text that replaced `original_text` and is now located at
  // `autocorrect_range` in the text field.
  // NOTE: Technically redundant to require client to supply `current_text` as
  // it can be retrieved from current text editing state known to IMF. However,
  // due to async situation between browser-process IMF and render-process
  // TextInputClient, it may just be a stale value if obtained that way.
  // TODO(crbug/1194424): Remove technically redundant `current_text` param to
  // avoid situation with multiple conflicting sources of truth.
  string current_text;
};

// Proposed candidate for completing some text.
struct CompletionCandidate {
  // The candidate text
  string text;

  // Normalized confidence scoring for the candidate
  float normalized_score;
};

enum SuggestionType {
  // A completion suggestion is text that completes an incomplete word. For
  // example, the text "hello wor" may have a completion candidate like the
  // following "hello world".
  kCompletion = 0,

  // A prediction suggestion is text that we predict may come after some other
  // text that contains completed words. For example, the text "hello " may
  // produce a prediction suggestion such as "hello world".
  kPrediction = 1,
};

// Single request to generate suggestion candidates from the given context.
struct SuggestionsRequest {
  // The type of suggestions that should be generated.
  SuggestionType suggestion_type;

  // The preceding text used to produced the suggestions.
  string text;

  // Optional: any candidates generated to complete the current text.
  array<CompletionCandidate> completion_candidates;
};

// A suggestion candidate containing multiple predicted words.
struct MultiWordSuggestionCandidate {
  // The words predicted.
  string text;

  // The normalized confidence scoring for the prediction.
  float normalized_score;
};

// Represents a single generated suggestion candidate.
union SuggestionCandidate {
  // A suggestion candidate that contains multiple words.
  MultiWordSuggestionCandidate multi_word;
};

// Encapsulates the results of a suggestions request.
struct SuggestionsResponse {
  // A list of suggestion candidates generated.
  array<SuggestionCandidate> candidates;
};

// Manages access to a set of IME engines, implemented by the IME service
// itself. The IME framework in the browser process is responsible for brokering
// the connection between the IME service and the IME extension, but does not
// otherwise participate.
interface InputEngineManager {
  // Sets up the connection by binding the |to_engine_request| to the input
  // engine identified by the |ime_spec|. The |extra| is an optional serialized
  // protobuf data for setting up the IME engine. On success, return |success|
  // as true, and the input data can be sent to the engine by the channel using
  // the interface of |to_engine_request|. The channel interface |from_engine|
  // is implmented on the client and used to receive data sent from the engine.
  // On failure (e.g. input engine is not found), |success| is false.
  ConnectToImeEngine(string ime_spec,
                     pending_receiver<InputChannel> to_engine_request,
                     pending_remote<InputChannel> from_engine,
                     array<uint8> extra)
                     => (bool success);
};

// A message channel is a paired message sender and receiver. It provides the
// communication channel between the IME extension process and the core IME
// service in ChromeOS.
// In order to encapsulate all the communication, (e.g. access to some
// closed-sourced input engine with decoders), implement the method that takes
// a serialized protobuf message (instead of a plaintext) as its argument.
//
// Note that only closed source proto messages are allowed to be sent via
// the ProcessMessage() method. All other proto messages must be mirrored with
// a respective mojom method here in this interface for security (see
// chromeos/services/ime/decoder/system_engine.cc for an example of mirroring).
// TODO(crbug/1194372): Investigate using libmojo within ime shared lib.
//
// TODO(crbug.com/1145326): Split this into two separate APIs for the sending or
// receiving end.
interface InputChannel {
  // Returns a serialized protobuf result after processing a serialized
  // protobuf message.
  ProcessMessage(array<uint8> message) => (array<uint8> result);

  // Called when the input method changes.
  // |engine_id| is the unique identifier for the input method, as specified in:
  // chrome/browser/resources/chromeos/input_method/google_xkb_manifest.json
  OnInputMethodChanged(string engine_id);

  // Called when there's a new focused input field.
  OnFocus(InputFieldInfo input_field_info);

  // Called when the input field loses focus.
  OnBlur();

  // Process a PhysicalKeyEvent for non-rule-based engines.
  OnKeyEvent(PhysicalKeyEvent event) => (bool consumed);

  // Informs the IME that the surrounding text has changed.
  // |text| is the text around the current text cursor position, including any
  // composition text. To improve efficiency, |text| may not contain all the
  // text that is in the current input field, but it's guaranteed to contain at
  // least the text within the text selection.
  // |offset| is the index of |text| relative to the full input field. If set to
  // 0, then |text| represents the full contents of the input field.
  // |selection_range| is relative to |text|.
  OnSurroundingTextChanged(string text,
                           uint32 offset,
                           SelectionRange selection_range);

  // Informs the IME that composition was canceled by the system. This can
  // for example happen if the user presses the Escape key.
  OnCompositionCanceled();

  // Process a PhysicalKeyEvent using the rule-based engine and return a
  // KeypressResponseForRulebased object with a list of operations to be handled
  // by the caller.
  ProcessKeypressForRulebased(PhysicalKeyEvent event)
                              => (KeypressResponseForRulebased result);

  // Resets the engine for rulebased logic.
  ResetForRulebased();

  // Gets the keypress count for rulebased logic.
  GetRulebasedKeypressCountForTesting() => (int32 count);

  // Asks the input field to commit `text`. If there is a composition, then that
  // composition is removed and `text` is inserted. Otherwise, `text` is
  // inserted at the current cursor position, deleting any text in the current
  // selection if any. In both cases, the cursor moves to the end of `text`.
  CommitText(string text, CommitTextCursorBehavior cursor_behavior);

  // Asks the input field to set composition with `text`. Replaces the current
  // composition if there is one. Otherwise, start a composition at the current
  // cursor position, deleting any text in the current selection if any.
  // The cursor is moved to the end of |text|.
  SetComposition(string text);

  // Asks the input field to mark the range of text spanned by
  // `start_byte_index` and `end_byte_index` as the current composition,
  // where index 0 indicates the beginning of the input field contents.
  // If there was already a composition, then that composition is committed
  // first, as if FinishComposition was called.
  // The order of `start_byte_index` and `end_byte_index` does not matter.
  // If both `start_byte_index` and `end_byte_index` are the same, then this i
  // the same as calling `FinishComposition`.
  // The composition range does not have to overlap with the cursor selection.
  // The cursor position remains unchanged.
  SetCompositionRange(uint32 start_byte_index, uint32 end_byte_index);

  // Asks the input field to commit the current composition text. If there is
  // composition, this is equivalent to calling `CommitText` with the
  // composition text. If there is no current composition then this is a no-op.
  // The cursor position remains unchanged.
  FinishComposition();

  // Asks the input field to delete text around the cursor.
  // This operation fails if there is currently a composition.
  // TODO(b/161490915): Determine the right behaviour when there is a selection.
  DeleteSurroundingText(uint32 num_bytes_before_cursor,
                        uint32 num_bytes_after_cursor);

  // Asks the input field to mark the region represented by `autocorrect_span`
  // as having been autocorrected. This usually involves showing some UI
  // (e.g. flashing the text or showing an underline).
  // There can only be at most one active autocorrect span. If this method is
  // called when there is already an active autocorrect span, any UI related to
  // the old span is removed first.
  // This method does not modify the input field text.
  HandleAutocorrect(AutocorrectSpan autocorrect_span);
};

// Implemented in the browser process, used to perform network requests or
// access privileged resources on behalf of the core IME service in ChromeOS.
interface PlatformAccessProvider {
  // Download language module from a allowlisted url to a given path.
  // Provider will validate the url and return an empty file path if it's
  // invalid or downloading fails.
  DownloadImeFileTo(url.mojom.Url url,
                    mojo_base.mojom.FilePath file_path) =>
                        (mojo_base.mojom.FilePath file_path);
};

// The main interface to the IME service.
interface ImeService {
  // Injects a remote PlatformAccessProvider interface that the service can use
  // to request privileged operations from the client (i.e. the browser).
  SetPlatformAccessProvider(pending_remote<PlatformAccessProvider> provider);

  // Binds an InputEngineManager interface.
  BindInputEngineManager(pending_receiver<InputEngineManager> receiver);
};
