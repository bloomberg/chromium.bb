// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module chromeos.assistant.mojom;

import "ash/public/mojom/assistant_controller.mojom";
import "ash/public/mojom/assistant_volume_control.mojom";
import "ash/public/mojom/assistant_state_controller.mojom";
import "chromeos/services/assistant/public/mojom/assistant_audio_decoder.mojom";
import "chromeos/services/assistant/public/mojom/assistant_notification.mojom";
import "chromeos/services/assistant/public/mojom/settings.mojom";
import "chromeos/services/network_config/public/mojom/cros_network_config.mojom";
import "mojo/public/mojom/base/string16.mojom";
import "mojo/public/mojom/base/time.mojom";
import "services/audio/public/mojom/stream_factory.mojom";
import "services/device/public/mojom/battery_monitor.mojom";
import "services/device/public/mojom/wake_lock_provider.mojom";
import "services/identity/public/mojom/identity_accessor.mojom";
import "services/media_session/public/mojom/audio_focus.mojom";
import "services/media_session/public/mojom/media_controller.mojom";
import "services/preferences/public/mojom/preferences.mojom";
import "ui/accessibility/mojom/ax_assistant_structure.mojom";
import "ui/gfx/geometry/mojom/geometry.mojom";
import "url/mojom/url.mojom";

// Main interface to the Assistant service.
interface AssistantService {
  // Initiates assistant and provides interfaces for assistant to call into the
  // browser.
  Init(Client assistant_client_interface,
       DeviceActions device_actions_interface,
       bool is_test);

  // Binds the main assistant backend interface.
  BindAssistant(pending_receiver<Assistant> receiver);

  // Binds an interface to control assistant settings.
  BindSettingsManager(pending_receiver<AssistantSettingsManager> receiver);
};

// Interface whose implementation is owned by Shell in Ash. This is used
// primarily to provide Ash with an interface to the Assistant service.
interface AssistantController {
  // Provides a reference to the underlying |assistant| service.
  SetAssistant(pending_remote<Assistant> assistant);

  // Show speaker id enrollment flow.
  StartSpeakerIdEnrollmentFlow();

  // Send Assistant feedback to Assistant server. If |pii_allowed| is
  // true then the user gives permission to attach Assistant debug info.
  // |feedback_description| is user's feedback input.
  SendAssistantFeedback(
    bool pii_allowed,
    string feedback_description,
    string screenshot_png);
};

// Interface to communicate with assistant backend.
interface Assistant {
  // Starts a cached screen context interaction. Results related to the screen
  // context will be returned through the |AssistantInteractionSubscriber|
  // interface to registered subscribers. It is illegal to call this method
  // without having first cached screen context (see CacheScreenContext()).
  StartCachedScreenContextInteraction();

  // Starts an interaction to edit the reminder uniquely identified by
  // |client_id|. In response to the request, LibAssistant will initiate
  // a user facing interaction with the context pre-populated with details
  // to edit the specified reminder.
  StartEditReminderInteraction(string client_id);

  // Starts a metalayer interaction for the selected screen |region|. Results
  // related to the selected region will be returned through the
  // |AssistantInteractionSubscriber| interface to registered subscribers.
  StartMetalayerInteraction(gfx.mojom.Rect region);

  // Starts a new Assistant text interaction. If |allow_tts| is true, the
  // result will contain TTS. Otherwise TTS will not be present in the
  // generated server response. Results will be returned through registered
  // |AssistantInteractionSubscriber|.
  StartTextInteraction(string query, bool allow_tts);

  // Starts a new Assistant voice interaction.
  StartVoiceInteraction();

  // Starts a warmer welcome interaction for Assistant launch.
  // |num_warmer_welcome_triggered| is the count of warmer welcomes
  // already triggered. If |allow_tts| is true, the result may contain TTS.
  // Otherwise TTS will not be present in the generated server response.
  StartWarmerWelcomeInteraction(int32 num_warmer_welcome_triggered,
      bool allow_tts);

  // Stops the active Assistant interaction and cancel the conversation if
  // |cancel_conversation|. If there is no active interaction, this method
  // is a no-op.
  StopActiveInteraction(bool cancel_conversation);

  // Registers assistant interaction event subscriber. Subscribers'
  // implementation is responsible for selecting events of interest.
  AddAssistantInteractionSubscriber(AssistantInteractionSubscriber subscriber);

  // Retrieves a notification. A voiceless interaction will be sent to server to
  // retrieve the notification of |action_index|, which can trigger other
  // Assistant events such as OnTextResponse to show the result in the UI. The
  // retrieved notification will be removed from the UI.
  // |action_index| is the index of the tapped action. The main UI in the
  // notification contains the top level action, which index is 0. The buttons
  // have the additional actions, which are indexed starting from 1.
  RetrieveNotification(AssistantNotification notification, int32 action_index);

  // Dismisses a notification.
  DismissNotification(AssistantNotification notification);

  // Caches screen context, made up of view hierarchy and screenshot data.
  // Screen context is used to provide additional context alongside text and
  // voice queries, and may also be used in standalone screen context
  // interactions (see StartCachedScreenContextInteraction()).
  CacheScreenContext() => ();

  // Clears the screen context cached by calling CacheScreenContext().
  ClearScreenContextCache();

  // Invoked when accessibility status is changed. Note that though
  // accessibility status has changed, |spoken_feedback_enabled| may not have.
  OnAccessibilityStatusChanged(bool spoken_feedback_enabled);

  // Send Assistant feedback to Assistant server.
  SendAssistantFeedback(AssistantFeedback feedback);

  // ===== Alarm/Timer management methods =====
  // Stops timer or alarm ringing.
  StopAlarmTimerRinging();

  // Create timer with |duration|.
  CreateTimer(mojo_base.mojom.TimeDelta duration);
};

// Describes an Assistant interaction.
struct AssistantInteractionMetadata {
  AssistantInteractionType type;
  string query;
};

// Enumeration of possible Assistant interaction types.
enum AssistantInteractionType {
  kText,
  kVoice,
};

// Subscribes to Assistant's interaction event. These events are server driven
// in response to the user's direct interaction with the assistant. Responses
// from the assistant may contain untrusted third-party content. Subscriber
// implementations must be sure to handle the response data appropriately.
interface AssistantInteractionSubscriber {
  // Assistant interaction has started.
  OnInteractionStarted(AssistantInteractionMetadata metadata);

  // Assistant interaction has ended with the specified |resolution|.
  OnInteractionFinished(AssistantInteractionResolution resolution);

  // Assistant got Html response with fallback text from server.
  OnHtmlResponse(string response, string fallback);

  // Assistant got suggestions response from server.
  OnSuggestionsResponse(array<AssistantSuggestion> response);

  // Assistant got text response from server.
  OnTextResponse(string response);

  // Assistant got open URL response from server. |in_background| refers to
  // being in background of Assistant UI, not in background of browser.
  OnOpenUrlResponse(url.mojom.Url url, bool in_background);

  // Assistant speech recognition has started.
  OnSpeechRecognitionStarted();

  // Assistant speech recognition intermediate result is available.
  OnSpeechRecognitionIntermediateResult(string high_confidence_text,
                                        string low_confidence_text);

  // Assistant speech recognition detected end of utterance.
  OnSpeechRecognitionEndOfUtterance();

  // Assistant speech recognition final result is available.
  OnSpeechRecognitionFinalResult(string final_result);

  // Assistant got an instantaneous speech level update in dB.
  OnSpeechLevelUpdated(float speech_level);

  // Assistant has started speaking. When TTS is started due to an error that
  // occurred during the interaction, |due_to_error| is true.
  OnTtsStarted(bool due_to_error);

  // Assistant has started waiting. This occur during execution of a routine to
  // give the user time to digest a response before continuing execution.
  OnWaitStarted();
};

// Interface for assistant to call into client.
interface Client {
  // Notifies assistant client that assistant running status has changed.
  OnAssistantStatusChanged(bool running);

  // Request context of current window from browser.
  RequestAssistantStructure() => (
    ax.mojom.AssistantExtra? extra,
    ax.mojom.AssistantTree? structure);

  // Requests an AssistantController implementation from Ash, via the browser.
  RequestAssistantController(pending_receiver<AssistantController> receiver);

  // Requests Ash's AssistantAlarmTimerController interface from the browser.
  RequestAssistantAlarmTimerController(
      pending_receiver<ash.mojom.AssistantAlarmTimerController> receiver);

  // Requests Ash's AssistantNotificationController interface from the browser.
  RequestAssistantNotificationController(
      pending_receiver<ash.mojom.AssistantNotificationController> receiver);

  // Requests Ash's AssistantScreenContextController interface from the browser.
  RequestAssistantScreenContextController(
      pending_receiver<ash.mojom.AssistantScreenContextController> receiver);

  // Requests Ash's AssistantVolumeControl interface from the browser.
  RequestAssistantVolumeControl(
      pending_receiver<ash.mojom.AssistantVolumeControl> receiver);

  // Requests Ash's AssistantStateController interface from the browser.
  RequestAssistantStateController(
      pending_receiver<ash.mojom.AssistantStateController> receiver);

  // Requests a PrefStoreConnector from the browser.
  RequestPrefStoreConnector(
      pending_receiver<prefs.mojom.PrefStoreConnector> receiver);

  // Requests a BatteryMonitor from the browser.
  RequestBatteryMonitor(pending_receiver<device.mojom.BatteryMonitor> receiver);

  // Requests a connection to the Device service's WakeLockProvider interface
  // from the browser.
  RequestWakeLockProvider(
      pending_receiver<device.mojom.WakeLockProvider> receiver);

  // Requests an Audio Service StreamFactory from the browser.
  RequestAudioStreamFactory(
      pending_receiver<audio.mojom.StreamFactory> receiver);

  // Requests an audio decoder interface from the Assistant Audio Decoder
  // service, via the browser.
  RequestAudioDecoderFactory(
      pending_receiver<AssistantAudioDecoderFactory> receiver);

  // Requests an IdentityAccessor from the browser for a signed-in user.
  RequestIdentityAccessor(
      pending_receiver<identity.mojom.IdentityAccessor> receiver);

  // Requests a connection to the Media Session service's AudioFocusManager from
  // the browser.
  RequestAudioFocusManager(
      pending_receiver<media_session.mojom.AudioFocusManager> receiver);

  // Requests a connection to the Media Session service's MediaControllerManager
  // interface from the browser.
  RequestMediaControllerManager(
      pending_receiver<media_session.mojom.MediaControllerManager> receiver);

  // Requests a connection to the CrosNetworkConfig service interface via the
  // browser.
  RequestNetworkConfig(
      pending_receiver<chromeos.network_config.mojom.CrosNetworkConfig>
          receiver);
};

// Interface for assistant to call into browser to perform device actions.
interface DeviceActions {
  // Enables or disables WiFi.
  SetWifiEnabled(bool enabled);

  // Enables or disables Bluetooth.
  SetBluetoothEnabled(bool enabled);

  // Gets the current screen brightness level (0-1.0).
  // The level is set to 0 in the event of an error.
  GetScreenBrightnessLevel() => (bool success, double level);

  // Sets the screen brightness level (0-1.0).  If |gradual| is true, the
  // transition will be animated.
  SetScreenBrightnessLevel(double level, bool gradual);

  // Enables or disables Night Light.
  SetNightLightEnabled(bool enabled);

  // Open the Android app if the app is available.
  OpenAndroidApp(AndroidAppInfo app_info) => (bool app_opened);

  // Verify the status of the Android apps.
  VerifyAndroidApp(array<AndroidAppInfo> apps_info) => (array<AndroidAppInfo>
                                                        apps_info);

  // Launch Android intent. The intent is encoded as a URI string.
  // See Intent.toUri().
  LaunchAndroidIntent(string intent);

  // Register App list event subscriber.
  AddAppListEventSubscriber(AppListEventSubscriber subscriber);
};

// Subscribes to App list events.
interface AppListEventSubscriber {
  // Called when the android app list changed.
  OnAndroidAppListRefreshed(array<AndroidAppInfo> apps_info);
};

// Enumeration of possible completions for an Assistant interaction.
enum AssistantInteractionResolution {
  // Assistant interaction completed normally.
  kNormal,
  // Assistant interaction completed due to barge in or cancellation.
  kInterruption,
  // Assistant interaction completed due to error.
  kError,
  // Assistant interaction completed due to mic timeout.
  kMicTimeout,
  // Assistant interaction completed due to multi-device hotword loss.
  kMultiDeviceHotwordLoss,
};

// Models an Assistant suggestion.
struct AssistantSuggestion {
  // Display text. e.g. "Cancel".
  string text;
  // Optional URL for icon. e.g. "https://www.gstatic.com/icon.png".
  url.mojom.Url icon_url;
  // Optional URL for action. e.g.
  // "https://www.google.com/search?query=action".
  url.mojom.Url action_url;
};

// Models status of an app.
enum AppStatus { UNKNOWN, AVAILABLE, UNAVAILABLE, VERSION_MISMATCH, DISABLED };

// Models an Android app.
struct AndroidAppInfo {
  // Unique name to identify a specific app.
  string package_name;

  // Version number of the app.
  int32 version;

  // Localized app name.
  string localized_app_name;

  // Intent data to operate on.
  string intent;

  // Status of the app.
  AppStatus status;

  // The general action to be performed, such as ACTION_VIEW, ACTION_MAIN, etc.
  string action;
};

//  Details for Assistant feedback.
struct AssistantFeedback {
  // User input to be sent with the feedback report.
  string description;

  // Whether user consent to send debug info.
  bool assistant_debug_info_allowed;

  // Screenshot if allowed by user.
  // Raw data (non-encoded binary octets)
  string screenshot_png;
};
