// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module chromeos.cellular_setup.mojom;

import "mojo/public/mojom/base/string16.mojom";

// Represents the current state of an ESimProfile
enum ProfileState {
  kPending,     // Profile is not installed on the device.
  kInstalling,  // Profile is being installed.
  kInactive,    // Profile is installed but inactive.
  kActive,      // Profile is installed and active.
};

// Represents an EUICC (Embedded Universal Integrated Circuit Card) hardware
// available on the device. Each Euicc may have multiple ESimProfiles
// installed on it.
struct Euicc {
  // A 32 digit unique id for the Euicc.
  string eid;
  // Boolean indicating whether the Euicc is active or not.
  bool is_active;
};

// Represents an eSIM profile.
struct ESimProfile {
  // EID of the Euicc in which this profile is installed or available for
  // installation.
  string eid;
  // A 19-20 character long numeric id that uniquely identifies this profile.
  string iccid;
  // Service provider’s name for this profile. e.g. “Verizon Plan 1”
  mojo_base.mojom.String16 name;
  // A user configurable nickname for this profile. e.g. “My Personal SIM”
  mojo_base.mojom.String16 nickname;
  // Name of the service provider. e.g. “Verizon Wireless”
  mojo_base.mojom.String16 service_provider;
  // State of the profile
  ProfileState state;
  // An alphanumeric code that can be used to install this profile.
  string activation_code;
};

// ESimManagerObserver is implemented by any module that
// needs to observe changes to the eSIM module.
interface ESimManagerObserver {
  // Called when a new Euicc is added or removed from the system.
  OnAvailableEuiccListChanged();

  // Called when a new eSIM profile is added or removed to the
  // Euicc with the given |eid|.
  OnProfileListChanged(string eid);

  // Called when an Euicc object's active state changes.
  OnEuiccChanged(Euicc euicc);

  // Called when an eSIM profile’s state or nickname changes.
  OnProfileChanged(ESimProfile profile);
};

// ESimManager interface provides eSIM profile management methods. An instance
// of this interface is owned in the browser process in Ash. It will be
// accessed from WebUI or System UI code in the browser process.
interface ESimManager {
    // Result codes for profile installation.
    enum ProfileInstallResult {
       kSuccess,                     // Installation succeeded.
       kFailure,                     // Installation failed.
       kErrorNeedsConfirmationCode,  // Installation requires a valid
                                     // confirmation code.
       kErrorInvalidActivationCode,  // Given activation code is invalid.
    };

    // Result code for ESimManager methods.
    enum ESimOperationResult {
       kSuccess,                     // Operation succeeded.
       kFailure                      // Operation failed.
    };

    // Adds an observer for eSIM changes.
    AddObserver(pending_remote<ESimManagerObserver> observer);

    // Returns a list of Euiccs available on the device.
    GetAvailableEuiccs() => (array<Euicc> euiccs);

    // Returns a list of all profiles installed or pending on the Euicc
    // with given |eid|. An empty list could be returned if there are
    // no installed or pending profiles on the Euicc.
    GetProfiles(string eid) => (array<ESimProfile>? profiles);

    // Starts a request for pending profiles for the Euicc with given |eid|
    // from SMDS. Returns a status indicating result of the operation. This
    // method updates the pending profiles list before succeeding. This method
    // is used to allow the user to explicit trigger a request to check for
    // new profiles that may have been pushed to SMDS.
    RequestPendingProfiles(string eid) => (ESimOperationResult result);

    // Installs a profile with given |activation_code| on the Euicc with
    // given |eid| and returns the ESimProfile that was just installed. A
    // non-success result code is returned in case of errors. |activation_code|
    // may be obtained from ESimProfiles retrieved with a previous call to
    // GetPendingProfiles or directly from the user through a QR code. If
    // |confirmation_code| is required but not supplied or if it’s invalid
    // then a kErrorNeedsConfirmationCode result is returned.
    InstallProfileFromActivationCode(string eid, string activation_code,
                                     string confirmation_code) =>
        (ProfileInstallResult result, ESimProfile? profile);

    // Installs an eSIM profile given it’s |iccid| and returns the
    // ESimProfile that was just installed. A non success result code
    // is returned in case of errors.
    InstallProfile(string iccid, string confirmation_code) =>
        (ProfileInstallResult result, ESimProfile? profile);

    // Uninstalls an eSIM profile given it’s |iccid|. Returns the result
    // code for the operation.
    UninstallProfile(string iccid) => (ESimOperationResult result);

    // Enables an eSIM profile with the given |iccid|. Returns the result
    // code for the operation.
    EnableProfile(string iccid) => (ESimOperationResult result);

    // Disables an eSIM profile with the given |iccid|. Returns the result
    // code for the operation.
    DisableProfile(string iccid) => (ESimOperationResult result);

    // Sets a nickname for an eSIM profile with given |iccid|. Returns the
    // result code for the operation.
    SetProfileNickname(string iccid, mojo_base.mojom.String16 nickname) =>
        (ESimOperationResult result);
};
