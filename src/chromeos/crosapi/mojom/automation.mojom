// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module crosapi.mojom;

import "mojo/public/mojom/base/unguessable_token.mojom";
import "mojo/public/mojom/base/values.mojom";
import "ui/accessibility/mojom/ax_action_data.mojom";

// Interface for automation clients. Implemented by lacros-chrome. Used by
// ash-chrome to enable automation and to perform actions.
// Next version: 1
// Next method id: 3
[Stable, Uuid="8dd5f2a7-c24b-47c3-a096-a5d28c4764bb"]
interface AutomationClient {
  // Enables automation for the client. This will result in the client
  // repeatedly calling ReceiveEventPrototype() on the Automation interface.
  Enable@0();

  // Enables automation for a particular subtree of the client. This will
  // result in the client repeatedly calling ReceiveEventPrototype() on the
  // Automation interface.
  EnableTree@1(mojo_base.mojom.UnguessableToken token);

  // All actions are forwarded to all clients. If the client has no matching
  // |tree_id|, then it should do nothing. If |request_id| is -1, then there is
  // no corresponding request_id -- mojo does not support optional primitives,
  // and the underlying a11y code uses the same semantics for -1.
  //
  // This method is purely for prototyping and should not be called on
  // production devices. The main problem is that |optional_args| should be a
  // stable mojom struct, but we're not sure yet exactly what interface to
  // stabilize for a11y.
  PerformActionPrototype@2(
      mojo_base.mojom.UnguessableToken tree_id, int32 automation_node_id,
      string action_type, int32 request_id,
      mojo_base.mojom.DictionaryValue optional_args);
};

// Interface for automation. Implemented by ash-chrome.
// Next version: 3
// Next method id: 4
[Stable, Uuid="356a895e-b41a-4c45-9336-d8dc6d332f98"]
interface Automation {
  // Deprecated.
  RegisterAutomationClientDeprecated@0(
      pending_remote<AutomationClient> client,
      mojo_base.mojom.UnguessableToken token);

  // |event_bundle| is a serialized instance of
  // |ExtensionMsg_AutomationEventBundleParams|. This is potentially not
  // compatible across lacros/ash version skew. https://crbug.com/1182926.
  // |token| uniquely identifies the client.
  // |root|, |window_id| are unused but left to make presubmit happy (see
  // below).
  //
  // This method is purely for prototyping and should not be called on
  // production devices. The main problem is we're not sure yet what interface
  // to stabilize for a11y.
  ReceiveEventPrototype@1(
      string event_bundle, bool root, mojo_base.mojom.UnguessableToken token,
      string window_id);

  // Forwards an accessibility tree destroyed event from any accessibility tree
  // in Lacros to Ash.
  [MinVersion=1]DispatchTreeDestroyedEvent@2(
      mojo_base.mojom.UnguessableToken tree_id);

  // Forwards an action result from any accessibility tree in Lacros to Ash.
  [MinVersion=2]DispatchActionResult@3(ax.mojom.AXActionData data, bool result);
};

// A factory living in the Ash process which brokers connections to other
// processes for automation.
// Next version: 1
// Next method id: 1
[Stable, Uuid="87004779-69b3-4f35-980b-be259f002ac7"]
interface AutomationFactory {
  // A binder which sends accessibility data, and receives accessibility actions
  // (e.g. Lacros).
  BindAutomation@0(
      pending_remote<AutomationClient> automation_client,
      pending_receiver<Automation> automation);
};
