// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module chromeos.scanning.mojom;

import "mojo/public/mojom/base/file_path.mojom";
import "mojo/public/mojom/base/string16.mojom";
import "mojo/public/mojom/base/unguessable_token.mojom";

// These values are persisted to logs. Entries should not be renumbered and
// numeric values should never be reused. Updates should be reflected in the
// ScanJobSettings histogram enumeration.

// The color modes that can be used to perform a scan.
enum ColorMode {
  kBlackAndWhite,
  kGrayscale,
  kColor,
};

// The file types that can be used when saving scanned images.
enum FileType {
  kJpg,
  kPdf,
  kPng,
};

// The source types from which a scan can be obtained.
enum SourceType {
  // An unknown source type.
  kUnknown,
  // A flatbed that scans a single page.
  kFlatbed,
  // An automatic document feeder that scans a single side of each page.
  kAdfSimplex,
  // An automatic document feeder that scans both sides of each page.
  kAdfDuplex,
  // The implicit source type used for scanners that do not report any source
  // options.
  kDefault,
};

// The page sizes that can be used to perform a scan.
enum PageSize {
  // ISO A4 (210 x 297 mm).
  kIsoA4,
  // NA Letter (216 x 279 mm).
  kNaLetter,
  // The page size resulting from scanning the scanner's entire scannable area.
  kMax,
};

// The source from which a scan can be obtained.
struct ScanSource {
  // The type of this source.
  SourceType type;
  // The name of this source. Source names are unique to each SANE backend and
  // are required to perform scans.
  string name;
  // The page sizes supported by this source.
  array<PageSize> page_sizes;
};

// The capabilities a scanner supports.
struct ScannerCapabilities {
  array<ScanSource> sources;
  array<ColorMode> color_modes;
  array<uint32> resolutions;
};

// Settings used to perform a scan.
struct ScanSettings {
  // The SANE name of the ScanSource from which to scan.
  string source_name;
  // The location to save scanned images to.
  mojo_base.mojom.FilePath scan_to_path;
  // The file type to use when saving scanned images.
  FileType file_type;
  // The color mode with which to scan.
  ColorMode color_mode;
  // The page size with which to scan.
  PageSize page_size;
  // The resolution with which to scan in DPI.
  uint32 resolution_dpi;
};

// Represents a connected scanner.
struct Scanner {
  // The scanner's unique identifier.
  mojo_base.mojom.UnguessableToken id;
  // The scanner's display name.
  mojo_base.mojom.String16 display_name;
};

// Observer interface used to send remote updates about an in-progress scan job
// to the Scan app (chrome://scanning) receiver. When the corresponding scan job
// is complete, the remote and receiver are disconnected.
interface ScanJobObserver {
  // Called when the progress percent of the page currently being scanned
  // changes. |page_number| indicates which page the update is for.
  OnPageProgress(uint32 page_number, uint32 progress_percent);

  // Called when scanning a page is complete. |page_data| contains the page's
  // image data encoded as a PNG.
  // TODO(jschettler): Send a lower resolution preview.
  OnPageComplete(array<uint8> page_data);

  // Called when the scan is complete. |success| indicates whether the scan
  // completed successfully. |last_scanned_file_path| is the file path of
  // the last page scanned in a scan job.
  OnScanComplete(bool success, mojo_base.mojom.FilePath last_scanned_file_path);

  // Called when canceling the current scan job is complete. |success|
  // indicates whether the scan job was cancelled successfully.
  OnCancelComplete(bool success);
};

// Interface used to obtain information about and interact with connected
// scanners. It is implemented in the browser and exposed to the Scan app
// (chrome://scanning).
interface ScanService {
  // Returns the connected scanners. Obtaining a scanner's capabilities is
  // implemented in a separate method to minimize the amount of time clients
  // must wait before receiving the scanners and displaying their display names.
  GetScanners() => (array<Scanner> scanners);

  // Returns the capabilities of the scanner identified by |scanner_id|.
  // TODO(jschettler): Return a boolean to indicate whether the capabilities
  // were obtained via a secure protocol.
  GetScannerCapabilities(mojo_base.mojom.UnguessableToken scanner_id)
      => (ScannerCapabilities capabilities);

  // Starts a scan with the scanner identified by |scanner_id| using the
  // provided |settings|. Scan job events are reported to the client via the
  // |observer|. |success| indicates whether the scan started successfully.
  StartScan(mojo_base.mojom.UnguessableToken scanner_id, ScanSettings settings,
      pending_remote<ScanJobObserver> observer) => (bool success);

  // Attempts to cancel the currently running scan job. The success of the
  // cancel attempt is reported through the ScanJobObserver.
  CancelScan();
};
