// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module chromeos.remote_apps.mojom;

import "url/mojom/url.mojom";

union AddFolderResult {
  // The ID of the added folder. Implies success.
  string folder_id;

  // Implies failure.
  string error;
};

union AddAppResult {
  // The ID of the added app. Implies success.
  string app_id;

  // Implies failure.
  string error;
};

// Interface for communication between an extension and the Remote Apps
// Manager.
interface RemoteApps {
  // Adds a Remote Apps folder to the launcher. Empty folders are not shown in
  // the launcher.
  //
  // Input parameters:
  // - |name|: the name of the folder.
  // - |add_to_front|: true if the folder should be added to the front of the
  //                   app list.
  //
  // Output parameters:
  // - |result|: A union with |folder_id| representing the ID of the added
  //             folder on success, and |error| representing the error message
  //             on failure.
  AddFolder(string name,
            bool add_to_front) => (AddFolderResult result);

  // Adds a Remote Apps app to the launcher.
  //
  // Input parameters:
  // - |source_id|: An ID used to identify the source of the caller. The JS
  //                bindings manages this and passes the extension ID.
  // - |name|: the name of the app.
  // - |folder_id|: the ID of the parent folder. An empty string indicates the
  //                app has no parent folder.
  // - |icon_url|: a URL pointing to an image which represents the app's icon.
  // - |add_to_front|: true if the app should be added to the front of the app
  //                   list. Has no effect if the app has a parent folder.
  //
  // Output parameters:
  // - |result|: A union with |app_id| representing the ID of the added app on
  //             success, and |error| representing the error message on
  //             failure.
  AddApp(string source_id,
         string name,
         string folder_id,
         url.mojom.Url icon_url,
         bool add_to_front) => (AddAppResult result);

  // Deletes a Remote App added by |AddApp()|.
  //
  // Input parameters:
  // - |app_id|: ID of the app.
  //
  // Output parameters:
  // - |error|: A string describing the error if any.
  DeleteApp(string app_id) => (string? error);
};

// Factory for creating an instance of RemoteApps.
interface RemoteAppsFactory {
  // Binds to the Profile's RemoteApps implementation. The JS bindings manages
  // |source_id| and passes the extension ID.
  Get(string source_id,
         pending_receiver<RemoteApps> remote_apps,
         pending_remote<RemoteAppLaunchObserver> observer);
};

// A RemoteAppLaunchObserver gets notifications when a remote app is launched.
interface RemoteAppLaunchObserver {
  // Invoked when a remote app is launched. |app_id| is the ID of the app
  // which was launched. The event is only dispatched to the extension which
  // added the app.
  OnRemoteAppLaunched(string app_id);
};
