// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module chromeos.local_search_service.mojom;

import "chromeos/components/local_search_service/public/mojom/types.mojom";
import "mojo/public/mojom/base/string16.mojom";

enum IndexId {
  kCrosSettings = 0,
  kHelpApp = 1
  // Add new client IDs here.
};

enum Backend {
  kLinearMap = 0,
  kInvertedIndex = 1
};

// LocalSearchServiceSyncProxy creates and owns content-specific IndexProxies.
// Clients can call |GetIndex| to get an IndexSyncProxy for a given index id.
interface LocalSearchServiceSyncProxy {
  // A client can call this function to bind an IndexSyncProxy for |index_id|.
  // If the Index isn't created when this function is called, LocalSearchService
  // will create one.
  // Note, there should be one primary client that is the owner of the data and
  // can read/write the data to the Index. The other clients should only use
  // the Index for query search.
  GetIndex(IndexId index_id, Backend backend,
      pending_receiver<IndexSyncProxy> index_receiver);
};

// A proxy to a local search service Index.
// An Index has a registry of searchable data, which can be updated. It also
// runs a search function to find matching items for a given query.
// Each Index can serve multiple clients, but only one client (the primary
// client) that owns the data should be allowed to modify the Index.
interface IndexSyncProxy {
  // Returns number of data items.
  GetSize() => (uint64 num_items);

  // Adds or updates data and callbacks upon completion.
  // Only the primary client should be allowed to do this operation.
  AddOrUpdate(array<Data> data) => ();

  // Deletes data with |ids| and returns the number of items deleted.
  // If an id doesn't exist in the Index, no operation will be done.
  // Only the primary client should be allowed to do this operation.
  Delete(array<string> ids) => (uint32 num_deleted);

  // Takes an asynchronous search request call and returns results and status
  // code via a callback. |results| will be null if there is an error.
  Find(mojo_base.mojom.String16 query, uint32 max_results)
      => (ResponseStatus status, array<Result>? results);

  // Clears all data stored by the index.
  ClearIndex() => ();
};
