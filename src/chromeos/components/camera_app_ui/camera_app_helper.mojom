// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module chromeos_camera.mojom;

import "components/arc/mojom/camera_intent.mojom";

// Interface for monitoring tablet mode state of device. The state is detected
// from Chrome browser process and is notified to Chrome Camera App in renderer
// process.
interface TabletModeMonitor {
  // Updates with the latest changed tablet mode state.
  Update(bool is_tablet_mode);
};

// Screen backlight state.
// Reference from ash/public/cpp/screen_backlight_type.h
enum ScreenState {
    ON,
    OFF,
    OFF_AUTO,
};

// Interface for monitoring screen state of device. The state is detected from
// Chrome browser process and is notified to Chrome Camera App in renderer
// process.
interface ScreenStateMonitor {
  // Updates with the latest changed screen state.
  Update(ScreenState state);
};

// Interface for monitoring the existence of external screen. The state is
// detected from Chrome browser process and is notified to Chrome Camera App in
// renderer process.
interface ExternalScreenMonitor {
  // Updates when the existence of external screen got changed.
  Update(bool has_external_screen);
};

// Interface to monitor camera usage ownership changes.
interface CameraUsageOwnershipMonitor {
  // Updates when the camera usage ownership is changed.
  OnCameraUsageOwnershipChanged(bool has_usage) => ();
};

// The window states that we care about.
enum WindowStateType {
  MINIMIZED = 0,
  MAXIMIZED = 1,
  FULLSCREEN = 2,
  REGULAR = 3,  // None of the above.
};

// Interface for monitoring window states.
interface WindowStateMonitor {
  // Updates when any of the window states are changed.
  OnWindowStateChanged(array<WindowStateType> states);
};

// Interface for window controlling.
interface WindowStateController {
  // Adds |monitor| for window state changes.
  AddMonitor(pending_remote<WindowStateMonitor> monitor)
      => (array<WindowStateType> states);

  // Gets current |states| of the window.
  GetWindowState() => (array<WindowStateType> states);

  // Minimize the window.
  Minimize() => ();

  // Restore the window.
  Restore() => ();

  // Maximize the window.
  Maximize() => ();

  // Fullscreen the window.
  Fullscreen() => ();

  // Focus the window.
  Focus() => ();
};

// Interface for communication between Chrome Camera App (Remote) and Chrome
// (Receiver).
interface CameraAppHelper {
  // Sends the captured result |data| for corresponding intent recognized by
  // |intent_id| back to ARC. The handler should handle |data| and may notify
  // the intent caller according to the intention of the |action|. |is_success|
  // will be set to true if the ARC received the result and set to false for
  // invalid input.
  HandleCameraResult(uint32 intent_id,
                     arc.mojom.CameraIntentAction action,
                     array<uint8> data) => (bool is_success);

  // Checks if device is under tablet mode currently.
  IsTabletMode() => (bool is_tablet_mode);

  // Triggers the begin of event tracing for given |event|.
  StartPerfEventTrace(string event);

  // Triggers the end of event tracing for given |event|.
  StopPerfEventTrace(string event);

  // Registers a TabletModeMonitor instance and returns the tablet mode
  // initial state. Calling the Update() whenever the tablet mode state
  // changes.
  SetTabletMonitor(pending_remote<TabletModeMonitor> monitor)
      => (bool is_tablet_mode);

  // Registers a ScreenStateMonitor instance and returns the initial screen
  // state. Calling the Update() whenever the screen state changes.
  SetScreenStateMonitor(pending_remote<ScreenStateMonitor> monitor)
      => (ScreenState initial_state);

  // Checks if the logging consent option is enabled. It is only usable for SWA
  // version. For platform app version, we use Chrome MetricsPrivate API.
  IsMetricsAndCrashReportingEnabled() => (bool is_enabled);

  // Registers a ExternalScreenMonitor instance and returns the initial state of
  // the existence of external screen. Calling the Update() whenever the screen
  // state changes.
  SetExternalScreenMonitor(pending_remote<ExternalScreenMonitor> monitor)
      => (bool has_external_screen);

  // Opens the file in Downloads folder by its |name| in gallery. It is only
  // usable for SWA version. For platform app version, we use Chrome
  // FileManagerPrivate API.
  OpenFileInGallery(string name);

  // Opens the chrome feedback dialog and show |placeholder| in the description
  // field. It is only usable for SWA version. For platform app version, we send
  // message to Feedback extension via chrome.runtime API.
  OpenFeedbackDialog(string placeholder);

  // Sets the monitor to monitor the camera usage ownership changed.
  SetCameraUsageMonitor(
      pending_remote<CameraUsageOwnershipMonitor> usage_monitor) => ();

  // Gets the controller to control and monitor the window state of app.
  GetWindowStateController()
      => (pending_remote<WindowStateController> controller);

  // Sends broadcast when a picture/video is captured. |is_video| is true if a
  // video is captured and false for a picture. |name| is the file name which
  // will be used to generate the URI for the broadcast.
  SendNewCaptureBroadcast(bool is_video, string name);
};
