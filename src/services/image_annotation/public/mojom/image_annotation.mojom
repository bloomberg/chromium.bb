// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module image_annotation.mojom;

interface ImageProcessor {
  // Returns the (potentially resized and compressed) pixels for the image.
  //
  // TODO(crbug.com/916420): expand this signature to include arguments when we
  //                         require more sophisticated render-side processing.
  GetJpgImageData() => (array<uint8> bytes);
};

// The ways in which an annotation request can fail.
enum AnnotateImageError {
  kCanceled,
  kFailure,
  kAdult,
};

// The types of annotations that can be returned.
//
// Logged in metrics - do not reuse or reassign values.
enum AnnotationType {
  kOcr = 1,
  kLabel = 2,
  kCaption = 3,
};

// One annotation for an image.
struct Annotation {
  AnnotationType type;
  double score;
  string text;
};

union AnnotateImageResult {
  AnnotateImageError error_code;

  // If the union is of this type, |annotations| will be non-empty.
  array<Annotation> annotations;
};

interface Annotator {
  // Requests a11y annotations (i.e. OCR, labels) for the given image.
  //
  // |source_id| is either the URL for an image, or some non-URL string that
  // uniquely identifies an image (e.g. a hash of image content for a data
  // URI). Source IDs are used to query local and remote caches.
  //
  // |result| will contain either the error code specifying how annotation
  // failed, or the annotations extracted from the image.
  //
  // TODO(crbug.com/916420): expand this signature to include a request
  //                         argument when we support more than one type of
  //                         annotation.
  // TODO(crbug.com/916420): add a language code as an arg / parameter.
  AnnotateImage(string source_id, ImageProcessor image_processor)
    => (AnnotateImageResult result);
};
