// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module viz.mojom;

import "mojo/public/mojom/base/time.mojom";
import "services/viz/public/mojom/compositing/compositor_render_pass_id.mojom";
import "services/viz/public/mojom/compositing/shared_element_resource_id.mojom";

enum CompositorFrameTransitionDirectiveType {
  kSave,
  kAnimate,
  kAnimateRenderer,
  kRelease
};

enum CompositorFrameTransitionDirectiveEffect {
  kNone,
  kCoverDown,
  kCoverLeft,
  kCoverRight,
  kCoverUp,
  kExplode,
  kFade,
  kImplode,
  kRevealDown,
  kRevealLeft,
  kRevealRight,
  kRevealUp
};

// For a viz driven animation, these values are currently limited to 5 seconds
// so no animation can run for longer than 10 seconds.
struct CompositorFrameTransitionDirectiveConfig {
  mojo_base.mojom.TimeDelta duration;
  mojo_base.mojom.TimeDelta delay;
};

// This struct identifes a shared element.
struct CompositorFrameTransitionDirectiveSharedElement {
  CompositorRenderPassId render_pass_id;
  CompositorFrameTransitionDirectiveConfig config;
  SharedElementResourceId shared_element_resource_id;
};

// See components/viz/common/quads/compositor_frame_transition_directive.h
// for a description of this struct.
struct CompositorFrameTransitionDirective {
  // A monotonically increasing sequence_id for a given communication channel
  // (i.e. surface). This is used to distinguish new directives from directives
  // that have already been processed.
  uint32 sequence_id;

  // The type of this directive.
  CompositorFrameTransitionDirectiveType type;

  // A value indicating whether this is a viz or renderer driven animation.
  bool is_renderer_driven_animation;

  // The effect for the transition.
  CompositorFrameTransitionDirectiveEffect effect;

  // The config struct for the root (element) transition
  CompositorFrameTransitionDirectiveConfig root_config;

  // A collection of shared elements.
  array<CompositorFrameTransitionDirectiveSharedElement> shared_elements;
};
