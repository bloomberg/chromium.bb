# Copyright 2017 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/buildflag_header.gni")
import("//build/config/chromeos/ui_mode.gni")
import("//build/config/features.gni")
import("//chrome/services/file_util/public/features.gni")
import("//components/safe_browsing/buildflags.gni")

source_set("file_util") {
  sources = [
    "file_util_service.cc",
    "file_util_service.h",
  ]

  deps = [
    ":buildflags",
    "//base",
    "//build:chromeos_buildflags",
    "//components/safe_browsing:buildflags",
    "//extensions/buildflags:buildflags",
    "//mojo/public/cpp/bindings",
  ]

  public_deps = [
    "//chrome/services/file_util/public/mojom",
    "//mojo/public/cpp/bindings",
    "//mojo/public/mojom/base",
  ]

  if (is_chromeos_ash) {
    sources += [
      "zip_file_creator.cc",
      "zip_file_creator.h",
    ]

    deps += ["//components/services/filesystem/public/mojom"]
  }

  if (is_mac) {
    deps += ["//chrome/utility/safe_browsing/mac"]
  }

  if (safe_browsing_mode == 1) {
    sources += [
      "safe_archive_analyzer.cc",
      "safe_archive_analyzer.h",
    ]

    if (is_linux || is_win) {
      sources += [
        "document_analysis_service.cc",
        "document_analysis_service.h",
        "safe_document_analyzer.cc",
        "safe_document_analyzer.h",
      ]
    }

    deps += [
      "//chrome/common/safe_browsing",
      "//chrome/common/safe_browsing:archive_analyzer_results",
      "//chrome/common/safe_browsing:rar_analyzer",
    ]

    if (is_linux || is_win) {
      deps += [
        "//chrome/common/safe_browsing:document_analyzer",
        "//chrome/common/safe_browsing:document_analyzer_results",
      ]
    }
  }

  if (enable_xz_extractor) {
    sources += [
      "xz_file_extractor.cc",
      "xz_file_extractor.h",
    ]
    deps += [
      "//third_party/lzma_sdk:lzma_sdk",
      "//third_party/lzma_sdk:lzma_sdk_xz",
    ]
  }
}

source_set("unit_tests") {
  testonly = true

  if (enable_xz_extractor) {
    sources = ["xz_file_extractor_unittest.cc"]

    deps = [
      ":file_util",
      "//base/test:test_support",
      "//testing/gmock",
      "//testing/gtest",
    ]
  }
}

buildflag_header("buildflags") {
  header = "buildflags.h"
  flags = [
    "ENABLE_XZ_EXTRACTOR=$enable_xz_extractor",
    "ENABLE_MALDOCA=$enable_maldoca",
  ]
}
