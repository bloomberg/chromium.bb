# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is a buildbot configuration file containing a tagged list of files
# processed by the stage/archive scripts. The known tags are:
#
# filename: Name of the file in the build output directory.
# arch:     List of CPU architectures for which this file should be processed
#           (values are based on the strings returned by python's
#           platform.architecture() function).  Leave unspecified for
#           architecture neutral files.
# buildtype: List of build types for which this file should be processed.
# archive: The name of the archive file to store filename in. If not specified,
#          filename is added to the default archive (e.g. platform.zip). If
#          archive == filename, filename is archived directly, not zipped.
# direct_archive: Force a file to be archived as-is, bypassing zip creation.
#                 NOTE: This flag will not apply if more than one file has the
#                 same 'archive' name, which will create a zip of all the
#                 files instead.
# filegroup: List of named groups to which this file belongs (e.g. 'symbols'
#            for symbol processing, 'tests' for running tests, etc.).
# optional: List of buildtypes for which the file might not exist, and it's not
#           considered an error.

FILES = [
  {
    'filename': 'chrome',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'chrome-wrapper',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'chrome_100_percent.pak',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'chrome_200_percent.pak',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'chrome_sandbox',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'crashpad_handler',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'icudtl.dat',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'installer',
    'buildtype': ['official'],
  },
  {
    'filename': 'locales',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'product_logo_48.png',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'resources',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'resources.pak',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'session',
    'buildtype': ['dev'],
  },
  {
    'filename': 'v8_context_snapshot.bin',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'xdg-mime',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'xdg-settings',
    'buildtype': ['dev', 'official'],
  },
  # CDM files (actual CDM + optional manifest):
  {
    'filename': 'ClearKeyCdm',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'WidevineCdm',
    'buildtype': ['official'],
    'direct_archive': 1,
  },
  # ANGLE files:
  {
    'filename': 'libGLESv2.so',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'libEGL.so',
    'buildtype': ['dev', 'official'],
  },
  # SwiftShader files:
  {
    'filename': 'swiftshader/libGLESv2.so',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'swiftshader/libEGL.so',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'libvk_swiftshader.so',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'vk_swiftshader_icd.json',
    'buildtype': ['dev', 'official'],
  },
  # Native Client plugin files:
  {
    'filename': 'nacl_irt_x86_64.nexe',
    'arch': ['64bit'],
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'nacl_irt_arm.nexe',
    'arch': ['arm'],
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'nacl_helper',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'nacl_helper_bootstrap',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'nacl_helper_nonsfi',
    'buildtype': ['dev', 'official'],
  },
  # PNaCl translator (archive only, component updater used for shipping).
  {
    'filename': 'pnacl',
    'buildtype': ['dev', 'official'],
    'archive': 'pnacl.zip',
  },
  # Remoting files:
  {
    'filename': 'remoting-me2me-host-linux.zip',
    'buildtype': ['official'],
    'archive': 'remoting-me2me-host-linux.zip',
  },
  # Remoting symbols:
  {
    'filename': 'remote_assistance_host.debug',
    'arch': ['64bit'],
    'buildtype': ['official'],
    'archive': 'remoting-debug-info.zip',
  },
  {
    # Include all debug symbols that start with `remoting`.
    'filename': 'remoting*.debug',
    'arch': ['64bit'],
    'buildtype': ['official'],
    'archive': 'remoting-debug-info.zip',
  },
  # Breakpad symbols:
  {
    'filename': 'chrome.breakpad.x64',
    'arch': ['64bit'],
    'buildtype': ['official'],
    'archive': 'breakpad-info.zip',
  },
  {
    'filename': 'crashpad.breakpad.x64',
    'arch': ['64bit'],
    'buildtype': ['official'],
    'archive': 'breakpad-info.zip',
  },
  {
    'filename': 'swiftshader_libegl.breakpad.x64',
    'arch': ['64bit'],
    'buildtype': ['official'],
    'archive': 'breakpad-info.zip',
  },
  {
    'filename': 'swiftshader_libgles.breakpad.x64',
    'arch': ['64bit'],
    'buildtype': ['official'],
    'archive': 'breakpad-info.zip',
  },
  {
    'filename': 'libvk_swiftshader.breakpad.x64',
    'arch': ['64bit'],
    'buildtype': ['official'],
    'archive': 'breakpad-info.zip',
  },
  {
    'filename': 'angle_libegl.breakpad.x64',
    'arch': ['64bit'],
    'buildtype': ['official'],
    'archive': 'breakpad-info.zip',
  },
  {
    'filename': 'angle_libgles.breakpad.x64',
    'arch': ['64bit'],
    'buildtype': ['official'],
    'archive': 'breakpad-info.zip',
  },
  {
    'filename': 'nacl_irt_x86_64.nexe.debug',
    'arch': ['64bit'],
    'buildtype': ['official'],
    'archive': 'chrome-linux-nacl-irt-syms.zip',
  },
  # Content shell files:
  {
    'filename': 'GardinerModBug.ttf',
    'buildtype': ['dev'],
    'archive': 'content-shell.zip',
    'optional': ['dev'],
  },
  {
    'filename': 'GardinerModCat.ttf',
    'buildtype': ['dev'],
    'archive': 'content-shell.zip',
    'optional': ['dev'],
  },
  {
    'filename': 'content_shell',
    'buildtype': ['dev'],
    'archive': 'content-shell.zip',
    'optional': ['dev'],
  },
  {
    'filename': 'content_shell.pak',
    'buildtype': ['dev'],
    'archive': 'content-shell.zip',
    'optional': ['dev'],
  },
  {
    'filename': 'dump_syms',
    'buildtype': ['dev'],
    'archive': 'content-shell.zip',
    'optional': ['dev'],
  },
  {
    'filename': 'fonts.conf',
    'buildtype': ['dev'],
    'archive': 'content-shell.zip',
    'optional': ['dev'],
  },
  {
    'filename': 'icudtl.dat',
    'buildtype': ['dev'],
    'archive': 'content-shell.zip',
    'optional': ['dev'],
  },
  {
    'filename': 'libblink_deprecated_test_plugin.so',
    'buildtype': ['dev'],
    'archive': 'content-shell.zip',
    'optional': ['dev'],
  },
  {
    'filename': 'libblink_test_plugin.so',
    'buildtype': ['dev'],
    'archive': 'content-shell.zip',
    'optional': ['dev'],
  },
  {
    'filename': 'minidump_stackwalk',
    'buildtype': ['dev'],
    'archive': 'content-shell.zip',
    'optional': ['dev'],
  },
  {
    'filename': 'v8_context_snapshot.bin',
    'buildtype': ['dev'],
    'archive': 'content-shell.zip',
    'optional': ['dev'],
  },
  {
    'filename': 'resources',
    'buildtype': ['dev'],
    'archive': 'content-shell.zip',
    'optional': ['dev'],
  },
  # MEI Preload files:
  {
    'filename': 'MEIPreload/manifest.json',
    'buildtype': ['dev', 'official'],
  },
  {
    'filename': 'MEIPreload/preloaded_data.pb',
    'buildtype': ['dev', 'official'],
  },
  # ChromeDriver binary:
  {
    'filename': 'chromedriver',
    'arch': ['64bit'],
    'buildtype': ['dev', 'official'],
    'archive': 'chromedriver_linux64.zip',
    'optional': ['dev', 'official'],
  },
  # Headless shell files:
  {
    'filename': 'headless_shell',
    'buildtype': ['dev'],
    'archive': 'headless-shell.zip',
    'optional': ['dev'],
  },
  {
    'filename': 'headless_lib.pak',
    'buildtype': ['dev'],
    'archive': 'headless-shell.zip',
    'optional': ['dev'],
  },
  # DevTools front-end files:
  {
    'filename': 'gen/third_party/devtools-frontend/src/front_end',
    'buildtype': ['dev', 'official'],
    'archive': 'devtools-frontend.zip',
  },
  # MojoJS support data (base):
  {
    'filename': 'gen/layout_test_data/mojo/public/js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/mojo/public/js/bindings.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/mojo/public/mojom/base/*.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  # MojoJS support data (contacts):
  {
    'filename': 'gen/third_party/blink/public/mojom/contacts/contacts_manager.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  # MojoJS support data (content-index):
  {
    'filename': 'gen/third_party/blink/public/mojom/content_index/content_index.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  # MojoJS support data (payments):
  {
    'filename': 'gen/components/payments/mojom/payment_request_data.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  # MojoJS support data (credential-management):
  {
    'filename': 'gen/third_party/blink/public/mojom/sms/webotp_service.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  # MojoJS support data (idle-detection):
  {
    'filename': 'gen/third_party/blink/public/mojom/idle/idle_manager.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  # MojoJS support data (Image Capture)
  {
    'filename': 'gen/media/capture/mojom/image_capture.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  # MojoJS support data (Generic Sensor)
  {
    'filename': 'gen/services/device/public/mojom/sensor_provider.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/services/device/public/mojom/sensor.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  # MojoJS support data (Screen Enumeration):
    # 'gen/ui/gfx/mojom/color_space.mojom.m.js'  (already included for WebXR)
    # 'gen/ui/gfx/mojom/buffer_types.mojom.m.js' (already included for WebXR)
    # 'gen/ui/gfx/mojom/display_color_spaces.mojom.m.js' (already included for WebXR)
    # 'gen/ui/gfx/geometry/mojom/geometry.mojom.m.js' (already included for WebXR)
    # 'gen/ui/display/mojom/display.mojom.m.js' (already included for WebXR)
  {
    'filename': 'gen/third_party/blink/public/mojom/screen_enumeration/screen_enumeration.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  # MojoJS support data (Shape Detection)
    # 'gen/ui/gfx/geometry/mojom/geometry.mojom.m.js' (already included for WebXR)
  {
    'filename': 'gen/skia/public/mojom/image_info.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/skia/public/mojom/bitmap.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/services/shape_detection/public/mojom/*.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  # MojoJS support data (WebXR):
  {
    'filename': 'gen/gpu/ipc/common/mailbox*.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/gpu/ipc/common/sync_token.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/ui/display/mojom/display.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/ui/gfx/mojom/*.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/ui/gfx/geometry/mojom/geometry.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/device/gamepad/public/mojom/gamepad.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/device/vr/public/mojom/vr_service.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  # MojoJS support data (WebUSB):
  {
    'filename': 'gen/url/mojom/url.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/services/device/public/mojom/usb_*.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/third_party/blink/public/mojom/usb/web_usb_service.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  # MojoJS support data (WebBluetooth):
  {
    'filename': 'gen/device/bluetooth/public/mojom/uuid.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/url/mojom/origin.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/device/bluetooth/public/mojom/test/fake_bluetooth.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/content/web_test/common/fake_bluetooth_chooser.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  # MojoJS support data (WebNFC):
  {
    'filename': 'gen/services/device/public/mojom/nfc.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  # MojoJS support data (Web Serial):
  {
    'filename': 'gen/services/device/public/mojom/serial.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
  {
    'filename': 'gen/third_party/blink/public/mojom/serial/serial.mojom.m.js',
    'buildtype': ['dev', 'official'],
    'archive': 'mojojs.zip',
  },
]
