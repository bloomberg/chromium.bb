# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/android/rules.gni")
import("current_version/current_version.gni")
import("generate_manifest_for_upload_outputs.gni")
import("mustache_pass.gni")

h2o_junit_manifest_output =
    "${target_gen_dir}/junit_manifest/AndroidManifest.xml"

# GN breaks with a mysterious error if the target has the word "junit" in it.
h2o_junit_manifest_target_name = "h2o_j_unit_manifest_target"

# Stamped out copy of the runtime-library, used for fail-safe code in when using an
# old copy of the runtime library.
android_library("compiled_in_runtime_library_java") {
  chromium_code = false
  java_files = [ "src/org/chromium/webapk/lib/runtime_library/IWebApkApi.java" ]
}

mustache_pass("generate_old_style_manifest_for_upload") {
  input = "AndroidManifest.xml"
  output = generate_old_style_manifest_for_upload_output
  extra_variables = [
    "shell_apk_version=$current_shell_apk_version",
    "use_new_splash=false",
  ]
}

mustache_pass("generate_new_style_manifest_for_upload") {
  input = "AndroidManifest.xml"
  output = generate_new_style_manifest_for_upload_output
  extra_variables = [
    "shell_apk_version=$current_shell_apk_version",
    "use_new_splash=true",
  ]
}

# |webapk_java| is split from |webapk_with_service_java| for the sake of instrumentation tests.
# |chrome_public_test_apk| cannot depend on |compiled_in_runtime_library_java| due to a class
# name conflict.
template("webapk_java") {
  android_library(target_name) {
    forward_variables_from(invoker,
                           [
                             "android_manifest_for_lint",
                             "deps",
                           ])

    java_files = [
      "src/org/chromium/webapk/shell_apk/HostBrowserClassLoader.java",
      "src/org/chromium/webapk/shell_apk/HostBrowserLauncher.java",
      "src/org/chromium/webapk/shell_apk/HostBrowserLauncherParams.java",
      "src/org/chromium/webapk/shell_apk/ChooseHostBrowserDialog.java",
      "src/org/chromium/webapk/shell_apk/DexLoader.java",
      "src/org/chromium/webapk/shell_apk/HostBrowserUtils.java",
      "src/org/chromium/webapk/shell_apk/IdentityService.java",
      "src/org/chromium/webapk/shell_apk/InstallHostBrowserDialog.java",
      "src/org/chromium/webapk/shell_apk/LaunchHostBrowserSelector.java",
      "src/org/chromium/webapk/shell_apk/MainActivity.java",
      "src/org/chromium/webapk/shell_apk/TransparentLauncherActivity.java",
      "src/org/chromium/webapk/shell_apk/WebApkSharedPreferences.java",
      "src/org/chromium/webapk/shell_apk/WebApkUtils.java",
      "src/org/chromium/webapk/shell_apk/h2o/H2OLauncher.java",
      "src/org/chromium/webapk/shell_apk/h2o/H2OMainActivity.java",
      "src/org/chromium/webapk/shell_apk/h2o/H2OOpaqueMainActivity.java",
      "src/org/chromium/webapk/shell_apk/h2o/H2OTransparentLauncherActivity.java",
      "src/org/chromium/webapk/shell_apk/h2o/SplashActivity.java",
      "src/org/chromium/webapk/shell_apk/h2o/SplashContentProvider.java",
      "src/org/chromium/webapk/shell_apk/h2o/SplashUtils.java",
    ]
    deps += [
      "//chrome/android/webapk/libs/common:common_java",
      "//chrome/android/webapk/libs/common:splash_java",
    ]
    min_sdk_version = 16
  }
}

template("webapk_with_service_java") {
  android_library(target_name) {
    forward_variables_from(invoker,
                           [
                             "android_manifest_for_lint",
                             "deps",
                           ])

    java_files = [
      "src/org/chromium/webapk/shell_apk/WebApkServiceFactory.java",
      "src/org/chromium/webapk/shell_apk/WebApkServiceImplWrapper.java",
    ]
    deps += [ ":compiled_in_runtime_library_java" ]
    min_sdk_version = 16
  }
}

template("webapk_tmpl") {
  _manifest_to_upload_dep = invoker.manifest_to_upload_dep
  _manifest_target_name = "${target_name}_generate_manifest"
  _manifest_output =
      "${target_gen_dir}/${_manifest_target_name}/AndroidManifest.xml"
  _java_without_services_target_name = "${target_name}_generated_webapk_java"
  _java_with_services_target_name =
      "${target_name}_generated_webapk_with_service_java"
  _generate_res_background_xml_target_name =
      "${target_name}_generate_res_background_xml"
  _generated_res_background_dir =
      "${target_gen_dir}/${_generate_res_background_xml_target_name}/res"
  _resources_target_name = "${target_name}_resources"

  if (defined(invoker.manifest_output)) {
    _manifest_output = invoker.manifest_output
  }
  if (defined(invoker.manifest_target_name)) {
    _manifest_target_name = invoker.manifest_target_name
  }

  # Generate manifest with test values.
  mustache_pass(_manifest_target_name) {
    forward_variables_from(invoker,
                           [
                             "apk_package_name",
                             "config_file",
                             "delta_config_file",
                           ])

    input = get_target_outputs(_manifest_to_upload_dep)
    input = input[0]
    output = _manifest_output
    extra_variables = [ "manifest_package=$apk_package_name" ]
    deps = [
      _manifest_to_upload_dep,
    ]
  }

  # Populate background color in values/background_color.xml
  mustache_pass(_generate_res_background_xml_target_name) {
    forward_variables_from(invoker, [ "config_file" ])
    input = "res_template/values/background_color.xml"
    output = "${_generated_res_background_dir}/values/background_color.xml"
  }

  android_resources(_resources_target_name) {
    custom_package = "org.chromium.webapk.shell_apk"
    resource_dirs = [ "res" ]
    generated_resource_dirs = [ _generated_res_background_dir ]
    generated_resource_files =
        get_target_outputs(":$_generate_res_background_xml_target_name")
    deps = [
      ":$_generate_res_background_xml_target_name",
      ":webapk_strings_grd",
    ]
  }

  webapk_java(_java_without_services_target_name) {
    android_manifest_for_lint = _manifest_output
    deps = [
      ":$_manifest_target_name",
      ":$_resources_target_name",
    ]
  }

  webapk_with_service_java(_java_with_services_target_name) {
    android_manifest_for_lint = _manifest_output
    deps = [
      ":$_java_without_services_target_name",
      ":$_manifest_target_name",
    ]
  }

  android_apk(target_name) {
    forward_variables_from(invoker, [ "apk_name" ])
    deps = [
      ":$_java_with_services_target_name",
    ]

    android_manifest = _manifest_output
    android_manifest_dep = ":$_manifest_target_name"
    min_sdk_version = 16
    target_sdk_version = 28
    never_incremental = true
    enable_multidex = false

    # Force 32 bit mode on 64 bit devices.
    native_lib_placeholders = [ "libfoo.so" ]

    if (!is_java_debug) {
      if (defined(webapk_proguard_jar_path)) {
        proguard_jar_path = webapk_proguard_jar_path
      }
      proguard_enabled = true
      proguard_configs = [
        "//chrome/android/webapk/shell_apk/proguard.flags",
        "//chrome/android/java/proguard.flags",
        "//base/android/proguard/chromium_apk.flags",
        "//base/android/proguard/chromium_code.flags",
      ]
    }
  }
}

java_strings_grd("webapk_strings_grd") {
  grd_file = "//chrome/android/webapk/strings/android_webapk_strings.grd"

  outputs = [
    "values/android_webapk_strings.xml",
    "values-am/android_webapk_strings.xml",
    "values-ar/android_webapk_strings.xml",
    "values-bg/android_webapk_strings.xml",
    "values-bn/android_webapk_strings.xml",
    "values-ca/android_webapk_strings.xml",
    "values-cs/android_webapk_strings.xml",
    "values-da/android_webapk_strings.xml",
    "values-de/android_webapk_strings.xml",
    "values-el/android_webapk_strings.xml",
    "values-en-rGB/android_webapk_strings.xml",
    "values-es/android_webapk_strings.xml",
    "values-es-rUS/android_webapk_strings.xml",
    "values-et/android_webapk_strings.xml",
    "values-fa/android_webapk_strings.xml",
    "values-fi/android_webapk_strings.xml",
    "values-fr/android_webapk_strings.xml",
    "values-gu/android_webapk_strings.xml",
    "values-hi/android_webapk_strings.xml",
    "values-hr/android_webapk_strings.xml",
    "values-hu/android_webapk_strings.xml",
    "values-in/android_webapk_strings.xml",
    "values-it/android_webapk_strings.xml",
    "values-iw/android_webapk_strings.xml",
    "values-ja/android_webapk_strings.xml",
    "values-kn/android_webapk_strings.xml",
    "values-ko/android_webapk_strings.xml",
    "values-lt/android_webapk_strings.xml",
    "values-lv/android_webapk_strings.xml",
    "values-ml/android_webapk_strings.xml",
    "values-mr/android_webapk_strings.xml",
    "values-ms/android_webapk_strings.xml",
    "values-nb/android_webapk_strings.xml",
    "values-nl/android_webapk_strings.xml",
    "values-pl/android_webapk_strings.xml",
    "values-pt-rBR/android_webapk_strings.xml",
    "values-pt-rPT/android_webapk_strings.xml",
    "values-ro/android_webapk_strings.xml",
    "values-ru/android_webapk_strings.xml",
    "values-sk/android_webapk_strings.xml",
    "values-sl/android_webapk_strings.xml",
    "values-sr/android_webapk_strings.xml",
    "values-sv/android_webapk_strings.xml",
    "values-sw/android_webapk_strings.xml",
    "values-ta/android_webapk_strings.xml",
    "values-te/android_webapk_strings.xml",
    "values-th/android_webapk_strings.xml",
    "values-tl/android_webapk_strings.xml",
    "values-tr/android_webapk_strings.xml",
    "values-uk/android_webapk_strings.xml",
    "values-vi/android_webapk_strings.xml",
    "values-zh-rCN/android_webapk_strings.xml",
    "values-zh-rTW/android_webapk_strings.xml",
  ]
}

# Template for WebAPK. When a WebAPK is generated:
# - Android manifest is customized to the website.
# - App icon is extracted from the website and added to the APK's resources.
webapk_tmpl("webapk") {
  config_file = "manifest/bound_manifest_config.json"
  manifest_to_upload_dep = ":generate_old_style_manifest_for_upload"
  apk_name = "WebApk"
  apk_package_name = "org.chromium.webapk"
}

webapk_tmpl("maps_go_webapk") {
  config_file = "manifest/maps_go_manifest_config.json"
  manifest_to_upload_dep = ":generate_old_style_manifest_for_upload"
  apk_name = "MapsWebApk"
  apk_package_name = "org.chromium.maps_go_webapk"
}

webapk_tmpl("unbound_webapk") {
  config_file = "manifest/unbound_manifest_config.json"
  manifest_to_upload_dep = ":generate_old_style_manifest_for_upload"
  apk_name = "UnboundWebApk"
  apk_package_name = "org.chromium.arbitrarypackage"
}

webapk_tmpl("new_splash_webapk") {
  config_file = "manifest/bound_manifest_config.json"
  manifest_to_upload_dep = ":generate_new_style_manifest_for_upload"
  apk_name = "NewSplashWebApk"
  apk_package_name = "org.chromium.webapk.new.splash"
}

# Used by javatests
webapk_tmpl("javatests_webapk") {
  config_file = "manifest/bound_manifest_config.json"
  manifest_to_upload_dep = ":generate_old_style_manifest_for_upload"
  delta_config_file = "manifest/javatest_manifest_config_delta.json"
  apk_name = "JavatestsWebApk"
  apk_package_name = "org.chromium.webapk.test"
}

# Used by webapk_shell_apk_h2o_junit_tests
webapk_tmpl("h2o_j_unit_webapk") {
  config_file = "manifest/bound_manifest_config.json"
  manifest_to_upload_dep = ":generate_new_style_manifest_for_upload"
  apk_name = "H2OJUnitWebApk"
  apk_package_name = "org.chromium.webapk.h2o.junit_webapk"
  manifest_output = h2o_junit_manifest_output
  manifest_target_name = h2o_junit_manifest_target_name
}

android_library("shell_apk_javatests") {
  testonly = true
  java_files = [
    "javatests/src/org/chromium/webapk/shell_apk/DexLoaderTest.java",
    "javatests/src/org/chromium/webapk/shell_apk/h2o/SplashUtilsTest.java",
  ]
  deps = [
    ":new_splash_webapk_generated_webapk_java",
    "//base:base_java",
    "//base:base_java_test_support",
    "//chrome/android/webapk/libs/common:common_java",
    "//content/public/test/android:content_java_test_support",
    "//third_party/android_support_test_runner:runner_java",
    "//third_party/junit",
  ]
  srcjar_deps = [ "javatests/dex_optimizer:dex_optimizer_service_aidl" ]
}

junit_binary("webapk_shell_apk_junit_tests") {
  java_files = [
    "junit/src/org/chromium/webapk/shell_apk/HostBrowserClassLoaderTest.java",
    "junit/src/org/chromium/webapk/shell_apk/HostBrowserLauncherParamsTest.java",
    "junit/src/org/chromium/webapk/shell_apk/HostBrowserUtilsTest.java",
    "junit/src/org/chromium/webapk/shell_apk/MainActivityTest.java",
    "junit/src/org/chromium/webapk/shell_apk/WebApkServiceImplWrapperTest.java",
    "junit/src/org/chromium/webapk/shell_apk/WebApkUtilsTest.java",
  ]
  deps = [
    ":webapk_generated_webapk_with_service_java",
    "//chrome/android/webapk/libs/common:common_java",
    "//chrome/android/webapk/libs/runtime_library:runtime_library_for_tests_java",
    "//chrome/android/webapk/test:junit_test_support",
  ]
}

junit_binary("webapk_shell_apk_h2o_junit_tests") {
  java_files = [
    "junit/src/org/chromium/webapk/shell_apk/CustomAndroidOsShadowAsyncTask.java",
    "junit/src/org/chromium/webapk/shell_apk/h2o/LaunchTest.java",
  ]
  deps = [
    ":${h2o_junit_manifest_target_name}",
    ":h2o_j_unit_webapk_generated_webapk_with_service_java",
    "//chrome/android/webapk/libs/common:common_java",
    "//chrome/android/webapk/test:junit_test_support",
  ]
  data_deps = [
    ":${h2o_junit_manifest_target_name}",
  ]
}
