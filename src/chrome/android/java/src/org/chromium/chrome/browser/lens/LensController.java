// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
package org.chromium.chrome.browser.lens;
import android.content.Intent;
import android.net.Uri;

import androidx.annotation.DrawableRes;
import androidx.annotation.Nullable;
import androidx.annotation.StringRes;

import org.chromium.base.Callback;
import org.chromium.chrome.R;
import org.chromium.chrome.browser.AppHooks;
import org.chromium.chrome.browser.contextmenu.ChipRenderParams;
import org.chromium.ui.base.WindowAndroid;
/**
 * A class which manages communication with the Lens SDK.
 */
public class LensController {
    private static LensController sInstance;

    /**
     * @return The LensController to use during the lifetime of the browser process.
     */
    public static LensController getInstance() {
        if (sInstance == null) {
            sInstance = AppHooks.get().createLensController();
        }
        return sInstance;
    }

    /**
     * Whether the Lens SDK is available.
     * @return Whether the Lens SDK is available.
     */
    public boolean isSdkAvailable() {
        return false;
    }

    /**
     * Whether the Lens chip should be enabled based on user signals.
     * @return Whether the Lens SDK is available.
     */
    public boolean isQueryEnabled() {
        // Return true by default to support integration testing where
        // internal code is not available.
        return true;
    }

    /**
     * Classify an image and once complete trigger a callback with a LensQueryResult on whether that
     * image supports a lens action.
     * @param LensQueryParams A wrapper object which contains params for the Lens image query.
     * @param queryCallback A callback to trigger once classification is complete.
     *
     */
    public void queryImage(
            LensQueryParams lensQueryParams, Callback<LensQueryResult> queryCallback) {}

    /*
     * If an image classification request is pending but no longer needed, explicitly terminate
     * the request.
     */
    public void terminateClassification() {}

    /**
     * Get the data to generate a chip as an entry point to Lens.
     * Classify an image and return chip data once the classification completes.
     * @param lensQueryParams A wrapper object which contains params for the image classification
     *         query.
     * @param chipRenderParamsCallback A callback to trigger once the classification is compelete.
     */
    public void getChipRenderParams(
            LensQueryParams lensQueryParams, Callback<ChipRenderParams> chipRenderParamsCallback) {}

    // TODO(benwgold): Delete this function after internal code is switched over.
    /**
     * Get a deeplink intent to Google Lens with an optional content provider image
     * URI. The intent should be constructed immediately before the intent is fired
     * to ensure that the launch timestamp is accurate.
     *
     * @param imageUri The content provider URI generated by chrome (or empty URI) if only resolving
     *         the activity.
     * @param isIncognito Whether the current tab is in incognito mode.
     * @param srcUrl The 'src' attribute of the image.
     * @param requiresConfirmation Whether the request requires an confirmation dialog.
     * @param titleOrAltText The 'title' or, if empty, the 'alt' attribute of the image.
     * @param pageUrl The url of the current page.
     * @param lensIntentType The intent type of the request.
     * @return The intent to Google Lens.
     */
    public Intent getShareWithGoogleLensIntent(Uri imageUri, boolean isIncognito, String srcUrl,
            boolean requiresConfirmation, String titleOrAltText, String pageUrl,
            @Nullable String lensIntentType) {
        return null;
    }

    /**
     * Launch Lens with an intent.
     * @param window The current window.
     * @param intent The intent to Google Lens.
     */
    public void startLens(WindowAndroid window, Intent intent) {}

    /**
     * Launch lens with an intent.
     * @param window The current window.
     * @param lensIntentParams The intent parameters for Lens
     */
    public void startLens(WindowAndroid window, LensIntentParams lensIntentParams) {}

    /**
     * Retrieve the Text resource id for "Shop with Google Lens".
     * @return The resource id for "Shop with Google Lens" string.
     */
    protected @StringRes int getShopWithGoogleLensTextResourceId() {
        return R.string.contextmenu_shop_image_with_google_lens;
    }
    /**
     * Retrieve the Lens icon resource id.
     * Need to put the resource id on the base class to suppress the UnusedResources warning.
     * @return The resource id for Lens icon.
     */
    protected @DrawableRes int getLensIconResourceId() {
        return R.drawable.lens_icon;
    }

    /** Starts the Lens connection. */
    public void startLensConnection() {}

    /** Terminate any active Lens connections. */
    public void terminateLensConnections() {}
}
