# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/android/rules.gni")
import("//build/config/locales.gni")
import("//chrome/android/features/module_names_to_package_ids.gni")
import("//device/vr/buildflags/buildflags.gni")

assert(enable_arcore)
assert(modularize_ar)

template("ar_module_tmpl") {
  assert(defined(invoker.manifest_package))
  assert(defined(invoker.module_name))
  assert(defined(invoker.base_module_target))

  _manifest = "$target_gen_dir/$target_name/AndroidManifest.xml"
  _manifest_target = "${target_name}__manifest"
  jinja_template(_manifest_target) {
    input = "//chrome/android/features/ar/AndroidManifest.xml"
    output = _manifest
    variables = [
      "target_sdk_version=$android_sdk_version",
      "manifest_package=${invoker.manifest_package}",
    ]
  }

  android_app_bundle_module(target_name) {
    forward_variables_from(invoker,
                           [
                             "base_module_target",
                             "module_name",
                             "version_code",
                             "version_name",
                           ])
    android_manifest = _manifest
    android_manifest_dep = ":$_manifest_target"
    deps = [
      "//chrome/browser/android/vr:ar_java",
      "//third_party/android_deps:com_google_ar_core_java",
    ]

    # We store the arcore shim as a separate .so in the bundle module and only
    # load as needed.
    if (android_64bit_target_cpu) {
      if (defined(invoker.is_64_bit_browser) && invoker.is_64_bit_browser) {
        loadable_modules = [ "$root_gen_dir/third_party/android_deps/com_google_ar_core_java/jni/arm64-v8a/libarcore_sdk_c.so" ]

        # TODO(cjgrant): Make this a dummy lib, if SplitCompat properly opens the 64-bit library.
        if (build_apk_secondary_abi && invoker.include_32_bit_webview) {
          secondary_abi_loadable_modules = [ "$root_gen_dir/third_party/android_deps/com_google_ar_core_java/jni/arm64-v8a/libarcore_sdk_c.so" ]
        }
      } else {
        if (build_apk_secondary_abi) {
          secondary_abi_loadable_modules = [ "$root_gen_dir/third_party/android_deps/com_google_ar_core_java/jni/armeabi-v7a/libarcore_sdk_c.so" ]

          # Disguise 32 bit library as 64 bit. This works around a Play Core bug where only 64 bit
          # libraries are extracted on 64 bit devices.
          # TODO(crbug.com/902859): Remove once bug is fixed.
          loadable_modules = [ "$root_gen_dir/third_party/android_deps/com_google_ar_core_java/jni/armeabi-v7a/libarcore_sdk_c.so" ]
        } else {
          loadable_modules = [ "$root_gen_dir/third_party/android_deps/com_google_ar_core_java/jni/armeabi-v7a/libarcore_sdk_c.so" ]
        }
      }
    } else {
      loadable_modules = [ "$root_gen_dir/third_party/android_deps/com_google_ar_core_java/jni/armeabi-v7a/libarcore_sdk_c.so" ]
    }

    uncompress_shared_libraries = true

    # Don't embed more localized strings than required (http://crbug.com/932017)
    aapt_locale_whitelist = locales

    proguard_enabled = !is_java_debug

    package_name = "ar"
    package_name_to_id_mapping = resource_packages_id_mapping
  }
}
