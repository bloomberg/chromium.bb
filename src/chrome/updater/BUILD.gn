# Copyright 2019 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/chrome_build.gni")
import("//build/config/sanitizers/sanitizers.gni")
import("//build/util/process_version.gni")
import("//chrome/updater/branding.gni")
import("//testing/test.gni")

# Run 'gn check out\Default --check-generated //chrome/updater/*' every time
# dependencies are modified until a presubmit is written to automatically
# check that the C++ includes match the build dependency graph.

# TODO(sorin): make the code build on Linux. https://crbug.com/1014320
group("updater") {
  if (is_win) {
    deps = [ "//chrome/updater/win" ]
  }
  if (is_mac) {
    deps = [ "//chrome/updater/mac" ]
  }
  if (is_win || is_mac) {
    deps += [ "//chrome/updater/tools:tools" ]
  }
}

group("all") {
  testonly = true

  if (is_win || is_mac) {
    deps = [
      ":updater",
      ":updater_tests",
      ":updater_tests_system",
      "//chrome/updater/test/test_app",
    ]
  }
}

# Conditional build is needed, otherwise the analyze script on Linux
# requires all targets and it is going to include the targets below.
if (is_win || is_mac) {
  source_set("base") {
    sources = [
      "action_handler.h",
      "activity.cc",
      "activity.h",
      "activity_impl.h",
      "app/app.cc",
      "app/app.h",
      "app/app_install.cc",
      "app/app_install.h",
      "app/app_server.cc",
      "app/app_server.h",
      "app/app_uninstall.cc",
      "app/app_uninstall.h",
      "app/app_update.cc",
      "app/app_update.h",
      "app/app_utils.cc",
      "app/app_utils.h",
      "app/app_wake.cc",
      "app/app_wake.h",
      "check_for_updates_task.cc",
      "check_for_updates_task.h",
      "configurator.cc",
      "configurator.h",
      "constants.cc",
      "constants.h",
      "crash_client.cc",
      "crash_client.h",
      "crash_reporter.cc",
      "crash_reporter.h",
      "crx_downloader_factory.h",
      "device_management/cloud_policy_util.cc",
      "device_management/cloud_policy_util.h",
      "device_management/dm_cached_policy_info.cc",
      "device_management/dm_cached_policy_info.h",
      "device_management/dm_client.cc",
      "device_management/dm_client.h",
      "device_management/dm_message.cc",
      "device_management/dm_message.h",
      "device_management/dm_response_validator.cc",
      "device_management/dm_response_validator.h",
      "device_management/dm_storage.cc",
      "device_management/dm_storage.h",
      "enum_traits.h",
      "external_constants.cc",
      "external_constants.h",
      "external_constants_builder.cc",
      "external_constants_builder.h",
      "external_constants_default.cc",
      "external_constants_default.h",
      "external_constants_override.cc",
      "external_constants_override.h",
      "installer.cc",
      "installer.h",
      "lib_util.h",
      "persisted_data.cc",
      "persisted_data.h",
      "policy/dm_policy_manager.cc",
      "policy/dm_policy_manager.h",
      "policy/manager.cc",
      "policy/manager.h",
      "policy/service.cc",
      "policy/service.h",
      "prefs.cc",
      "prefs.h",
      "prefs_impl.h",
      "registration_data.cc",
      "registration_data.h",
      "setup.h",
      "splash_screen.h",
      "tag.cc",
      "tag.h",
      "update_service.cc",
      "update_service.h",
      "update_service_impl.cc",
      "update_service_impl.h",
      "update_service_impl_inactive.cc",
      "update_service_impl_inactive.h",
      "update_service_internal.h",
      "update_service_internal_impl.cc",
      "update_service_internal_impl.h",
      "update_service_internal_impl_inactive.cc",
      "update_service_internal_impl_inactive.h",
      "update_service_internal_impl_qualifying.cc",
      "update_service_internal_impl_qualifying.h",
      "updater.cc",
      "updater.h",
      "updater_scope.cc",
      "updater_scope.h",
      "util.cc",
      "util.h",
    ]

    deps = [
      ":branding_header",
      ":version_header",
      "//base",
      "//base:i18n",
      "//chrome/updater/protos:omaha_proto",
      "//components/crash/core/common:crash_key",
      "//components/crash/core/common:crash_key_lib",
      "//components/crx_file:crx_file",
      "//components/policy/proto",
      "//components/prefs",
      "//components/update_client",
      "//components/update_client:in_process_patcher",
      "//components/update_client:in_process_unzipper",
      "//components/version_info",
      "//crypto",
      "//third_party/boringssl",
      "//third_party/crashpad/crashpad/client",
      "//third_party/crashpad/crashpad/handler",
      "//url",
    ]

    if (is_mac) {
      sources += [
        "activity_impl_mac.cc",
        "app/app_install_mac.mm",
        "app/server/mac/app_server.h",
        "app/server/mac/server.h",
        "app/server/mac/server.mm",
        "app/server/mac/service_delegate.h",
        "app/server/mac/service_delegate.mm",
        "app/server/mac/service_protocol.h",
        "app/server/mac/service_protocol.mm",
        "app/server/mac/update_service_wrappers.h",
        "app/server/mac/update_service_wrappers.mm",
        "device_management/dm_storage_mac.mm",
        "installer_mac.cc",
        "launchd_util.cc",
        "launchd_util.h",
        "lib_util_mac.mm",
        "mac/installer_dmg.h",
        "mac/installer_dmg.mm",
        "mac/mac_util.h",
        "mac/mac_util.mm",
        "mac/net/network.h",
        "mac/net/network_fetcher.h",
        "mac/net/network_fetcher.mm",
        "mac/setup/setup.h",
        "mac/setup/setup.mm",
        "mac/update_service_internal_proxy.h",
        "mac/update_service_internal_proxy.mm",
        "mac/update_service_proxy.h",
        "mac/update_service_proxy.mm",
        "mac/xpc_service_names.h",
        "mac/xpc_service_names.mm",
        "policy/mac/managed_preference_policy_manager.h",
        "policy/mac/managed_preference_policy_manager.mm",
        "policy/mac/managed_preference_policy_manager_impl.h",
        "policy/mac/managed_preference_policy_manager_impl.mm",
        "prefs_mac.mm",
        "service_factory_mac.mm",
        "setup_mac.mm",
      ]

      deps += [
        "//chrome/common/mac:launchd",
        "//mojo/public/cpp/platform",
        "//net",
      ]

      frameworks = [
        "AppKit.framework",
        "CoreServices.framework",
        "Foundation.framework",
        "ServiceManagement.framework",
        "SystemConfiguration.framework",
      ]
    }

    if (is_win) {
      allow_circular_includes_from = [
        "//chrome/updater/win:app_install_controller",
        "//chrome/updater/win/ui",
      ]
      sources += [
        "activity_impl_win.cc",
        "app/app_install_win.cc",
        "app/server/win/com_classes.cc",
        "app/server/win/com_classes.h",
        "app/server/win/com_classes_legacy.cc",
        "app/server/win/com_classes_legacy.h",
        "app/server/win/server.cc",
        "app/server/win/server.h",
        "app/server/win/service_main.cc",
        "app/server/win/service_main.h",
        "device_management/dm_storage_win.cc",
        "lib_util_win.cc",
        "policy/win/group_policy_manager.cc",
        "policy/win/group_policy_manager.h",
        "prefs_win.cc",
        "service_factory_win.cc",
        "setup_win.cc",
        "win/action_handler.cc",
        "win/install_progress_observer.cc",
        "win/install_progress_observer.h",
        "win/installer_api.cc",
        "win/installer_api.h",
        "win/net/net_util.cc",
        "win/net/net_util.h",
        "win/net/network.h",
        "win/net/network_fetcher.cc",
        "win/net/network_fetcher.h",
        "win/net/network_winhttp.cc",
        "win/net/network_winhttp.h",
        "win/net/proxy_configuration.cc",
        "win/net/proxy_configuration.h",
        "win/net/proxy_info.cc",
        "win/net/proxy_info.h",
        "win/net/scoped_hinternet.h",
        "win/net/scoped_winttp_proxy_info.h",
        "win/scoped_handle.h",
        "win/scoped_impersonation.cc",
        "win/scoped_impersonation.h",
        "win/setup/setup.cc",
        "win/setup/setup.h",
        "win/setup/setup_util.cc",
        "win/setup/setup_util.h",
        "win/setup/uninstall.cc",
        "win/setup/uninstall.h",
        "win/task_scheduler.cc",
        "win/task_scheduler.h",
        "win/update_service_internal_proxy.cc",
        "win/update_service_internal_proxy.h",
        "win/update_service_proxy.cc",
        "win/update_service_proxy.h",
        "win/user_info.cc",
        "win/user_info.h",
        "win/win_constants.cc",
        "win/win_constants.h",
        "win/win_util.cc",
        "win/win_util.h",
        "win/wrl_module.h",
      ]
      deps += [
        "//chrome/installer/util:with_no_strings",
        "//chrome/updater/app/server/win:updater_idl_idl",
        "//chrome/updater/app/server/win:updater_internal_idl_idl",
        "//chrome/updater/app/server/win:updater_legacy_idl_idl",
        "//chrome/updater/win:app_install_controller",
        "//chrome/updater/win/ui",
      ]

      configs -= [ "//build/config/win:winver" ]
      configs += [
        "//chrome/updater/app/server/win:winver",
        "//chrome/updater/win:wrl_strict",
      ]

      defines = [ "SECURITY_WIN32" ]

      libs = [
        "secur32.lib",
        "taskschd.lib",
        "winhttp.lib",
      ]
    }
  }

  source_set("version_header") {
    sources = [ "updater_version.h" ]
  }

  process_version("updater_version_cc") {
    sources = [ "//chrome/VERSION" ]
    deps = [ ":version_header" ]
    template_file = "updater_version.cc.in"
    output = "$target_gen_dir/updater_version.cc"
  }

  process_version("updater_version_cc_offset") {
    sources = [ "//chrome/VERSION" ]
    deps = [ ":version_header" ]
    template_file = "updater_version_offset.cc.in"
    output = "$target_gen_dir/updater_version_offset.cc"
  }

  process_version("branding_header") {
    extra_args = [
      "-e",
      "COMPANY_FULLNAME=\"$updater_company_full_name\"",
      "-e",
      "COMPANY_SHORTNAME=\"$updater_company_short_name\"",
      "-e",
      "PRODUCT_FULLNAME=\"$updater_product_full_name\"",
      "-e",
      "COPYRIGHT=\"updater_copyright\"",
      "-e",
      "MAC_BUNDLE_IDENTIFIER=\"$mac_updater_bundle_identifier\"",
      "-e",
      "BROWSER_NAME=\"$browser_name\"",
      "-e",
      "MAC_BROWSER_BUNDLE_IDENTIFIER=\"$mac_browser_bundle_identifier\"",
      "-e",
      "UPDATE_CHECK_URL=\"$update_check_url\"",
      "-e",
      "CRASH_UPLOAD_URL=\"$crash_upload_url\"",
      "-e",
      "CRASH_STAGING_UPLOAD_URL=\"$crash_staging_upload_url\"",
      "-e",
      "DEVICE_MANAGEMENT_SERVER_URL=\"$device_management_server_url\"",
    ]

    template_file = "updater_branding.h.in"
    output = "$target_gen_dir/updater_branding.h"
  }

  source_set("updater_tests_support") {
    testonly = true

    sources = [
      "unittest_util.cc",
      "unittest_util.h",
    ]

    deps = [
      ":base",
      "//base",
    ]
  }

  source_set("browser_sources") {
    sources = [
      "//chrome/updater/constants.cc",
      "//chrome/updater/constants.h",
      "//chrome/updater/enum_traits.h",
      "//chrome/updater/registration_data.cc",
      "//chrome/updater/registration_data.h",
      "//chrome/updater/update_service.cc",
      "//chrome/updater/update_service.h",
    ]

    deps = [
      ":branding_header",
      "//base",
      "//components/update_client",
    ]

    if (is_mac) {
      sources += [
        "//chrome/updater/app/server/mac/service_protocol.h",
        "//chrome/updater/app/server/mac/service_protocol.mm",
        "//chrome/updater/app/server/mac/update_service_wrappers.h",
        "//chrome/updater/app/server/mac/update_service_wrappers.mm",
        "//chrome/updater/mac/xpc_service_names.h",
        "//chrome/updater/mac/xpc_service_names.mm",
      ]

      deps += [
        ":updater_version_cc",
        ":version_header",
      ]
    }

    visibility = [
      "//chrome/browser/ui:ui",
      "//chrome/browser/updater:*",
    ]
  }

  source_set("updater_test_sources") {
    testonly = true
    sources = [
      "app/app_server_unittest.cc",
      "device_management/dm_client_unittest.cc",
      "device_management/dm_message_unittest.cc",
      "device_management/dm_policy_builder_for_testing.cc",
      "device_management/dm_policy_builder_for_testing.h",
      "device_management/dm_response_validator_unittest.cc",
      "device_management/dm_storage_unittest.cc",
      "enum_traits_unittest.cc",
      "external_constants_builder_unittest.cc",
      "external_constants_override_unittest.cc",
      "lib_util_unittest.cc",
      "persisted_data_unittest.cc",
      "policy/dm_policy_manager_unittest.cc",
      "policy/manager_unittest.cc",
      "policy/service_unittest.cc",
      "prefs_unittest.cc",
      "tag_unittest.cc",
      "test/integration_test_commands.h",
      "test/integration_test_commands_system.cc",
      "test/integration_test_commands_user.cc",
      "test/integration_tests.cc",
      "test/integration_tests_impl.cc",
      "test/integration_tests_impl.h",
      "test/server.cc",
      "test/server.h",
      "unittest_util_unittest.cc",
      "update_service_unittest.cc",
      "updater_scope_unittest.cc",
      "updater_unittest.cc",
    ]

    deps = [
      ":base",
      ":branding_header",
      ":updater",
      ":updater_tests_support",
      ":updater_version_cc",
      ":version_header",
      "//base",
      "//base/test:test_support",
      "//chrome/common:constants",
      "//chrome/updater/protos:omaha_proto",
      "//chrome/updater/test/test_app:constants",
      "//chrome/updater/test/test_app:version_header",
      "//chrome/updater/tools:unittest",
      "//components/policy/proto",
      "//components/prefs:test_support",
      "//components/update_client",
      "//net:test_support",
      "//testing/gtest",
      "//third_party/re2",
      "//url",
    ]

    if (is_win) {
      sources += [
        "activity_impl_win_unittest.cc",
        "policy/win/group_policy_manager_unittest.cc",
        "test/integration_tests_win.cc",
        "win/installer_api_unittest.cc",
        "win/net/network_unittest.cc",
        "win/net/proxy_configuration_unittest.cc",
        "win/net/proxy_info_unittest.cc",
        "win/setup/setup_util_unittest.cc",
        "win/tag_extractor_unittest.cc",
        "win/task_scheduler_unittest.cc",
        "win/win_util_unittest.cc",
      ]

      deps += [
        "//chrome/updater/app/server/win:updater_idl_idl",
        "//chrome/updater/app/server/win:updater_internal_idl_idl",
        "//chrome/updater/app/server/win:updater_legacy_idl_idl",
        "//chrome/updater/win:tag_extractor",
        "//chrome/updater/win/test:test_executables",
        "//chrome/updater/win/test:test_strings",
      ]

      data_deps = [
        "//chrome/updater/win:updater",
        "//chrome/updater/win/installer",
        "//chrome/updater/win/installer:installer_unittest",
      ]

      data = [
        "test/data/signed.exe",
        "test/data/signed.exe.gz",
        "test/data/tagged_encode_utf8.exe",
        "test/data/tagged_magic_utf16.exe",
        "test/data/updater.runtime_deps",
      ]
    }

    if (is_mac) {
      sources += [
        "mac/net/network_unittest.cc",
        "mac/scoped_xpc_service_mock.h",
        "mac/scoped_xpc_service_mock.mm",
        "mac/setup/setup_unittest.mm",
        "mac/update_service_proxy_test.mm",
        "policy/mac/managed_preference_policy_manager_impl_unittest.mm",
        "policy/mac/managed_preference_policy_manager_unittest.cc",
        "test/integration_tests_mac.mm",
      ]

      deps += [
        "//base",
        "//base/test:test_support",
        "//chrome/common:constants",
        "//chrome/common/mac:launchd",
        "//net:test_support",
        "//testing/gmock",
        "//testing/gtest",
        "//third_party/ocmock",
      ]

      data = [
        "//chrome/test/data/updater/updater_setup_test_dmg.dmg",
        "//chrome/test/data/updater/updater_qualification_app_dmg.crx",
      ]

      data_deps = [
        "//chrome/updater/mac:updater_bundle",
        "//chrome/updater/test/test_app",
      ]
    }
  }

  # These tests are run serially since they mutate system state.
  test("updater_tests") {
    testonly = true

    sources = [
      "run_all_unittests.cc",
      "test/integration_test_commands_factory_user.cc",
    ]

    deps = [
      ":updater_test_sources",
      "//base/test:test_support",
      "//chrome/common:constants",
      "//testing/gtest",
    ]

    data_deps = [ "//chrome/updater/test/test_app" ]
    if (is_mac) {
      data_deps += [ "//chrome/updater/mac:updater_bundle" ]
    }
  }

  test("updater_tests_system") {
    testonly = true

    sources = [
      "run_all_unittests.cc",
      "test/integration_test_commands_factory_system.cc",
    ]

    deps = [
      ":updater_test_sources",
      "//base/test:test_support",
      "//chrome/common:constants",
      "//testing/gtest",
    ]

    data_deps = [ ":updater_integration_tests_helper" ]
    if (is_mac) {
      data_deps += [
        "//chrome/updater/mac:updater_bundle",
        "//chrome/updater/test/test_app",
      ]
    }
  }

  executable("updater_integration_tests_helper") {
    testonly = true

    sources = [
      "test/integration_test_commands_factory_system.cc",
      "test/integration_tests_helper.cc",
    ]

    deps = [
      ":base",
      ":updater_test_sources",
      "//base",
      "//base/test:test_support",
      "//url",
    ]
  }
}
