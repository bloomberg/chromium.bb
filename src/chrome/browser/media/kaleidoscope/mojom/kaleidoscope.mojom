// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module media.mojom;

import "chrome/browser/media/feeds/media_feeds_store.mojom";
import "mojo/public/mojom/base/time.mojom";
import "url/mojom/origin.mojom";

// The result of getting the credentials.
enum CredentialsResult {
  kSuccess,
  kFailedIncognito,
  kFailedChild,
  kDisabledByPolicy,
};

// The credentials required to make Google API calls from JS.
struct Credentials {
  // Chrome's API Key.
  string api_key;

  // An OAuth access token scoped to the Kaleidoscope API for the currently
  // logged in user. If the user is not signed in then this will be empty.
  string? access_token;

  // The time these credentials will expire.
  mojo_base.mojom.Time? expiry_time;
};

enum KaleidoscopeTab {
  // The content will include content of all different types.
  kForYou,

  // The content will contain only TV shows.
  kTVShows,

  // The content will contain only Movies.
  kMovies,
};

enum KaleidoscopeFirstRunExperienceStep {
  kCompleted,
  kProviderSelection,
  kMediaFeedsConsent,
};

// Provides data for the kaleidoscope page.
interface KaleidoscopeDataProvider {
  // Returns all the Media Feeds that Kaleidoscope might decide to show.
  // Returned feeds will be appropriate for the |tab|.
  GetTopMediaFeeds(KaleidoscopeTab tab) => (array<media_feeds.mojom.MediaFeed> feeds);

  // Returns all the items from a Media Feed that Kaleidoscope might decide to
  // show. Returned items will be appropriate for the |tab|.
  GetMediaFeedContents(int64 feed_id, KaleidoscopeTab tab) => (array<media_feeds.mojom.MediaFeedItem> items);

  // Returns all the items from the Media Feeds Store that can be displayed for
  // continue watching. Returned items will be appropriate for the |tab|.
  GetContinueWatchingMediaFeedItems(KaleidoscopeTab tab) => (array<media_feeds.mojom.MediaFeedItem> items);

  // Retrieves the current credentials.
  GetCredentials() => (Credentials? credentials, CredentialsResult result);

  // Returns true if the first run experience should be shown.
  GetShouldShowFirstRunExperience() => (bool should_show_first_run);

  // While the user is on the First Run Experience, this will be called each
  // time they move onto a different step. Used to set prefs and record metrics
  // on what step the user stopped at.
  SetFirstRunExperienceStep(KaleidoscopeFirstRunExperienceStep step);

  // Returns all the Media Feeds so the user can choose which ones they want to enable/disable.
  GetAllMediaFeeds() => (array<media_feeds.mojom.MediaFeed> feeds);

  // Called when the user completes the consent screen for Media Feeds.
  SetMediaFeedsConsent(bool accepted_media_feeds,
                       bool accepted_auto_select_media_feeds,
                       array<int64> enabled_feed_ids,
                       array<int64> disabled_feed_ids);

  // Returns true if the user has consented to auto-select media feeds to
  // display.
  GetAutoSelectMediaFeedsConsent() => (bool consent);

  // Returns all the watch time origins from media history store that have
  // watch time above a threshold.
  GetHighWatchTimeOrigins() => (array<url.mojom.Origin> origins);

  // Called when the user clicks the "Send Feedback" button in Kaleidoscope.
  // Will trigger a feedback dialog to be displayed.
  SendFeedback();

  // Gets the collections from the backend to be displayed. Takes a string that
  // contains the request to be sent to the server. The request is the
  // GetCollectionsRequest proto here: go/ks-media-proto.
  GetCollections(string request) => (GetCollectionsResponse response);

  // Gets a list of stored providers that will be used to filter the
  // recommendations on the server if the user is signed out. They are arbitary
  // strings that are provided by the server, stored locally and then retrieved
  // when Kaleidoscope is loaded.
  GetSignedOutProviders() => (array<string> providers);

  // Stores a list of providers that were chosen by the user. Only used if the
  // user is signed out.
  SetSignedOutProviders(array<string> providers);
};

enum GetCollectionsResult {
 // The request was successful.
 kSuccess,

 // The request failed.
 kFailed,

 // Kaleidoscope is not available to the user.
 kNotAvailable,

 // The user needs to complete the first run experience.
 kFirstRun,
};

struct GetCollectionsResponse {
  // Contains the response from the server. The response is the
  // GetCollectionsResponse proto here: go/ks-media-proto.
  string response;

  // Contains the result of wether the request was successful or not.
  GetCollectionsResult result;
};
