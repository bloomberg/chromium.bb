// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is a subset copy of
// third_party/cros_system_api/dbus/attestation/interface.proto
// third_party/cros_system_api is only for ChromeOS.

syntax = "proto2";

option optimize_for = LITE_RUNTIME;

package enterprise_connectors;

enum AttestationStatus {
  STATUS_SUCCESS = 0;
  STATUS_UNEXPECTED_DEVICE_ERROR = 1;
  STATUS_NOT_AVAILABLE = 2;
  STATUS_NOT_READY = 3;
  STATUS_NOT_ALLOWED = 4;
  STATUS_INVALID_PARAMETER_ERROR = 5;
  STATUS_REQUEST_DENIED_BY_CA = 6;
  STATUS_CA_NOT_AVAILABLE = 7;
  STATUS_NOT_SUPPORTED = 8;
  // The error that is translated into by the client to indicate any kind of
  // D-Bus error.
  STATUS_DBUS_ERROR = 9;
}

enum VAType {
  DEFAULT_VA = 0;
  TEST_VA = 1;
}

// Sign a challenge for an enterprise device / user.  This challenge is
// typically generated by and the response verified by the Enterprise Device
// Verification Server (DVServer).
message SignEnterpriseChallengeRequest {
  // The key name. This is the same name previously passed to
  // FinishCertificateRequestRequest.
  optional string key_label = 1;
  // The canonical username of the active user profile.
  // When this is set, an EUK challenge will be performed.
  // When this is unset or empty, an EMK challenge will be performed.
  optional string username = 2;
  // A domain value to be included in the challenge response.
  // This is supposed to be the user's canonical e-mail address for an EUK
  // challenge. Ignored for EMK challenges.
  optional string domain = 3;
  // A device identifier to be included in the challenge response.
  optional bytes device_id = 4;
  // Whether the challenge response should include
  // a SignedPublicKeyAndChallenge.
  optional bool include_signed_public_key = 5;
  // The challenge to be signed.
  optional bytes challenge = 6;
  // The VA server that will handle the challenge.
  optional VAType va_type = 7;
  // The name of the key used for SignedPublicKeyAndChallenge. If left empty,
  // the same key used to sign the challenge response (EMK or EUK) will be used
  // for SignedPublicKeyAndChallenge.
  optional string key_name_for_spkac = 8;
}

message SignEnterpriseChallengeReply {
  optional AttestationStatus status = 1;
  // The challenge response.
  optional bytes challenge_response = 2;
}
