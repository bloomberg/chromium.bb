// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_SEARCH_CHROME_COLORS_CHROME_COLORS_SERVICE_H_
#define CHROME_BROWSER_SEARCH_CHROME_COLORS_CHROME_COLORS_SERVICE_H_

#include "base/callback.h"
#include "chrome/browser/search/search_provider_observer.h"
#include "chrome/browser/themes/theme_service.h"
#include "components/keyed_service/core/keyed_service.h"
#include "content/public/browser/web_contents.h"
#include "third_party/skia/include/core/SkColor.h"

class TestChromeColorsService;

namespace chrome_colors {

// Different cases that will trigger a revert for theme changes.
// This enum must match the numbering for ChromeColorsRevertReason in enums.xml.
// Do not reorder or remove items, and update kMaxValue when new items are
// added.
enum class RevertReason {
  MENU_CANCEL = 0,
  SEARCH_PROVIDER_CHANGE = 1,
  TAB_CLOSED = 2,
  NAVIGATION = 3,
  SHUTDOWN = 4,
  kMaxValue = SHUTDOWN,
};

// Supports theme changes originating from the NTP customization menu. Users can
// apply a Chrome color or the default theme, which will then either be reverted
// or confirmed and made permanent. If third party themes are present, users
// will also have a choice to permanently uninstall it.
// This service only works for Google NTP.
class ChromeColorsService : public KeyedService {
 public:
  explicit ChromeColorsService(Profile* profile);
  ~ChromeColorsService() override;

  // Returns id for the given |color| if it is in the predefined set, and 0
  // otherwise.
  static int GetColorId(const SkColor color);

  // Record installed color id to UMA histogram. If |color| is not in the
  // predefined set 0 is recorded.
  static void RecordColorOnLoadHistogram(SkColor color);

  // Applies a theme that can be reverted by saving the previous theme state and
  // the |tab| that changes are made from.
  void ApplyDefaultTheme(content::WebContents* tab);
  void ApplyAutogeneratedTheme(SkColor color, content::WebContents* tab);

  // Reverts to the previous theme state before first Apply* was used. Called
  // because user action on colors menu.
  void RevertThemeChanges();

  // Same as |RevertThemeChanges| but only reverts theme changes if they were
  // made from the same tab. Used for reverting changes from a closing NTP.
  void RevertThemeChangesForTab(content::WebContents* tab, RevertReason reason);

  // Confirms current theme changes. Since the theme is already installed by
  // Apply*, this only clears the previously saved state.
  void ConfirmThemeChanges();

 private:
  friend class ::TestChromeColorsService;

  // Reverts to the previous theme state and records |reason|.
  void RevertThemeChangesWithReason(RevertReason reason);

  // Callback for search provider change.
  void OnSearchProviderChanged();

  // Saves the necessary state(revert callback and the current tab) for
  // performing theme change revert. Saves the state only if it is not set.
  void SaveThemeRevertState(content::WebContents* tab);

  // KeyedService implementation:
  void Shutdown() override;

  ThemeService* const theme_service_;

  // The first tab that used Apply* and hasn't Confirm/Revert the changes.
  content::WebContents* dialog_tab_ = nullptr;

  // Used for reverting back to the previously installed theme.
  std::unique_ptr<ThemeService::ThemeReinstaller> prev_theme_reinstaller_;

  // Keeps track of any changes in search engine provider. May be null.
  std::unique_ptr<SearchProviderObserver> search_provider_observer_;

  base::WeakPtrFactory<ChromeColorsService> weak_ptr_factory_{this};

  DISALLOW_COPY_AND_ASSIGN(ChromeColorsService);
};

}  // namespace chrome_colors

#endif  // CHROME_BROWSER_SEARCH_CHROME_COLORS_CHROME_COLORS_SERVICE_H_
