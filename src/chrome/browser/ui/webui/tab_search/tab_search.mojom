// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module tab_search.mojom;

import "mojo/public/mojom/base/time.mojom";

// Collection of WindowTabs of a profile.
struct ProfileTabs {
  array<WindowTabs> windows;
};

// Collection of Tab of a window.
struct WindowTabs {
  bool active;
  array<Tab> tabs;
};

// Information about an existing open tab.
struct Tab {
  // Whether the tab is active.
  bool active;

  // The index of the tab in the current tab strip.
  int32 index;

  // The unique identifier of the tab.
  int32 tab_id;

  // The group identifier of the tab.
  string? group_id;

  // Whether the tab is pinned.
  bool pinned;

  // The title of the tab.
  string title;

  // The URL of the tab.
  string url;

  // The URL of the favicon in data scheme.
  // Only used in OTR profile where chrome://favicon2 is not available.
  string? favicon_url;

  // Whether the favicon is the default one.
  bool is_default_favicon;

  // Whether the tab strip should show the icon.
  bool show_icon;

  // Time ticks when the tab is last active.
  mojo_base.mojom.TimeTicks last_active_time_ticks;
};

// Collection of tab groups.
struct TabGroups {
  map<string, TabGroup> groups;
};

// Information about a tab group.
struct TabGroup {
  string color;
  string text_color;
  string title;
};

// Information about switching to a tab.
struct SwitchToTabInfo {
  int32 tab_id;
};

// Used by the WebUI page to bootstrap bidirectional communication.
interface PageHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePageHandler(pending_remote<Page> page,
                    pending_receiver<PageHandler> handler);
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
  // Close a specific tab.
  CloseTab(int32 tab_id);

  // Get tabs grouped by windows for the current profile.
  GetProfileTabs() => (ProfileTabs profile_tabs);

  // Get tab groups for the current profile.
  GetTabGroups() => (TabGroups tab_groups);

  // Show the feedback page.
  ShowFeedbackPage();

  // Switch to a specific tab.
  SwitchToTab(SwitchToTabInfo switch_to_tab_info);

  // Notify the backend that the UI is ready to be shown.
  ShowUI();

  // Notify the backend that the UI is ready to be closed.
  CloseUI();
};

// WebUI-side handler for requests from the browser.
interface Page {
  // Callback when any tabs in the current profile are
  // selected/inserted/moved/replaced
  TabsChanged();

  // Callback when a tab is updated within the same web contents.
  // e.g. url, title or favicon changed.
  TabUpdated(Tab tab);

  // Callback when tabs are removed.
  TabsRemoved(array<int32> tab_ids);
};
