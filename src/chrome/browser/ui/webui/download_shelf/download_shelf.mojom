// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module download_shelf.mojom;

import "mojo/public/mojom/base/file_path.mojom";
import "url/mojom/url.mojom";

// The danger type associated with a given download item. Maps to
// download::DownloadDangerType in components/download/public/common/download_danger_type.h.
enum DangerType {
  // The download is safe.
  kNotDangerous = 0,
  // A dangerous file to the system.
  kDangerousFile = 1,
  // Safebrowsing download service shows this URL leads to malicious file
  // download.
  kDangerousUrl = 2,
  // SafeBrowsing download service shows this file content as being malicious.
  kDangerousContent = 3,
  // The content of this download may be malicious (e.g., extension is exe but
  // SafeBrowsing has not finished checking the content).
  kMaybeDangerousContent = 4,
  // SafeBrowsing download service checked the contents of the download, but
  // didn't have enough data to determine whether it was malicious.
  kUncommonContent = 5,
  // The download was evaluated to be one of the other types of danger,
  // but the user told us to go ahead anyway.
  kUserValidated = 6,
  // SafeBrowsing download service checked the contents of the download and
  // didn't have data on this specific file, but the file was served from a host
  // known to serve mostly malicious content.
  kDangerousHost = 7,
  // Applications and extensions that modify browser and/or computer settings
  kPotentiallyUnwanted = 8,
  // Download URL allowed by enterprise policy.
  kAllowListedByPolicy = 9,
  // Download is pending a more detailed verdict.
  kAsyncScanning = 10,
  // Download is password protected, and should be blocked according to policy.
  kBlockedPasswordProtected = 11,
  // Download is too large, and should be blocked according to policy. See the
  // BlockLargeFileTransfer policy for details.
  kBlockedTooLarge = 12,
  // Download deep scanning identified sensitive content, and recommended
  // warning the user.
  kSensitiveContentWarning = 13,
  // Download deep scanning identified sensitive content, and recommended
  // blocking the file.
  kSensitiveContentBlock = 14,
  // Download deep scanning identified no problems.
  kDeepScannedSafe = 15,
  // Download deep scanning identified a problem, but the file has already been
  // opened by the user.
  kDeepScannedOpenedDangerous = 16,
  // The user is enrolled in the Advanced Protection Program, and the server has
  // recommended this file be deep scanned.
  kPromptForScanning = 17,
  // The download has a file type that is unsupported for deep scanning, and
  // should be blocked according to policy. See the BlockUnsupportedFiletypes
  // policy for details.
  kBlockedUnsupportedFileType = 18,
};

// The download state associated with a given download item. Maps to
// download::DownloadItem::DownloadState in components/download/public/common/download_item.h.
enum DownloadState {
  // Download is completely finished.
  kComplete,
  // Download has been cancelled.
  kCancelled,
  // Download is in progress.
  kInProgress,
  // This state indicates that the download has been interrupted.
  kInterrupted,
};

// Mixed content details associated with a given download item. Maps to
// download::DownloadItem::MixedContentStatus in components/download/public/common/download_item.h.
enum MixedContentStatus {
  // Target not yet determined, so status not yet available.
  kUnknown = 0,
  // Download is not mixed content.
  kSafe = 1,
  // Download has been explicitly OK'd by the user. Only used on Desktop.
  kValidated = 2,
  // Download is mixed content, and the user should be warned.
  kWarn = 3,
  // Download is mixed content, and the user should see an error.
  kBlock = 4,
  // Download is mixed content, and it should be silently dropped.
  kSilentBlock = 5,
};

// Encapsulates all the details required in order to display a download in a
// user interface. Based on DownloadUIModel in chrome/browser/download/download_ui_model.h
// and download::DownloadItem in components/download/public/common/download_item.h.
struct DownloadItem {
  // Whether the safe browsing download feedback feature is available for this
  // download.
  bool allow_download_feedback;

  // Danger type associated with this download.
  DangerType danger_type;

  // Filename that should be reported to the user.
  mojo_base.mojom.FilePath file_name_to_report_user;

  // Download identifier.
  uint32 id;

  // Whether it is considered a dangerous download.
  bool is_dangerous;

  // Whether it is currently paused explicitly by the user.
  bool is_paused;

  // Whether it is a malicious download.
  bool is_malicious;

  // The mixed content status determined during download target determination.
  MixedContentStatus mixed_content_status;

  // The URL of the originating request.
  url.mojom.Url original_url;

  // Total number of bytes that have been received and written to the download
  // file.
  int64 received_bytes;

  // Whether the download will be auto-opened when complete.
  bool should_open_when_complete;

  // Whether the Origin should be clearly displayed in the notification for
  // security reasons.
  bool should_promote_origin;

  // State of this download.
  DownloadState state;

  // A short one-line status string for the download.
  string status_text;

  // Target path of an in-progress download. May be empty if the target path
  // hasn't yet been determined.
  mojo_base.mojom.FilePath? target_file_path;

  // A string suitable for use as a tooltip.
  string tooltip_text;

  // Total number of expected bytes or -1 if the size is unknown.
  int64 total_bytes;

  // Caption text for a button for confirming a dangerous download warning.
  string warning_confirm_button_text;
};

// Used by the WebUI page to bootstrap bidirectional communication.
interface PageHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePageHandler(pending_remote<Page> page,
                    pending_receiver<PageHandler> handler);
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
  // Show the context menu for a download item at a given position.
  // TODO(kerenzhu): Use gfx::Point from geometry.mojom. It's not
  // supported in WebUI yet.
  ShowContextMenu(uint32 download_id, int32 client_x, int32 client_y);
};

// WebUI-side handler for requests from the browser.
interface Page {
  // Called when a download has triggered and thus a new DownloadItem has been
  // created.
  OnNewDownload(DownloadItem download_item);
};
