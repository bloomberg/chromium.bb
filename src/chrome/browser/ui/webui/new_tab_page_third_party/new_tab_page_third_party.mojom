// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module new_tab_page_third_party.mojom;

import "mojo/public/mojom/base/text_direction.mojom";
import "mojo/public/mojom/base/time.mojom";
import "skia/public/mojom/skcolor.mojom";
import "url/mojom/url.mojom";

struct MostVisitedTile {
  string title;
  mojo_base.mojom.TextDirection title_direction;
  url.mojom.Url url;
  bool is_query_tile;

  // ======= METRICS =======
  // Identifier of most visited entry source (e.g. top sites).
  int32 source;
  // Identifier of most visited entry title source (e.g. page's title tag).
  int32 title_source;
  // Time the most visited entry was generated (e.g. received by a suggestion
  // server).
  mojo_base.mojom.Time data_generation_time;
};

// A generic theme.
struct Theme {
  skia.mojom.SkColor shortcut_background_color;
  skia.mojom.SkColor shortcut_text_color;
  // True if |shortcut_background_color| is dark.
  bool shortcut_use_white_tile_icon;
  // True if the shortcuts titles should be wrapped in a pill.
  bool shortcut_use_title_pill;
  // True if the theme is dark (e.g. NTP background color is dark).
  bool is_dark;
  // Used to show the theme extension background if one is set.
  string id;
  // Theme color ready to be set in CSS.
  string color_background;
  // The theme extension can set image tiling. This is ready to be set in CSS.
  string background_tiling;
  // Position CSS of background image.
  string background_position;
  // True if custom background is set.
  bool has_custom_background;
};

// Used by the WebUI page to bootstrap bidirectional communication.
interface PageHandlerFactory {
  // The WebUI page's |BrowserProxy| singleton calls this method when the page
  // is first initialized.
  CreatePageHandler(pending_remote<Page> page,
                    pending_receiver<PageHandler> handler);
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
  // Deletes tile by |url|.
  DeleteMostVisitedTile(url.mojom.Url url);
  // Logs that |tile| at position |index| was triggered to navigate to that
  // most visited entry.
  // |mouse_button| indicates which mouse button was pressed on the entry. See
  // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button
  OnMostVisitedTileNavigation(MostVisitedTile tile,
                        uint32 index,
                        uint8 mouse_button,
                        bool alt_key,
                        bool ctrl_key,
                        bool meta_key,
                        bool shift_key);
  // Replaces the custom and most-visited tiles with the default tile set.
  RestoreMostVisitedDefaults();
  // Undoes the last action done to the tiles (add, delete, reorder, restore or
  // update). Note that only the last action can be undone.
  UndoMostVisitedTileAction();
  // Called to update the tiles.
  UpdateMostVisitedTiles();
  // Called to update the theme.
  UpdateTheme();

  // ======= METRICS =======
  // Logs that |tiles| were displayed / updated at |time|. The first instance of
  // this event is used as a proxy for when the NTP has finished loading.
  OnMostVisitedTilesRendered(array<MostVisitedTile> tiles, double time);
};

// WebUI-side handler for requests from the browser.
interface Page {
  // Updates the page with most-visited info which includes whether the
  // tiles should be shown, if links can be customized and the tiles.
  SetMostVisitedTiles(array<MostVisitedTile> tiles);
  // Sets the current theme.
  SetTheme(Theme theme);
};
