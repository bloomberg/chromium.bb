// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module history_clusters.mojom;

import "mojo/public/mojom/base/time.mojom";
import "url/mojom/url.mojom";

// Represents a search query related to a visit to the search results page.
struct SearchQuery {
  // Text of the search query.
  string query;
  // URL of the search query page.
  url.mojom.Url url;
};

// Available annotations for a visit.
enum Annotation {
  // Indicates that the visited URL was added to the bookmarks or was already
  // bookmarked.
  kBookmarked,
  // Indicates that the visited URL was added to a tab group or was already in a
  // tab group.
  kTabGrouped,
  // Indicates that the visited URL was the search results page of the default
  // search provider.
  kSearchResultsPage,
};

// Represents the most recent visit to a URL within a Cluster. Visits for which
// there are more recent visits to the same (or a qualifying near-duplicate) URL
// within the Cluster are omitted.
// However, the time of the least recent visit as well as the raw URLs of those
// duplicative visits are preserved for deletion purposes.
struct URLVisit {
  // Normalized URL of the visited webpage. Only Search Results Page urls will
  // be normalized for now; This is because SRP visits for the same search terms
  // have slightly different URLs due to various query params such as the AQS.
  url.mojom.Url normalized_url;

  // Title of the visited webpage.
  string page_title;

  // Time of the most recent visit in the Cluster to the same (or a qualifying
  // near-duplicate) URL.
  mojo_base.mojom.Time last_visit_time;

  // Time of the least recent visit in the Cluster to the same (or a qualifying
  // near-duplicate) URL. Equals `last_visit_time` if there is only one visit in
  // the Cluster to the same (or a qualifying near-duplicate) URL.
  mojo_base.mojom.Time first_visit_time;

  // List of raw visited URLs for `normalized_url`.
  array<url.mojom.Url> raw_urls;

  // Localized string of approximate `last_visit_time`, e.g., "2 days ago".
  string relative_date;

  // Annotations for this visit.
  array<Annotation> annotations;

  // Search queries related to this visit or one of its related visits, if
  // applicable; typically the highest scoring one.
  array<SearchQuery> related_searches;

  // Related visits to this visit; starting with the highest scoring one, if
  // applicable. Only prominently featured visits have related visits.
  array<URLVisit> related_visits;

  // Whether a related visit is initially hidden.
  bool below_the_fold;

  // A key-value dictionary of additional debug info to show. This is not
  // visible in production, and used for development only.
  map<string, string> debug_info;
};

// Represents a cluster of visits generated from device history by the browser
// and displayed in chrome://history/journeys. Contains cluster-level metadata
// (e.g., last_visit_time) derived from the metadata of constituent visits.
struct Cluster {
  // Cluster identifier. See //components/history/core/browser/history_types.h
  int64 id;

  // The prominently featured constituent visit, typically the highest scoring
  // one, containing its own related visits.
  URLVisit visit;
};

// Parameters used to query the browser for Clusters in reverse chronological
// order.
struct QueryParams {
  // The query string the Clusters are matched against. The default value of
  // empty string means to return every Cluster that matches the other criteria.
  string query;

  // The maximum number of Clusters to return. The default value of 0 means to
  // return every Cluster that matches the other criteria.
  uint32 max_count;

  // The optional time threshold (exclusive) for how recent the Clusters can be.
  // If specified, Clusters before `end_time` and if missing, Clusters until the
  // present time that match the other criteria are returned.
  mojo_base.mojom.Time? end_time;
};

// Represents a set of Clusters returned by the browser in response to a request
// for Clusters related to a given query or within a given timespan.
struct QueryResult {
  // The query string the Clusters were matched against.
  string query;

  // The Clusters in the result set in reverse chronological order.
  array<history_clusters.mojom.Cluster> clusters;

  // True if this is in response to a continuation query. If so, `clusters` is a
  // partial set which must be appended to the existing Clusters on the page and
  // not replace them.
  bool is_continuation;

  // The optional time threshold (exclusive) to be supplied in the follow-up UI
  // request to load older Clusters. Typically set to `last_visit_time` of the
  // last cluster in `clusters` if the backend supports paging.
  mojo_base.mojom.Time? continuation_end_time;
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
  // The ClustersBrowserProxy singleton calls this when it's first initialized.
  SetPage(pending_remote<Page> page);

  // Toggles the visibility of the History Clusters. The returned Promise echos
  // the given value for `visible`. The page uses the returned value to update
  // its state once the request is fulfilled by the browser.
  ToggleVisibility(bool visible) => (bool visible);

  // Requests the freshest Clusters created from the user visit history, in
  // reverse chronological order, based on the parameters in `query_params`.
  // Note: Returns mock Clusters in non-chrome-branded builds if no remote
  // endpoint is specified.
  QueryClusters(QueryParams query_params);

  // Requests to remove all visits to the specified URLs in the specified
  // timespan in `visits`. This includes the less recent visits to the same set
  // of URLs whose information is preserved in `visits`. The returned Promise
  // indicates if the request was accepted by the browser.
  RemoveVisits(array<URLVisit> visits) => (bool accepted);

  // Requests to open the URLs in `visits` in a new tab group.
  OpenVisitUrlsInTabGroup(array<URLVisit> visits);
};

// WebUI-side handler for requests from the browser.
interface Page {
  // Called with the results of the last call to `QueryClusters()`. `result`
  // contains the freshest Clusters in reverse chronological order, along with
  // continuation query params meant to be used in the follow-up request to load
  // older Clusters.
  OnClustersQueryResult(QueryResult result);

  // Called with the set of removed visits when the last accepted call to
  // `RemoveVisits()` succeeds. `removed_visits` will be used to update the UI.
  OnVisitsRemoved(array<URLVisit> removed_visits);
};
