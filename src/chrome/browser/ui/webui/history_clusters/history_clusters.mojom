// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module history_clusters.mojom;

import "components/history_clusters/core/history_clusters.mojom";
import "mojo/public/mojom/base/time.mojom";
import "url/mojom/url.mojom";

// Parameters used to query the browser for Clusters in reverse chronological
// order.
struct QueryParams {
  // The query string the Clusters are matched against. The default value of
  // empty string means to return every Cluster that matches the other criteria.
  string query;

  // The maximum number of Clusters to return. The default value of 0 means to
  // return every Cluster that matches the other criteria.
  uint32 max_count;

  // The optional time threshold (exclusive) for how recent the Clusters can be.
  // If specified, Clusters before `max_time` and if missing, Clusters until the
  // present time that match the other criteria are returned.
  mojo_base.mojom.Time? max_time;
};

// Represents a set of Clusters returned by the browser in response to a request
// for Clusters related to a given query or within a given timespan.
struct QueryResult {
  // The query string the Clusters were matched against.
  string query;

  // The Clusters in the result set in reverse chronological order.
  array<history_clusters.mojom.Cluster> clusters;

  // True if this is in response to a continuation query. If so, `clusters` is a
  // partial set which must be appended to the existing Clusters on the page and
  // not replace them.
  bool is_continuation;

  // The optional time threshold (exclusive) to be supplied in the follow-up UI
  // request to load older Clusters. Typically set to `last_visit_time` of the
  // last cluster in `clusters` if the backend supports paging.
  mojo_base.mojom.Time? continuation_max_time;
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
  // The ClustersBrowserProxy singleton calls this when it's first initialized.
  SetPage(pending_remote<Page> page);

  // Requests the freshest Clusters created from the user visit history, in
  // reverse chronological order, based on the parameters in `query_params`.
  // Note: Returns mock Clusters in non-chrome-branded builds if no remote
  // endpoint is specified.
  QueryClusters(QueryParams query_params);

  // Requests to remove all visits to the specified URLs in the specified
  // timespan in `visits`. This includes the less recent visits to the same set
  // of URLs whose information is preserved in `visits`. The returned Promise
  // indicates if the request was accepted by the browser.
  RemoveVisits(array<URLVisit> visits) => (bool accepted);
};

// WebUI-side handler for requests from the browser.
interface Page {
  // Called with the results of the last call to `QueryClusters()`. `result`
  // contains the freshest Clusters in reverse chronological order, along with
  // continuation query params meant to be used in the follow-up request to load
  // older Clusters.
  OnClustersQueryResult(QueryResult result);

  // Called with the set of removed visits when the last accepted call to
  // `RemoveVisits()` succeeds. `removed_visits` will be used to update the UI.
  OnVisitsRemoved(array<URLVisit> removed_visits);
};
