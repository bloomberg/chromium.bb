// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module read_later.mojom;

import "url/mojom/url.mojom";

// Read later entries grouped by read/unread status.
struct ReadLaterEntriesByStatus {
  array<ReadLaterEntry> unread_entries;
  array<ReadLaterEntry> read_entries;
};

// Information about a read later entry.
struct ReadLaterEntry {
  string title;
  url.mojom.Url url;
  string display_url;
  int64 update_time;
  // Whether the entry has been read.
  bool read;
  string display_time_since_update;
};

// Used by the WebUI page to bootstrap bidirectional communication.
interface PageHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePageHandler(pending_remote<Page> page,
                    pending_receiver<PageHandler> handler);
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
  // Get unread and read read later entries.
  GetReadLaterEntries() => (ReadLaterEntriesByStatus entries);

  // Open a saved read later entry.
  OpenSavedEntry(url.mojom.Url url);

  // Updates a read later entry's read status.
  UpdateReadStatus(url.mojom.Url url, bool read);

  // Removes a read later entry.
  RemoveEntry(url.mojom.Url url);

  // Notify the backend that the UI is ready to be shown.
  ShowUI();

  // Notify the backend that the dialog should be closed.
  CloseUI();
};

// WebUI-side handler for requests from the browser.
interface Page {
  // Callback when any item in read later is changed/removed. `entries` is a
  // collection of all read later entries by read/unread status. This data
  // structure is always present, even if the read/unread lists are empty.
  ItemsChanged(ReadLaterEntriesByStatus entries);
};
