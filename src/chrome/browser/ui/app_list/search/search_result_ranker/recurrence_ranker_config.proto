// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto2";

option optimize_for = LITE_RUNTIME;

package app_list;

// Configuration for a subclass of RecurrencePredictor.
//
// Warning: this cannot contain any map fields, as they cannot be relied upon
// for a consistent hash.
message RecurrencePredictorConfigProto {
  // Config for a fake predictor, used for testing.
  message FakePredictorConfig {}

  // Config for a default predictor, which uses the scores of the frecency store
  // as its ranks. As a result, it has no configuration of its own.
  message DefaultPredictorConfig {}

  // Scores targets with their normalized frequencies.
  message FrequencyPredictorConfig {}

  // Config for a conditional frequency predictor, which returns normalized
  // frequencies for targets given a condition.
  message ConditionalFrequencyPredictorConfig {}

  // Config for a frecency predictor.
  message FrecencyPredictorConfig {
    // The frecency parameter used to control the frequency-recency tradeoff
    // that determines when targets are removed. Must be in [0.5, 1.0], with 0.5
    // meaning only-recency and 1.0 meaning only-frequency.
    required float decay_coeff = 1;
  }

  message HourBinPredictorConfig {
    // The decay coeffficient number that control the decay rate. The decay is
    // once a week.
    required float weekly_decay_coeff = 1;

    // Controls how much a change in one bin affects the bins around it. |bin|
    // is a relative index, and |weight| controls the magnitude of the update.
    message BinWeight {
      required int32 bin = 1;
      required float weight = 2;
    }
    repeated BinWeight bin_weights = 2;
  }

  // A first-order Markov chain predictor.
  message MarkovPredictorConfig {}

  message ExponentialWeightsEnsembleConfig {
    // The learning rate to apply to the ensemble weights.
    required float learning_rate = 1;

    // The configuration of the component predictors in the ensemble.
    repeated RecurrencePredictorConfigProto predictors = 2;
  }

  // The choice of which kind of predictor to use, and its configuration.
  oneof predictor {
    FakePredictorConfig fake_predictor = 1;
    FrecencyPredictorConfig frecency_predictor = 2;
    DefaultPredictorConfig default_predictor = 3;
    HourBinPredictorConfig hour_bin_predictor = 4;
    ConditionalFrequencyPredictorConfig conditional_frequency_predictor = 5;
    MarkovPredictorConfig markov_predictor = 6;
    ExponentialWeightsEnsembleConfig exponential_weights_ensemble = 7;
    FrequencyPredictorConfig frequency_predictor = 8;
  }
}

// Configuration for an instance of RecurrenceRanker.
//
// Warning: this cannot contain any map fields, as they cannot be relied upon
// for a consistent hash.
message RecurrenceRankerConfigProto {
  required uint32 min_seconds_between_saves = 1;

  required uint32 target_limit = 2;
  required float target_decay = 3;
  required uint32 condition_limit = 4;
  required float condition_decay = 5;

  // The predictor to use for this ranker, and its configuration.
  required RecurrencePredictorConfigProto predictor = 6;
}
