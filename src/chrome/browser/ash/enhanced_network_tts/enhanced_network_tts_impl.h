// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_ASH_ENHANCED_NETWORK_TTS_ENHANCED_NETWORK_TTS_IMPL_H_
#define CHROME_BROWSER_ASH_ENHANCED_NETWORK_TTS_ENHANCED_NETWORK_TTS_IMPL_H_

#include <list>
#include <memory>
#include <string>

#include "ash/components/enhanced_network_tts/mojom/enhanced_network_tts.mojom.h"
#include "base/memory/scoped_refptr.h"
#include "base/memory/weak_ptr.h"
#include "base/values.h"
#include "mojo/public/cpp/bindings/receiver.h"
#include "services/data_decoder/public/cpp/data_decoder.h"
#include "services/data_decoder/public/mojom/json_parser.mojom.h"
#include "services/network/public/cpp/shared_url_loader_factory.h"
#include "services/network/public/cpp/simple_url_loader.h"
#include "third_party/abseil-cpp/absl/types/optional.h"

namespace ash {
namespace enhanced_network_tts {

// The implementation of the enhanced network text-to-speech mojom receiver.
// The remote of this mojom pipe will be invoked from the enhanced network tts
// JS extension. This receiver fetches audio data on behalf of the remote. The
// audio data is generated by Google's Speakr API.
class EnhancedNetworkTtsImpl : public mojom::EnhancedNetworkTts {
 public:
  // Getter for the singleton.
  static EnhancedNetworkTtsImpl& GetInstance();

  EnhancedNetworkTtsImpl();
  EnhancedNetworkTtsImpl(const EnhancedNetworkTtsImpl&) = delete;
  void operator=(const EnhancedNetworkTtsImpl&) = delete;
  ~EnhancedNetworkTtsImpl() override;

  // Binds a pending receiver and a url factory.
  void BindReceiverAndURLFactory(
      mojo::PendingReceiver<enhanced_network_tts::mojom::EnhancedNetworkTts>
          receiver,
      scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory);

  // ash::enhanced_network_tts::mojom::EnhancedNetworkTts:
  void GetAudioData(const std::string& text,
                    GetAudioDataCallback callback) override;

 private:
  // List of URL loader objects.
  using UrlLoaderList = std::list<std::unique_ptr<network::SimpleURLLoader>>;

  // Create or reuse a connection to the data decoder service for safe JSON
  // parsing.
  data_decoder::mojom::JsonParser* GetJsonParser();

  // Create a URL loader for a network request with an attached API key.
  std::unique_ptr<network::SimpleURLLoader> MakeRequestLoader();

  // Called when the ReadAloud server responds with audio data, which is
  // encoded as a JSON string.
  void OnServerResponseReceived(
      GetAudioDataCallback audio_callback,
      const UrlLoaderList::iterator server_request_it,
      const std::unique_ptr<std::string> json_response);

  // Called when the data decoder service provides parsed JSON data for a
  // server response.
  void OnResponseJsonParsed(GetAudioDataCallback audio_callback,
                            absl::optional<base::Value> json_data,
                            const absl::optional<std::string>& error);

  // A list of currently-ongoing HTTP requests to the ReadAloud server. This
  // helps us to better track the network requests.
  // TODO(crbug.com/1217301): Consider only allowing one request at a time.
  UrlLoaderList ongoing_server_requests_;

  // Decoder for data decoding service.
  data_decoder::DataDecoder data_decoder_;

  // Url loader factory to be loaded.
  scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory_;

  // Should not be used directly; GetJsonParser() should be called instead.
  mojo::Remote<data_decoder::mojom::JsonParser> json_parser_;

  mojo::Receiver<mojom::EnhancedNetworkTts> receiver_{this};

  const std::string api_key_;

  // Used for all callbacks.
  base::WeakPtrFactory<EnhancedNetworkTtsImpl> weak_factory_{this};
};

}  // namespace enhanced_network_tts
}  // namespace ash

#endif  // CHROME_BROWSER_ASH_ENHANCED_NETWORK_TTS_ENHANCED_NETWORK_TTS_IMPL_H_
