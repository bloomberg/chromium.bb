# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//chrome/common/features.gni")
import("//pdf/features.gni")
import("//tools/grit/grit_rule.gni")
import("//tools/grit/preprocess_if_expr.gni")
import("//tools/polymer/html_to_js.gni")
import("//tools/polymer/html_to_wrapper.gni")
import("//tools/typescript/ts_library.gni")
import("//ui/webui/resources/tools/generate_grd.gni")
import("../tools/optimize_webui.gni")
import("./pdf.gni")

assert(enable_pdf, "enable_pdf check failed")

preprocess_folder = "preprocessed"
tsc_folder = "tsc"

preprocess_if_expr("preprocess") {
  in_folder = "."
  out_folder = "$target_gen_dir/$preprocess_folder"
  defines = [ "enable_ink=$enable_ink" ]
  in_files = ts_files
}

preprocess_if_expr("preprocess_generated") {
  deps = [
    ":css_wrapper_files",
    ":html_wrapper_files",
  ]
  in_folder = target_gen_dir
  out_folder = "$target_gen_dir/$preprocess_folder"
  defines = [ "enable_ink=$enable_ink" ]
  in_files = html_wrapper_files + css_wrapper_files
}

html_to_wrapper("html_wrapper_files") {
  in_files = html_files
}

# Preprocess and build a manifest file for the Print Preview HTML/CSS files,
# which aren't passed to ts_library().
print_preview_html_css_manifest = "print_preview_html_css_manifest.json"
preprocess_if_expr("preprocess_print_preview_html_css") {
  in_folder = "."
  out_folder = "$target_gen_dir/$preprocess_folder"
  out_manifest = "$target_gen_dir/$print_preview_html_css_manifest"
  in_files = [
    "index_pp.html",
    "index.css",
  ]
}

# Build the grdp for Print Preview.
generate_grd("build_print_preview_grdp") {
  # Get all the shared files out of the tsc folder.
  input_files = print_preview_grdp_input_files
  input_files_base_dir =
      rebase_path("$target_gen_dir/$tsc_folder", root_build_dir)

  manifest_files = [ "$target_gen_dir/$print_preview_html_css_manifest" ]
  deps = [
    ":build_ts",
    ":preprocess_print_preview_html_css",
  ]
  resource_path_rewrites = [
    "index_pp.html|index.html",

    # Expose pdf_viewer_pp.js as pdf_viewer_wrapper.js so that the PDF viewer
    # and Print Preview viewer can use the same main.js source.
    "pdf_viewer_pp.js|pdf_viewer_wrapper.js",
  ]
  grd_prefix = "print_preview_pdf"

  # Print Preview expects to import from "pdf/" relative path
  resource_path_prefix = "pdf"
  out_grd = "$target_gen_dir/${grd_prefix}_resources.grdp"
}

if (optimize_webui) {
  build_manifest = "build_manifest.json"

  optimize_webui("build") {
    host = "chrome-extension://mhjfbmdgcfjbbpaeojofohoefgiehjai"
    input = rebase_path("$target_gen_dir/$tsc_folder", root_build_dir)
    js_out_files = [ "pdf_viewer_wrapper.rollup.js" ]
    js_module_in_files = [ "pdf_viewer_wrapper.js" ]
    out_manifest = "$target_gen_dir/$build_manifest"

    deps = [
      ":build_ts",
      "../../../../ui/webui/resources:preprocess",
    ]
    excludes = [
      "browser_api.js",
      "chrome://resources/js/cr.m.js",
    ]
    if (enable_ink) {
      excludes += [
        "ink/drawing_canvas_externs.js",
        "ink/ink_api.js",
      ]
    }
  }
}

# This script is injected by `pdf::PluginResponseWriter`, and must stand alone.
# Consequently, it must always be rolled up by `optimize_webui()`.
build_internal_plugin_manifest = "build_internal_plugin_manifest.json"
optimize_webui("build_internal_plugin") {
  host = "about:blank"
  input = rebase_path("$target_gen_dir/$tsc_folder", root_build_dir)
  js_out_files = [ "pdf_internal_plugin_wrapper.rollup.js" ]
  js_module_in_files = [ "pdf_internal_plugin_wrapper.js" ]
  out_manifest = "$target_gen_dir/$build_internal_plugin_manifest"

  deps = [
    ":build_ts",
    "../../../../ui/webui/resources:preprocess",
  ]
  excludes = [
    "browser_api.js",
    "chrome://resources/js/cr.m.js",
  ]
}

if (optimize_webui) {
  # Need to manually register files that are excluded from the optimized bundle.
  generate_grd("build_excluded_grdp") {
    input_files = [
      "browser_api.js",
      "main.js",
    ]
    if (enable_ink) {
      input_files += [ "ink/ink_api.js" ]
    }
    input_files_base_dir =
        rebase_path("$target_gen_dir/$tsc_folder", root_build_dir)
    deps = [ ":build_ts" ]

    grd_prefix = "pdf"
    out_grd = "$target_gen_dir/excluded_resources.grdp"
    resource_path_prefix = "pdf"
  }
}

generate_grd("build_grd") {
  input_files = [
    "index.css",
    "index.html",
  ]
  if (enable_ink) {
    input_files += [ "ink/index.html" ]
  }
  input_files_base_dir = rebase_path(".", "//")

  if (optimize_webui) {
    deps = [
      ":build",
      ":build_excluded_grdp",
    ]
    resource_path_rewrites =
        [ "pdf_viewer_wrapper.rollup.js|pdf_viewer_wrapper.js" ]
    manifest_files = [ "$target_gen_dir/$build_manifest" ]
    grdp_files = [ "$target_gen_dir/excluded_resources.grdp" ]
  } else {
    deps = [ ":build_ts" ]
    manifest_files = [ "$target_gen_dir/tsconfig.manifest" ]
  }

  deps += [ ":build_internal_plugin" ]
  manifest_files += [ "$target_gen_dir/$build_internal_plugin_manifest" ]

  grd_prefix = "pdf"
  out_grd = "$target_gen_dir/resources.grd"
  resource_path_prefix = "pdf"
}

grit("resources") {
  defines = chrome_grit_defines + [ "enable_ink=$enable_ink" ]

  enable_input_discovery_for_gn_analyze = false
  source = "$target_gen_dir/resources.grd"
  deps = [ ":build_grd" ]

  outputs = [
    "grit/pdf_resources.h",
    "grit/pdf_resources_map.cc",
    "grit/pdf_resources_map.h",
    "pdf_resources.pak",
  ]
  output_dir = "$root_gen_dir/chrome"
}

html_to_js("css_wrapper_files") {
  js_files = css_wrapper_files
}

ts_library("build_ts") {
  root_dir = "$target_gen_dir/$preprocess_folder"
  out_dir = "$target_gen_dir/$tsc_folder"
  tsconfig_base = "tsconfig_base.json"
  composite = true

  in_files = ts_files + html_wrapper_files + css_wrapper_files

  manifest_excludes =
      [ "pdf_internal_plugin_wrapper.js" ] + print_preview_only_files

  definitions = ts_definitions

  deps = [
    "//third_party/polymer/v3_0:library",
    "//ui/webui/resources:library",
  ]
  extra_deps = [
    ":preprocess",
    ":preprocess_generated",
  ]
}
