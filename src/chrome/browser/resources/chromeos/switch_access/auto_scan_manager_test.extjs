// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

GEN_INCLUDE(['switch_access_e2e_test_base.js']);

UNDEFINED_INTERVAL_DELAY = -1;

/**
 * @constructor
 * @extends {SwitchAccessE2ETest}
 */
function SwitchAccessAutoScanManagerTest() {
  SwitchAccessE2ETest.call(this);
}

SwitchAccessAutoScanManagerTest.prototype = {
  __proto__: SwitchAccessE2ETest.prototype,

  /** @override */
  setUp: function() {
    // Use intervalCount and intervalDelay to check how many intervals are
    // currently running (should be no more than 1) and the current delay.
    window.intervalCount = 0;
    window.intervalDelay = UNDEFINED_INTERVAL_DELAY;
    window.defaultSetInterval = window.setInterval;
    window.defaultClearInterval = window.clearInterval;
    window.switchAccess.defaultMoveForward = window.switchAccess.moveForward;
    window.switchAccess.moveForwardCount = 0;


    window.setInterval = function(func, delay) {
      window.intervalCount++;
      window.intervalDelay = delay;

      // Override the delay to 1 ms to speed up the test.
      return window.defaultSetInterval(func, 1);
    };

    window.clearInterval = function(intervalId) {
      if (intervalId)
        window.intervalCount--;
      window.defaultClearInterval(intervalId);
    };

    window.switchAccess.moveForward = function() {
      window.switchAccess.moveForwardCount++;
      window.switchAccess.defaultMoveForward();
    };

    this.autoScanManager = window.switchAccess.autoScanManager_;
    switchAccess.onMoveForwardForTesting_ = null;
  }
};

TEST_F('SwitchAccessAutoScanManagerTest', 'SetEnabled', function() {
  this.runWithLoadedTree('data:text/html;charset=utf-8,',
      function(desktop) {
        assertFalse(this.autoScanManager.isRunning());
        assertEquals(0, switchAccess.moveForwardCount);
        assertEquals(0, intervalCount);

        switchAccess.onMoveForwardForTesting_ =
          this.newCallback(function() {
            assertTrue(this.autoScanManager.isRunning());
            assertGT(switchAccess.moveForwardCount, 0);
            assertEquals(1, intervalCount);
          });

        this.autoScanManager.setEnabled(true);
        assertTrue(this.autoScanManager.isRunning());
        assertEquals(1, intervalCount);
      }
  );
});

TEST_F('SwitchAccessAutoScanManagerTest', 'SetEnabledMultiple', function() {
  this.runWithLoadedTree('data:text/html;charset=utf-8,',
      function(desktop) {
        assertFalse(this.autoScanManager.isRunning());
        assertEquals(0, intervalCount);

        this.autoScanManager.setEnabled(true);
        this.autoScanManager.setEnabled(true);
        this.autoScanManager.setEnabled(true);

        assertTrue(this.autoScanManager.isRunning());
        assertEquals(1, intervalCount);
      }
  );
});

TEST_F('SwitchAccessAutoScanManagerTest', 'EnableAndDisable', function() {
  this.runWithLoadedTree('data:text/html;charset=utf-8,',
      function(desktop) {
        assertFalse(this.autoScanManager.isRunning());
        assertEquals(0, intervalCount);

        this.autoScanManager.setEnabled(true);
        assertTrue(this.autoScanManager.isRunning());
        assertEquals(1, intervalCount);


        this.autoScanManager.setEnabled(false);
        assertFalse(this.autoScanManager.isRunning());
        assertEquals(0, intervalCount);
      }
  );
});

TEST_F('SwitchAccessAutoScanManagerTest', 'RestartIfRunningMultiple', function() {
  this.runWithLoadedTree('data:text/html;charset=utf-8,',
      function(desktop) {
        assertFalse(this.autoScanManager.isRunning());
        assertEquals(0, switchAccess.moveForwardCount);
        assertEquals(0, intervalCount);

        this.autoScanManager.setEnabled(true);
        this.autoScanManager.restartIfRunning();
        this.autoScanManager.restartIfRunning();
        this.autoScanManager.restartIfRunning();

        assertTrue(this.autoScanManager.isRunning());
        assertEquals(1, intervalCount);
      }
  );
});

TEST_F('SwitchAccessAutoScanManagerTest', 'RestartIfRunningWhenOff', function() {
  this.runWithLoadedTree('data:text/html;charset=utf-8,',
      function(desktop) {
        assertFalse(this.autoScanManager.isRunning());
        this.autoScanManager.restartIfRunning();
        assertFalse(this.autoScanManager.isRunning());
      }
  );
});

TEST_F('SwitchAccessAutoScanManagerTest', 'SetScanTime', function() {
  this.runWithLoadedTree('data:text/html;charset=utf-8,',
      function(desktop) {
        assertFalse(this.autoScanManager.isRunning());
        assertEquals(UNDEFINED_INTERVAL_DELAY, intervalDelay);

        this.autoScanManager.setScanTime(2);
        assertFalse(this.autoScanManager.isRunning());
        assertEquals(2, this.autoScanManager.scanTime_);
        assertEquals(UNDEFINED_INTERVAL_DELAY, intervalDelay);

        this.autoScanManager.setEnabled(true);
        assertTrue(this.autoScanManager.isRunning());
        assertEquals(2, this.autoScanManager.scanTime_);
        assertEquals(2, intervalDelay);

        this.autoScanManager.setScanTime(5);
        assertTrue(this.autoScanManager.isRunning());
        assertEquals(5, this.autoScanManager.scanTime_);
        assertEquals(5, intervalDelay);
      }
  );
});

