# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/features.gni")
import(
    "//chrome/browser/resources/chromeos/accessibility/chromevox/run_jsbundler.gni")
import("//chrome/common/features.gni")
import("//chrome/test/base/js2gtest.gni")
import("//testing/test.gni")
import("//third_party/closure_compiler/compile_js.gni")

assert(is_chromeos)

select_to_speak_out_dir =
    "$root_out_dir/resources/chromeos/accessibility/select_to_speak"

group("build") {
  deps = [ ":select_to_speak_copied_files" ]
}

# Instead of setting up one copy target for each subdirectory, use a script
# to copy all files.
run_jsbundler("select_to_speak_copied_files") {
  mode = "copy"
  dest_dir = select_to_speak_out_dir
  sources = [
    "checked.png",
    "earcons/null_selection.ogg",
    "input_handler.js",
    "metrics_utils.js",
    "node_utils.js",
    "options.css",
    "options.html",
    "paragraph_utils.js",
    "prefs_manager.js",
    "rect_utils.js",
    "select_to_speak-2x.svg",
    "select_to_speak.js",
    "select_to_speak_gdocs_script.js",
    "select_to_speak_main.js",
    "select_to_speak_options.js",
    "unchecked.png",
    "word_utils.js",
  ]
  rewrite_rules = [
    rebase_path(".", root_build_dir) + ":",
    rebase_path(closure_library_dir, root_build_dir) + ":closure",
  ]
}

source_set("browser_tests") {
  testonly = true
  assert(enable_extensions)

  deps = [ ":select_to_speak_extjs_tests" ]

  # TODO(jamescook): Figure out which of these are really necessary.
  data = [
    "$root_out_dir/chrome_100_percent.pak",
    "$root_out_dir/chrome_200_percent.pak",
    "$root_out_dir/locales/en-US.pak",
    "$root_out_dir/resources.pak",
    "$root_out_dir/resources/chromeos/accessibility/select_to_speak/",
    "$root_out_dir/test_data/chrome/browser/resources/chromeos/accessibility/select_to_speak/",

    # The test uses data from the original location, not the copied one.
    "//chrome/browser/resources/chromeos/accessibility/chromevox/",
    "//chrome/browser/resources/chromeos/accessibility/select_to_speak/",
    "//ui/webui/resources/js/cr.js",
  ]
  data += js2gtest_js_libraries
}

js2gtest("select_to_speak_extjs_tests") {
  test_type = "extension"
  sources = [
    "select_to_speak_keystroke_selection_test.js",
    "select_to_speak_mouse_selection_test.js",
    "select_to_speak_prefs_test.js",
  ]
  gen_include_files = [
    "../chromevox/testing/callback_helper.js",
    "mock_storage.js",
    "mock_tts.js",
    "select_to_speak_e2e_test_base.js",
    "pipe.jpg",
  ]
  extra_js_files = [
    "//chrome/test/data/webui/settings/fake_settings_private.js",
    "//chrome/test/data/webui/fake_chrome_event.js",
  ]

  # The test base classes generate C++ code with these deps.
  deps = [
    "//ash",
    "//ash/keyboard/ui",
    "//base",
    "//chrome/browser/chromeos",
    "//chrome/common",
  ]
  defines = [ "HAS_OUT_OF_PROC_TEST_RUNNER" ]
}

js_type_check("closure_compile") {
  deps = [
    ":input_handler",
    ":metrics_utils",
    ":node_utils",
    ":paragraph_utils",
    ":prefs_manager",
    ":rect_utils",
    ":select_to_speak",
    ":select_to_speak_options",
    ":word_utils",
    "../common:automation_predicate",
    "../common:automation_util",
    "../common:closure_shim",
    "../common:constants",
    "../common:tree_walker",
  ]
}

js_library("select_to_speak") {
  deps = [
    ":input_handler",
    ":metrics_utils",
    ":node_utils",
    ":paragraph_utils",
    ":prefs_manager",
    ":rect_utils",
    ":word_utils",
    "../common:automation_util",
    "../common:constants",
  ]
  externs_list = [
    "$externs_path/accessibility_private.js",
    "$externs_path/automation.js",
    "$externs_path/chrome_extensions.js",
    "$externs_path/clipboard.js",
    "$externs_path/command_line_private.js",
    "$externs_path/pending.js",
  ]
}

js_library("select_to_speak_options") {
  deps = [ ":prefs_manager" ]
  externs_list = [
    "$externs_path/accessibility_private.js",
    "$externs_path/automation.js",
    "$externs_path/chrome_extensions.js",
    "$externs_path/metrics_private.js",
  ]
}

js_library("node_utils") {
  deps = [
    ":paragraph_utils",
    ":rect_utils",
  ]
  externs_list = [ "$externs_path/automation.js" ]
}

js_library("word_utils") {
  deps = [ ":paragraph_utils" ]
  externs_list = [ "$externs_path/automation.js" ]
}

js_library("paragraph_utils") {
  externs_list = [
    "$externs_path/accessibility_private.js",
    "$externs_path/automation.js",
    "$externs_path/chrome_extensions.js",
  ]
}

js_library("input_handler") {
  deps = [ ":rect_utils" ]
}

js_library("rect_utils") {
}

js_library("prefs_manager") {
  externs_list = [ "$externs_path/settings_private.js" ]
}

js_library("metrics_utils") {
  deps = [ ":prefs_manager" ]
  externs_list = [ "$externs_path/metrics_private.js" ]
}
