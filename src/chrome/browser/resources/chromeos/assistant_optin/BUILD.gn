# Copyright 2022 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//chrome/common/features.gni")
import("//tools/grit/grit_rule.gni")
import("//tools/grit/preprocess_if_expr.gni")
import("//ui/webui/resources/tools/generate_grd.gni")
import("//ui/webui/resources/tools/js_modulizer.gni")

assert(is_chromeos_ash, "Only available in ash Chrome.")

###################
#### RESOURCES ####
###################

grit("resources") {
  defines = chrome_grit_defines

  # This is necessary since the GRD is generated during build time.
  enable_input_discovery_for_gn_analyze = false

  source = "$target_gen_dir/assistant_optin_resources.grd"
  deps = [ ":build_grd" ]
  outputs = [
    "grit/assistant_optin_resources.h",
    "grit/assistant_optin_resources_map.h",
    "grit/assistant_optin_resources_map.cc",
    "assistant_optin_resources.pak",
  ]
  output_dir = "$root_gen_dir/chrome"
}

########################
#### GRD GENERATION ####
########################

autogenerated_files_manifest = "autogenerated_files_manifest.json"
existing_files_manifest = "existing_files_manifest.json"
preprocessed_folder = "assistant_optin_preprocessed"

generate_grd("build_grd") {
  grd_prefix = "assistant_optin"
  out_grd = "$target_gen_dir/${grd_prefix}_resources.grd"
  deps = [
    ":preprocess",
    ":preprocess_generated",
  ]
  manifest_files = [
    "$target_gen_dir/$autogenerated_files_manifest",
    "$target_gen_dir/$existing_files_manifest",
  ]

  input_files_base_dir = rebase_path(".", "//")
  input_files = [
    # Vector resources
    "assistant_ready_1x.svg",
    "assistant_ready_2x.svg",
    "assistant_ready.svg",
    "assistant_related_info.svg",
  ]
  resource_path_prefix = "assistant_optin"
}

# Preprocess existing files.
preprocess_if_expr("preprocess") {
  in_folder = "./"
  out_folder = "$target_gen_dir/$preprocessed_folder"
  out_manifest = "$target_gen_dir/$existing_files_manifest"
  in_files = [
    "assistant_common_styles.html",
    "assistant_loading.html",
    "assistant_loading.js",
    "assistant_optin_flow.html",
    "assistant_optin_flow.js",
    "assistant_optin.html",
    "assistant_optin.js",
    "assistant_related_info.html",
    "assistant_related_info.js",
    "assistant_value_prop.html",
    "assistant_value_prop.js",
    "assistant_voice_match.html",
    "assistant_voice_match.js",
    "browser_proxy.html",
    "browser_proxy.js",
    "icon.html",
    "setting_zippy.html",
    "setting_zippy.js",
    "utils.js",
    "voice_match_entry.html",
    "voice_match_entry.js",
  ]
}

# Preprocess autogenerated files
preprocess_if_expr("preprocess_generated") {
  deps = [ ":polymer3_elements" ]
  in_folder = "$target_gen_dir"
  out_folder = "$target_gen_dir/$preprocessed_folder"
  out_manifest = "$target_gen_dir/$autogenerated_files_manifest"
  in_files = [ "browser_proxy.m.js" ]
}

##########################
#### POLYMER3 MODULES ####
##########################

group("polymer3_elements") {
  public_deps = [ ":modulize" ]
}

js_modulizer("modulize") {
  input_files = [ "browser_proxy.js" ]
  namespace_rewrites = []
}
