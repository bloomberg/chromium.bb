// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

GEN_INCLUDE(['//ui/webui/resources/js/cr.js']);

const EXAMPLE_ADFS_ENDPOINT =
    'https://example.com/adfs/portal/updatepassword/';

const EXAMPLE_AZURE_ENDPOINT =
    'https://example.windowsazure.com/ChangePassword.aspx';

const EXAMPLE_OKTA_ENDPOINT =
    'https://example.okta.com/user/profile/internal_login/password';

const EXAMPLE_PING_ENDPOINT =
    'https://login.pingone.com/idp/directory/a/12345/password/chg/67890';

PasswordChangeAuthenticatorUnitTest = class extends testing.Test {
  /** @override */
  testGenCppIncludes() {
    GEN(`#include "content/public/test/browser_test.h"`);
  }

  get browsePreload() {
    return DUMMY_URL;
  }

  // No need to run these checks - see comment in SamlPasswordAttributesTest.
  get runAccessibilityChecks() {
    return false;
  }

  get extraLibraries() {
    return [
      '//ui/webui/resources/js/cr/event_target.js',
      'password_change_authenticator.js',
    ];
  }

  assertSuccess(postUrl, redirectUrl) {
    assertTrue(this.detectSuccess(postUrl, redirectUrl));
  }

  assertNotSuccess(postUrl, redirectUrl) {
    assertFalse(this.detectSuccess(postUrl, redirectUrl));
  }

  detectSuccess(postUrl, redirectUrl) {
    postUrl = (typeof postUrl == 'string') ? new URL(postUrl) : postUrl;
    redirectUrl =
        (typeof redirectUrl == 'string') ? new URL(redirectUrl) : redirectUrl;
    return cr.samlPasswordChange.detectPasswordChangeSuccess(postUrl,
                                                             redirectUrl);
  }
}

TEST_F('PasswordChangeAuthenticatorUnitTest', 'DetectAdfsSuccess', function() {
  const endpointUrl = EXAMPLE_ADFS_ENDPOINT;

  this.assertNotSuccess(endpointUrl, endpointUrl);
  this.assertNotSuccess(endpointUrl, endpointUrl + '?status=1');

  this.assertSuccess(endpointUrl, endpointUrl + '?status=0');
  this.assertSuccess(endpointUrl + '?status=1', endpointUrl + '?status=0');

  // We allow "status=0" to count as success everywhere right now, but this
  // should be narrowed down to ADFS - see the TODO in the code.
  this.assertSuccess(EXAMPLE_AZURE_ENDPOINT,
                     EXAMPLE_AZURE_ENDPOINT + '?status=0');
});

TEST_F('PasswordChangeAuthenticatorUnitTest', 'DetectAzureSuccess', function() {
  const endpointUrl = EXAMPLE_AZURE_ENDPOINT;
  const extraParam = 'BrandContextID=O123';

  this.assertNotSuccess(endpointUrl, endpointUrl);
  this.assertNotSuccess(endpointUrl, endpointUrl + '?' + extraParam);
  this.assertNotSuccess(endpointUrl, endpointUrl + '?ReturnCode=1&' + extraParam);
  this.assertNotSuccess(endpointUrl,
                        endpointUrl + '?' + extraParam + '&ReturnCode=1');
  this.assertNotSuccess(EXAMPLE_PING_ENDPOINT,
                        endpointUrl + '?ReturnCode=0');

  this.assertSuccess(endpointUrl,
                     endpointUrl + '?ReturnCode=0');
  this.assertSuccess(endpointUrl + '?' + extraParam,
                     endpointUrl + '?ReturnCode=0&' + extraParam);
  this.assertSuccess(endpointUrl + '?' + extraParam,
                     endpointUrl + '?' + extraParam + '&ReturnCode=0');
});

TEST_F('PasswordChangeAuthenticatorUnitTest', 'DetectPingSuccess', function() {
  const endpointUrl = EXAMPLE_PING_ENDPOINT;

  this.assertNotSuccess(endpointUrl, endpointUrl);
  this.assertNotSuccess(endpointUrl + '?returnurl=https://desktop.pingone.com',
                        endpointUrl + '?returnurl=https://desktop.pingone.com');
  this.assertNotSuccess(endpointUrl,
                        endpointUrl + '?returnurl=https://desktop.pingone.com');

  this.assertSuccess(endpointUrl + '?returnurl=https://desktop.pingone.com',
                     'https://desktop.pingone.com/Selection?cmd=selection');
});