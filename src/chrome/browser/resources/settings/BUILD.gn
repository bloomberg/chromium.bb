# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/chromeos/ui_mode.gni")
import("//chrome/common/features.gni")
import("//crypto/features.gni")
import("//third_party/closure_compiler/compile_js.gni")
import("//tools/grit/grit_rule.gni")
import("//tools/grit/preprocess_if_expr.gni")
import("//tools/polymer/html_to_js.gni")
import("//tools/polymer/html_to_wrapper.gni")
import("//tools/typescript/ts_library.gni")
import("//ui/webui/resources/tools/generate_grd.gni")
import("//ui/webui/webui_features.gni")
import("../tools/optimize_webui.gni")
import("settings.gni")

preprocess_folder = "preprocessed"

if (optimize_webui) {
  build_manifest = "build_manifest.json"

  optimize_webui("build") {
    host = "settings"
    input = rebase_path("$target_gen_dir/tsc", root_build_dir)
    js_module_in_files = [
      "settings.js",
      "lazy_load.js",
    ]
    js_out_files = [
      "settings.rollup.js",
      "lazy_load.rollup.js",
      "shared.rollup.js",
    ]
    out_manifest = "$target_gen_dir/$build_manifest"

    deps = [
      ":build_ts",
      "//ui/webui/resources:preprocess",
    ]

    if (!is_chromeos_ash) {
      deps += [ "//ui/webui/resources/cr_components/customize_themes:build_ts" ]
    }

    if (use_nss_certs) {
      deps +=
          [ "//ui/webui/resources/cr_components/certificate_manager:build_ts" ]
    }

    excludes = [
      "chrome://resources/js/cr.m.js",
      "chrome://resources/mojo/mojo/public/js/bindings.js",
      "chrome://resources/mojo/skia/public/mojom/skcolor.mojom-webui.js",
    ]
  }
}

generate_grd("build_grd") {
  grd_prefix = "settings"
  out_grd = "$target_gen_dir/${grd_prefix}_resources.grd"
  input_files = [
    "images/cookies_banner_dark.svg",
    "images/cookies_banner.svg",
    "images/googleg_standard_clr_32px.svg",
    "images/password_check_neutral_dark.svg",
    "images/password_check_neutral.svg",
    "images/password_check_positive_dark.svg",
    "images/password_check_positive.svg",
    "images/permissions_banner_dark.svg",
    "images/permissions_banner.svg",
    "images/privacy_guide/clear_on_exit_graphic_dark.svg",
    "images/privacy_guide/clear_on_exit_graphic.svg",
    "images/privacy_guide/completion_banner_dark.svg",
    "images/privacy_guide/completion_banner.svg",
    "images/privacy_guide/cookies_graphic_dark.svg",
    "images/privacy_guide/cookies_graphic.svg",
    "images/privacy_guide/history_sync_graphic_dark.svg",
    "images/privacy_guide/history_sync_graphic.svg",
    "images/privacy_guide/msbb_graphic_dark.svg",
    "images/privacy_guide/msbb_graphic.svg",
    "images/privacy_guide/privacy_sandbox_graphic_dark.svg",
    "images/privacy_guide/privacy_sandbox_graphic.svg",
    "images/privacy_guide/promo_banner_dark.svg",
    "images/privacy_guide/promo_banner.svg",
    "images/privacy_guide/safe_browsing_graphic_dark.svg",
    "images/privacy_guide/safe_browsing_graphic.svg",
    "images/privacy_guide/waa_graphic_dark.svg",
    "images/privacy_guide/waa_graphic.svg",
    "images/privacy_guide/welcome_banner_dark.svg",
    "images/privacy_guide/welcome_banner.svg",
    "images/privacy_sandbox_banner_dark.svg",
    "images/privacy_sandbox_banner.svg",
    "images/privacy_sandbox_floc_banner_dark.svg",
    "images/privacy_sandbox_floc_banner.svg",
    "images/safe_browsing_banner_dark.svg",
    "images/safe_browsing_banner.svg",
    "images/sync_banner_dark.svg",
    "images/sync_banner.svg",
    "privacy_sandbox/privacy_sandbox.html",
    "settings.html",
  ]
  input_files_base_dir = rebase_path(".", "//")

  if (optimize_webui) {
    deps = [
      ":build",
      "privacy_sandbox:build_grdp",
    ]
    manifest_files = [ "$target_gen_dir/$build_manifest" ]
    resource_path_rewrites = [
      "settings.rollup.js|settings.js",
      "lazy_load.rollup.js|lazy_load.js",
    ]
    grdp_files = [ "$target_gen_dir/privacy_sandbox/resources.grdp" ]
  } else {
    deps = [ ":build_ts" ]
    manifest_files = [ "$target_gen_dir/tsconfig.manifest" ]
  }
}

preprocess_if_expr("preprocess") {
  defines = chrome_grit_defines
  in_folder = "."
  out_folder = "$target_gen_dir/$preprocess_folder"
  in_files = ts_files
}

preprocess_if_expr("preprocess_generated") {
  defines = chrome_grit_defines
  deps = [
    ":css_wrapper_files",
    ":html_wrapper_files",
  ]
  in_folder = target_gen_dir
  out_folder = "$target_gen_dir/$preprocess_folder"
  in_files = html_wrapper_files + css_wrapper_files
}

grit("resources") {
  defines = chrome_grit_defines

  # These arguments are needed since the grd is generated at build time.
  enable_input_discovery_for_gn_analyze = false
  source = "$target_gen_dir/settings_resources.grd"
  deps = [ ":build_grd" ]

  outputs = [
    "grit/settings_resources.h",
    "grit/settings_resources_map.cc",
    "grit/settings_resources_map.h",
    "settings_resources.pak",
  ]
  output_dir = "$root_gen_dir/chrome"
}

group("closure_compile") {
  deps = [ ":closure_compile_local" ]

  if (is_chromeos_ash) {
    deps += [ "chromeos:closure_compile_module" ]
  }
}

js_type_check("closure_compile_local") {
  is_polymer3 = true
  closure_flags = settings_closure_flags
  deps = [
    ":extension_control_browser_proxy",
    ":i18n_setup",
    ":lifetime_browser_proxy",
    ":router",
    ":setting_id_param_util",
    ":settings",
  ]
}

js_library("settings") {
  sources =
      [ "$root_gen_dir/chrome/browser/resources/settings/tsc/settings.js" ]
  deps = [
    ":i18n_setup",
    ":lifetime_browser_proxy",
  ]
  extra_deps = [ ":build_ts" ]
}

js_library("extension_control_browser_proxy") {
  sources = [ "$root_gen_dir/chrome/browser/resources/settings/tsc/extension_control_browser_proxy.js" ]
  deps = [ "//ui/webui/resources/js:cr.m" ]
  externs_list = [ "$externs_path/chrome_send.js" ]
  extra_deps = [ ":build_ts" ]
}

js_library("i18n_setup") {
  sources =
      [ "$root_gen_dir/chrome/browser/resources/settings/tsc/i18n_setup.js" ]
  deps = [ "//ui/webui/resources/js:load_time_data.m" ]
  extra_deps = [ ":build_ts" ]
}

js_library("lifetime_browser_proxy") {
  sources = [ "$root_gen_dir/chrome/browser/resources/settings/tsc/lifetime_browser_proxy.js" ]
  deps = [ "//ui/webui/resources/js:cr.m" ]
  extra_deps = [ ":build_ts" ]
}

js_library("open_window_proxy") {
  sources = [
    "$root_gen_dir/chrome/browser/resources/settings/tsc/open_window_proxy.js",
  ]
  extra_deps = [ ":build_ts" ]
}

js_library("router") {
  deps = [
    "//ui/webui/resources/js:assert.m",
    "//ui/webui/resources/js:load_time_data.m",
  ]
  externs_list = [ "$externs_path/metrics_private.js" ]
}

js_library("setting_id_param_util") {
  sources = [ "$root_gen_dir/chrome/browser/resources/settings/tsc/setting_id_param_util.js" ]
  deps = [
    ":router",
    "//ui/webui/resources/js:load_time_data.m",
  ]
  extra_deps = [ ":build_ts" ]
}

html_to_js("css_wrapper_files") {
  js_files = css_wrapper_files
}

html_to_wrapper("html_wrapper_files") {
  in_files = html_files
}

ts_library("build_ts") {
  root_dir = "$target_gen_dir/$preprocess_folder"
  out_dir = "$target_gen_dir/tsc"
  composite = true
  tsconfig_base = "tsconfig_base.json"
  in_files = ts_files + css_wrapper_files + html_wrapper_files

  deps = [
    "//third_party/polymer/v3_0:library",
    "//ui/webui/resources:library",
    "//ui/webui/resources/cr_components/customize_themes:build_ts",
  ]

  if (use_nss_certs) {
    deps +=
        [ "//ui/webui/resources/cr_components/certificate_manager:build_ts" ]
  }

  definitions = [
    "//tools/typescript/definitions/autofill_private.d.ts",
    "//tools/typescript/definitions/chrome_send.d.ts",
    "//tools/typescript/definitions/language_settings_private.d.ts",
    "//tools/typescript/definitions/management.d.ts",
    "//tools/typescript/definitions/metrics_private.d.ts",
    "//tools/typescript/definitions/passwords_private.d.ts",
    "//tools/typescript/definitions/pending.d.ts",
    "//tools/typescript/definitions/runtime.d.ts",
    "//tools/typescript/definitions/settings_private.d.ts",
  ]
  if (is_chromeos_ash || is_chromeos_lacros) {
    definitions +=
        [ "//tools/typescript/definitions/quick_unlock_private.d.ts" ]
  }

  extra_deps = [
    ":preprocess",
    ":preprocess_generated",
  ]
}
