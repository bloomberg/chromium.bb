// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Use the <code>chrome.os.diagnostics</code> API to get telemetry data.
//
// Many types defined here map with Mojo structs defined in
// chromeos/services/cros_healthd/public/mojom/cros_healthd_diagnostics.mojom.
[implemented_in = "chrome/browser/chromeos/extensions/telemetry/api/diagnostics_api.h"]
namespace os.diagnostics {
  enum RoutineType {
    battery_capacity,
    battery_charge,
    battery_discharge,
    battery_health,
    cpu_cache,
    cpu_floating_point_accuracy,
    cpu_prime_search,
    cpu_stress,
    memory,
    nvme_wear_level,
    smartctl_check
  };

  enum RoutineStatus {
    unknown,
    ready,
    running,
    waiting_user_action,
    passed,
    failed,
    error,
    cancelled,
    failed_to_start,
    removed,
    cancelling,
    unsupported,
    not_run
  };

  enum RoutineCommandType {
    cancel,
    remove,
    resume,
    status
  };

  enum UserMessageType {
    unknown,
    unplug_ac_power,
    plug_in_ac_power
  };

  dictionary GetAvailableRoutinesResponse {
    RoutineType[] routines;
  };

  dictionary GetRoutineUpdateRequest {
    long id;
    RoutineCommandType command;
  };

  dictionary GetRoutineUpdateResponse {
    long progress_percent;
    DOMString? output;
    RoutineStatus status;
    DOMString status_message;
    // Returned for routines that require user action (e.g. unplug power cable).
    UserMessageType? user_message;
  };

  dictionary RunBatteryChargeRoutineRequest {
    long length_seconds;

    long minimum_charge_percent_required;
  };

  dictionary RunBatteryDischargeRoutineRequest {
    long length_seconds;

    long maximum_discharge_percent_allowed;
  };

  dictionary RunCpuRoutineRequest {
    long length_seconds;
  };

  dictionary RunNvmeWearLevelRequest {
    long wear_level_threshold;
  };

  dictionary RunRoutineResponse {
    long id;

    RoutineStatus status;
  };

  callback GetAvailableRoutinesCallback = void (GetAvailableRoutinesResponse response);

  callback GetRoutineUpdateCallback = void (GetRoutineUpdateResponse response);

  callback RunRoutineCallback = void (RunRoutineResponse response);

  interface Functions {
    // Starts battery capacity routine.
    [supportsPromises] static void getAvailableRoutines(GetAvailableRoutinesCallback callback);

    // Get routine update
    [supportsPromises] static void getRoutineUpdate(GetRoutineUpdateRequest request,
                                                    GetRoutineUpdateCallback callback);

    // Starts battery capacity routine.
    [supportsPromises] static void runBatteryCapacityRoutine(RunRoutineCallback callback);

    // Starts battery charge routine.
    [supportsPromises] static void runBatteryChargeRoutine(RunBatteryChargeRoutineRequest request,
                                                           RunRoutineCallback callback);

    // Starts battery discharge routine.
    [supportsPromises] static void runBatteryDischargeRoutine(RunBatteryDischargeRoutineRequest request,
                                                              RunRoutineCallback callback);

    // Starts battery health routine.
    [supportsPromises] static void runBatteryHealthRoutine(RunRoutineCallback callback);

    // Starts CPU cache routine.
    [supportsPromises] static void runCpuCacheRoutine(RunCpuRoutineRequest request,
                                                      RunRoutineCallback callback);

    // Starts CPU floating point accuracy routine.
    [supportsPromises] static void runCpuFloatingPointAccuracyRoutine(RunCpuRoutineRequest request,
                                                                      RunRoutineCallback callback);

    // Starts CPU prime search routine.
    [supportsPromises] static void runCpuPrimeSearchRoutine(RunCpuRoutineRequest request,
                                                            RunRoutineCallback callback);

    // Starts CPU stress routine.
    [supportsPromises] static void runCpuStressRoutine(RunCpuRoutineRequest request,
                                                       RunRoutineCallback callback);

    // Starts memory routine.
    [supportsPromises] static void runMemoryRoutine(RunRoutineCallback callback);

    // Starts NVMe wear level routine.
    [supportsPromises] static void runNvmeWearLevelRoutine(RunNvmeWearLevelRequest request,
                                                           RunRoutineCallback callback);

    // Starts SmartctlCheck routine.
    [supportsPromises] static void runSmartctlCheckRoutine(RunRoutineCallback callback);
  };
};
