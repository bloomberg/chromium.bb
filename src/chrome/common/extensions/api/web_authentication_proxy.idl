// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// The webAuthenticationProxy API lets remote desktop software running on a
// remote host intercept Web Authentication API (WebAuthn) requests in order to
// handle them on a local client.
namespace webAuthenticationProxy {
  // An object representing a
  // PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable() call.
  dictionary IsUvpaaRequest {
    // An opaque identifier for the request.
    long requestId;
  };

  // An object representing a WebAuthn navigator.credentials.create() call.
  dictionary CreateRequest {
    // An opaque identifier for the request.
    long requestId;

    // An JSON serialized representation of the
    // PublicKeyCredentialCreationOptions passed to
    // navigator.credentials.create().
    //
    // TODO(crbug.com/1231802): Reference deserialization method or document
    // format.
    DOMString requestDetailsJson;
  };

  // An object representing a WebAuthn navigator.credentials.get() call.
  dictionary GetRequest {
    // An opaque identifier for the request.
    long requestId;

    // An JSON serialized representation of the
    // PublicKeyCredentialRequestOptions passed to navigator.credentials.get().
    //
    // TODO(crbug.com/1231802): Reference deserialization method or document
    // format.
    DOMString requestDetailsJson;
  };

  // This interface defines Events that fire when any website makes a WebAuthn
  // request. Regular processing of WebAuthn requests in the local Chrome
  // instance is disabled when these events are subscribed to.
  interface Events {
    // Fires when a WebAuthn navigator.credentials.create() call occurs. The
    // extension must supply a response by calling
    // completeCreateRequest() with the given requestId.
    static void onCreateRequest(CreateRequest requestInfo);

    // Fires when a WebAuthn navigator.credentials.get() call occurs. The
    // extension must supply a response by calling
    // completeGetRequest() with the given requestId.
    static void onGetRequest(GetRequest requestInfo);

    // Fires when a
    // PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable() call
    // occurs. The extension must supply a response by calling
    // completeIsUvpaaRequest() with the given requestId.
    static void onIsUvpaaRequest(IsUvpaaRequest requestInfo);

    // Fires when a `onCreateRequest` or `onGetRequest` event is canceled
    // (because the WebAuthn request was aborted by the caller, or because it
    // timed out). When receiving this event, the extension should cancel
    // processing of the corresponding request on the client side. Extensions
    // cannot complete a request once it has been canceled.
    static void onRequestCanceled(long requestId);
  };

  callback ErrorCallback = void(optional DOMString error);
  callback VoidCallback = void();

  dictionary DOMExceptionDetails {
    DOMString name;
    DOMString message;
  };

  dictionary CreateResponseDetails {
    // The requestId of the `CreateRequest`.
    long requestId;

    // The `DOMException`, if any, yielded by the remote request.
    DOMExceptionDetails? error;

    // A JSON serialized representation of the `PublicKeyCredential`
    // (https://w3c.github.io/webauthn/#publickeycredential), if any, yielded
    // by the remote request.
    //
    // TODO(crbug.com/1231802): Reference serialization method or document
    // format.
    DOMString? responseJson;
  };

  dictionary GetResponseDetails {
    // The requestId of the `CreateRequest`.
    long requestId;

    // The `DOMException`, if any, yielded by the remote request.
    DOMExceptionDetails? error;

    // A JSON serialized representation of the `PublicKeyCredential`
    // (https://w3c.github.io/webauthn/#publickeycredential), if any, yielded
    // by the remote request.
    //
    // TODO(crbug.com/1231802): Reference serialization method or document
    // format.
    DOMString? responseJson;
  };

  dictionary IsUvpaaResponseDetails {
    long requestId;
    boolean isUvpaa;
  };

  interface Functions {
    // Reports the result of a navigator.credentials.create() call. The
    // extension must call this for every onCreateRequest event it has
    // received, unless the request was canceled (in which case, an
    // onRequestCanceled event is fired).
    [supportsPromises] static void completeCreateRequest(
        CreateResponseDetails details,
        VoidCallback callback);

    // Reports the result of a navigator.credentials.get() call. The extension
    // must call this for every onGetRequest event it has received, unless the
    // request was canceled (in which case, an onRequestCanceled event is
    // fired).
    [supportsPromises] static void completeGetRequest(
        GetResponseDetails details,
        VoidCallback callback);

    // Reports the result of a
    // PublicKeyCredential.isUserVerifyingPlatformAuthenticator() call. The
    // extension must call this for every onIsUvpaaRequest event it has
    // received.
    [supportsPromises] static void completeIsUvpaaRequest(
        IsUvpaaResponseDetails details,
        VoidCallback callback);

    // Makes this extension the active Web Authentication API request proxy.
    //
    // Remote desktop extensions typically call this method after detecting
    // attachment of a remote session to this host. Once this method returns
    // without error, regular processing of WebAuthn requests is suspended, and
    // events from this extension API are raised.
    //
    // This method fails with an error if a different extension is already
    // attached or if the extension has not subscribed to all of the events
    // defined in this API.
    //
    // The attached extension must call `detach()` once the remote desktop
    // session has ended in order to resume regular WebAuthn request
    // processing. Extensions automatically become detached if they are
    // unloaded.
    [supportsPromises] static void attach(ErrorCallback callback);

    // Removes this extension from being the active Web Authentication API
    // request proxy.
    //
    // This method is typically called when the extension detects that a remote
    // desktop session was terminated. Once this method returns without error,
    // regular processing of WebAuthn requests continues.
    [supportsPromises] static void detach(ErrorCallback callback);
  };
};
