# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/chrome_build.gni")
import("//build/config/chromeos/ui_mode.gni")
import("//build/config/locales.gni")
import("//build/config/ui.gni")
import("//chrome/common/features.gni")
import("//chromeos/components/chromebox_for_meetings/buildflags/buildflags.gni")
import("//components/gwp_asan/buildflags/buildflags.gni")
import("//components/nacl/features.gni")
import("//ppapi/buildflags/buildflags.gni")
import("//tools/grit/grit_rule.gni")
import("//tools/ipc_fuzzer/ipc_fuzzer.gni")

if (is_android) {
  import("//build/config/android/rules.gni")
} else if (is_fuchsia) {
  import("//third_party/fuchsia-sdk/sdk/build/component.gni")
  import("//third_party/fuchsia-sdk/sdk/build/package.gni")
}

# This target is for dependency tracking for the command ID header.
source_set("command_ids") {
  sources = [ "chrome_command_ids.h" ]
  deps = [
    "//build:branding_buildflags",
    "//build:chromeos_buildflags",
  ]
}

# On Windows, links chrome_dll.rc. On other platforms, does nothing so you can
# unconditionally depend on it.
source_set("chrome_dll_resources") {
  # This source is added unconditionally for include checking on non-Windows
  # platforms.
  sources = [ "chrome_dll_resource.h" ]

  deps = [ ":command_ids" ]

  if (is_win) {
    sources += [
      "chrome_dll.rc",
      "etw_events/chrome_events_win.rc",
    ]

    deps += [
      "//build:branding_buildflags",
      "//printing/buildflags",
    ]
  }
}

if (is_win) {
  source_set("chrome_exe_main_exports") {
    sources = [ "chrome_exe_main_win.h" ]
  }
}

if (is_mac) {
  source_set("notification_metrics") {
    sources = [
      "notification_metrics.cc",
      "notification_metrics.h",
    ]
    deps = [ "//base" ]
  }
}

if (is_android) {
  android_generated_java_resources =
      [ "java/res/values/generated_resources.xml" ] +
      process_file_template(
          android_bundle_locales_as_resources,
          [ "java/res/values-{{source_name_part}}/generated_resources.xml" ])

  google_chrome_strings_java_resources =
      [ "java/res/values/google_chrome_strings.xml" ] +
      process_file_template(
          android_bundle_locales_as_resources,
          [ "java/res/values-{{source_name_part}}/google_chrome_strings.xml" ])
  chromium_strings_java_resources =
      [ "java/res/values/chromium_strings.xml" ] +
      process_file_template(
          android_bundle_locales_as_resources,
          [ "java/res/values-{{source_name_part}}/chromium_strings.xml" ])
}

grit("generated_resources") {
  source = "generated_resources.grd"
  defines = chrome_grit_defines
  if (is_cfm) {
    defines += [ "is_cfm" ]
  }
  output_dir = "$root_gen_dir/chrome"
  outputs =
      [ "grit/generated_resources.h" ] +
      process_file_template(locales_with_pseudolocales,
                            [ "generated_resources_{{source_name_part}}.pak" ])
  if (is_android) {
    outputs += android_generated_java_resources
  }
}

if (is_android) {
  java_strings_grd_prebuilt("java_strings_grd") {
    grit_output_dir = "$root_gen_dir/chrome/java/res"
    generated_files =
        rebase_path(android_generated_java_resources, "java/res", ".")
    deps = [ ":generated_resources" ]
    if (is_chrome_branded) {
      generated_files +=
          rebase_path(google_chrome_strings_java_resources, "java/res", ".")
      deps += [ ":google_chrome_strings" ]
    } else {
      generated_files +=
          rebase_path(chromium_strings_java_resources, "java/res", ".")
      deps += [ ":chromium_strings" ]
    }
  }
}

grit("google_chrome_strings") {
  source = "google_chrome_strings.grd"
  defines = chrome_grit_defines
  output_dir = "$root_gen_dir/chrome"
  outputs = [ "grit/google_chrome_strings.h" ] +
            process_file_template(
                locales_with_pseudolocales,
                [ "google_chrome_strings_{{source_name_part}}.pak" ])

  if (is_android) {
    outputs += google_chrome_strings_java_resources
  }
}

grit("chromium_strings") {
  source = "chromium_strings.grd"
  defines = chrome_grit_defines
  output_dir = "$root_gen_dir/chrome"
  outputs =
      [ "grit/chromium_strings.h" ] +
      process_file_template(locales_with_pseudolocales,
                            [ "chromium_strings_{{source_name_part}}.pak" ])

  if (is_android) {
    outputs += chromium_strings_java_resources
  }
}

static_library("test_support") {
  testonly = true
  visibility = [ "//chrome/test:test_support" ]

  sources = [
    "chrome_main_delegate.cc",
    "chrome_main_delegate.h",
  ]

  deps = [
    "//base",
    "//build:chromeos_buildflags",
    "//chrome/browser",
    "//chrome/browser/policy:path_parser",
    "//chrome/child",
    "//chrome/common",
    "//chrome/gpu",
    "//chrome/renderer",
    "//chrome/utility",
    "//components/gwp_asan/buildflags",
    "//components/heap_profiling/in_process",
    "//components/nacl/common:buildflags",
    "//components/power_scheduler",
    "//components/startup_metric_utils/browser",
    "//content/public/app",
    "//content/public/common",
    "//pdf:pdf_ppapi",
    "//ppapi/buildflags",
    "//printing/buildflags",
    "//services/tracing/public/cpp",
    "//ui/base",
    "//v8:v8_headers",
  ]
  public_deps = []

  if (!is_fuchsia) {
    # TODO(crbug.com/1226159): Complete crash reporting integration on Fuchsia.
    deps += [
      "//components/crash/core/app",
      "//components/crash/core/app:test_support",
    ]
  }

  if (is_mac) {
    sources += [ "chrome_main_mac.mm" ]

    deps += [ "//chrome:chrome_framework" ]
  }

  if (is_win) {
    deps += [
      "//chrome/chrome_elf:test_stubs",
      "//chrome/install_static:install_static_util",
      "//components/browser_watcher:stability_client",
      "//sandbox/win:sandbox",
    ]
  }

  if (is_chromeos_ash || is_chromeos_lacros) {
    deps += [ "//chromeos/dbus/constants" ]
  }

  if (is_chromeos_ash) {
    deps += [
      "//ash/constants",
      "//chrome/browser/chromeos",
      "//chromeos",
      "//chromeos/memory:memory",
    ]
    public_deps += [ "//ui/lottie" ]
  }

  if (is_chromeos_lacros) {
    deps += [
      "//chromeos/crosapi/mojom",
      "//chromeos/lacros",
    ]
  }

  if (enable_plugins && enable_nacl) {
    deps += [
      "//components/nacl/browser",
      "//components/nacl/renderer/plugin:nacl_trusted_plugin",
    ]
  }

  if (enable_gwp_asan) {
    deps += [ "//components/gwp_asan/client" ]
  }
}

if (is_fuchsia) {
  # Generate a packaged component, and an installer script to aid development.

  # TODO(crbug.com/1211758): Remove this once bringup on CFv2 is complete.
  fuchsia_component("chrome_component_v1") {
    manifest = "chrome_v1.cmx"
    data_deps = [ "//chrome:chrome_initial" ]
    visibility = [ ":*" ]
  }

  fuchsia_component("chrome_component") {
    manifest = "chrome.cml"
    data_deps = [ "//chrome:chrome_initial" ]
    visibility = [ ":*" ]
  }

  fuchsia_package("chrome_pkg") {
    package_name = "chrome"
    deps = [
      ":chrome_component",
      ":chrome_component_v1",
    ]

    excluded_dirs = FUCHSIA_PACKAGED_CONTENT_EMBEDDER_EXCLUDED_DIRS
  }

  fuchsia_package_installer("chrome_fuchsia_installer") {
    package = ":chrome_pkg"
    package_name = "chrome"
  }

  fuchsia_run_script_with_packages("chrome_fuchsia_runner") {
    package = ":chrome_pkg"
    package_name = "chrome"
    output_name_format = "run_%package%"

    executable = rebase_path("//build/fuchsia/run_ffx_command.py")
    executable_args = [
      "--command",
      "session add fuchsia-pkg://fuchsia.com/chrome#meta/chrome_v1.cmx",

      # TODO(bugs.fuchsia.dev/85949): Pass runtime arguments using %args%.
    ]
    include_fuchsia_build_dir = true
  }

  group("chrome_fuchsia") {
    deps = [
      ":chrome_fuchsia_installer",
      ":chrome_fuchsia_runner",
    ]
  }
}
