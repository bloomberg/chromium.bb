// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

function arrayBufferFromByteList(byteList) {
  return (new Uint8Array(byteList)).buffer;
}

function byteListFromArrayBuffer(arrayBuffer) {
  return Array.from(new Uint8Array(arrayBuffer));
}

// Returns the list of certificateProvider CertificateInfo instances, given the
// parsed JSON value received from the C++ handler.
function certInfoListFromParsedJson(parsedCertInfoList) {
  return parsedCertInfoList.map(parsedCertInfo => {
    const certInfo = Object.assign({}, parsedCertInfo);
    certInfo.certificate = arrayBufferFromByteList(parsedCertInfo.certificate);
    return certInfo;
  });
}

// Transforms the certificateProvider SignRequest instance into a JSON-ifiable
// value that may be sent to the C++ handler.
function jsonifiableFromSignRequest(signRequest) {
  const transformedSignRequest = Object.assign({}, signRequest);
  transformedSignRequest.digest = byteListFromArrayBuffer(signRequest.digest);
  transformedSignRequest.certificate =
      byteListFromArrayBuffer(signRequest.certificate);
  return transformedSignRequest;
}

// Listener for the chrome.certificateProvider.onCertificatesRequested event.
function onCertificatesRequested(reportCallback) {
  requestCertificatesFromCpp(reportCallback);
}

// Listener for the chrome.certificateProvider.onSignDigestRequested event.
function onSignDigestRequested(request, reportCallback) {
  requestSignatureFromCpp(
      request, /*pinStatus=*/ 'not_requested', /*pin=*/ '', reportCallback);
}

function requestCertificatesFromCpp(reportCertificatesCallback) {
  chrome.test.sendMessage(
      JSON.stringify(['onCertificatesRequested']),
      onCertificatesResponseFromCpp.bind(null, reportCertificatesCallback));
}

function onCertificatesResponseFromCpp(reportCertificatesCallback, response) {
  const certInfoList = certInfoListFromParsedJson(JSON.parse(response));
  reportCertificatesCallback(certInfoList, rejectedCertificates => {
    if (rejectedCertificates && rejectedCertificates.length) {
      console.error(
          'Rejected certificates: ' + JSON.stringify(rejectedCertificates));
    }
  });
}

function requestSignatureFromCpp(
    signDigestRequest, pinStatus, pin, reportSignatureCallback) {
  chrome.test.sendMessage(
      JSON.stringify([
        'onSignatureRequested', jsonifiableFromSignRequest(signDigestRequest),
        pinStatus, pin
      ]),
      onSignatureResponseFromCpp.bind(
          null, signDigestRequest, reportSignatureCallback));
}

function onSignatureResponseFromCpp(
    signDigestRequest, reportSignatureCallback, response) {
  const parsedResponse = JSON.parse(response);
  if (parsedResponse === null) {
    // The C++ handler signaled an error.
    reportSignatureCallback();
    return;
  }
  if (parsedResponse.stopPinRequest) {
    // The C++ handler asked to stop the PIN request.
    chrome.certificateProvider.stopPinRequest(
        parsedResponse.stopPinRequest, function() {});
    // Note that we're not returning here, since the parsed response may contain
    // the signature as well.
  }
  if (parsedResponse.signature) {
    // Forward the signature generated by the C++ handler.
    reportSignatureCallback(arrayBufferFromByteList(parsedResponse.signature));
  }
  if (parsedResponse.requestPin) {
    // The C++ handler asked to request the PIN. After the PIN is obtained,
    // we'll request the signature from the C++ handler again.
    chrome.certificateProvider.requestPin(
        parsedResponse.requestPin, requestPinResponse => {
          const pin = (requestPinResponse && requestPinResponse.userInput) ?
              requestPinResponse.userInput :
              '';
          const pinStatus = chrome.runtime.lastError ?
              ('failed:' + chrome.runtime.lastError) :
              (pin ? 'ok' : 'canceled');
          requestSignatureFromCpp(
              signDigestRequest, pinStatus, pin, reportSignatureCallback);
        });
  }
}

chrome.certificateProvider.onCertificatesRequested.addListener(
    onCertificatesRequested);

chrome.certificateProvider.onSignDigestRequested.addListener(
    onSignDigestRequested);
