// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {LocalProfileCustomizationElement} from 'chrome://profile-picker/lazy_load.js';

import {ManageProfilesBrowserProxyImpl, navigateToStep, ProfileCreationSteps, Routes} from 'chrome://profile-picker/profile_picker.js';
import {webUIListenerCallback} from 'chrome://resources/js/cr.m.js';
import {loadTimeData} from 'chrome://resources/js/load_time_data.m.js';
import {flush} from 'chrome://resources/polymer/v3_0/polymer/polymer_bundled.min.js';

import {assertEquals, assertFalse, assertTrue} from '../chai_assert.js';
import {flushTasks, isChildVisible, waitBeforeNextRender} from '../test_util.js';

import {TestManageProfilesBrowserProxy} from './test_manage_profiles_browser_proxy.js';

suite('LocalProfileCustomizationTest', function() {
  /** @type {!LocalProfileCustomizationElement} */
  let customizeProfileElement;

  /** @type {!TestManageProfilesBrowserProxy} */
  let browserProxy;

  const defaultAvatarIndex = 26;

  async function resetCustomizeProfileElement() {
    document.body.innerHTML = '';
    customizeProfileElement = /** @type {!LocalProfileCustomizationElement} */ (
        document.createElement('local-profile-customization'));
    customizeProfileElement.profileThemeInfo = browserProxy.profileThemeInfo;
    document.body.appendChild(customizeProfileElement);
    await browserProxy.whenCalled('getProfileThemeInfo');
    browserProxy.resetResolver('getProfileThemeInfo');
    await waitBeforeNextRender(customizeProfileElement);
  }

  setup(function() {
    browserProxy = new TestManageProfilesBrowserProxy();
    ManageProfilesBrowserProxyImpl.setInstance(browserProxy);
    return resetCustomizeProfileElement();
  });

  /** @param {!AutogeneratedThemeColorInfo} theme */
  async function setProfileTheme(theme) {
    browserProxy.setProfileThemeInfo(theme);
    customizeProfileElement.shadowRoot.querySelector('#colorPicker')
        .selectedTheme = {
      type: 2,
      info: {
        chromeThemeId: browserProxy.profileThemeInfo.colorId,
      },
    };
    await browserProxy.whenCalled('getProfileThemeInfo');
    browserProxy.resetResolver('getProfileThemeInfo');
  }

  /**
   * @param {string} profileName
   * @param {number} profileColor
   * @param {number} avatarIndex
   * @param {boolean} createShortcut
   */
  async function verifyCreateProfileCalledWithParams(
      profileName, profileColor, avatarIndex, createShortcut) {
    const args = await browserProxy.whenCalled('createProfile');
    assertEquals(args[0], profileName);
    assertEquals(args[1], profileColor);
    assertEquals(args[2], avatarIndex);
    assertEquals(args[3], createShortcut);
    browserProxy.resetResolver('createProfile');
  }

  test('ProfileName', async function() {
    const profileNameInput = /** @type {!CrInputElement} */ (
        customizeProfileElement.shadowRoot.querySelector('#nameInput'));
    assertTrue(isChildVisible(customizeProfileElement, '#nameInput'));
    assertFalse(profileNameInput.invalid);
    assertTrue(
        customizeProfileElement.shadowRoot.querySelector('#save').disabled);

    // Invalid profile name.
    profileNameInput.value = '\t';
    assertTrue(profileNameInput.invalid);
    profileNameInput.value = ' ';
    assertTrue(profileNameInput.invalid);
    assertTrue(
        customizeProfileElement.shadowRoot.querySelector('#save').disabled);
    // Valid profil name.
    profileNameInput.value = 'Work';
    assertFalse(profileNameInput.invalid);
    assertFalse(
        customizeProfileElement.shadowRoot.querySelector('#save').disabled);
    customizeProfileElement.shadowRoot.querySelector('#save').click();
    await verifyCreateProfileCalledWithParams(
        'Work', browserProxy.profileThemeInfo.color, defaultAvatarIndex, false);
  });

  test('selectAvatarDialog', async function() {
    function getProfileAvatarSelectorIconUrl(item) {
      return getComputedStyle(item).backgroundImage.split('/').pop().split(
          '"')[0];
    }

    function verifyAvatarSelected(item) {
      flush();
      const avatarGrid = customizeProfileElement.shadowRoot
                             .querySelector('cr-profile-avatar-selector')
                             .shadowRoot.querySelector('#avatar-grid');
      assertEquals(avatarGrid.querySelectorAll('.iron-selected').length, 1);
      assertTrue(item.classList.contains('iron-selected'));
      const displayedAvatarUrl =
          (customizeProfileElement.shadowRoot.querySelector('img').src)
              .split('/')
              .pop();
      assertEquals(getProfileAvatarSelectorIconUrl(item), displayedAvatarUrl);
    }
    await browserProxy.whenCalled('getAvailableIcons');
    assertTrue(isChildVisible(customizeProfileElement, '#customizeAvatarIcon'));
    customizeProfileElement.shadowRoot.querySelector('#customizeAvatarIcon')
        .click();
    assertTrue(
        customizeProfileElement.shadowRoot.querySelector('#selectAvatarDialog')
            .open);
    flush();

    const items = customizeProfileElement.shadowRoot
                      .querySelector('cr-profile-avatar-selector')
                      .shadowRoot.querySelector('#avatar-grid')
                      .querySelectorAll('.avatar');
    assertEquals(items.length, 4);
    assertEquals(
        getProfileAvatarSelectorIconUrl(items[0]),
        browserProxy.profileThemeInfo.themeGenericAvatar);
    verifyAvatarSelected(items[0]);

    // Select custom avatar
    items[1].click();
    flush();
    verifyAvatarSelected(items[1]);
    assertEquals(getProfileAvatarSelectorIconUrl(items[1]), 'fake-icon-1.png');

    // Simulate theme changes with custom avatar selected.
    const themeInfo = /** @type {!AutogeneratedThemeColorInfo} */ (
        Object.assign({}, browserProxy.profileThemeInfo));
    themeInfo.themeGenericAvatar = 'AvatarUrl-7';
    await setProfileTheme(themeInfo);
    assertEquals(
        getProfileAvatarSelectorIconUrl(items[0]),
        themeInfo.themeGenericAvatar);
    verifyAvatarSelected(items[1]);

    // Theme changes with generic avatar selected.
    items[0].click();
    flush();
    verifyAvatarSelected(items[0]);
    themeInfo.themeGenericAvatar = 'AvatarUrl-8';
    await setProfileTheme(/** @type {!AutogeneratedThemeColorInfo} */ (
        Object.assign({}, themeInfo)));
    assertEquals(
        getProfileAvatarSelectorIconUrl(items[0]),
        themeInfo.themeGenericAvatar);
    verifyAvatarSelected(items[0]);

    // Create profile with custom avatar.
    items[3].click();
    flush();
    verifyAvatarSelected(items[3]);
    assertEquals(getProfileAvatarSelectorIconUrl(items[3]), 'fake-icon-3.png');

    // Close the dialog.
    assertTrue(
        !!customizeProfileElement.shadowRoot.querySelector('#doneButton'));
    customizeProfileElement.shadowRoot.querySelector('#doneButton').click();
    assertFalse(
        customizeProfileElement.shadowRoot.querySelector('#selectAvatarDialog')
            .open);

    customizeProfileElement.shadowRoot.querySelector('#nameInput').value =
        'Work';
    assertFalse(
        customizeProfileElement.shadowRoot.querySelector('#save').disabled);
    customizeProfileElement.shadowRoot.querySelector('#save').click();
    await verifyCreateProfileCalledWithParams(
        'Work', browserProxy.profileThemeInfo.color, 3, false);
  });

  test('ThemeSelectionChanges', async function() {
    function verifyAppliedTheme() {
      assertEquals(
          getComputedStyle(customizeProfileElement.shadowRoot.querySelector(
                               '#headerContainer'))
              .backgroundColor,
          browserProxy.profileThemeInfo.themeFrameColor);
      assertEquals(
          getComputedStyle(
              customizeProfileElement.shadowRoot.querySelector('#backButton'))
              .getPropertyValue('--cr-icon-button-fill-color')
              .trim(),
          browserProxy.profileThemeInfo.themeFrameTextColor);
      assertEquals(
          getComputedStyle(
              customizeProfileElement.shadowRoot.querySelector('#title'))
              .color,
          browserProxy.profileThemeInfo.themeFrameTextColor);
      assertEquals(
          (customizeProfileElement.shadowRoot.querySelector('img').src)
              .split('/')
              .pop(),
          browserProxy.profileThemeInfo.themeGenericAvatar);
    }
    assertTrue(isChildVisible(customizeProfileElement, '#colorPicker'));
    verifyAppliedTheme();
    await setProfileTheme({
      color: -3413569,
      colorId: 7,
      themeFrameColor: 'rgb(203, 233, 191)',
      themeFrameTextColor: 'rgb(32, 33, 36)',
      themeGenericAvatar: 'AvatarUrl-7',
      themeShapeColor: 'rgb(255, 255, 255)'
    });
    verifyAppliedTheme();
    assertTrue(
        customizeProfileElement.shadowRoot.querySelector('#save').disabled);
    customizeProfileElement.shadowRoot.querySelector('#nameInput').value =
        'Personal';
    customizeProfileElement.shadowRoot.querySelector('#save').click();
    await verifyCreateProfileCalledWithParams(
        'Personal', browserProxy.profileThemeInfo.color, defaultAvatarIndex,
        false);
  });

  test('createShortcut', async function() {
    assertTrue(
        !!customizeProfileElement.shadowRoot.querySelector('cr-checkbox'));
    assertTrue(
        customizeProfileElement.shadowRoot.querySelector('cr-checkbox').hidden);
    loadTimeData.overrideValues({
      profileShortcutsEnabled: true,
    });
    await resetCustomizeProfileElement();
    assertTrue(isChildVisible(customizeProfileElement, '#nameInput'));
    const createShortcut = /** @type {!CrCheckboxElement} */ (
        customizeProfileElement.shadowRoot.querySelector('cr-checkbox'));
    assertFalse(createShortcut.hidden);
    assertTrue(createShortcut.checked);
    createShortcut.click();
    assertFalse(createShortcut.checked);
    customizeProfileElement.shadowRoot.querySelector('#nameInput').value =
        'Personal';
    customizeProfileElement.shadowRoot.querySelector('#save').click();
    await verifyCreateProfileCalledWithParams(
        'Personal', browserProxy.profileThemeInfo.color, defaultAvatarIndex,
        false);
    // Profile creation in progress should disable the save button.
    assertTrue(
        customizeProfileElement.shadowRoot.querySelector('#save').disabled);
    // Fire profile creation finished.
    webUIListenerCallback('create-profile-finished');
    flushTasks();
    assertFalse(
        customizeProfileElement.shadowRoot.querySelector('#save').disabled);
    createShortcut.click();
    assertTrue(createShortcut.checked);
    customizeProfileElement.shadowRoot.querySelector('#save').click();
    await verifyCreateProfileCalledWithParams(
        'Personal', browserProxy.profileThemeInfo.color, defaultAvatarIndex,
        true);
  });
});
