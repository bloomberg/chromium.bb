// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package org.chromium.chrome.test.util.browser;

import android.net.Uri;

import org.chromium.chrome.browser.tab.Tab;
import org.chromium.net.test.EmbeddedTestServer;

/**
 * Computes URL of webapp test pages with the passed in Web Manifest URL.
 */
public class WebappTestPage {
    /**
     * Title of pages whose URL was generated by {@link #urlOfPageWithServiceWorkerAndManifest()}.
     */
    public static final String WEB_APP_TITLE = "Web app banner test page";

    private static final String WEB_APP_PATH = "/chrome/test/data/banners/manifest_test_page.html";

    private static final String NO_SERVICE_WORKER_APP_PATH =
            "/chrome/test/data/banners/manifest_no_service_worker.html";

    /**
     * Returns the URL of a banner-eligible page.
     */
    public static String getBannerUrl(EmbeddedTestServer testServer) {
        String url = testServer.getURL(WEB_APP_PATH);
        Uri.Builder builder = Uri.parse(url).buildUpon();
        return builder.build().toString();
    }

    /**
     * Returns the URL of a native banner-eligible page with the specified web manifest URL.
     */
    public static String getNativeBannerUrlWithManifest(
            EmbeddedTestServer testServer, String manifestUrl) {
        String url = testServer.getURL(NO_SERVICE_WORKER_APP_PATH);
        Uri.Builder builder = Uri.parse(url).buildUpon();
        builder.appendQueryParameter("manifest", manifestUrl);
        return builder.build().toString();
    }

    /**
     * Returns the URL of a native banner-eligible page with the specified web manifest URL and
     * action query parameter.
     */
    public static String getNativeBannerUrlWithManifestAndAction(
            EmbeddedTestServer testServer, String manifestUrl, String action) {
        String url = testServer.getURL(NO_SERVICE_WORKER_APP_PATH);
        Uri.Builder builder = Uri.parse(url).buildUpon();
        builder.appendQueryParameter("manifest", manifestUrl);
        builder.appendQueryParameter("action", action);
        return builder.build().toString();
    }

    /**
     * Returns the URL of a banner-eligible page with the specified web manifest URL.
     */
    public static String getBannerUrlWithManifest(
            EmbeddedTestServer testServer, String manifestUrl) {
        String url = testServer.getURL(WEB_APP_PATH);
        Uri.Builder builder = Uri.parse(url).buildUpon();
        builder.appendQueryParameter("manifest", manifestUrl);
        return builder.build().toString();
    }

    /**
     * Returns the URL of a banner-eligible page with the specified action query parameter.
     */
    public static String getBannerUrlWithAction(EmbeddedTestServer testServer, String action) {
        String url = testServer.getURL(WEB_APP_PATH);
        Uri.Builder builder = Uri.parse(url).buildUpon();
        builder.appendQueryParameter("action", action);
        return builder.build().toString();
    }

    /**
     * Navigates to page which is controlled by a service worker and uses the passed in Web Manifest
     * URL.
     */
    public static void navigateToPageWithServiceWorkerAndManifest(
            EmbeddedTestServer testServer, Tab tab, String manifestUrl) throws Exception {
        TabLoadObserver observer = new TabLoadObserver(tab, WEB_APP_TITLE, null);
        observer.fullyLoadUrl(getBannerUrlWithManifest(testServer, manifestUrl));
    }
}
