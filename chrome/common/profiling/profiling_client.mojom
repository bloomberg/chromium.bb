// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module profiling.mojom;

// The data that is recorded for an allocation stack.
enum StackMode {
  // Instruction addresses from unwinding the stack. Includes the thread name as
  // the first frame.
  NATIVE_WITH_THREAD_NAMES,

  // Instruction addresses from unwinding the stack.
  NATIVE_WITHOUT_THREAD_NAMES,

  // Uses trace events as identifiers.
  PSEUDO,

  // Uses a combination of trace events and selective native addresses.
  MIXED
};

// A wrapper for parameters that affect each client's implementation of
// profiling.
struct ProfilingParams {
  // The client should record allocations into |memlog_sender_pipe|.
  handle sender_pipe;

  // |stack_mode| refers to the type of data that should be recorded for each
  // allocation.
  StackMode stack_mode;

  // The sampling rate is used to determined the probability of sampling an
  // allocation. Probability = min((size of allocation) / (sampling interval),
  // 1). A sampling rate of |1| is equivalent to sampling all alloations. A
  // sampling rate of |0| is invalid and will be treated as |1|.
  uint32 sampling_rate;
};

// This interface is implemented by "memlog clients" (profiled processes that
// can send memory allocation events to the profiling process). These functions
// are called by the profiling process to control the senders.
interface ProfilingClient {
  // Start recording allocations and sending them to the profiling process via
  // |params.sender_pipe|. There is currently no mechanism to stop recording
  // allocations.
  StartProfiling(ProfilingParams params);

  // Flushes the memlog pipe associated with this client. A barrier packet is
  // set over the memlog pipe with the given identifier. This allows the
  // receiver to synchronize with the flush.
  FlushMemlogPipe(uint32 barrier_id);
};
