// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[
  {
    "namespace": "bookmarkManagerPrivate",
    "description": "none",
    "types": [
      {
        "id": "BookmarkNodeDataElement",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "optional": true,
            "description": "The ID of the bookmark. This is only provided if the data is from the same profile."
          },
          "parentId": {
            "type": "string",
            "optional": true,
            "description": "The ID of the parent of the bookmark. This is only provided if the data is from the same profile."
          },
          "title": {"type": "string"},
          "url": {
            "type": "string",
            "optional": true
          },
          "children": {
            "type": "array",
            "items": {"$ref": "BookmarkNodeDataElement"}
          }
        }
      },
      {
        "id": "BookmarkNodeData",
        "type": "object",
        "description": "Information about the drag and drop data for use with drag and drop events.",
        "properties": {
          "sameProfile": {"type": "boolean"},
          "elements": {
            "type": "array",
            "items": {"$ref": "BookmarkNodeDataElement"}
          }
        }
      },
      {
        "id": "MetaInfoFields",
        "type": "object",
        "description": "Collection of meta info fields.",
        "additionalProperties": {"type": "string"}
      }
    ],
    "functions": [
      {
        "name": "copy",
        "type": "function",
        "description": "Copies the given bookmarks into the clipboard.",
        "parameters": [
          {
            "name": "idList",
            "description": "An array of string-valued ids",
            "type": "array",
            "items": {"type": "string"},
            "minItems": 1
          },
          {"type": "function", "name": "callback", "optional": true, "parameters": []}
        ]
      },
      {
        "name": "cut",
        "type": "function",
        "description": "Cuts the given bookmarks into the clipboard.",
        "parameters": [
          {
            "name": "idList",
            "description": "An array of string-valued ids",
            "type": "array",
            "items": {"type": "string"},
            "minItems": 1
          },
          {"type": "function", "name": "callback", "optional": true, "parameters": []}
        ]
      },
      {
        "name": "paste",
        "type": "function",
        "description": "Pastes bookmarks from the clipboard into the parent folder after the last selected node.",
        "parameters": [
          {"type": "string", "name": "parentId"},
          {
            "name": "selectedIdList",
            "description": "An array of string-valued ids for selected bookmarks.",
            "optional": true,
            "type": "array",
            "items": {"type": "string"},
            "minItems": 0
          },
          {"type": "function", "name": "callback", "optional": true, "parameters": []}
        ]
      },
      {
        "name": "canPaste",
        "type": "function",
        "description": "Whether there are any bookmarks that can be pasted.",
        "parameters": [
          {"type": "string", "name": "parentId", "description": "The ID of the folder to paste into."},
          {"type": "function", "name": "callback", "parameters": [
            {"name": "result", "type": "boolean"}
          ]}
        ]
      },
      {
        "name": "sortChildren",
        "type": "function",
        "description": "Sorts the children of a given folder.",
        "parameters": [
          {"type": "string", "name": "parentId", "description": "The ID of the folder to sort the children of."}
        ]
      },
      {
        "name": "getStrings",
        "type": "function",
        "description": "Gets the i18n strings for the bookmark manager.",
        "parameters": [
          {
            "type": "function",
             "name": "callback",
             "parameters": [
              {
                "name": "result",
                "type": "object",
                "additionalProperties": {"type": "string"}
              }
            ]
          }
        ]
      },
      {
        "name": "startDrag",
        "type": "function",
        "description": "Begins dragging a set of bookmarks.",
        "parameters": [
          {
            "name": "idList",
            "description": "An array of string-valued ids.",
            "type": "array",
            "items": {"type": "string"},
            "minItems": 1
          },
          {
            "name": "dragNodeIndex",
            "type": "integer",
            "minimum": 0,
            "description": "The index of the dragged node in |idList|"
          },
          {
            "name": "isFromTouch",
            "type": "boolean",
            "description": "True if the drag was initiated from touch."
          }
        ]
      },
      {
        "name": "drop",
        "type": "function",
        "description": "Performs the drop action of the drag and drop session.",
        "parameters": [
          {
            "name": "parentId",
            "description": "The ID of the folder that the drop was made.",
            "type": "string"
          },
          {
            "name": "index",
            "description": "The index of the position to drop at. If left out the dropped items will be placed at the end of the existing children.",
            "type": "integer",
            "minimum": 0,
            "optional": true
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "parameters": []
          }
        ]
      },
      {
        "name": "getSubtree",
        "type": "function",
        "description": "Retrieves a bookmark hierarchy from the given node.  If the node id is empty, it is the full tree.  If foldersOnly is true, it will only return folders, not actual bookmarks.",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "description": "ID of the root of the tree to pull.  If empty, the entire tree will be returned."
          },
          {
            "name": "foldersOnly",
            "type": "boolean",
            "description": "Pass true to only return folders."
          },
          {
            "name": "callback",
            "type": "function",
            "parameters": [
              {"name": "results", "type": "array", "items": { "$ref": "bookmarks.BookmarkTreeNode"} }
            ]
          }
        ]
      },
      {
        "name": "canEdit",
        "type": "function",
        "description": "Whether bookmarks can be modified.",
        "parameters": [
          {"type": "function", "name": "callback", "parameters": [
            {"name": "result", "type": "boolean"}
          ]}
        ]
      },
      {
        "name": "removeTrees",
        "type": "function",
        "description": "Recursively removes list of bookmarks nodes.",
        "parameters": [
          {
            "name": "idList",
            "description": "An array of string-valued ids.",
            "type": "array",
            "items": {"type": "string"},
            "minItems": 1
          },
          {"type": "function", "name": "callback", "optional": true, "parameters": []}
        ]
      },
      {
        "name": "recordLaunch",
        "type": "function",
        "description": "",
        "parameters": []
      },
      {
        "name": "createWithMetaInfo",
        "type": "function",
        "description": "Mimics the functionality of bookmarks.create, but will additionally set the given meta info fields.",
        "parameters": [
          {
            "name": "bookmark",
            "$ref": "bookmarks.CreateDetails"
          },
          {
            "name": "metaInfo",
            "$ref": "MetaInfoFields"
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "parameters": [
              {
                "name": "result",
                "$ref": "bookmarks.BookmarkTreeNode"
              }
            ]
          }
        ]
      },
      {
        "name": "getMetaInfo",
        "type": "function",
        "description": "Gets meta info from a bookmark node.",
        "allowAmbiguousOptionalArguments": true,
        "parameters": [
          {
            "name": "id",
            "description": "The id of the bookmark to retrieve meta info from. If omitted meta info for all nodes is returned.",
            "optional": true,
            "type": "string"
          },
          {
            "name": "key",
            "description": "The key for the meta info to retrieve. If omitted, all fields are returned.",
            "optional": true,
            "type": "string"
          },
          {
            "type": "function",
            "name": "callback",
            "parameters": [
              {
                "name": "value",
                "description": "If a key was given, the value of the specified field, if present. Otherwise an object containing all meta info fields for the node. If id is not given then meta info for all nodes as an object with node id to meta info.",
                "optional": true,
                "choices": [
                  {"type": "string"},
                  {"type": "object", "additionalProperties": {"type": "any"}}
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "setMetaInfo",
        "type": "function",
        "description": "Sets a meta info value for a bookmark node.",
        "parameters": [
          {
            "name": "id",
            "description": "The id of the bookmark node to set the meta info on.",
            "type": "string"
          },
          {
            "name": "key",
            "description": "The key of the meta info to set.",
            "type": "string"
          },
          {
            "name": "value",
            "description": "The meta info to set.",
            "type": "string"
          },
          {
            "name": "callback",
            "type": "function",
            "optional": true,
            "parameters": []
          }
        ]
      },
      {
        "name": "updateMetaInfo",
        "type": "function",
        "description": "Updates a set of meta info values for a bookmark node.",
        "parameters": [
          {
            "name": "id",
            "description": "The id of the bookmark node to update the meta info of.",
            "type": "string"
          },
          {
            "name": "metaInfoChanges",
            "description": "A set of meta info key/value pairs to update.",
            "$ref": "MetaInfoFields"
          },
          {
            "name": "callback",
            "type": "function",
            "optional": true,
            "parameters": []
          }
        ]
      },
      {
        "name": "undo",
        "type": "function",
        "description": "Performs an undo of the last change to the bookmark model.",
        "parameters": []
      },
      {
        "name": "redo",
        "type": "function",
        "description": "Performs a redo of last undone change to the bookmark model.",
        "parameters": []
      },
      {
        "name": "getUndoInfo",
        "type": "function",
        "description": "Gets the information for the undo if available.",
        "parameters": [
          {
            "type": "function",
            "name": "callback",
            "parameters": [
              {
                "name": "result",
                "type": "object",
                "properties": {
                  "enabled" : {"type": "boolean", "description": "Whether there is an action to undo."},
                  "label" : {"type": "string", "description": "The i18n label to use for the undo action."}
				}
              }
            ]
          }
        ]
      },
      {
        "name": "getRedoInfo",
        "type": "function",
        "description": "Gets the information for the redo if available.",
        "parameters": [
          {
            "type": "function",
            "name": "callback",
            "parameters": [
              {
                "name": "result",
                "type": "object",
                "properties": {
                  "enabled" : {"type": "boolean", "description": "Whether there is an action to redo"},
                  "label" : {"type": "string", "description": "The i18n label to use for the redo action"}
                }
              }
            ]
          }
        ]
      }
    ],
    "events": [
      {
        "name": "onDragEnter",
        "type": "function",
        "description": "Fired when dragging bookmarks over the document.",
        "parameters": [
          {"name": "bookmarkNodeData", "$ref": "BookmarkNodeData"}
        ]
      },
      {
        "name": "onDragLeave",
        "type": "function",
        "description": "Fired when the drag and drop leaves the document.",
        "parameters": [
          {"name": "bookmarkNodeData", "$ref": "BookmarkNodeData"}
        ]
      },
      {
        "name": "onDrop",
        "type": "function",
        "description": "Fired when the user drops bookmarks on the document.",
        "parameters": [
          {"name": "bookmarkNodeData", "$ref": "BookmarkNodeData"}
        ]
      },
      {
        "name": "onMetaInfoChanged",
        "type": "function",
        "description": "Fired when the meta info of a node changes.",
        "parameters": [
          {"name": "id", "type": "string"},
          {"name": "metaInfoChanges", "$ref": "MetaInfoFields"}
        ]
      }
    ]
  }
]
