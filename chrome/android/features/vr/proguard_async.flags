# Copyright 2019 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Contains flags necessary to keep the VR module compatible with base when VR
# is specified as an async DFM (when the VR module is proguarded separately).
# This flags file was generated from the dependencies of Java classes in
# the VR module, produced by reading from their constant pools. It
# intentionally keeps all members from these dependencies to ensure
# compatibility between the async VR module and base.

-keep,allowobfuscation class com.google.devtools.build.android.desugar.runtime.ThrowableExtension$AbstractDesugaringStrategy { *; }

-keep,allowobfuscation class com.google.protobuf.nano.ExtendableMessageNano { *; }

-keep,allowobfuscation class com.google.protobuf.nano.Extension { *; }

-keep,allowobfuscation class com.google.protobuf.nano.MessageNano { *; }

-keep,allowobfuscation class com.google.vr.cardboard.DisplaySynchronizer { *; }

-keep,allowobfuscation class com.google.vr.cardboard.EglReadyListener$EventListener { *; }

-keep,allowobfuscation class com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurfaceCallback { *; }

-keep,allowobfuscation class com.google.vr.cardboard.ExternalSurfaceManager$UpdateSurfaceCallback { *; }

-keep,allowobfuscation class com.google.vr.cardboard.VrParamsProvider { *; }

-keep,allowobfuscation class com.google.vr.internal.controller.ControllerServiceBridge$Callbacks { *; }

-keep,allowobfuscation class com.google.vr.keyboard.IGvrKeyboardLoader { *; }

-keep,allowobfuscation class com.google.vr.ndk.base.AbstractDaydreamTouchListener { *; }

-keep,allowobfuscation class com.google.vr.ndk.base.GvrApi$IdleListener { *; }

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayout { *; }

-keep,allowobfuscation class com.google.vr.ndk.base.GvrSurfaceView { *; }

-keep,allowobfuscation class com.google.vr.ndk.base.GvrSurfaceView$BaseConfigChooser { *; }

-keep,allowobfuscation class com.google.vr.ndk.base.GvrSurfaceView$ComponentSizeChooser { *; }

-keep,allowobfuscation class com.google.vr.sdk.common.deps.a { *; }

-keep,allowobfuscation class com.google.vr.sdk.common.deps.b { *; }

-keep,allowobfuscation class com.google.vr.vrcore.base.api.ParcelableProto { *; }

-keep,allowobfuscation class com.google.vr.vrcore.common.api.IDaydreamListener { *; }

-keep,allowobfuscation class com.google.vr.vrcore.common.api.IDaydreamListener$Stub { *; }

-keep,allowobfuscation class com.google.vr.vrcore.common.api.IDaydreamManager { *; }

-keep,allowobfuscation class com.google.vr.vrcore.common.api.ITransitionCallbacks { *; }

-keep,allowobfuscation class com.google.vr.vrcore.common.api.ITransitionCallbacks$Stub { *; }

-keep,allowobfuscation class com.google.vr.vrcore.common.api.IVrCoreSdkService { *; }

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerEvent { *; }

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerEventPacket { *; }

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.IControllerListener { *; }

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.IControllerListener$Stub { *; }

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.IControllerService { *; }

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.IControllerServiceListener { *; }

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.IControllerServiceListener$Stub { *; }

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IGvrLayout { *; }

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IGvrLayout$Stub { *; }

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IGvrUiLayout { *; }

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IGvrUiLayout$Stub { *; }

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IObjectWrapper { *; }

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IObjectWrapper$Stub { *; }

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IVrCreator { *; }

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IVrNativeLibraryLoader { *; }

-keep,allowobfuscation class com.google.vr.vrcore.logging.api.IVrCoreLoggingService { *; }

-keep,allowobfuscation class com.google.vr.vrcore.performance.api.IPerformanceService { *; }

-keep,allowobfuscation class com.google.vr.vrcore.performance.api.IThrottlingTriggerCallback { *; }

-keep,allowobfuscation class com.google.vr.vrcore.performance.api.IThrottlingTriggerCallback$Stub { *; }

-keep,allowobfuscation class org.apache.http.conn.scheme.LayeredSocketFactory { *; }

-keep,allowobfuscation class org.apache.http.conn.scheme.SocketFactory { *; }

-keep,allowobfuscation class org.apache.http.conn.ssl.AbstractVerifier { *; }

-keep,allowobfuscation class org.apache.http.conn.ssl.X509HostnameVerifier { *; }

-keep,allowobfuscation class org.apache.http.params.CoreConnectionPNames { *; }

-keep,allowobfuscation class org.chromium.base.ApplicationStatus$ActivityStateListener { *; }

-keep,allowobfuscation class org.chromium.base.task.AsyncTask { *; }

-keep,allowobfuscation class org.chromium.build.BuildHooksAndroid { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.compositor.CompositorSurfaceManager { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.infobar.SimpleConfirmInfoBarBuilder$Listener { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.tab.EmptyTabObserver { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.tab.TabRedirectHandler { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.tabmodel.EmptyTabModelSelectorObserver { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.tabmodel.TabModelSelectorTabObserver { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.vr.EmptySniffingVrViewContainer$EmptyListener { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.vr.NoopCanvas$NoopException { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.vr.OnExitVrRequestListener { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrDelegate { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrDelegateProvider { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrDialogManager { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrIntentDelegate { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrToastManager { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrViewContainer { *; }

-keep,allowobfuscation class org.chromium.chrome.browser.vr.keyboard.VrInputMethodManagerWrapper$BrowserKeyboardInterface { *; }

-keep,allowobfuscation class org.chromium.content_public.browser.InputMethodManagerWrapper { *; }

-keep,allowobfuscation class org.chromium.content_public.browser.ScreenOrientationDelegate { *; }

-keep,allowobfuscation class org.chromium.ui.base.AndroidPermissionDelegate { *; }

-keep,allowobfuscation class org.chromium.ui.base.PermissionCallback { *; }

-keep,allowobfuscation class org.chromium.ui.base.WindowAndroid { *; }

-keep,allowobfuscation class org.chromium.ui.modaldialog.ModalDialogManager$Presenter { *; }

-keep,allowobfuscation class org.chromium.ui.modaldialog.ModalDialogProperties$Controller { *; }

-keep,allowobfuscation class org.chromium.ui.widget.UiWidgetFactory { *; }

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent {
  com.google.common.logging.nano.Vr$VREvent$Eva eva;
  com.google.common.logging.nano.Vr$VREvent$EarthVr earthVr;
  com.google.common.logging.nano.Vr$VREvent$Expeditions expeditions;
  java.lang.Long durationMs;
  int checkEventSourceOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$VrCore vrCore;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$VrHome vrHome;
  com.google.common.logging.nano.Vr$VREvent$Launcher launcher;
  com.google.common.logging.nano.Vr$VREvent$Renderer renderer;
  com.google.common.logging.nano.Vr$VREvent$Cyclops cyclops;
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset standaloneHeadset;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector jumpInspector;
  com.google.common.logging.nano.Vr$VREvent$GConfigUpdate gConfigUpdate;
  com.google.common.logging.nano.Vr$VREvent$Photos photos;
  com.google.common.logging.nano.VrBaseOuterClass$VrBase$HeadMount headMount;
  int checkBucketOrThrow(int);
  byte[] toByteArray(com.google.protobuf.nano.MessageNano);
  com.google.common.logging.nano.Vr$VREvent$HeadTracking headTracking;
  com.google.common.logging.nano.Vr$VREvent$PhoneAlignment phoneAlignment;
  com.google.common.logging.nano.Vr$VREvent$Application application;
  com.google.common.logging.nano.Vr$VREvent$QrCodeScan qrCodeScan;
  com.google.common.logging.nano.Vr$VREvent$StreetView streetView;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams sdkConfiguration;
  com.google.common.logging.nano.Vr$VREvent$Lullaby lullaby;
  com.google.common.logging.nano.Vr$VREvent clear();
  com.google.common.logging.nano.Vr$VREvent$VrStreaming vrStreaming;
  java.lang.Integer eventSource;
  com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget embedVrWidget;
  com.google.common.logging.nano.Vr$VREvent$AudioStats audioStats;
  com.google.common.logging.nano.Vr$VREvent clone();
  java.lang.String cohort;
  com.google.common.logging.nano.Vr$VREvent$SensorStats sensorStats;
  com.google.common.logging.nano.Vr$VREvent parseFrom(byte[]);
  com.google.common.logging.nano.Vr$VREvent$Application[] installedVrApplications;
  com.google.common.logging.nano.Vr$VREvent$Keyboard keyboard;
  java.lang.Integer lifetimeCountBucket;
  com.google.common.logging.nano.Vr$VREvent$PerformanceStats performanceStats;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Application {
  com.google.common.logging.nano.Vr$VREvent$Application[] emptyArray();
  com.google.common.logging.nano.Vr$VREvent$Application clear();
  com.google.common.logging.nano.Vr$VREvent$Application clone();
  java.lang.String packageName;
  java.lang.String version;
  com.google.common.logging.nano.Vr$VREvent$Application[] _emptyArray;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$Application mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  java.lang.String name;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$AudioStats {
  com.google.common.logging.nano.Vr$VREvent$AudioStats clone();
  com.google.common.logging.nano.Vr$VREvent$AudioStats clear();
  java.lang.Integer framesPerBuffer;
  int checkRenderingModeOrThrow(int);
   <init>();
  com.google.common.logging.nano.Vr$VREvent$AudioStats mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Integer renderingMode;
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket[] numberOfSimultaneousSoundFields;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket[] cpuMeasurementsPercent;
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket[] numberOfSimultaneousSoundObjects;
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket[] renderingTimePerBufferMilliseconds;
  java.lang.Integer sampleRate;
  int cachedSize;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Cyclops {
  com.google.common.logging.nano.Vr$VREvent$Cyclops mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$Cyclops$Share share;
  com.google.common.logging.nano.Vr$VREvent$Cyclops clear();
  com.google.common.logging.nano.Vr$VREvent$Cyclops clone();
   <init>();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$Cyclops$View view;
  com.google.common.logging.nano.Vr$VREvent$Cyclops$Capture capture;
  com.google.common.logging.nano.Vr$VREvent$Cyclops$ShareStart shareStart;
  int cachedSize;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Cyclops$Capture {
  com.google.common.logging.nano.Vr$VREvent$Cyclops$Capture clear();
  java.lang.Integer outcome;
  java.lang.Long compositionTimeMs;
  java.lang.Boolean captureWarnings;
  int cachedSize;
   <init>();
  int checkOutcomeOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$Cyclops$Capture clone();
  java.lang.Long captureTimeMs;
  com.google.common.logging.nano.Vr$VREvent$Cyclops$Capture mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Boolean withSound;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  java.lang.Float angleDegrees;
  java.lang.Long processingTimeMs;
  com.google.protobuf.nano.FieldArray unknownFieldData;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Cyclops$Share {
  int checkTypeOrThrow(int);
   <init>();
  com.google.common.logging.nano.Vr$VREvent$Cyclops$Share clone();
  com.google.common.logging.nano.Vr$VREvent$Cyclops$Share clear();
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  java.lang.Integer numPhotos;
  java.lang.Boolean withSound;
  com.google.common.logging.nano.Vr$VREvent$Cyclops$Share mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  java.lang.Integer type;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Cyclops$ShareStart {
  java.lang.Integer originScreen;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$Cyclops$ShareStart mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$Cyclops$ShareStart clone();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.common.logging.nano.Vr$VREvent$Cyclops$ShareStart clear();
  int checkOriginScreenOrThrow(int);
  java.lang.Integer numPhotos;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Cyclops$View {
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$Cyclops$View clear();
  com.google.common.logging.nano.Vr$VREvent$Cyclops$View clone();
  java.lang.Boolean interaction;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Integer orientation;
   <init>();
  int checkOrientationOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$Cyclops$View mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Boolean withSound;
  java.lang.Integer numPanos;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$DoublePrecisionTransform {
  java.lang.Double translationY;
  java.lang.Double rotationQz;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$DoublePrecisionTransform clone();
  com.google.common.logging.nano.Vr$VREvent$DoublePrecisionTransform clear();
  java.lang.Double rotationQx;
  com.google.common.logging.nano.Vr$VREvent$DoublePrecisionTransform mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  java.lang.Double rotationQy;
  java.lang.Double translationX;
  java.lang.Double translationZ;
  java.lang.Double scale;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr {
  com.google.common.logging.nano.Vr$VREvent$DoublePrecisionTransform startFromKeyholeTransform;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$StreetView streetView;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Search search;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Environment environment;
  com.google.common.logging.nano.Vr$VREvent$EarthVr clone();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$VrSdkError[] errors;
  com.google.common.logging.nano.Vr$VREvent$EarthVr clear();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Tour tour;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Preferences preferences;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Preferences preferencesDelta;
  com.google.common.logging.nano.Vr$VREvent$Transform startFromHeadTransform;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Tutorial tutorial;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Actor[] actors;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$ControllerState[] controllerStates;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$SplashScreen splashScreen;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$ActionOrb actionOrb;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$View view;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$AppState appState;
  com.google.common.logging.nano.Vr$VREvent$EarthVr mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Menu menu;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$ActionOrb {
  java.lang.Integer displayMode;
   <init>();
  int checkExpansionStateOrThrow(int);
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  java.lang.Integer previousDisplayMode;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$ActionOrb clone();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$ActionOrb clear();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$ActionOrb mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Integer previousExpansionState;
  int cachedSize;
  int checkDisplayModeOrThrow(int);
  java.lang.Integer expansionState;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$Actor {
  java.lang.Integer vrSdk;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Actor[] emptyArray();
   <init>();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Actor clear();
  com.google.common.logging.nano.Vr$VREvent$Transform startFromHeadTransform;
  int checkVrSystemTypeOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Actor mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int checkVrSdkOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Actor clone();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Actor$ControllerState[] controllerStates;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Integer vrSystemType;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Actor[] _emptyArray;
  int cachedSize;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$Actor$ControllerState {
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Actor$ControllerState clear();
  int cachedSize;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.common.logging.nano.Vr$VREvent$Transform startFromControllerTransform;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Actor$ControllerState clone();
  java.lang.Integer type;
  int checkRoleOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Actor$ControllerState[] emptyArray();
   <init>();
  java.lang.Integer role;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Actor$ControllerState[] _emptyArray;
  int checkTypeOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Actor$ControllerState mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$AppState {
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$AppState clear();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$AppState clone();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$AppState mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Long appModeId;
  com.google.protobuf.nano.FieldArray unknownFieldData;
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$ControllerState {
   <init>();
  com.google.common.logging.nano.Vr$VREvent$Transform startFromControllerTransform;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$ControllerState mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int cachedSize;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.common.logging.nano.Vr$VREvent$EarthVr$ControllerState clone();
  java.lang.Integer role;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$ControllerState clear();
  int checkRoleOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$EarthVr$ControllerState[] emptyArray();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$ControllerState[] _emptyArray;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$Environment {
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Environment mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Environment clear();
  com.google.common.logging.nano.Vr$VREvent$Transform startFromEnvironmentTransform;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Environment clone();
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$GeoLocation {
  java.lang.Double altitudeMeters;
   <init>();
  java.lang.Double latitudeDegrees;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$GeoLocation mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int cachedSize;
  java.lang.Double longitudeDegrees;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$GeoLocation clone();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$GeoLocation clear();
  com.google.protobuf.nano.FieldArray unknownFieldData;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$Menu {
   <init>();
  java.lang.String contentKey;
  java.lang.Integer pageIndex;
  int cachedSize;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Menu clone();
  java.lang.String contentName;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Menu clear();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Menu mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.String categoryName;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$Preferences {
  java.lang.Integer humanScaleMode;
  java.lang.Integer comfortModeState;
  int checkStartConfigurationOrThrow(int);
  java.lang.Integer startConfiguration;
   <init>();
  int cachedSize;
  int checkComfortModeStateOrThrow(int);
  int checkLabelsStateOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Preferences clear();
  java.lang.Integer labelsState;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Preferences clone();
  int checkGuestModeOrThrow(int);
  int checkHumanScaleModeOrThrow(int);
  java.lang.Integer guestMode;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Preferences mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$Search {
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.String typedQuery;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Search clone();
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Search clear();
  java.lang.Integer selectedEntityIndex;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Search mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$EarthVr$View selectedEntityView;
   <init>();
  java.lang.String searchQuery;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$SplashScreen {
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Long numberOfViewPreloadsSucceeded;
  int cachedSize;
  java.lang.Long viewPreloadDurationMs;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$SplashScreen clear();
  java.lang.Long numberOfViewPreloadsAttempted;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.common.logging.nano.Vr$VREvent$EarthVr$SplashScreen clone();
  int checkExitTypeOrThrow(int);
  java.lang.Integer exitType;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$SplashScreen mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$StreetView {
   <init>();
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  int checkStateOrThrow(int);
  int checkPanoTypeOrThrow(int);
  int cachedSize;
  java.lang.String panoId;
  java.lang.Integer panoType;
  java.lang.Integer panoFrontend;
  java.lang.Integer panoNeighborCount;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$StreetView mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Boolean hasUserDiscoveredNeighbor;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$StreetView clone();
  int checkPanoFrontendOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$EarthVr$StreetView clear();
  java.lang.Integer previousState;
  java.lang.Integer state;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$GeoLocation panoLocation;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$Tour {
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Tour clone();
  java.lang.Long playbackMs;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Tour clear();
  java.lang.String name;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Tour mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$Tutorial {
   <init>();
  java.lang.String stageName;
  java.lang.Integer stage;
  int cachedSize;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Tutorial clone();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Tutorial clear();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$Tutorial mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$View {
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Long simulationSecondsSinceEpoch;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$View mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Integer mode;
  int cachedSize;
  java.lang.Integer forceHumanScale;
  java.lang.Double logicalViewerScale;
  int checkModeOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$DoublePrecisionTransform startFromKeyholeTransform;
   <init>();
  int checkForceHumanScaleOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$EarthVr$View clear();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$View clone();
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EarthVr$VrSdkError {
  com.google.common.logging.nano.Vr$VREvent$EarthVr$VrSdkError[] _emptyArray;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$VrSdkError mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Integer sdkErrorCode;
  java.lang.Integer shutdownReason;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$VrSdkError clear();
  int checkShutdownReasonOrThrow(int);
  java.lang.String sdkFunction;
  com.google.common.logging.nano.Vr$VREvent$EarthVr$VrSdkError[] emptyArray();
   <init>();
  com.google.common.logging.nano.Vr$VREvent$EarthVr$VrSdkError clone();
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget {
   <init>();
  com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget$Video video;
  int checkStereoFormatOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget$Pano pano;
  com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Integer viewMode;
  int cachedSize;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  int checkViewModeOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget clone();
  com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget clear();
  java.lang.String errorMsg;
  com.google.protobuf.nano.FieldArray unknownFieldData;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget$Pano {
  java.lang.Integer widthPixels;
  java.lang.Integer stereoFormat;
  int cachedSize;
  java.lang.Integer heightPixels;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget$Pano clone();
  com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget$Pano mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget$Pano clear();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget$Video {
  java.lang.Integer heightPixels;
  java.lang.Integer stereoFormat;
  com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget$Video mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget$Video clear();
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  int cachedSize;
   <init>();
  java.lang.Integer widthPixels;
  com.google.common.logging.nano.Vr$VREvent$EmbedVrWidget$Video clone();
  java.lang.Integer videoDurationMs;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Eva {
  com.google.common.logging.nano.Vr$VREvent$Eva$CameraStatus cameraStatus;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$Eva$View view;
  com.google.common.logging.nano.Vr$VREvent$Eva$BluetoothSession bluetoothSession;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$Eva$FileTransfer fileTransfer;
  com.google.common.logging.nano.Vr$VREvent$Eva clone();
  com.google.common.logging.nano.Vr$VREvent$Eva$Capture capture;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$Eva mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$Eva$CameraInfo cameraType;
  com.google.common.logging.nano.Vr$VREvent$Eva$Pairing pairing;
  com.google.common.logging.nano.Vr$VREvent$Eva clear();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Eva$BluetoothSession {
  java.lang.Integer failedRequestCount;
  com.google.common.logging.nano.Vr$VREvent$Eva$BluetoothSession clear();
  java.lang.Integer requestCount;
  java.lang.Long receivedBytes;
  com.google.common.logging.nano.Vr$VREvent$Eva$BluetoothSession clone();
   <init>();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Integer statusUpdateNotificationCount;
  int cachedSize;
  java.lang.Long sentBytes;
  com.google.common.logging.nano.Vr$VREvent$Eva$BluetoothSession mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Long totalLatencyMs;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Eva$CameraInfo {
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Integer cameraType;
  java.lang.String firmwareVersion;
  com.google.common.logging.nano.Vr$VREvent$Eva$CameraInfo mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int checkCameraTypeOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$Eva$CameraInfo clear();
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$Eva$CameraInfo clone();
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Eva$CameraStatus {
  java.lang.Boolean batteryCharging;
  java.lang.Integer deviceTemperature;
  java.lang.Long freeStorage;
  java.lang.Boolean phoneToCameraWifi;
  int cachedSize;
  java.lang.Boolean recording;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$Eva$CameraStatus clear();
  com.google.common.logging.nano.Vr$VREvent$Eva$CameraStatus mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$Eva$CameraStatus clone();
  java.lang.Long totalStorage;
  java.lang.Boolean connectedToWifi;
  java.lang.Integer batteryPercentage;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Eva$Capture {
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  int checkCaptureTypeOrThrow(int);
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$Eva$Capture clone();
  java.lang.Integer captureType;
  com.google.common.logging.nano.Vr$VREvent$Eva$Resolution resolution;
  com.google.common.logging.nano.Vr$VREvent$Eva$Capture mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$Eva$VideoInfo videoInfo;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$Eva$Capture clear();
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Eva$FileTransfer {
  java.lang.Integer outcome;
  com.google.common.logging.nano.Vr$VREvent$Eva$Resolution resolution;
  java.lang.Integer fileType;
  int cachedSize;
   <init>();
  int checkFileTypeOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$Eva$FileTransfer clear();
  java.lang.Integer transferInterface;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$Eva$VideoInfo videoInfo;
  java.lang.Long transferTimeMs;
  com.google.common.logging.nano.Vr$VREvent$Eva$FileTransfer clone();
  int checkOutcomeOrThrow(int);
  int checkTransferInterfaceOrThrow(int);
  java.lang.Long fileSize;
  com.google.common.logging.nano.Vr$VREvent$Eva$FileTransfer mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Eva$Pairing {
  java.lang.Long bluetoothPairingTimeMs;
  java.lang.Long pairingFlowTimeMs;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  java.lang.Integer outcome;
  com.google.common.logging.nano.Vr$VREvent$Eva$Pairing clone();
   <init>();
  com.google.common.logging.nano.Vr$VREvent$Eva$Pairing mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$Eva$Pairing clear();
  int checkOutcomeOrThrow(int);
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Eva$Resolution {
   <init>();
  int cachedSize;
  java.lang.Integer height;
  com.google.common.logging.nano.Vr$VREvent$Eva$Resolution mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$Eva$Resolution clone();
  java.lang.Integer width;
  com.google.common.logging.nano.Vr$VREvent$Eva$Resolution clear();
  com.google.protobuf.nano.FieldArray unknownFieldData;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Eva$VideoInfo {
   <init>();
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$Eva$VideoInfo clone();
  com.google.common.logging.nano.Vr$VREvent$Eva$VideoInfo mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Long durationMs;
  java.lang.Integer codec;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$Eva$VideoInfo clear();
  int checkCodecOrThrow(int);
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Eva$View {
  com.google.common.logging.nano.Vr$VREvent$Eva$View clone();
  int cachedSize;
  java.lang.Integer viewType;
  java.lang.Integer mediaType;
  java.lang.Integer viewSource;
  int checkViewSourceOrThrow(int);
  int checkMediaTypeOrThrow(int);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$Eva$View clear();
  java.lang.Long loadingTimeMs;
  int checkViewTypeOrThrow(int);
  java.lang.Long viewingDurationMs;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$Eva$View mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Expeditions {
  com.google.common.logging.nano.Vr$VREvent$Expeditions clear();
  com.google.common.logging.nano.Vr$VREvent$Expeditions mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
   <init>();
  int cachedSize;
  java.lang.String contentId;
  com.google.common.logging.nano.Vr$VREvent$Expeditions clone();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$GConfigUpdate {
  com.google.common.logging.nano.Vr$VREvent$GConfigUpdate mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$GConfigUpdate clone();
  com.google.common.logging.nano.Vr$VREvent$GConfigUpdate clear();
  com.google.common.logging.nano.Vr$VREvent$GConfigUpdate$GConfigValue[] gConfigValue;
  int cachedSize;
  com.google.protobuf.nano.FieldArray unknownFieldData;
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$GConfigUpdate$GConfigValue {
  com.google.common.logging.nano.Vr$VREvent$GConfigUpdate$GConfigValue[] _emptyArray;
  java.lang.String gConfigKey;
  java.lang.String stringValue;
  com.google.common.logging.nano.Vr$VREvent$GConfigUpdate$GConfigValue mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$GConfigUpdate$GConfigValue clear();
  int cachedSize;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$GConfigUpdate$GConfigValue[] emptyArray();
  com.google.common.logging.nano.Vr$VREvent$GConfigUpdate$GConfigValue clone();
  com.google.protobuf.nano.FieldArray unknownFieldData;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$HeadTracking {
  java.lang.Long sixDofFallbackTimestamp;
  int oneof_safety_config_;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$HeadTracking clear();
   <init>();
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$SafetyCylinderConfig safetyCylinderConfig;
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport periodicReport;
  com.google.common.logging.nano.Vr$VREvent$HeadTracking mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Integer sixDofFallbackReason;
  int checkFallBackReasonOrThrow(int);
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  java.lang.Float floorHeight;
  java.lang.Long headTrackingTimestamp;
  com.google.common.logging.nano.Vr$VREvent$HeadTracking clone();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport {
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport clear();
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport$SafeRegionEvent[] safeRegionEvent;
  int cachedSize;
  java.lang.Long endTimestampMs;
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport$RecenterEvent[] recenterEvent;
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
   <init>();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Long startTimestampMs;
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport clone();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport$RecenterEvent {
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport$RecenterEvent[] _emptyArray;
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport$RecenterEvent[] emptyArray();
   <init>();
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport$RecenterEvent clear();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Integer type;
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport$RecenterEvent clone();
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport$RecenterEvent mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Long timestampMs;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport$SafeRegionEvent {
   <init>();
  float[] hrsQuat;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  java.lang.Long timestampMs;
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport$SafeRegionEvent[] emptyArray();
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport$SafeRegionEvent clear();
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport$SafeRegionEvent clone();
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport$SafeRegionEvent[] _emptyArray;
  float[] hrsPosition;
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$PeriodicReport$SafeRegionEvent mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Boolean entered;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$HeadTracking$SafetyCylinderConfig {
  java.lang.Float exitEventRadius;
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$SafetyCylinderConfig clear();
  java.lang.Float outerRadius;
  int cachedSize;
  com.google.protobuf.nano.FieldArray unknownFieldData;
   <init>();
  float[] innerFogColor;
  java.lang.Float collisionSphereRadius;
  float[] outerFogColor;
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$SafetyCylinderConfig clone();
  com.google.common.logging.nano.Vr$VREvent$HeadTracking$SafetyCylinderConfig mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Float anchorWarningDistance;
  java.lang.Float enterEventRadius;
  java.lang.Float innerRadius;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$HistogramBucket {
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket[] _emptyArray;
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
   <init>();
  int cachedSize;
  java.lang.Integer count;
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket[] emptyArray();
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket clear();
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket clone();
  java.lang.Integer minimumValue;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$JumpInspector {
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$PlaybackDetails playbackDetails;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$PickerDetails pickerEvent;
  int cachedSize;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$MediaDetails mediaDetails;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$JumpInspector clone();
  com.google.common.logging.nano.Vr$VREvent$JumpInspector clear();
  com.google.common.logging.nano.Vr$VREvent$JumpInspector mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$JumpInspector$AudioDetails {
  java.lang.Long mediaLengthSeconds;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$AudioDetails clear();
  java.lang.Integer audioBitRate;
  java.lang.Integer audioCodec;
  java.lang.Integer sampleRate;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$AudioDetails mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Integer audioChannelCount;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$AudioDetails clone();
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$JumpInspector$ImageDetails {
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$ImageDetails mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$ImageDetails clone();
  int cachedSize;
  java.lang.Boolean usedMonoFilename;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$Resolution resolution;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$ImageDetails clear();
  com.google.protobuf.nano.FieldArray unknownFieldData;
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$JumpInspector$ImagePlaybackDetails {
  int cachedSize;
  java.lang.Integer playbackMode;
   <init>();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$ImagePlaybackDetails mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$ImagePlaybackDetails clear();
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$ImagePlaybackDetails clone();
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$JumpInspector$MediaDetails {
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$MediaDetails mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int checkAudioCodecOrThrow(int);
  int checkVideoCodecOrThrow(int);
  int cachedSize;
  java.lang.String fileExtension;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$ImageDetails imageDetails;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$MediaDetails clear();
  com.google.protobuf.nano.FieldArray unknownFieldData;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$VideoDetails videoDetails;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$MediaDetails clone();
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$AudioDetails audioDetails;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$JumpInspector$PickerDetails {
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$PickerDetails mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int cachedSize;
  java.lang.Integer numberOfFiles;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$PickerDetails clear();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Integer numberOfFolders;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$PickerDetails clone();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$JumpInspector$PlaybackDetails {
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$PlaybackDetails clone();
  int checkPlaybackModeOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$PlaybackDetails mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$ImagePlaybackDetails imagePlayback;
  int checkPlaybackEngineOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$PlaybackDetails clear();
  java.lang.Long playbackDurationSeconds;
  int cachedSize;
  java.lang.Integer playbackEngine;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$VideoPlaybackDetails videoPlayback;
  int checkPlaybackStateOrThrow(int);
   <init>();
  java.lang.Integer playbackState;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$JumpInspector$Resolution {
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$Resolution mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int cachedSize;
   <init>();
  java.lang.Integer width;
  java.lang.Integer height;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$Resolution clear();
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$Resolution clone();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$JumpInspector$SphericalMetadata {
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$SphericalMetadata mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int cachedSize;
  int checkProjectionTypeOrThrow(int);
  java.lang.Integer metadataVersion;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  java.lang.Integer meshCrc;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$SphericalMetadata clone();
   <init>();
  java.lang.Integer projectionType;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$SphericalMetadata clear();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$JumpInspector$VideoDetails {
  java.lang.Boolean usedWallyFilename;
  java.lang.Boolean usedMonoFilename;
  java.lang.Integer audioBitRate;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$SphericalMetadata sphericalMetadata;
  java.lang.Integer videoCodec;
  java.lang.Boolean usedWalleFilename;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$Resolution resolution;
  java.lang.Integer audioChannelCount;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$VideoDetails mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$VideoDetails clear();
   <init>();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Long mediaLengthSeconds;
  java.lang.Double framesPerSecond;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$VideoDetails clone();
  java.lang.Integer sampleRate;
  int cachedSize;
  java.lang.Integer audioCodec;
  java.lang.Integer videoBitRate;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$JumpInspector$VideoPlaybackDetails {
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$VideoPlaybackDetails clear();
  java.lang.Integer playbackMode;
  java.lang.Boolean usedExternalSync;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$VideoPlaybackDetails mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$JumpInspector$VideoPlaybackDetails clone();
  java.lang.Integer droppedFramesCount;
   <init>();
  com.google.protobuf.nano.FieldArray unknownFieldData;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Keyboard {
   <init>();
  com.google.common.logging.nano.Vr$VREvent$Keyboard$KeyboardEvent[] keyboardEvents;
  int checkKeyboardEventTypeOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$Keyboard clear();
  int checkKeyboardTextTypeOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$Keyboard clone();
  int checkKeyboardInputTypeOrThrow(int);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$Keyboard mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Keyboard$KeyboardEvent {
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.common.logging.nano.Vr$VREvent$Application keyboardService;
  com.google.common.logging.nano.Vr$VREvent$Keyboard$KeyboardEvent mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$Keyboard$KeyboardEvent[] _emptyArray;
  com.google.common.logging.nano.Vr$VREvent$Keyboard$KeyboardEvent[] emptyArray();
  com.google.common.logging.nano.Vr$VREvent$Keyboard$KeyboardEvent clone();
  com.google.common.logging.nano.Vr$VREvent$Keyboard$KeyboardEvent clear();
  java.lang.Long clientTimestamp;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$Keyboard$KeyboardTextEntry textEntry;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.String[] enabledLanguages;
  java.lang.String[] voiceInputLanguages;
  java.lang.Integer suggestionCount;
  java.lang.String layout;
  java.lang.Integer inputType;
   <init>();
  java.lang.String[] systemLanguages;
  java.lang.Integer eventType;
  java.lang.String language;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Keyboard$KeyboardTextEntry {
  com.google.common.logging.nano.Vr$VREvent$Keyboard$KeyboardTextEntry clone();
  java.lang.String layout;
  int cachedSize;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  java.lang.Integer length;
  java.lang.String language;
  java.lang.Integer type;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$Keyboard$KeyboardTextEntry mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
   <init>();
  com.google.common.logging.nano.Vr$VREvent$Keyboard$KeyboardTextEntry clear();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Launcher {
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$Launcher mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int checkNavItemOrThrow(int);
  java.lang.Integer navItem;
  com.google.common.logging.nano.Vr$VREvent$Launcher clone();
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.common.logging.nano.Vr$VREvent$Launcher clear();
  int cachedSize;
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Lullaby {
  com.google.common.logging.nano.Vr$VREvent$Lullaby clone();
  com.google.common.logging.nano.Vr$VREvent$Lullaby mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$Lullaby clear();
  java.lang.String contentId;
  int cachedSize;
  int checkUiElementOrThrow(int);
  java.lang.Integer uiElement;
  com.google.common.logging.nano.Vr$VREvent$Lullaby$LoadTime loadTime;
  java.lang.Integer index;
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Lullaby$LoadTime {
  com.google.common.logging.nano.Vr$VREvent$Lullaby$LoadTime clone();
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$Lullaby$LoadTime clear();
  java.lang.Integer assetType;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int checkAssetTypeOrThrow(int);
   <init>();
  com.google.common.logging.nano.Vr$VREvent$Lullaby$LoadTime mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  java.lang.Long loadTimeMs;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$PerformanceStats {
  int cachedSize;
   <init>();
  float[] gpuThrottlingTemperature;
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket[] scanlineRacingVsyncOvershootUs;
  com.google.common.logging.nano.Vr$VREvent$PerformanceStats mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Float shutdownSkinTemperatureCelsius;
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket[] totalRenderTime;
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket[] presentTime;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket[] appRenderTime;
  float[] cpuThrottlingTemperature;
  java.lang.Integer averageFps;
  java.lang.Float averageAppFps;
  java.lang.Float throttleSkinTemperatureCelsius;
  com.google.common.logging.nano.Vr$VREvent$TimeSeriesData timeSeriesData;
  java.lang.Float vrMaxSkinTemperatureCelsius;
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket[] frameTime;
  com.google.common.logging.nano.Vr$VREvent$PerformanceStats clone();
  java.lang.Integer memoryConsumptionKilobytes;
  float[] gpuShutdownTemperature;
  com.google.common.logging.nano.Vr$VREvent$PerformanceStats clear();
  java.lang.Integer thermalEventFlags;
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket[] postFrameTime;
  java.lang.Float edsFps;
  float[] cpuShutdownTemperature;
  float[] batteryThrottlingTemperature;
  com.google.common.logging.nano.Vr$VREvent$HistogramBucket[] consecutiveDroppedFrames;
  float[] batteryShutdownTemperature;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$PhoneAlignment {
  com.google.common.logging.nano.Vr$VREvent$PhoneAlignment clone();
  com.google.common.logging.nano.Vr$VREvent$PhoneAlignment mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$Vector2 lensOffset;
  java.lang.Float angleDegrees;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$Vector2[] touchLocations;
  com.google.common.logging.nano.Vr$VREvent$PhoneAlignment clear();
  int cachedSize;
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Photos {
  int cachedSize;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$Photos clone();
  com.google.common.logging.nano.Vr$VREvent$Photos clear();
  java.lang.Integer numPhotos;
  com.google.common.logging.nano.Vr$VREvent$Photos mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$Photos$OpenMedia openMedia;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$Photos$WarmWelcome warmWelcome;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Photos$OpenMedia {
  int checkMediaSourceOrThrow(int);
  java.lang.Integer type;
   <init>();
  java.lang.Integer source;
  com.google.common.logging.nano.Vr$VREvent$Photos$OpenMedia mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Boolean isSample;
  com.google.common.logging.nano.Vr$VREvent$Photos$OpenMedia clone();
  int cachedSize;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$Photos$OpenMedia clear();
  int checkMediaTypeOrThrow(int);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Photos$WarmWelcome {
  com.google.common.logging.nano.Vr$VREvent$Photos$WarmWelcome mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$Photos$WarmWelcome clone();
  java.lang.Float exitProgress;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$Photos$WarmWelcome clear();
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$QrCodeScan {
  int cachedSize;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  int checkStatusOrThrow(int);
  com.google.protobuf.nano.FieldArray unknownFieldData;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$QrCodeScan clear();
  java.lang.Integer status;
  java.lang.String headMountConfigUrl;
  com.google.common.logging.nano.Vr$VREvent$QrCodeScan clone();
  com.google.common.logging.nano.Vr$VREvent$QrCodeScan mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Renderer {
  java.lang.String glRenderer;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$Renderer clone();
  java.lang.String glVersion;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$Renderer clear();
  java.lang.String glVendor;
  com.google.common.logging.nano.Vr$VREvent$Renderer mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams {
  java.lang.Boolean disallowMultiview;
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  java.lang.Boolean touchOverlayEnabled;
  java.lang.Boolean useOnlineMagnetometerCalibration;
   <init>();
  java.lang.Boolean useSystemClockForSensorTimestamps;
  java.lang.Boolean allowDynamicLibraryLoading;
  java.lang.Boolean enableForcedTrackingCompat;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$ScreenCaptureConfig screenCaptureConfig;
  java.lang.Boolean useDeviceIdleDetection;
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$AsyncReprojectionConfig asyncReprojectionConfig;
  java.lang.Integer daydreamImageAlignment;
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$PerformanceOverlayInfo performanceOverlayInfo;
  java.lang.Boolean daydreamImageAlignmentEnabled;
  java.lang.Boolean useMagnetometerInSensorFusion;
  java.lang.Boolean useDirectModeSensors;
  java.lang.Boolean useStationaryBiasCorrection;
  java.lang.Boolean cpuLateLatchingEnabled;
  java.lang.Boolean allowVrcoreHeadTracking;
  int checkDaydreamImageAlignmentOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams clear();
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams clone();
  java.lang.Boolean allowDynamicJavaLibraryLoading;
  java.lang.Boolean allowVrcoreCompositing;
  java.lang.Boolean dimUiLayer;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$AsyncReprojectionConfig {
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Long stripsPerFrame;
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$AsyncReprojectionConfig mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$AsyncReprojectionConfig clone();
  int cachedSize;
  java.lang.Long flags;
  java.lang.Long blackBoost;
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$AsyncReprojectionConfig clear();
   <init>();
  java.lang.Long vsyncGracePeriodMicros;
  java.lang.Long displayLatencyMicros;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$PerformanceOverlayInfo {
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$PerformanceOverlayInfo mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int cachedSize;
   <init>();
  java.lang.String version;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$PerformanceOverlayInfo clear();
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$PerformanceOverlayInfo clone();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$ScreenCaptureConfig {
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$ScreenCaptureConfig clone();
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$ScreenCaptureConfig clear();
  java.lang.Boolean allowScreenRecord;
   <init>();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams$ScreenCaptureConfig mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Boolean allowCasting;
  java.lang.Boolean allowScreenshot;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$SensorStats {
  int cachedSize;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$SensorStats clear();
  com.google.common.logging.nano.Vr$VREvent$SensorStats clone();
  com.google.common.logging.nano.Vr$VREvent$SensorStats mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$SensorStats$GyroscopeStats gyroscopeStats;
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$SensorStats$GyroscopeStats {
  int cachedSize;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$SensorStats$Vector3 bias;
  com.google.common.logging.nano.Vr$VREvent$SensorStats$Vector3 lowerBound;
  com.google.common.logging.nano.Vr$VREvent$SensorStats$GyroscopeStats clear();
   <init>();
  com.google.common.logging.nano.Vr$VREvent$SensorStats$GyroscopeStats mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$SensorStats$Vector3 standardDeviation;
  com.google.common.logging.nano.Vr$VREvent$SensorStats$Vector3 upperBound;
  com.google.common.logging.nano.Vr$VREvent$SensorStats$GyroscopeStats clone();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$SensorStats$Vector3 {
  int cachedSize;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Float z;
  com.google.common.logging.nano.Vr$VREvent$SensorStats$Vector3 mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$SensorStats$Vector3 clone();
  java.lang.Float y;
  java.lang.Float x;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$SensorStats$Vector3 clear();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset {
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$HeadSetOnOffStats onOffStats;
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$PowerState powerState;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset clear();
   <init>();
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset clone();
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$MemoryStats memoryStats;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$HeadSetOnOffStats {
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$HeadSetOnOffStats clone();
   <init>();
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$HeadSetOnOffStats mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Long onOffCount;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$HeadSetOnOffStats clear();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$MemoryStats {
  java.lang.Long timeSinceBootNs;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$MemoryStats clear();
   <init>();
  java.lang.Long totalMemoryKb;
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$MemoryStats clone();
  java.lang.Long availableMemoryKb;
  java.lang.Long freeMemoryKb;
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$MemoryStats mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$PowerState {
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  int checkPowerStatesOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$PowerState clear();
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$PowerState clone();
  com.google.common.logging.nano.Vr$VREvent$StandaloneHeadset$PowerState mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Integer powerStates;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
   <init>();
  java.lang.Long powerStateDurationNs;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$StreetView {
   <init>();
  com.google.common.logging.nano.Vr$VREvent$StreetView$TutorialSession tutorialSession;
  com.google.common.logging.nano.Vr$VREvent$StreetView clear();
  com.google.common.logging.nano.Vr$VREvent$StreetView$PanoSession panoSession;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$StreetView mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$StreetView clone();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$StreetView$PanoSession {
  java.lang.Integer playPauseClicks;
  com.google.common.logging.nano.Vr$VREvent$StreetView$PanoSession clear();
  java.lang.Integer infoClicks;
  int cachedSize;
  int checkSourceOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$StreetView$PanoSession clone();
  com.google.common.logging.nano.Vr$VREvent$StreetView$PanoSession mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Integer nodesNavigated;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Integer panosAvailable;
  java.lang.Integer source;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  java.lang.Integer nextClicks;
  java.lang.Integer panosViewed;
  java.lang.Integer prevClicks;
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$StreetView$TutorialSession {
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  int checkTutorialOrThrow(int);
  java.lang.Integer tutorial;
  java.lang.Boolean completed;
  com.google.common.logging.nano.Vr$VREvent$StreetView$TutorialSession clear();
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$StreetView$TutorialSession mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$StreetView$TutorialSession clone();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$TimeSeriesData {
  com.google.common.logging.nano.Vr$VREvent$TimeSeriesData clone();
  com.google.common.logging.nano.Vr$VREvent$TimeSeriesData mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Integer timeIntervalSeconds;
  com.google.protobuf.nano.FieldArray unknownFieldData;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$TimeSeriesData clear();
  com.google.common.logging.nano.Vr$VREvent$TimeSeriesData$TimeIntervalData[] timeIntervalData;
  int cachedSize;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$TimeSeriesData$TimeIntervalData {
  com.google.common.logging.nano.Vr$VREvent$TimeSeriesData$TimeIntervalData[] emptyArray();
  float[] cpuTemperature;
  com.google.common.logging.nano.Vr$VREvent$TimeSeriesData$TimeIntervalData[] _emptyArray;
  com.google.common.logging.nano.Vr$VREvent$TimeSeriesData$TimeIntervalData mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$TimeSeriesData$TimeIntervalData clone();
  int cachedSize;
  java.lang.Integer thermalWarningsShown;
  java.lang.Integer batteryLevel;
  float[] batteryTemperature;
  java.lang.Integer edsThreadFrameDropCount;
  com.google.common.logging.nano.Vr$VREvent$TimeSeriesData$TimeIntervalData clear();
   <init>();
  java.lang.Integer batteryLevelDelta;
  java.lang.Float skinTemperature;
  float[] gpuTemperature;
  java.lang.Integer intervalStartTimeSeconds;
  com.google.protobuf.nano.FieldArray unknownFieldData;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Transform {
  java.lang.Float translationX;
  java.lang.Float rotationQy;
   <init>();
  java.lang.Float rotationQx;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Float translationZ;
  com.google.common.logging.nano.Vr$VREvent$Transform clone();
  java.lang.Float rotationQz;
  java.lang.Float translationY;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$Transform clear();
  java.lang.Float scale;
  com.google.common.logging.nano.Vr$VREvent$Transform mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$Vector2 {
   <init>();
  com.google.common.logging.nano.Vr$VREvent$Vector2 clone();
  java.lang.Float x;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$Vector2 clear();
  com.google.common.logging.nano.Vr$VREvent$Vector2 mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Float y;
  com.google.common.logging.nano.Vr$VREvent$Vector2[] _emptyArray;
  com.google.common.logging.nano.Vr$VREvent$Vector2[] emptyArray();
  com.google.protobuf.nano.FieldArray unknownFieldData;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrCore {
  com.google.common.logging.nano.Vr$VREvent$VrCore$Controller controller;
  com.google.common.logging.nano.Vr$VREvent$VrCore clone();
  int checkPermissionOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$VrCore$LockScreenEvent lockScreenEvent;
  java.lang.Integer permission;
  java.lang.Integer clientApiVersion;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$VrCore$DashboardEvent dashboardEvent;
  int cachedSize;
   <init>();
  java.lang.Integer controllerHandedness;
  com.google.common.logging.nano.Vr$VREvent$VrCore clear();
  com.google.common.logging.nano.Vr$VREvent$VrCore$CaptureEvent captureEvent;
  java.lang.Long vrSessionId;
  com.google.common.logging.nano.Vr$VREvent$VrCore mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$Application foregroundApplication;
  java.lang.Boolean isInDemoMode;
  com.google.common.logging.nano.Vr$VREvent$Application previousForegroundApplication;
  java.lang.Integer errorCode;
  int checkErrorCodeOrThrow(int);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrCore$CaptureEvent {
  com.google.common.logging.nano.Vr$VREvent$VrCore$CaptureEvent mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Boolean initiatedByController;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$VrCore$CaptureEvent clone();
   <init>();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$VrCore$CaptureEvent clear();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrCore$Controller {
  java.lang.String softwareRevision;
  int checkSensorTypeOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$VrCore$Controller mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Integer axis;
  java.lang.String hardwareRevision;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$VrCore$Controller clone();
  java.lang.String manufacturer;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  java.lang.Integer sampleCount;
  java.lang.String model;
  java.lang.Integer otaRetries;
  java.lang.Integer xRailCount;
  java.lang.Integer batteryLevel;
  java.lang.String firmware;
  java.lang.Boolean isConnected;
  java.lang.Integer yRailCount;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$VrCore$Controller clear();
  java.lang.Integer status;
  int checkControllerAxisOrThrow(int);
  java.lang.Integer zRailCount;
  java.lang.Integer sensorType;
  java.lang.Integer totalControllerLagCount;
  java.lang.String availableFirmware;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrCore$DashboardEvent {
  com.google.common.logging.nano.Vr$VREvent$VrCore$DashboardEvent clear();
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$Application worldApp;
  logs.proto.wireless.performance.mobile.nano.MemoryMetric$AndroidMemoryStats worldAppMemoryStats;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.common.logging.nano.Vr$VREvent$VrCore$DashboardEvent$DashboardDismissDetails dismissDetails;
  int checkDashboardEventTypeOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$VrCore$DashboardEvent clone();
  java.lang.Integer eventType;
  java.lang.Long clientTimestamp;
  java.lang.String sessionId;
  com.google.common.logging.nano.Vr$VREvent$VrCore$DashboardEvent mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
   <init>();
  com.google.protobuf.nano.FieldArray unknownFieldData;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrCore$DashboardEvent$DashboardDismissDetails {
  com.google.common.logging.nano.Vr$VREvent$VrCore$DashboardEvent$DashboardDismissDetails mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Boolean worldAppDied;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  java.lang.Integer dismissReason;
  int checkDashboardDismissReasonOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$VrCore$DashboardEvent$DashboardDismissDetails clear();
  com.google.protobuf.nano.FieldArray unknownFieldData;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$VrCore$DashboardEvent$DashboardDismissDetails clone();
  int cachedSize;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrCore$LockScreenEvent {
  int checkLockScreenEventTypeOrThrow(int);
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$VrCore$LockScreenEvent mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$VrCore$LockScreenEvent clone();
  com.google.common.logging.nano.Vr$VREvent$VrCore$LockScreenEvent clear();
   <init>();
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Integer eventType;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrHome {
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$VrHome$DialogAction dialogAction;
  com.google.common.logging.nano.Vr$VREvent$VrHome clone();
  com.google.common.logging.nano.Vr$VREvent$VrHome$Setup setup;
   <init>();
  com.google.common.logging.nano.Vr$VREvent$VrHome clear();
  com.google.common.logging.nano.Vr$VREvent$GConfigUpdate gConfigUpdate;
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$VrHome mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$VrHome$GetViewerClick getViewerClick;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrHome$DialogAction {
  com.google.common.logging.nano.Vr$VREvent$VrHome$DialogAction clear();
  com.google.common.logging.nano.Vr$VREvent$VrHome$DialogAction mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Integer actionType;
   <init>();
  int cachedSize;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  int checkDialogTypeOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$VrHome$DialogAction clone();
  java.lang.Integer type;
  int checkDialogActionTypeOrThrow(int);
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrHome$GetViewerClick {
  com.google.common.logging.nano.Vr$VREvent$VrHome$GetViewerClick clone();
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$VrHome$GetViewerClick mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
   <init>();
  java.lang.String url;
  com.google.common.logging.nano.Vr$VREvent$VrHome$GetViewerClick clear();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrHome$Setup {
  com.google.common.logging.nano.Vr$VREvent$VrHome$Setup$View view;
  int checkStepOrThrow(int);
  com.google.common.logging.nano.Vr$VREvent$VrHome$Setup clone();
  com.google.common.logging.nano.Vr$VREvent$VrHome$Setup mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$VrHome$Setup$StepStateChange stepStateChange;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$VrHome$Setup clear();
   <init>();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrHome$Setup$StepStateChange {
  java.lang.Integer newStepState;
  int checkStepStateOrThrow(int);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
   <init>();
  com.google.common.logging.nano.Vr$VREvent$VrHome$Setup$StepStateChange clone();
  com.google.common.logging.nano.Vr$VREvent$VrHome$Setup$StepStateChange mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$VrHome$Setup$StepStateChange clear();
  java.lang.Integer step;
  java.lang.Integer previousStepState;
  int cachedSize;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrHome$Setup$View {
  com.google.common.logging.nano.Vr$VREvent$VrHome$Setup$View mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
   <init>();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Integer step;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  java.lang.Integer page;
  com.google.common.logging.nano.Vr$VREvent$VrHome$Setup$View clear();
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$VrHome$Setup$View clone();
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrStreaming {
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$VrStreaming$Frame[] frame;
   <init>();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.common.logging.nano.Vr$VREvent$VrStreaming mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.Vr$VREvent$VrStreaming clear();
  com.google.common.logging.nano.Vr$VREvent$VrStreaming clone();
  com.google.common.logging.nano.Vr$VREvent$VrStreaming$SessionInfo sessionInfo;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrStreaming$Frame {
  com.google.common.logging.nano.Vr$VREvent$VrStreaming$Frame clear();
  com.google.common.logging.nano.Vr$VREvent$VrStreaming$Frame[] emptyArray();
  com.google.common.logging.nano.Vr$VREvent$VrStreaming$Frame[] _emptyArray;
  java.lang.Long poseSendTimeUsec;
  java.lang.Long decodeStartTimeUsec;
  java.lang.Integer poseId;
  com.google.common.logging.nano.Vr$VREvent$VrStreaming$Frame mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.Long decodeEndTimeUsec;
  com.google.common.logging.nano.Vr$VREvent$VrStreaming$Frame clone();
   <init>();
  int cachedSize;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Long framePresentTimeUsec;
}

-keep,allowobfuscation class com.google.common.logging.nano.Vr$VREvent$VrStreaming$SessionInfo {
  com.google.protobuf.nano.FieldArray unknownFieldData;
   <init>();
  java.lang.String sessionId;
  com.google.common.logging.nano.Vr$VREvent$VrStreaming$SessionInfo clear();
  com.google.common.logging.nano.Vr$VREvent$VrStreaming$SessionInfo clone();
  int cachedSize;
  com.google.common.logging.nano.Vr$VREvent$VrStreaming$SessionInfo mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
}

-keep,allowobfuscation class com.google.common.logging.nano.VrBaseOuterClass$VrBase {
  com.google.common.logging.nano.VrBaseOuterClass$VrBase mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.common.logging.nano.VrBaseOuterClass$VrBase clone();
  int cachedSize;
  com.google.common.logging.nano.VrBaseOuterClass$VrBase clear();
  com.google.protobuf.nano.FieldArray unknownFieldData;
}

-keep,allowobfuscation class com.google.common.logging.nano.VrBaseOuterClass$VrBase$HeadMount {
  com.google.common.logging.nano.VrBaseOuterClass$VrBase$HeadMount clone();
  com.google.common.logging.nano.VrBaseOuterClass$VrBase$HeadMount mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int cachedSize;
   <init>();
  com.google.common.logging.nano.VrBaseOuterClass$VrBase$HeadMount clear();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.String model;
  java.lang.String vendor;
}

-keep,allowobfuscation class com.google.devtools.build.android.desugar.runtime.ThrowableExtension {
  boolean useMimicStrategy();
  com.google.devtools.build.android.desugar.runtime.ThrowableExtension$AbstractDesugaringStrategy STRATEGY;
  void addSuppressed(java.lang.Throwable, java.lang.Throwable);
  int API_LEVEL;
  java.lang.Integer readApiLevelFromBuildVersion();
}

-keep,allowobfuscation class com.google.devtools.build.android.desugar.runtime.ThrowableExtension$AbstractDesugaringStrategy {
  void printStackTrace(java.lang.Throwable, java.io.PrintStream);
  void addSuppressed(java.lang.Throwable, java.lang.Throwable);
  void printStackTrace(java.lang.Throwable, java.io.PrintWriter);
  void printStackTrace(java.lang.Throwable);
  java.lang.Throwable[] getSuppressed(java.lang.Throwable);
  java.lang.Throwable[] EMPTY_THROWABLE_ARRAY;
   <init>();
}

-keep,allowobfuscation class com.google.devtools.build.android.desugar.runtime.ThrowableExtension$ConcurrentWeakIdentityHashMap {
  java.lang.ref.ReferenceQueue referenceQueue;
  void deleteEmptyKeys();
   <init>();
  java.util.concurrent.ConcurrentHashMap map;
  java.util.List get(java.lang.Throwable, boolean);
}

-keep,allowobfuscation class com.google.devtools.build.android.desugar.runtime.ThrowableExtension$ConcurrentWeakIdentityHashMap$WeakKey {
  java.lang.Object get();
  int hash;
   <init>(java.lang.Throwable, java.lang.ref.ReferenceQueue);
}

-keep,allowobfuscation class com.google.devtools.build.android.desugar.runtime.ThrowableExtension$MimicDesugaringStrategy {
  java.lang.Throwable[] EMPTY_THROWABLE_ARRAY;
   <init>();
  com.google.devtools.build.android.desugar.runtime.ThrowableExtension$ConcurrentWeakIdentityHashMap map;
}

-keep,allowobfuscation class com.google.devtools.build.android.desugar.runtime.ThrowableExtension$NullDesugaringStrategy {
   <init>();
  java.lang.Throwable[] EMPTY_THROWABLE_ARRAY;
}

-keep,allowobfuscation class com.google.devtools.build.android.desugar.runtime.ThrowableExtension$ReuseDesugaringStrategy {
   <init>();
}

-keep,allowobfuscation class com.google.protobuf.nano.CodedInputByteBufferNano {
  boolean readBool();
  long readRawLittleEndian64();
  byte[] getData(int, int);
  long readUInt64();
  void popLimit(int);
  void skipRawBytes(int);
  void skipMessage();
  long readSFixed64();
  boolean skipField(int);
  long readSInt64();
  int readInt32();
  int lastTag;
  byte readRawByte();
  long readRawVarint64();
  int getBytesUntilLimit();
  boolean isAtEnd();
  float readFloat();
  void checkLastTagWas(int);
  int recursionLimit;
  int bufferSizeAfterLimit;
  int bufferSize;
  byte[] buffer;
  int readEnum();
  int bufferStart;
  int sizeLimit;
  java.lang.String readString();
  com.google.protobuf.nano.CodedInputByteBufferNano newInstance(byte[]);
  int readRawVarint32();
  void rewindToPosition(int);
   <init>(byte[], int, int);
  int getPosition();
  void readGroup(com.google.protobuf.nano.MessageNano, int);
  int recursionDepth;
  void readMessage(com.google.protobuf.nano.MessageNano);
  long readInt64();
  int readSFixed32();
  int readSInt32();
  int readUInt32();
  int readRawLittleEndian32();
  long decodeZigZag64(long);
  com.google.protobuf.nano.CodedInputByteBufferNano newInstance(byte[], int, int);
  int bufferPos;
  double readDouble();
  int currentLimit;
  int decodeZigZag32(int);
  long readFixed64();
  byte[] readBytes();
  int pushLimit(int);
  void recomputeBufferSizeAfterLimit();
  int readFixed32();
  int readTag();
}

-keep,allowobfuscation class com.google.protobuf.nano.CodedOutputByteBufferNano {
  int computeInt64SizeNoTag(long);
  int computeSInt64SizeNoTag(long);
  void writeDoubleNoTag(double);
  void writeSFixed64NoTag(long);
  void writeMessage(int, com.google.protobuf.nano.MessageNano);
  int computeSFixed64SizeNoTag(long);
  int encodedLengthGeneral(java.lang.CharSequence, int);
  int computeSFixed32Size(int, int);
  int computeUInt32SizeNoTag(int);
  void writeFixed64NoTag(long);
  void writeUInt64(int, long);
  void writeInt32NoTag(int);
  void writeRawByte(int);
  void writeFloatNoTag(float);
  int computeMessageSizeNoTag(com.google.protobuf.nano.MessageNano);
  int computeInt32Size(int, int);
  int computeUInt64Size(int, long);
  void writeRawVarint64(long);
  int computeSInt64Size(int, long);
  int encodedLength(java.lang.CharSequence);
  void writeInt64NoTag(long);
  int computeFloatSizeNoTag(float);
  void writeUInt32NoTag(int);
  void writeFloat(int, float);
  int computeBytesSize(int, byte[]);
  void writeGroupNoTag(com.google.protobuf.nano.MessageNano);
  int computeEnumSizeNoTag(int);
  int computeMessageSize(int, com.google.protobuf.nano.MessageNano);
  int computeStringSize(int, java.lang.String);
  void encodeDirect(java.lang.CharSequence, java.nio.ByteBuffer);
  int computeEnumSize(int, int);
   <init>(java.nio.ByteBuffer);
  int computeFixed64Size(int, long);
  void encode(java.lang.CharSequence, java.nio.ByteBuffer);
  void writeInt64(int, long);
  void writeSInt32NoTag(int);
  void writeSFixed32NoTag(int);
  int computeSInt32SizeNoTag(int);
  void checkNoSpaceLeft();
  int computeUInt64SizeNoTag(long);
  void writeBoolNoTag(boolean);
  void writeFixed32NoTag(int);
  void writeStringNoTag(java.lang.String);
  int computeBoolSizeNoTag(boolean);
  int computeBytesSizeNoTag(byte[]);
   <init>(byte[], int, int);
  int computeStringSizeNoTag(java.lang.String);
  int computeDoubleSizeNoTag(double);
  com.google.protobuf.nano.CodedOutputByteBufferNano newInstance(byte[], int, int);
  int computeGroupSize(int, com.google.protobuf.nano.MessageNano);
  int computeUInt32Size(int, int);
  int encodeZigZag32(int);
  long encodeZigZag64(long);
  void writeRawBytes(byte[]);
  int computeRawVarint32Size(int);
  int computeSFixed32SizeNoTag(int);
  int computeSFixed64Size(int, long);
  void writeRawByte(byte);
  void writeRawLittleEndian64(long);
  void writeBool(int, boolean);
  int computeSInt32Size(int, int);
  java.nio.ByteBuffer buffer;
  int encode(java.lang.CharSequence, byte[], int, int);
  int computeTagSize(int);
  int computeFixed32SizeNoTag(int);
  int computeGroupSizeNoTag(com.google.protobuf.nano.MessageNano);
  int computeFixed32Size(int, int);
  void writeRawLittleEndian32(int);
  void writeBytesNoTag(byte[], int, int);
  void writeMessageNoTag(com.google.protobuf.nano.MessageNano);
  int spaceLeft();
  void writeString(int, java.lang.String);
  int computeBytesSizeNoTag(int);
  void writeSInt64NoTag(long);
  void writeRawBytes(byte[], int, int);
  int computeDoubleSize(int, double);
  void writeInt32(int, int);
  void writeRawVarint32(int);
  void writeDouble(int, double);
  int computeInt64Size(int, long);
  int computeFloatSize(int, float);
  com.google.protobuf.nano.CodedOutputByteBufferNano newInstance(byte[]);
  void writeTag(int, int);
  int computeBoolSize(int, boolean);
  void writeUInt64NoTag(long);
  int computeInt32SizeNoTag(int);
  void writeBytesNoTag(byte[]);
  void writeEnumNoTag(int);
  int computeFixed64SizeNoTag(long);
  int computeRawVarint64Size(long);
}

-keep,allowobfuscation class com.google.protobuf.nano.CodedOutputByteBufferNano$OutOfSpaceException {
   <init>(int, int);
  java.lang.Throwable initCause(java.lang.Throwable);
}

-keep,allowobfuscation class com.google.protobuf.nano.ExtendableMessageNano {
  int computeSerializedSize();
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.protobuf.nano.ExtendableMessageNano clone();
  com.google.protobuf.nano.FieldArray unknownFieldData;
   <init>();
  void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano);
}

-keep,allowobfuscation class com.google.protobuf.nano.Extension {
  java.lang.Object getRepeatedValueFrom(java.util.List);
  void writeTo(java.lang.Object, com.google.protobuf.nano.CodedOutputByteBufferNano);
  void readDataInto(com.google.protobuf.nano.UnknownFieldData, java.util.List);
  int type;
  boolean repeated;
  int computeSerializedSize(java.lang.Object);
  int computeRepeatedSerializedSize(java.lang.Object);
  java.lang.Object getSingularValueFrom(java.util.List);
  java.lang.Class clazz;
  void writeRepeatedData(java.lang.Object, com.google.protobuf.nano.CodedOutputByteBufferNano);
   <init>(int, java.lang.Class, int, boolean);
  int computeSingularSerializedSize(java.lang.Object);
  void writeSingularData(java.lang.Object, com.google.protobuf.nano.CodedOutputByteBufferNano);
  java.lang.Object readData(com.google.protobuf.nano.CodedInputByteBufferNano);
  int tag;
   <init>(int, java.lang.Class, int, boolean, com.google.protobuf.nano.Extension$1);
  java.lang.Object getValueFrom(java.util.List);
}

-keep,allowobfuscation class com.google.protobuf.nano.Extension$PrimitiveExtension {
  int type;
  java.lang.Object readData(com.google.protobuf.nano.CodedInputByteBufferNano);
  int nonPackedTag;
  int tag;
   <init>(int, java.lang.Class, int, boolean, int, int);
  int packedTag;
  int computePackedDataSize(java.lang.Object);
}

-keep,allowobfuscation class com.google.protobuf.nano.FieldArray {
  com.google.protobuf.nano.FieldData dataAt(int);
  com.google.protobuf.nano.FieldData DELETED;
   <init>(int);
  void remove(int);
  boolean mGarbage;
  int mSize;
  com.google.protobuf.nano.FieldArray clone();
  int[] mFieldNumbers;
  int idealByteArraySize(int);
  void put(int, com.google.protobuf.nano.FieldData);
  int idealIntArraySize(int);
  boolean arrayEquals(com.google.protobuf.nano.FieldData[], com.google.protobuf.nano.FieldData[], int);
  boolean isEmpty();
  int size();
   <init>();
  int binarySearch(int);
  com.google.protobuf.nano.FieldData[] mData;
  void gc();
  boolean arrayEquals(int[], int[], int);
  com.google.protobuf.nano.FieldData get(int);
}

-keep,allowobfuscation class com.google.protobuf.nano.FieldData {
  byte[] toByteArray();
  boolean equals(java.lang.Object);
  void addUnknownField(com.google.protobuf.nano.UnknownFieldData);
  java.lang.Object value;
  void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano);
  void setValue(com.google.protobuf.nano.Extension, java.lang.Object);
  int computeSerializedSize();
   <init>(com.google.protobuf.nano.Extension, java.lang.Object);
  com.google.protobuf.nano.FieldData clone();
  int hashCode();
  java.util.List unknownFieldData;
  java.lang.Object getValue(com.google.protobuf.nano.Extension);
   <init>();
  com.google.protobuf.nano.Extension cachedExtension;
}

-keep,allowobfuscation class com.google.protobuf.nano.InternalNano {
  java.lang.Object LAZY_INIT_LOCK;
  void cloneUnknownFieldData(com.google.protobuf.nano.ExtendableMessageNano, com.google.protobuf.nano.ExtendableMessageNano);
}

-keep,allowobfuscation class com.google.protobuf.nano.InvalidProtocolBufferNanoException {
  com.google.protobuf.nano.InvalidProtocolBufferNanoException malformedVarint();
   <init>(java.lang.String);
  com.google.protobuf.nano.InvalidProtocolBufferNanoException recursionLimitExceeded();
  com.google.protobuf.nano.InvalidProtocolBufferNanoException invalidWireType();
  com.google.protobuf.nano.InvalidProtocolBufferNanoException negativeSize();
  com.google.protobuf.nano.InvalidProtocolBufferNanoException invalidTag();
  com.google.protobuf.nano.InvalidProtocolBufferNanoException invalidEndTag();
  com.google.protobuf.nano.InvalidProtocolBufferNanoException truncatedMessage();
  java.lang.String toString();
}

-keep,allowobfuscation class com.google.protobuf.nano.MessageNano {
   <init>();
  void toByteArray(com.google.protobuf.nano.MessageNano, byte[], int, int);
  byte[] toByteArray(com.google.protobuf.nano.MessageNano);
  void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano);
  com.google.protobuf.nano.MessageNano mergeFrom(com.google.protobuf.nano.MessageNano, byte[], int, int);
  int computeSerializedSize();
  boolean messageNanoEquals(com.google.protobuf.nano.MessageNano, com.google.protobuf.nano.MessageNano);
  int getCachedSize();
  com.google.protobuf.nano.MessageNano mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int cachedSize;
  com.google.protobuf.nano.MessageNano clone();
  int getSerializedSize();
  com.google.protobuf.nano.MessageNano mergeFrom(com.google.protobuf.nano.MessageNano, byte[]);
}

-keep,allowobfuscation class com.google.protobuf.nano.MessageNanoPrinter {
  java.lang.String deCamelCaseify(java.lang.String);
  java.lang.String sanitizeString(java.lang.String);
  void print(java.lang.String, java.lang.Object, java.lang.StringBuffer, java.lang.StringBuffer);
  java.lang.String escapeString(java.lang.String);
  java.lang.String print(com.google.protobuf.nano.MessageNano);
  void appendQuotedBytes(byte[], java.lang.StringBuffer);
}

-keep,allowobfuscation class com.google.protobuf.nano.UnknownFieldData {
  byte[] bytes;
  void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano);
  int tag;
   <init>(int, byte[]);
  int computeSerializedSize();
}

-keep,allowobfuscation class com.google.protobuf.nano.WireFormatNano {
  int getRepeatedFieldArrayLength(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  float[] EMPTY_FLOAT_ARRAY;
  byte[] EMPTY_BYTES;
  double[] EMPTY_DOUBLE_ARRAY;
  boolean[] EMPTY_BOOLEAN_ARRAY;
  int getTagFieldNumber(int);
  java.lang.String[] EMPTY_STRING_ARRAY;
  int getTagWireType(int);
  long[] EMPTY_LONG_ARRAY;
  int[] EMPTY_INT_ARRAY;
  int makeTag(int, int);
  byte[][] EMPTY_BYTES_ARRAY;
}

-keep,allowobfuscation class com.google.protobuf.nano.android.ParcelableMessageNanoCreator {
  com.google.protobuf.nano.MessageNano[] newArray(int);
  void writeToParcel(java.lang.Class, com.google.protobuf.nano.MessageNano, android.os.Parcel);
  java.lang.Class mClazz;
  com.google.protobuf.nano.MessageNano createFromParcel(android.os.Parcel);
}

-keep,allowobfuscation class com.google.vr.audio.DeviceInfo {
  android.content.Context context;
  void nativeUpdateHeadphoneStateChange(long, int);
  android.content.BroadcastReceiver headphoneStateReceiver;
  long access$000(com.google.vr.audio.DeviceInfo);
  void access$100(com.google.vr.audio.DeviceInfo, long, int);
  long nativeObject;
   <init>(long, android.content.Context);
}

-keep,allowobfuscation class com.google.vr.audio.DeviceInfo$1 {
   <init>(com.google.vr.audio.DeviceInfo);
  com.google.vr.audio.DeviceInfo this$0;
}

-keep,allowobfuscation class com.google.vr.cardboard.AndroidNCompat {
  void setVrThread(int);
  boolean handleVrCoreAbsence(android.content.Context, int);
  java.lang.String TAG;
  int checkForVrCorePresence(android.content.Context);
  boolean setVrModeEnabled(android.app.Activity, boolean);
  boolean isVrModeSupported(android.content.Context);
  void showWarningDialog(android.content.Context, int, int, android.content.DialogInterface$OnClickListener);
  boolean setSustainedPerformanceMode(android.app.Activity, boolean);
  boolean isVrModeHighPerformanceSupported(android.content.Context);
  boolean setVrModeEnabled(android.app.Activity, boolean, int);
  boolean isAtLeastNMR1();
  java.lang.String access$000();
  boolean isAtLeastN();
  int sSdkLevelOverride;
}

-keep,allowobfuscation class com.google.vr.cardboard.AndroidNCompat$1 {
   <init>(android.content.Context);
  android.content.Context val$context;
}

-keep,allowobfuscation class com.google.vr.cardboard.AndroidNCompat$2 {
   <init>(android.content.Context);
  android.content.Context val$context;
}

-keep,allowobfuscation class com.google.vr.cardboard.AndroidNCompat$3 {
   <init>();
}

-keep,allowobfuscation class com.google.vr.cardboard.CardboardGLSurfaceView {
  java.util.ArrayList eventQueueWhileDetached;
  boolean isRendererSet;
  com.google.vr.cardboard.CardboardGLSurfaceView$DetachListener listener;
  com.google.vr.cardboard.EglFactory eglFactory;
  void setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView$EGLWindowSurfaceFactory);
  void setEGLContextFactory(android.opengl.GLSurfaceView$EGLContextFactory);
  boolean isDetached;
  java.lang.String TAG;
}

-keep,allowobfuscation class com.google.vr.cardboard.CardboardGLSurfaceView$DetachListener {
  void onSurfaceViewDetachedFromWindow();
}

-keep,allowobfuscation class com.google.vr.cardboard.ConfigUtils {
  boolean removeDeviceParamsFromExternalStorage();
  com.google.protobuf.nano.MessageNano readFromInputStream(java.lang.Class, java.io.InputStream, int);
  java.lang.String TAG;
  com.google.vr.sdk.proto.nano.CardboardDevice$DeviceParams readDeviceParamsFromExternalStorage();
  boolean writeToOutputStream(com.google.protobuf.nano.MessageNano, java.io.OutputStream, int);
  com.google.protobuf.nano.MessageNano readFromExternalStorage(java.lang.Class, java.lang.String, int, boolean);
  boolean writeToExternalStorage(com.google.protobuf.nano.MessageNano, java.lang.String, int);
  boolean writeDisplayParamsToExternalStorage(com.google.vr.sdk.proto.nano.Display$DisplayParams);
  boolean writeDeviceParamsToExternalStorage(com.google.vr.sdk.proto.nano.CardboardDevice$DeviceParams);
  com.google.vr.sdk.proto.nano.Display$DisplayParams readDisplayParamsFromExternalStorage();
  java.io.File getConfigFile(java.lang.String);
}

-keep,allowobfuscation class com.google.vr.cardboard.ContentProviderVrParamsProvider {
  android.net.Uri sdkConfigurationParamsSettingUri;
  com.google.protobuf.nano.MessageNano readParams(com.google.protobuf.nano.MessageNano, android.net.Uri, java.lang.String);
  boolean writeParams(com.google.protobuf.nano.MessageNano, android.net.Uri);
  android.net.Uri displayParamsSettingUri;
  java.lang.String TAG;
  android.content.ContentProviderClient client;
  android.net.Uri userPrefsUri;
   <init>(android.content.ContentProviderClient, java.lang.String);
  android.net.Uri deviceParamsSettingUri;
}

-keep,allowobfuscation class com.google.vr.cardboard.ContextUtils {
  android.app.Activity getActivity(android.content.Context);
  android.content.ComponentName getComponentName(android.content.Context);
}

-keep,allowobfuscation class com.google.vr.cardboard.DisplaySynchronizer {
  android.view.Display getDisplay();
  void onConfigurationChanged();
  android.view.Display display;
  long lastDisplayRotationUpdateTimeNanos;
  void shutdown();
  void setDisplay(android.view.Display);
  long nativeCreate(java.lang.ClassLoader, android.content.Context);
  com.google.vr.cardboard.FrameMonitor frameMonitor;
  void invalidateDisplayProperties();
  void nativeUpdate(long, long, int);
  void nativeOnMetricsChanged(long);
  void nativeDestroy(long);
  long DISPLAY_ROTATION_REFRESH_INTERVAL_NANOS;
  long getNativeDisplaySynchronizer();
  void onResume();
  long nativeDisplaySynchronizer;
  void checkNativeDisplaySynchronizer();
   <init>(android.content.Context, android.view.Display);
  android.util.DisplayMetrics displayMetrics;
  int displayRotationDegrees;
  void onPause();
  void nativeReset(long, long, long);
}

-keep,allowobfuscation class com.google.vr.cardboard.DisplayUtils {
  android.view.Display getDefaultDisplay(android.content.Context);
  boolean isSameDisplay(android.view.Display, android.view.Display);
  android.util.DisplayMetrics getDisplayMetricsLandscape(android.view.Display);
  float getMetersPerPixelFromDotsPerInch(float);
  java.lang.String getExternalDisplayName(android.content.Context);
  float getBorderSizeMeters(com.google.vr.sdk.proto.nano.Display$DisplayParams);
  android.util.DisplayMetrics getDisplayMetricsLandscapeWithOverride(android.view.Display, com.google.vr.sdk.proto.nano.Display$DisplayParams);
}

-keep,allowobfuscation class com.google.vr.cardboard.EglFactory {
  void setEGLContextClientVersion(int);
  boolean useDebug;
   <init>();
  void setUsePriorityContext(boolean);
  boolean useProtected;
  int eglContextClientVersion;
  javax.microedition.khronos.egl.EGLContext sharedContext;
  void setErrorReportingEnabled(boolean);
  boolean usePriority;
  void setUseDebug(boolean);
  void setSharedContext(javax.microedition.khronos.egl.EGLContext);
  boolean errorReportingEnabled;
  boolean supportsProtectedContent(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay);
  void setUseProtectedBuffers(boolean);
}

-keep,allowobfuscation class com.google.vr.cardboard.EglReadyListener {
  int glVersion;
  void clearContext();
  int getGLVersion();
  javax.microedition.khronos.egl.EGLContext getEGLContext();
  java.lang.Object listenerLock;
  int parseVersionString(java.lang.String);
  int eglContextFlags;
  void releaseEventListener();
  java.lang.Object contextInfoLock;
   <init>();
  com.google.vr.cardboard.EglReadyListener$EventListener listener;
  int getEGLContextFlags();
  void setEventListener(com.google.vr.cardboard.EglReadyListener$EventListener);
  javax.microedition.khronos.egl.EGLContext eglContext;
}

-keep,allowobfuscation class com.google.vr.cardboard.EglReadyListener$EventListener {
  void onEglReady();
}

-keep,allowobfuscation class com.google.vr.cardboard.ExternalSurfaceManager {
  com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurfaceData surfaceData;
  boolean isAttachedToGlContext;
  int nextID;
  void nativeUpdateSurface(long, int, int, long, float[]);
   <init>(com.google.vr.cardboard.ExternalSurfaceManager$UpdateSurfaceCallback);
  java.lang.Object surfaceDataUpdateLock;
  int createExternalSurfaceImpl(int, int, com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurfaceCallback);
  java.lang.String TAG;
  com.google.vr.cardboard.ExternalSurfaceManager$UpdateSurfaceCallback updateSurfaceCallback;
  void nativeCallback(long);
  void access$000(long, int, int, long, float[]);
  void access$200(long);
}

-keep,allowobfuscation class com.google.vr.cardboard.ExternalSurfaceManager$1 {
   <init>(long);
  long val$nativeSurfaceManager;
}

-keep,allowobfuscation class com.google.vr.cardboard.ExternalSurfaceManager$AndroidHandlerCallback {
   <init>(java.lang.Runnable, java.lang.Runnable, android.os.Handler);
  java.lang.Runnable surfaceListener;
  java.lang.Runnable frameListener;
  android.os.Handler handler;
}

-keep,allowobfuscation class com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurface {
   <init>(int, int, int, com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurfaceCallback);
  java.util.concurrent.atomic.AtomicBoolean hasNewFrame;
  void maybeDetachFromCurrentGLContext();
  int surfaceTextureWidth;
  boolean isAttached;
  void maybeAttachToCurrentGLContext(int);
  java.util.concurrent.atomic.AtomicBoolean released;
  java.lang.Object access$400(com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurface);
  int surfaceTextureHeight;
  java.lang.Object onFrameAvailableShutdownLock;
  void shutdown(com.google.vr.cardboard.ExternalSurfaceManager$UpdateSurfaceCallback);
  android.view.Surface getSurface();
  float[] transformMatrix;
  boolean access$500(com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurface);
  java.util.concurrent.atomic.AtomicBoolean access$100(com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurface);
  void maybeAttachToCurrentGLContext();
  com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurfaceCallback callback;
  void updateSurfaceTexture(com.google.vr.cardboard.ExternalSurfaceManager$UpdateSurfaceCallback);
  int id;
  android.graphics.SurfaceTexture surfaceTexture;
  int[] glTextureId;
  boolean isShutdown;
  java.util.concurrent.atomic.AtomicBoolean access$300(com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurface);
  com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurfaceCallback access$600(com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurface);
  android.view.Surface surface;
}

-keep,allowobfuscation class com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurface$1 {
  com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurface this$0;
   <init>(com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurface);
}

-keep,allowobfuscation class com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurfaceCallback {
  void cancelPosts();
  void onSurfaceAvailable();
  void onFrameAvailable();
}

-keep,allowobfuscation class com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurfaceData {
  java.util.HashMap surfacesToRelease;
   <init>();
   <init>(com.google.vr.cardboard.ExternalSurfaceManager$ExternalSurfaceData);
  java.util.HashMap surfaces;
}

-keep,allowobfuscation class com.google.vr.cardboard.ExternalSurfaceManager$NativeCallback {
  android.os.Handler surfaceMainHandler;
  long nativeFrameCallbackPtr;
   <init>(long, long);
  void lambda$new$0$ExternalSurfaceManager$NativeCallback(long);
  java.lang.Runnable surfaceListener;
}

-keep,allowobfuscation class com.google.vr.cardboard.ExternalSurfaceManager$NativeCallback$$Lambda$0 {
  long arg$1;
   <init>(long);
}

-keep,allowobfuscation class com.google.vr.cardboard.ExternalSurfaceManager$UpdateSurfaceCallback {
  void updateSurface(int, int, long, float[]);
}

-keep,allowobfuscation class com.google.vr.cardboard.FrameMonitor {
  android.os.HandlerThread choreographerOwnerThread;
  void shutdown();
   <init>(android.view.Choreographer$FrameCallback);
  void init();
  void onResume();
  android.view.Choreographer$FrameCallback callback;
  java.lang.String TAG;
  android.os.Handler handler;
  void onPause();
   <init>(android.view.Choreographer, android.view.Choreographer$FrameCallback);
  android.view.Choreographer choreographer;
  boolean isResumed;
}

-keep,allowobfuscation class com.google.vr.cardboard.FullscreenMode {
  void access$000(com.google.vr.cardboard.FullscreenMode);
  android.view.Window window;
  void setImmersiveStickyModeCompat();
  void setFullscreenModeFlags();
}

-keep,allowobfuscation class com.google.vr.cardboard.FullscreenMode$1 {
  com.google.vr.cardboard.FullscreenMode this$0;
  android.os.Handler val$handler;
   <init>(com.google.vr.cardboard.FullscreenMode, android.os.Handler);
}

-keep,allowobfuscation class com.google.vr.cardboard.FullscreenMode$1$1 {
  com.google.vr.cardboard.FullscreenMode$1 this$1;
   <init>(com.google.vr.cardboard.FullscreenMode$1);
}

-keep,allowobfuscation class com.google.vr.cardboard.IsEmulator {
  boolean isEmulator();
}

-keep,allowobfuscation class com.google.vr.cardboard.LegacyVrParamsProvider {
  java.lang.String TAG;
  android.content.Context context;
   <init>(android.content.Context);
}

-keep,allowobfuscation class com.google.vr.cardboard.MutableEglConfigChooser {
  javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig[], boolean);
  int findConfigAttrib(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, int, int);
   <init>();
  boolean forceMutableBuffer;
  boolean IS_EMULATOR;
}

-keep,allowobfuscation class com.google.vr.cardboard.NFCUtils {
  android.content.BroadcastReceiver nfcBroadcastReceiver;
  void onNFCTagDetected(android.nfc.Tag);
  boolean isNFCEnabled();
  android.content.Context context;
  android.content.IntentFilter createNfcIntentFilter();
  java.lang.String access$000();
  java.lang.String TAG;
  android.content.IntentFilter[] nfcIntentFilters;
  android.nfc.NfcAdapter nfcAdapter;
}

-keep,allowobfuscation class com.google.vr.cardboard.NFCUtils$1 {
   <init>(com.google.vr.cardboard.NFCUtils);
  com.google.vr.cardboard.NFCUtils this$0;
}

-keep,allowobfuscation class com.google.vr.cardboard.PackageUtils {
  boolean isSystemPackage(android.content.Context, java.lang.String);
  boolean isGooglePackage(java.lang.String);
}

-keep,allowobfuscation class com.google.vr.cardboard.PpiOverrides {
  java.util.List PPI_OVERRIDES;
  java.util.ArrayList supportedDisplaySizes;
  boolean getPpiOverride(java.util.List, java.lang.String, java.lang.String, java.lang.String, java.lang.String, com.google.vr.sdk.proto.nano.Display$DisplayParams);
  void registerOverridesInternal(java.util.List, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  java.lang.String TAG;
  com.google.vr.sdk.proto.nano.Display$DisplayParams getPpiOverride(android.content.Context);
  java.util.ArrayList getSupportedDisplaySizes(android.view.Display);
}

-keep,allowobfuscation class com.google.vr.cardboard.PpiOverrides$PpiOverride {
  float xPpi;
  float yPpi;
  java.lang.String manufacturer;
  java.lang.String hardware;
   <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, float, float);
  boolean isMatching(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  java.lang.String device;
  java.lang.String model;
}

-keep,allowobfuscation class com.google.vr.cardboard.R {
  boolean sResourcesDidLoad;
  void onResourcesLoadedString(int);
  void onResourcesLoadedStyle(int);
  boolean $assertionsDisabled;
  void onResourcesLoadedDrawable(int);
  void onResourcesLoadedColor(int);
  void onResourcesLoadedId(int);
  void onResourcesLoadedDimen(int);
  void onResourcesLoadedLayout(int);
}

-keep,allowobfuscation class com.google.vr.cardboard.R$color {
  int white_transparent;
  int alignment_marker_color;
}

-keep,allowobfuscation class com.google.vr.cardboard.R$dimen {
  int alignment_marker_height;
  int alignment_marker_thickness;
  int transition_bottom_bar_height;
}

-keep,allowobfuscation class com.google.vr.cardboard.R$drawable {
  int quantum_ic_close_white_24;
  int transition;
  int rippleable;
  int quantum_ic_settings_white_24;
}

-keep,allowobfuscation class com.google.vr.cardboard.R$id {
  int transition_icon;
  int ui_settings_button;
  int transition_text;
  int transition_frame;
  int ui_back_button;
  int back_button;
  int ui_alignment_marker;
  int transition_question_text;
  int transition_top_frame;
  int ui_settings_button_holder;
  int transition_bottom_frame;
  int ui_back_button_holder;
  int divider;
  int transition_switch_action;
}

-keep,allowobfuscation class com.google.vr.cardboard.R$layout {
  int ui_layer_with_portrait_support;
  int settings_button;
  int back_button;
  int ui_layer;
  int transition_view;
}

-keep,allowobfuscation class com.google.vr.cardboard.R$string {
  int dialog_button_open_help_center;
  int switch_viewer_prompt;
  int dialog_title_vr_core_not_enabled;
  int dialog_title;
  int dialog_message_no_cardboard;
  int dialog_title_incompatible_phone;
  int place_your_phone_into_cardboard;
  int dialog_vr_core_not_installed;
  int setup_button;
  int dialog_title_warning;
  int settings_button_content_description;
  int go_to_vr_listeners_settings_button;
  int dialog_vr_core_not_enabled;
  int no_browser_text;
  int dialog_title_vr_core_not_installed;
  int back_button_content_description;
  int dialog_message_incompatible_phone;
  int place_your_viewer_into_viewer_format;
  int dialog_button_got_it;
  int go_to_playstore_button;
  int gvr_vr_mode_component;
  int switch_viewer_action;
  int cancel_button;
}

-keep,allowobfuscation class com.google.vr.cardboard.R$style {
  int NoSystemUI;
  int UiButton;
  int VrActivityTheme;
  int GvrDialogTheme;
}

-keep,allowobfuscation class com.google.vr.cardboard.ScanlineRacingRenderer {
  com.google.vr.ndk.base.GvrSurfaceView access$000(com.google.vr.cardboard.ScanlineRacingRenderer);
  void setSurfaceSize(int, int);
  void setSurfaceView(com.google.vr.ndk.base.GvrSurfaceView);
   <init>(com.google.vr.ndk.base.GvrApi);
  void onSurfaceDestroyed();
  void onPause();
  com.google.vr.ndk.base.GvrApi gvrApi;
  com.google.vr.ndk.base.GvrSurfaceView gvrSurfaceView;
}

-keep,allowobfuscation class com.google.vr.cardboard.ScanlineRacingRenderer$1 {
   <init>(com.google.vr.cardboard.ScanlineRacingRenderer, int, int);
  com.google.vr.cardboard.ScanlineRacingRenderer this$0;
  int val$surfaceWidthPixels;
  int val$surfaceHeightPixels;
}

-keep,allowobfuscation class com.google.vr.cardboard.ScreenOrientationDetector {
  com.google.vr.cardboard.ScreenOrientationDetector$Listener clientListener;
  int portraitToleranceDegrees;
  int currentScreenOrientation;
  int landscapeToleranceDegrees;
  int determineScreenOrientation(int);
   <init>(android.content.Context, com.google.vr.cardboard.ScreenOrientationDetector$Listener, int, int);
}

-keep,allowobfuscation class com.google.vr.cardboard.ScreenOrientationDetector$Listener {
  void onScreenOrientationChanged(int);
}

-keep,allowobfuscation class com.google.vr.cardboard.StoragePermissionUtils {
  java.lang.String TAG;
   <init>();
  void requestStoragePermission(android.content.Context);
}

-keep,allowobfuscation class com.google.vr.cardboard.SurfaceCreateRecord {
  java.lang.Runnable surfaceListener;
  int width;
  java.lang.Runnable frameListener;
  int height;
  android.os.Handler handler;
}

-keep,allowobfuscation class com.google.vr.cardboard.ThreadUtils {
  boolean runningOnUiThread();
  void runOnUiThread(java.lang.Runnable);
  android.os.Handler uiHandler;
}

-keep,allowobfuscation class com.google.vr.cardboard.TransitionView {
  int getWidth();
   <init>(android.content.Context);
  int getVisibility();
  boolean isLandscapeRight(int);
  void setViewerName(java.lang.String);
  void rotateViewIfNeeded();
  java.lang.Runnable access$600(com.google.vr.cardboard.TransitionView);
  int orientation;
  int access$102(com.google.vr.cardboard.TransitionView, int);
  android.content.res.Resources getResources();
  void stopOrientationMonitor();
  boolean isPortrait(int);
  void startOrientationMonitor();
  android.view.OrientationEventListener orientationEventListener;
  java.lang.Runnable transitionListener;
  void updateBackButtonVisibility();
  android.widget.ImageButton backButton;
  android.view.ViewParent getParent();
  android.content.Context getContext();
  int getHeight();
  void access$300(com.google.vr.cardboard.TransitionView);
  void fadeOutAndRemove(boolean);
  void setTransitionListener(java.lang.Runnable);
  void setBackButtonListener(java.lang.Runnable);
  void setBackground(android.graphics.drawable.Drawable);
  android.view.animation.Animation getAnimation();
  void setVisibility(int);
  boolean rotationChecked;
  void access$000(com.google.vr.cardboard.TransitionView, boolean);
  void setLayoutParams(android.view.ViewGroup$LayoutParams);
  android.view.View findViewById(int);
  void removeAllViews();
  void inflateContentView(int);
  void clearAnimation();
  boolean access$400(int);
  void setOnTouchListener(android.view.View$OnTouchListener);
  boolean access$500(int);
  void startAnimation(android.view.animation.Animation);
  boolean access$200(com.google.vr.cardboard.TransitionView);
  boolean isLandscapeLeft(int);
  int getLayoutDirection();
  java.lang.Runnable backButtonListener;
  java.lang.Runnable access$700(com.google.vr.cardboard.TransitionView);
}

-keep,allowobfuscation class com.google.vr.cardboard.TransitionView$1 {
  com.google.vr.cardboard.TransitionView this$0;
   <init>(com.google.vr.cardboard.TransitionView);
}

-keep,allowobfuscation class com.google.vr.cardboard.TransitionView$2 {
   <init>(com.google.vr.cardboard.TransitionView);
  com.google.vr.cardboard.TransitionView this$0;
}

-keep,allowobfuscation class com.google.vr.cardboard.TransitionView$3 {
  com.google.vr.cardboard.TransitionView this$0;
   <init>(com.google.vr.cardboard.TransitionView, android.content.Context);
}

-keep,allowobfuscation class com.google.vr.cardboard.TransitionView$4 {
   <init>(com.google.vr.cardboard.TransitionView);
  com.google.vr.cardboard.TransitionView this$0;
}

-keep,allowobfuscation class com.google.vr.cardboard.TransitionView$5 {
  com.google.vr.cardboard.TransitionView this$0;
   <init>(com.google.vr.cardboard.TransitionView);
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer {
  java.lang.String viewerName;
  android.view.View access$700(com.google.vr.cardboard.UiLayer);
  boolean isAlignmentMarkerEnabled;
  android.view.View backButtonHolder;
  void setBackButtonListener(java.lang.Runnable);
  boolean isSettingsButtonEnabled;
  int access$1300(com.google.vr.cardboard.UiLayer);
  android.widget.RelativeLayout rootInnerLayout;
  boolean transitionViewEnabled;
  boolean getAlignmentMarkerEnabled();
  android.content.Context access$000(com.google.vr.cardboard.UiLayer);
  java.lang.Runnable buttonClickCallbackOverride;
  android.widget.RelativeLayout alignmentMarker;
   <init>(android.content.Context);
  int computeVisibility(boolean);
  boolean getBackButtonEnabled();
  android.widget.RelativeLayout access$1100(com.google.vr.cardboard.UiLayer);
  com.google.vr.cardboard.TransitionView access$1200(com.google.vr.cardboard.UiLayer);
  android.view.View access$900(com.google.vr.cardboard.UiLayer);
  void scaleAlignmentMarkerLayoutParams(android.content.Context, float, android.widget.RelativeLayout$LayoutParams);
  void setViewerName(java.lang.String);
  void setSettingsButtonEnabled(boolean);
  boolean isEnabled;
  java.lang.Runnable backButtonListener;
  boolean isEnabled();
  void setTransitionViewListener(java.lang.Runnable);
  void setEnabled(boolean);
  java.lang.Runnable access$300(com.google.vr.cardboard.UiLayer);
  java.lang.Runnable access$100(com.google.vr.cardboard.UiLayer);
  android.widget.ImageButton settingsButton;
  float alignmentMarkerScale;
  void setTransitionViewEnabled(boolean);
  java.lang.Runnable settingsButtonListener;
  void setSettingsButtonListener(java.lang.Runnable);
  android.view.ViewGroup getView();
  android.content.Context context;
  com.google.vr.cardboard.TransitionView getTransitionView();
  com.google.vr.cardboard.TransitionView transitionView;
  android.widget.ImageButton backButton;
  com.google.vr.cardboard.TransitionView access$1000(com.google.vr.cardboard.UiLayer);
  boolean isTransitionViewVisible();
  android.view.View settingsButtonHolder;
  java.lang.Runnable transitionListener;
  android.widget.FrameLayout rootOuterLayout;
  int currentLayoutId;
  void access$1400(com.google.vr.cardboard.UiLayer, int);
  android.widget.ImageButton access$800(com.google.vr.cardboard.UiLayer);
  android.widget.ImageButton access$600(com.google.vr.cardboard.UiLayer);
  void inflateViewsWithLayoutId(int);
  android.widget.FrameLayout access$500(com.google.vr.cardboard.UiLayer);
  void setButtonClickCallbackOverride(java.lang.Runnable);
  int access$400(boolean);
  void setAlignmentMarkerScale(float);
  java.lang.Runnable access$200(com.google.vr.cardboard.UiLayer);
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer$1 {
   <init>(com.google.vr.cardboard.UiLayer);
  com.google.vr.cardboard.UiLayer this$0;
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer$10 {
  com.google.vr.cardboard.UiLayer this$0;
   <init>(com.google.vr.cardboard.UiLayer, float);
  float val$scale;
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer$11 {
   <init>(com.google.vr.cardboard.UiLayer, boolean);
  com.google.vr.cardboard.UiLayer this$0;
  boolean val$enabled;
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer$12 {
  com.google.vr.cardboard.UiLayer this$0;
   <init>(com.google.vr.cardboard.UiLayer, java.lang.Runnable);
  java.lang.Runnable val$listener;
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer$13 {
  com.google.vr.cardboard.UiLayer this$0;
   <init>(com.google.vr.cardboard.UiLayer, java.lang.String);
  java.lang.String val$viewerName;
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer$2 {
   <init>(com.google.vr.cardboard.UiLayer);
  com.google.vr.cardboard.UiLayer this$0;
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer$3 {
   <init>(com.google.vr.cardboard.UiLayer);
  com.google.vr.cardboard.UiLayer this$0;
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer$4 {
  com.google.vr.cardboard.UiLayer this$0;
   <init>(com.google.vr.cardboard.UiLayer);
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer$5 {
   <init>(com.google.vr.cardboard.UiLayer);
  com.google.vr.cardboard.UiLayer this$0;
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer$6 {
   <init>(com.google.vr.cardboard.UiLayer, boolean);
  boolean val$enabled;
  com.google.vr.cardboard.UiLayer this$0;
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer$7 {
  boolean val$enabled;
   <init>(com.google.vr.cardboard.UiLayer, boolean);
  com.google.vr.cardboard.UiLayer this$0;
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer$8 {
  java.lang.Runnable val$listener;
   <init>(com.google.vr.cardboard.UiLayer, java.lang.Runnable);
  com.google.vr.cardboard.UiLayer this$0;
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer$9 {
  boolean val$enabled;
  com.google.vr.cardboard.UiLayer this$0;
   <init>(com.google.vr.cardboard.UiLayer, boolean);
}

-keep,allowobfuscation class com.google.vr.cardboard.UiLayer$RootOuterLayout {
   <init>(com.google.vr.cardboard.UiLayer, android.content.Context);
  com.google.vr.cardboard.UiLayer this$0;
  void handlePotentialConfigurationChange(android.content.res.Configuration);
  android.content.res.Configuration currentConfig;
}

-keep,allowobfuscation class com.google.vr.cardboard.UiUtils {
  android.app.AlertDialog$Builder dialogBuilderForTesting;
  android.app.AlertDialog$Builder createAlertDialogBuilder(android.content.Context);
  com.google.vr.cardboard.StoragePermissionUtils permissionUtils;
  void showInstallDialog(android.content.Context);
  android.app.AlertDialog showDaydreamHelpCenterDialog(android.content.Context, int, int, java.lang.Runnable);
  android.app.AlertDialog showImmersiveDialog(android.content.Context, android.app.AlertDialog);
  void launchOrInstallCardboard(android.content.Context);
}

-keep,allowobfuscation class com.google.vr.cardboard.UiUtils$1 {
  android.content.Context val$context;
   <init>(android.content.Context);
}

-keep,allowobfuscation class com.google.vr.cardboard.UiUtils$2 {
   <init>();
}

-keep,allowobfuscation class com.google.vr.cardboard.UiUtils$3 {
   <init>(java.lang.Runnable);
  java.lang.Runnable val$onCancelledCallback;
}

-keep,allowobfuscation class com.google.vr.cardboard.UiUtils$4 {
  android.content.Context val$context;
   <init>(android.content.Context);
}

-keep,allowobfuscation class com.google.vr.cardboard.VrContextWrapper {
  boolean autoFadeEnabled();
  android.content.ComponentName getVrComponent();
}

-keep,allowobfuscation class com.google.vr.cardboard.VrCoreLibraryLoader {
  void checkVrCoreGvrLibraryAvailable(android.content.Context, com.google.vr.ndk.base.Version);
  long loadNativeGvrLibrary(android.content.Context, com.google.vr.ndk.base.Version, com.google.vr.ndk.base.Version);
}

-keep,allowobfuscation class com.google.vr.cardboard.VrParamsProvider {
  com.google.vr.sdk.proto.nano.CardboardDevice$DeviceParams readDeviceParams();
  void close();
  boolean writeDeviceParams(com.google.vr.sdk.proto.nano.CardboardDevice$DeviceParams);
  com.google.vr.sdk.proto.nano.Display$DisplayParams readDisplayParams();
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams readSdkConfigurationParams(com.google.vr.sdk.proto.nano.SdkConfiguration$SdkConfigurationRequest);
  com.google.vr.sdk.proto.nano.Preferences$UserPrefs readUserPrefs();
}

-keep,allowobfuscation class com.google.vr.cardboard.VrParamsProviderFactory {
  com.google.vr.cardboard.VrParamsProviderFactory$ContentProviderClientHandle tryToGetContentProviderClientHandle(android.content.Context);
  boolean isContentProviderAvailable(android.content.Context);
  com.google.vr.cardboard.VrParamsProvider create(android.content.Context);
  com.google.vr.cardboard.VrParamsProvider providerForTesting;
  java.util.List getValidContentProviderAuthorities(android.content.Context);
}

-keep,allowobfuscation class com.google.vr.cardboard.VrParamsProviderFactory$ContentProviderClientHandle {
   <init>(android.content.ContentProviderClient, java.lang.String);
  java.lang.String authority;
  android.content.ContentProviderClient client;
}

-keep,allowobfuscation class com.google.vr.cardboard.VrParamsProviderJni {
  void updateNativePhoneParamsPointer(long, android.util.DisplayMetrics, float);
  android.util.DisplayMetrics displayMetricsOverride;
  void nativeUpdateNativePhoneParamsPointer(long, int, int, float, float, float);
  android.util.DisplayMetrics getDisplayMetrics(android.content.Context, com.google.vr.sdk.proto.nano.Display$DisplayParams);
}

-keep,allowobfuscation class com.google.vr.cardboard.VrSettingsProviderContract {
  android.net.Uri createUri(java.lang.String, java.lang.String);
}

-keep,allowobfuscation class com.google.vr.internal.controller.ControllerServiceBridge {
  void access$100(com.google.vr.vrcore.controller.api.ControllerEventPacket2);
  int vrcoreApiVersion;
  java.lang.String createListenerKey();
  void ensureOnMainThread();
  void access$000(com.google.vr.internal.controller.ControllerServiceBridge, int);
  void vibrateControllerInternal(int, com.google.vr.vrcore.controller.api.ControllerRequest);
  void clearControllers();
  boolean registerListener(int, com.google.vr.internal.controller.ControllerServiceBridge$LocalControllerListener);
  boolean createAndConnectControllerInternal(int, com.google.vr.internal.controller.ControllerServiceBridge$Callbacks, com.google.vr.vrcore.controller.api.ControllerListenerOptions);
  void requestBind();
  void lambda$vibrateController$0$ControllerServiceBridge(int, com.google.vr.vrcore.controller.api.ControllerRequest);
  void initializeDefaultListener(com.google.vr.internal.controller.ControllerServiceBridge$Callbacks, com.google.vr.vrcore.controller.api.ControllerListenerOptions);
  com.google.vr.internal.controller.ControllerServiceBridge$LocalControllerListener defaultListener;
  void doBind();
  java.lang.String listenerKey;
  com.google.vr.vrcore.controller.api.IControllerService service;
  android.content.Context context;
  void handleAvailableControllersChanged();
  java.util.concurrent.atomic.AtomicInteger UNIQUE_INT;
  void setupAndBindDefaultControllerListener();
   <init>(android.content.Context, com.google.vr.internal.controller.ControllerServiceBridge$Callbacks, int);
  android.os.Handler mainThreadHandler;
  android.util.SparseArray controllerListenerMap;
  void requestUnbind();
  com.google.vr.internal.controller.ControllerServiceBridge$ControllerServiceListener defaultServiceListener;
  void logIfControllerPacketLags(com.google.vr.vrcore.controller.api.ControllerEventPacket2);
  void unregisterListeners();
   <init>(android.content.Context, com.google.vr.internal.controller.ControllerServiceBridge$Callbacks, com.google.vr.vrcore.controller.api.ControllerListenerOptions);
  int getNumOfControllers();
  boolean isBound;
  int getVrCoreApiVersion(android.content.Context);
  void handleServiceEvent(int);
  void bridge$lambda$0$ControllerServiceBridge();
  void doUnbind();
}

-keep,allowobfuscation class com.google.vr.internal.controller.ControllerServiceBridge$$Lambda$0 {
  com.google.vr.internal.controller.ControllerServiceBridge arg$1;
   <init>(com.google.vr.internal.controller.ControllerServiceBridge);
}

-keep,allowobfuscation class com.google.vr.internal.controller.ControllerServiceBridge$$Lambda$1 {
   <init>(com.google.vr.internal.controller.ControllerServiceBridge);
  com.google.vr.internal.controller.ControllerServiceBridge arg$1;
}

-keep,allowobfuscation class com.google.vr.internal.controller.ControllerServiceBridge$$Lambda$2 {
  com.google.vr.internal.controller.ControllerServiceBridge arg$1;
  com.google.vr.vrcore.controller.api.ControllerRequest arg$3;
   <init>(com.google.vr.internal.controller.ControllerServiceBridge, int, com.google.vr.vrcore.controller.api.ControllerRequest);
  int arg$2;
}

-keep,allowobfuscation class com.google.vr.internal.controller.ControllerServiceBridge$$Lambda$3 {
  com.google.vr.internal.controller.ControllerServiceBridge arg$1;
   <init>(com.google.vr.internal.controller.ControllerServiceBridge);
}

-keep,allowobfuscation class com.google.vr.internal.controller.ControllerServiceBridge$Callbacks {
  void onServiceFailed();
  void onServiceConnected(int);
  void onServiceDisconnected();
  void onControllerEventPacket2(com.google.vr.vrcore.controller.api.ControllerEventPacket2);
  void onControllerEventPacket(com.google.vr.vrcore.controller.api.ControllerEventPacket);
  void onServiceInitFailed(int);
  void onServiceUnavailable();
  void onControllerRecentered(com.google.vr.vrcore.controller.api.ControllerOrientationEvent);
  void onControllerStateChanged(int, int);
}

-keep,allowobfuscation class com.google.vr.internal.controller.ControllerServiceBridge$ControllerListener {
  java.lang.ref.WeakReference listener;
   <init>(com.google.vr.internal.controller.ControllerServiceBridge$LocalControllerListener);
}

-keep,allowobfuscation class com.google.vr.internal.controller.ControllerServiceBridge$ControllerServiceListener {
   <init>(com.google.vr.internal.controller.ControllerServiceBridge);
  java.lang.ref.WeakReference serviceBridge;
}

-keep,allowobfuscation class com.google.vr.internal.controller.ControllerServiceBridge$LocalControllerListener {
  int controllerIndex;
  com.google.vr.vrcore.controller.api.ControllerListenerOptions options;
  com.google.vr.internal.controller.ControllerServiceBridge$Callbacks callbacks;
   <init>(com.google.vr.internal.controller.ControllerServiceBridge$Callbacks, com.google.vr.vrcore.controller.api.ControllerListenerOptions, int);
}

-keep,allowobfuscation class com.google.vr.internal.controller.NativeCallbacks {
  void handleButtonEvent(long, int, long, int, boolean);
  void handleEventsCompatibilityLocked(com.google.vr.vrcore.controller.api.ControllerEventPacket);
  void handleAccelEvent(long, int, long, float, float, float);
  void handleGyroEvent(long, int, long, float, float, float);
  void handleServiceUnavailable(long);
  void handleTouchEvent(long, int, long, int, float, float);
  boolean closed;
  void handleOrientationEvent(long, int, long, float, float, float, float);
  void handleBatteryEvent(long, int, long, boolean, int);
  void handleServiceInitFailed(long, int);
  void handleServiceDisconnected(long);
  void handleServiceConnected(long, int);
  long userData;
  void handleStateChanged(long, int, int);
  void handleServiceFailed(long);
  void handlePositionEvent(long, int, long, float, float, float);
  void handleControllerRecentered(long, int, long, float, float, float, float);
}

-keep,allowobfuscation class com.google.vr.keyboard.IGvrKeyboardLoader {
  void closeGvrKeyboard(long);
  long loadGvrKeyboard(long);
}

-keep,allowobfuscation class com.google.vr.keyboard.IGvrKeyboardLoader$Stub {
  long loadGvrKeyboard(long);
  void attachInterface(android.os.IInterface, java.lang.String);
  void closeGvrKeyboard(long);
  com.google.vr.keyboard.IGvrKeyboardLoader asInterface(android.os.IBinder);
}

-keep,allowobfuscation class com.google.vr.keyboard.IGvrKeyboardLoader$Stub$Proxy {
  android.os.IBinder mRemote;
   <init>(android.os.IBinder);
}

-keep,allowobfuscation class com.google.vr.ndk.base.AbstractDaydreamTouchListener {
  float[] translation;
   <init>();
  float[] lastTranslation;
  boolean viewerNeedsTouchProcessing();
  boolean processMotionEvent(android.view.MotionEvent, float, float);
  float[][] markersInPixels;
  int mostTouchesSeen;
  void setLensOffset(float, float, float);
  boolean isDaydreamImageAlignmentEnabled();
  float rotation;
  float xMetersPerPixel;
  int[] markerBestTouch;
  void logEvent(int, com.google.common.logging.nano.Vr$VREvent);
  java.lang.String logTag;
  boolean useRotationalAlignmentCorrection;
  void logPhoneAlignment(android.view.MotionEvent, float, float);
  double[] currentMarkerBestDists;
  float[] pixelTranslation;
  void getTranslationInScreenSpace(float[]);
  float yMetersPerPixel;
  int[] touchBestMarker;
  boolean lastMotionEventInHeadset;
  android.util.DisplayMetrics displayMetrics;
  int angleSamplesReceived;
  float borderSizeMeters;
  void resetTrackingState();
  float getRotationRadians(android.view.MotionEvent);
  boolean enabled;
}

-keep,allowobfuscation class com.google.vr.ndk.base.AndroidCompat {
  void setSustainedPerformanceMode(android.app.Activity, boolean);
  boolean setVrModeEnabled(android.app.Activity, boolean);
}

-keep,allowobfuscation class com.google.vr.ndk.base.BufferSpec {
  void shutdown();
  boolean isValidDepthStencilFormat(int);
   <init>(long);
  boolean isValidColorFormat(int);
  long nativeBufferSpec;
  java.lang.String TAG;
}

-keep,allowobfuscation class com.google.vr.ndk.base.BufferViewport {
  void shutdown();
  java.lang.String TAG;
   <init>(long);
  long nativeBufferViewport;
}

-keep,allowobfuscation class com.google.vr.ndk.base.BufferViewportList {
  void shutdown();
   <init>(long);
  long nativeBufferViewportList;
  java.lang.String TAG;
}

-keep,allowobfuscation class com.google.vr.ndk.base.CardboardEmulator {
  com.google.vr.internal.controller.ControllerServiceBridge controllerServiceBridge;
  boolean resumed;
  void onPause();
  void onResume();
   <init>(android.content.Context, java.lang.Runnable);
  com.google.vr.internal.controller.ControllerServiceBridge createServiceBridge(android.content.Context, com.google.vr.internal.controller.ControllerServiceBridge$Callbacks);
  java.lang.String TAG;
}

-keep,allowobfuscation class com.google.vr.ndk.base.CardboardEmulator$ControllerCallbacks {
  java.lang.Runnable cardboardTriggerCallback;
  void onControllerEventPacket(com.google.vr.vrcore.controller.api.ControllerEventPacket);
   <init>(java.lang.Runnable);
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamApi {
  com.google.vr.ndk.base.DaydreamApi create(android.content.Context);
  android.content.Intent createVrIntent(android.content.ComponentName);
  void launchInVr(android.app.PendingIntent, android.content.ComponentName);
  android.content.ServiceConnection connection;
  void launchInVr(android.app.PendingIntent);
  java.lang.String access$200();
  int vrCoreApiVersion;
  com.google.vr.vrcore.common.api.IVrCoreSdkService access$002(com.google.vr.ndk.base.DaydreamApi, com.google.vr.vrcore.common.api.IVrCoreSdkService);
  void launchVrHomescreen();
  boolean isDaydreamReadyPlatform(android.content.Context);
  android.content.Intent setupVrIntent(android.content.Intent);
  void launchInVr(android.content.Intent);
  void close();
  android.content.ServiceConnection access$500(com.google.vr.ndk.base.DaydreamApi);
  android.content.Context access$600(com.google.vr.ndk.base.DaydreamApi);
  int access$400(com.google.vr.ndk.base.DaydreamApi);
  void runWhenServiceConnected(java.lang.Runnable);
  boolean supports2dInVr(android.content.Context);
  com.google.vr.vrcore.common.api.IVrCoreSdkService vrCoreSdkService;
  java.util.ArrayList queuedRunnables;
  void checkIntent(android.content.Intent);
  android.content.Context context;
  boolean getBooleanSetting(android.content.Context, java.lang.String, boolean);
  com.google.vr.vrcore.common.api.IDaydreamManager daydreamManager;
  com.google.vr.vrcore.common.api.IDaydreamManager access$100(com.google.vr.ndk.base.DaydreamApi);
  void registerDaydreamIntent(android.app.PendingIntent);
  void unregisterDaydreamIntent();
  java.lang.String TAG;
  void checkNotClosed();
  com.google.vr.vrcore.common.api.IDaydreamManager access$102(com.google.vr.ndk.base.DaydreamApi, com.google.vr.vrcore.common.api.IDaydreamManager);
  boolean closed;
  int getCurrentViewerType();
  void launchTransitionCallbackInVr(com.google.vr.vrcore.common.api.ITransitionCallbacks);
  com.google.vr.vrcore.common.api.IVrCoreSdkService access$000(com.google.vr.ndk.base.DaydreamApi);
  boolean isInVrSession(android.content.Context);
  boolean init();
  java.util.ArrayList access$300(com.google.vr.ndk.base.DaydreamApi);
  void exitFromVr(android.app.Activity, int, android.content.Intent);
   <init>(android.content.Context);
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamApi$1 {
   <init>(com.google.vr.ndk.base.DaydreamApi);
  com.google.vr.ndk.base.DaydreamApi this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamApi$10 {
   <init>(com.google.vr.ndk.base.DaydreamApi, byte[]);
  com.google.vr.ndk.base.DaydreamApi this$0;
  byte[] val$deviceParams;
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamApi$11 {
  com.google.vr.ndk.base.DaydreamApi this$0;
   <init>(com.google.vr.ndk.base.DaydreamApi);
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamApi$12 {
   <init>(com.google.vr.ndk.base.DaydreamApi);
  com.google.vr.ndk.base.DaydreamApi this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamApi$2 {
  com.google.vr.ndk.base.DaydreamApi this$0;
  android.app.PendingIntent val$intent;
   <init>(com.google.vr.ndk.base.DaydreamApi, android.app.PendingIntent);
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamApi$3 {
   <init>(com.google.vr.ndk.base.DaydreamApi, android.app.PendingIntent, android.content.ComponentName);
  com.google.vr.ndk.base.DaydreamApi this$0;
  android.content.ComponentName val$component;
  android.app.PendingIntent val$pendingIntent;
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamApi$4 {
  com.google.vr.vrcore.common.api.ITransitionCallbacks val$callbacks;
   <init>(com.google.vr.ndk.base.DaydreamApi, com.google.vr.vrcore.common.api.ITransitionCallbacks);
  com.google.vr.ndk.base.DaydreamApi this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamApi$5 {
   <init>(com.google.vr.ndk.base.DaydreamApi);
  com.google.vr.ndk.base.DaydreamApi this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamApi$6 {
  android.app.Activity val$activity;
  android.app.PendingIntent val$pendingIntent;
   <init>(com.google.vr.ndk.base.DaydreamApi, android.app.Activity, android.app.PendingIntent, int);
  int val$requestCode;
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamApi$6$1 {
   <init>(com.google.vr.ndk.base.DaydreamApi$6);
  com.google.vr.ndk.base.DaydreamApi$6 this$1;
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamApi$7 {
  android.app.PendingIntent val$pendingVrExitIntent;
   <init>(com.google.vr.ndk.base.DaydreamApi, android.app.PendingIntent);
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamApi$8 {
  java.lang.Runnable val$onFailureRunnable;
  com.google.vr.ndk.base.DaydreamApi this$0;
  android.app.PendingIntent val$pendingVrExitIntent;
   <init>(com.google.vr.ndk.base.DaydreamApi, java.lang.Runnable, android.app.PendingIntent);
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamApi$9 {
  com.google.vr.ndk.base.DaydreamApi this$0;
   <init>(com.google.vr.ndk.base.DaydreamApi, boolean, android.content.ComponentName);
  android.content.ComponentName val$componentName;
  boolean val$shouldInhibit;
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamCompatibility {
   <init>();
  int getSupportedHeadsets();
  boolean requiresDaydream();
   <init>(int);
  boolean supportsDaydream();
  boolean supportsCardboard();
  int supportedHeadsets;
  int toDeprecated();
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamUtils {
  com.google.vr.ndk.base.DaydreamCompatibility getComponentDaydreamCompatibility(android.content.Context, android.content.ComponentName);
  boolean checkHeadsetCompatibility(android.content.pm.PackageManager, android.content.ComponentName, java.lang.String);
  java.lang.String getDeviceParamsDisplayedName(java.lang.String, java.lang.String);
  boolean sDaydreamPhoneOverrideForTesting;
  boolean isDaydreamPhone(android.content.Context);
  boolean canResolveIntent(android.content.pm.PackageManager, android.content.ComponentName, android.content.Intent);
  com.google.vr.ndk.base.DaydreamCompatibility getComponentDaydreamCompatibility(android.content.pm.PackageManager, android.content.ComponentName);
  boolean isDaydreamViewer(com.google.vr.sdk.proto.nano.CardboardDevice$DeviceParams);
}

-keep,allowobfuscation class com.google.vr.ndk.base.DaydreamUtilsWrapper {
  boolean isDaydreamActivity(android.app.Activity);
  boolean isDaydreamComponent(android.content.Context);
  boolean isDaydreamPhone(android.content.Context);
  boolean isDaydreamRequiredComponent(android.content.Context);
  com.google.vr.ndk.base.DaydreamCompatibility getComponentDaydreamCompatibility(android.content.Context);
   <init>();
}

-keep,allowobfuscation class com.google.vr.ndk.base.DefaultNativeLibraryLoader {
  boolean shouldIgnoreDefaultLibrary;
  void maybeLoadDefaultLibrary();
}

-keep,allowobfuscation class com.google.vr.ndk.base.Event {
  void close();
  long nativeEvent;
}

-keep,allowobfuscation class com.google.vr.ndk.base.ExtensionManager {
  void shutdown();
  void onResume();
  void onPause();
  void reportTelemetry(com.google.vr.vrcore.logging.api.IVrCoreLoggingService);
  boolean bootsToVr();
  void setEnabled(boolean);
  void initialize(android.view.ViewGroup, com.google.vr.ndk.base.GvrApi);
}

-keep,allowobfuscation class com.google.vr.ndk.base.ExternalSurface {
   <init>(com.google.vr.ndk.base.GvrApi, com.google.vr.ndk.base.GvrLayout$ExternalSurfaceListener, android.os.Handler);
  void shutdown();
  java.lang.String TAG;
  long nativeExternalSurface;
  int getId();
  android.view.Surface getSurface();
  java.lang.String access$000();
  long getNativeExternalSurface();
}

-keep,allowobfuscation class com.google.vr.ndk.base.ExternalSurface$1 {
  com.google.vr.ndk.base.GvrLayout$ExternalSurfaceListener val$listener;
  com.google.vr.ndk.base.ExternalSurface this$0;
   <init>(com.google.vr.ndk.base.ExternalSurface, com.google.vr.ndk.base.GvrLayout$ExternalSurfaceListener);
}

-keep,allowobfuscation class com.google.vr.ndk.base.ExternalSurface$2 {
   <init>(com.google.vr.ndk.base.ExternalSurface, com.google.vr.ndk.base.GvrLayout$ExternalSurfaceListener);
  com.google.vr.ndk.base.GvrLayout$ExternalSurfaceListener val$listener;
}

-keep,allowobfuscation class com.google.vr.ndk.base.FadeOverlayView {
  void access$000(com.google.vr.ndk.base.FadeOverlayView);
   <init>(android.content.Context, boolean);
  java.lang.Runnable fadeUpdateRunnable;
  void setEnabled(boolean);
  boolean flushAutoFadeOnVisible;
  void postOnAnimation(java.lang.Runnable);
  int getVisibility();
  boolean removeCallbacks(java.lang.Runnable);
  int fadeType;
  boolean post(java.lang.Runnable);
  void flushAutoFade();
  void setBackgroundColor(int);
  void setAlpha(float);
  long fadeDurationMillis;
  long fadeStartTimeMillis;
  void updateFade();
  boolean isEnabled();
  void startFade(int, long, int);
  boolean autoFadeEnabled;
  void onInvisible();
  boolean visible;
  void endFade();
  android.os.Handler autoFadeHandler;
  float fadeStartOpacity;
  void onVisible();
  float getAlpha();
  void setVisibility(int);
  void removeFadeCallbacks();
}

-keep,allowobfuscation class com.google.vr.ndk.base.FadeOverlayView$1 {
   <init>(com.google.vr.ndk.base.FadeOverlayView);
  com.google.vr.ndk.base.FadeOverlayView this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.FadeOverlayView$2 {
   <init>(com.google.vr.ndk.base.FadeOverlayView, android.os.Looper);
  com.google.vr.ndk.base.FadeOverlayView this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.Frame {
   <init>();
  long getNativeFrame();
  void checkAccess();
  java.lang.String TAG;
  long nativeFrame;
  void setNativeFrame(long);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrApi {
  int[] nativeGetWindowBounds(long);
  long nativeGvrContext;
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams getSdkConfigurationParams();
  int nativeGetViewerType(long);
  int nativeExternalSurfaceGetId(long);
  void nativeSetApplicationState(java.lang.ClassLoader, android.content.Context);
  boolean IS_ROBOLECTRIC_BUILD;
  boolean getAsyncReprojectionEnabled();
  float nativeGetBorderSizeMeters(long);
  void nativeGetHeadSpaceFromStartSpaceTransform(long, float[], long);
  void nativeGetHeadSpaceFromStartSpaceRotation(long, float[], long);
  void nativeBufferViewportGetSourceUv(long, android.graphics.RectF);
  java.util.ArrayList swapChainRefs;
  void nativeBufferViewportSetReprojection(long, int);
  void nativeResetTracking(long);
  void nativeReleaseGvrContext(long);
  void nativeGetScreenTargetSize(long, android.graphics.Point);
  boolean nativeSetAsyncReprojectionEnabled(long, boolean);
  void nativeSwapChainGetBufferSize(long, int, android.graphics.Point);
  int nativeUserPrefsGetControllerHandedness(long);
  void nativeBufferViewportGetTransform(long, float[]);
  android.content.Context context;
  long nativeBufferViewportCreate(long);
  com.google.vr.ndk.base.ExternalSurface createExternalSurface(com.google.vr.ndk.base.GvrLayout$ExternalSurfaceListener, android.os.Handler);
  boolean nativeIsFeatureSupported(long, int);
  void resumeTrackingSetState(byte[]);
  long nativeValueGetFlags(long);
  boolean nativeSetDefaultViewerProfile(long, java.lang.String);
  void nativeResume(long);
  void refreshDisplayMetrics();
  void onSurfaceCreatedReprojectionThread();
  void nativeSetDisplayMetrics(long, int, int, float, float);
  byte[] pauseTrackingGetState();
  void requestContextSharing(com.google.vr.cardboard.EglReadyListener);
  long nativeGetEventFlags(long);
  java.lang.String nativeGetErrorString(int);
  java.lang.String nativeGetViewerModel(long);
  boolean usingDynamicLibrary(android.content.Context);
  void nativePauseTracking(long);
  android.graphics.Point renderReprojectionThread();
  com.google.vr.cardboard.DisplaySynchronizer displaySynchronizer;
  void nativeSetSurfaceSize(long, int, int);
  void recenterTracking();
  int nativeFrameGetFramebufferObject(long, int);
  int nativeValueAsInt(long);
  boolean nativeGetAsyncReprojectionEnabled(long);
  void dumpDebugData();
  com.google.vr.cardboard.DisplaySynchronizer createDefaultDisplaySynchronizer(android.content.Context);
  long nativeValueAsFlags(long);
  void nativeBufferViewportSetSourceBufferIndex(long, int);
  void nativeValueAsMat4f(long, float[]);
  android.view.Surface nativeExternalSurfaceGetSurface(long);
  void nativeBufferViewportListSetItem(long, int, long);
  void nativeSetDefaultFramebufferActive(long);
  int nativeGetEventType(long);
  void nativeBufferViewportSetTransform(long, float[]);
  void nativeBufferSpecSetSamples(long, int);
  int nativeBufferViewportListGetSize(long);
  void onPauseReprojectionThread();
  com.google.vr.ndk.base.Properties properties;
  android.util.DisplayMetrics computeCurrentDisplayMetrics(com.google.vr.sdk.proto.nano.Display$DisplayParams);
  long nativeBufferSpecCreate(long);
  void shutdown();
  void nativeInitializeGl(long);
  long nativeGetCurrentProperties(long);
  void nativeBufferViewportGetSourceFov(long, android.graphics.RectF);
  void nativePause(long);
  void nativeSwapChainResizeBuffer(long, int, int, int);
  boolean nativeSetViewerParams(long, byte[]);
  long nativeCreateEvent();
  void setSurfaceSize(int, int);
  void nativeFrameGetBufferSize(long, int, android.graphics.Point);
  void nativeBufferViewportDestroy(long);
  void nativeFrameSubmit(long, long, float[]);
  int nativeBufferSpecGetSamples(long);
  void setApplicationState(android.content.Context);
  int nativeBufferViewportGetExternalSurfaceId(long);
  boolean nativeUsingDynamicLibrary();
  void nativeFrameUnbind(long);
  void nativeBufferSpecSetDepthStencilFormat(long, int);
  void setIdleListener(com.google.vr.ndk.base.GvrApi$IdleListener);
  void nativeGetRecenterEventStartSpaceFromTrackingSpaceTransform(long, float[]);
  void nativeSetLensOffset(long, float, float, float);
  long nativeGetRecenterEventFlags(long);
  int nativeGetError(long);
  android.graphics.Point nativeRenderReprojectionThread(long);
  void nativeSetIdleListener(long, com.google.vr.ndk.base.GvrApi$IdleListener);
   <init>(android.content.Context, long);
  com.google.vr.cardboard.VrParamsProvider vrParamsProvider;
  void nativeBufferViewportSetSourceLayer(long, int);
  void setLensOffset(float, float, float);
  void nativeOnPauseReprojectionThread(long);
   <init>(android.content.Context, com.google.vr.cardboard.DisplaySynchronizer);
  void nativeBufferViewportSetTargetEye(long, int);
  void nativeResumeTracking(long);
  void nativeSetIgnoreManualPauseResumeTracker(long, boolean);
  int nativeBufferViewportGetSourceBufferIndex(long);
  void nativeGetEyeFromHeadMatrix(long, int, float[]);
  boolean isFeatureSupported(int);
  void nativeDestroyEvent(long);
  boolean nativeGetProperty(long, int, long);
  int nativeSwapChainGetBufferCount(long);
  void resume();
  long nativeGetUserPrefs(long);
  long getNativeGvrContext();
  void nativeBufferSpecSetSize(long, int, int);
  long nativeSwapChainCreate(long, long[]);
  void nativeGetMaximumEffectiveRenderTargetSize(long, android.graphics.Point);
  void nativeBufferViewportSetOpacity(long, float);
  float nativeBufferViewportGetOpacity(long);
  void nativeSwapChainDestroy(long);
  void setDisplayMetrics(android.util.DisplayMetrics);
  byte[] nativePauseTrackingGetState(long);
  boolean setAsyncReprojectionEnabled(boolean);
  void nativeBufferViewportListDestroy(long);
  void nativeRequestContextSharing(long, com.google.vr.cardboard.EglReadyListener);
  boolean nativeUsingShimLibrary();
  void nativeBufferViewportSetSourceUv(long, float, float, float, float);
  void nativeBufferSpecSetMultiviewLayers(long, int);
  boolean nativeUsingVrDisplayService(long);
  void nativeDumpDebugData(long);
  java.lang.String nativeGetViewerVendor(long);
  long nativeExternalSurfaceCreateWithListeners(long, java.lang.Runnable, java.lang.Runnable, android.os.Handler);
  void nativeBufferViewportSetSourceFov(long, float, float, float, float);
  void nativeFrameBindBuffer(long, int);
  long nativeCreateValue();
  void nativeResumeTrackingSetState(long, byte[]);
  int nativeClearError(long);
  com.google.vr.ndk.base.GvrApi$PoseTracker sPoseTrackerForTesting;
  void nativeBufferViewportListGetItem(long, int, long);
  long nativeCreate(java.lang.ClassLoader, android.content.Context, long, int, int, float, float, com.google.vr.ndk.base.GvrApi$PoseTracker);
  void nativeRecenterTracking(long);
  float nativeValueAsFloat(long);
  boolean nativePollEvent(long, long);
  com.google.vr.ndk.base.UserPrefs userPrefs;
  void getEyeFromHeadMatrix(int, float[]);
  boolean usingShimLibrary();
  void nativeOnSurfaceChangedReprojectionThread(long);
  long nativeBufferViewportListCreate(long);
  void onSurfaceChangedReprojectionThread();
  void nativeSetDynamicLibraryLoadingEnabled(boolean);
  void nativeBufferSpecGetSize(long, android.graphics.Point);
  void setIgnoreManualTrackerPauseResume(boolean);
  boolean usingVrDisplayService();
  int nativeBufferViewportGetReprojection(long);
  void nativeDestroyValue(long);
  int getViewerType();
  int nativeGetRecenterEventType(long);
  void nativeDistortToScreen(long, int, long, float[], long);
  void nativeBufferViewportSetExternalSurfaceId(long, int);
  boolean setViewerParams(byte[]);
  void nativeExternalSurfaceDestroy(long);
  boolean nativeBufferViewportEqual(long, long);
  float[] nativeComputeDistortedPoint(long, int, float[]);
  void nativeBufferSpecSetColorFormat(long, int);
  long nativeGetEventTimestamp(long);
  void nativeGetRecommendedBufferViewports(long, long);
  boolean ownsNativeGvrContext;
  void pause();
  void nativeGetScreenBufferViewports(long, long);
  void nativeBufferSpecDestroy(long);
  boolean isOpenGLKHRDebugEnabled();
  void nativeOnSurfaceCreatedReprojectionThread(long);
  long nativeSwapChainAcquireFrame(long);
  void nativeReconnectSensors(long);
  int nativeBufferViewportGetTargetEye(long);
  void nativeBufferViewportSetExternalSurface(long, long);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayout {
  com.google.vr.ndk.base.GvrApi getGvrApi();
  void addView(android.view.View);
   <init>(android.content.Context);
  void onPause();
  boolean dispatchTouchEvent(android.view.MotionEvent);
  void onSizeChanged(int, int, int, int);
  void onResume();
  com.google.vr.vrcore.library.api.IGvrLayout impl;
  com.google.vr.ndk.base.ExternalSurface videoSurface;
  void shutdown();
  void init();
  com.google.vr.ndk.base.GvrUiLayout uiLayout;
  com.google.vr.ndk.base.GvrApi gvrApi;
  boolean onGenericMotionEvent(android.view.MotionEvent);
  boolean dispatchKeyEvent(android.view.KeyEvent);
  android.content.Context getContext();
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayout$ExternalSurfaceListener {
  void onSurfaceAvailable(android.view.Surface);
  void onFrameAvailable();
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutFactory {
  com.google.vr.vrcore.library.api.IGvrLayout create(android.content.Context);
  com.google.vr.vrcore.library.api.IGvrLayout tryCreateFromVrCorePackage(android.content.Context);
  com.google.vr.vrcore.library.api.IGvrLayout createFromCurrentPackage(android.content.Context);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl {
  com.google.vr.ndk.base.GvrLayoutImpl$PresentationHelper presentationHelper;
  com.google.vr.ndk.base.GvrLayoutImpl$PresentationHelper tryCreatePresentationHelper();
  boolean isPresenting();
  com.google.vr.ndk.base.GvrLayoutImpl$FrameFlushWorkaround frameFlushWorkaround;
  void onPause();
  void updateUiLayout();
  com.google.vr.ndk.base.GvrLayoutImpl$ScreenOnManager screenOnManager;
  com.google.vr.ndk.base.GvrUiLayoutImpl uiLayout;
  boolean isContextSharingEnabled();
  boolean isResumed;
  com.google.vr.cardboard.ScanlineRacingRenderer access$200(com.google.vr.ndk.base.GvrLayoutImpl);
  android.view.View presentationView;
  void addView(android.view.View, int);
   <init>(android.content.Context, com.google.vr.ndk.base.ExtensionManager);
  int asyncReprojectionFlags;
  com.google.vr.ndk.base.VrCoreSdkClient getVrCoreSdkClient();
  com.google.vr.cardboard.EglReadyListener eglReadyListener;
   <init>(android.content.Context);
  com.google.vr.ndk.base.VrCoreSdkClient access$100(com.google.vr.ndk.base.GvrLayoutImpl);
  com.google.vr.cardboard.EglFactory eglFactory;
  boolean attachedToWindow;
  com.google.vr.ndk.base.FadeOverlayView fadeOverlayView;
  com.google.vr.ndk.base.GvrUiLayoutImpl access$300(com.google.vr.ndk.base.GvrLayoutImpl);
  boolean removeCallbacks(java.lang.Runnable);
  com.google.vr.ndk.base.GvrLayoutImpl$AsyncReprojectionSurfaceView scanlineRacingView;
  com.google.vr.ndk.base.VrCoreSdkClient createVrCoreSdkClient(android.content.Context, com.google.vr.ndk.base.GvrApi, com.google.vr.ndk.base.DaydreamUtilsWrapper, com.google.vr.ndk.base.FadeOverlayView);
  com.google.vr.ndk.base.GvrLayoutImpl$PresentationFactory access$500();
  com.google.vr.ndk.base.ExtensionManager extensionManager;
  com.google.vr.ndk.base.ExternalSurface videoSurface;
  boolean enableCardboardTriggerEmulation(java.lang.Runnable);
  int getWindowVisibility();
  boolean autoFadeEnabled;
  boolean postDelayed(java.lang.Runnable, long);
  com.google.vr.ndk.base.GvrApi gvrApi;
  com.google.vr.ndk.base.SdkDaydreamTouchListener daydreamTouchListener;
  void onResume();
  android.content.Context getContext();
  android.widget.FrameLayout presentationLayout;
  com.google.vr.ndk.base.CardboardEmulator cardboardEmulator;
  com.google.vr.ndk.base.SdkDaydreamTouchListener createDaydreamTouchListener();
  void initWithInjectedObjects(com.google.vr.ndk.base.GvrApi, com.google.vr.cardboard.DisplaySynchronizer, com.google.vr.cardboard.EglReadyListener, com.google.vr.ndk.base.FadeOverlayView, com.google.vr.ndk.base.DaydreamUtilsWrapper, com.google.vr.ndk.base.ExtensionManager, com.google.vr.ndk.base.GvrUiLayoutImpl);
  void addScanlineRacingView();
  com.google.vr.cardboard.ScanlineRacingRenderer scanlineRacingRenderer;
  com.google.vr.ndk.base.GvrApi getGvrApi();
  void removeView(android.view.View);
  void access$000(com.google.vr.ndk.base.GvrLayoutImpl, int);
  void setPresentationView(android.view.View);
  void setStereoModeEnabled(boolean);
  boolean isDeviceDetectionEnabled();
  boolean enableAsyncReprojection(int);
  java.lang.Runnable showRenderingViewsRunnable;
  void updateFadeVisibility();
  boolean stereoModeEnabled;
  com.google.vr.ndk.base.GvrLayoutImpl$PresentationFactory sOptionalPresentationFactory;
  void init(com.google.vr.ndk.base.ExtensionManager);
  boolean isDimUiEnabled();
  void setReentryIntent(android.app.PendingIntent);
  com.google.vr.ndk.base.GvrUiLayoutImpl getUiLayoutImpl();
  void onBackPressed();
  void setStereoModeEnabledImpl(boolean);
  void shutdown();
  com.google.vr.cardboard.DisplaySynchronizer displaySynchronizer;
  boolean setOnDonNotNeededListener(java.lang.Runnable);
  void lambda$setStereoModeEnabled$0$GvrLayoutImpl(boolean);
  void updateRenderingViewsVisibility(int);
  com.google.vr.ndk.base.VrCoreSdkClient vrCoreSdkClient;
  com.google.vr.ndk.base.DaydreamUtilsWrapper daydreamUtils;
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl$$Lambda$0 {
  com.google.vr.ndk.base.GvrLayoutImpl arg$1;
  boolean arg$2;
   <init>(com.google.vr.ndk.base.GvrLayoutImpl, boolean);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl$1 {
  com.google.vr.ndk.base.GvrLayoutImpl this$0;
   <init>(com.google.vr.ndk.base.GvrLayoutImpl);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl$2 {
  com.google.vr.ndk.base.GvrLayoutImpl this$0;
   <init>(com.google.vr.ndk.base.GvrLayoutImpl);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl$3 {
   <init>(com.google.vr.ndk.base.GvrLayoutImpl);
  com.google.vr.ndk.base.GvrLayoutImpl this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl$4 {
   <init>(com.google.vr.ndk.base.GvrLayoutImpl);
  com.google.vr.ndk.base.GvrLayoutImpl this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl$AsyncReprojectionSurfaceView {
  void setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView$EGLWindowSurfaceFactory);
   <init>(android.content.Context);
  void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser);
  void setVisibility(int);
  void setSwapMode(int);
  void setRenderer(com.google.vr.cardboard.ScanlineRacingRenderer);
  boolean isDetachedFromWindow();
  void onSurfaceDestroyed(java.lang.Runnable);
  void setEGLContextFactory(android.opengl.GLSurfaceView$EGLContextFactory);
  void onResume();
  com.google.vr.cardboard.ScanlineRacingRenderer access$400(com.google.vr.ndk.base.GvrLayoutImpl$AsyncReprojectionSurfaceView);
  void setEglReadyListener(com.google.vr.cardboard.EglReadyListener);
  void onPause(java.lang.Runnable);
  com.google.vr.cardboard.ScanlineRacingRenderer scanlineRacingRenderer;
  void onPause();
  void setZOrderMediaOverlay(boolean);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl$AsyncReprojectionSurfaceView$1 {
   <init>(com.google.vr.ndk.base.GvrLayoutImpl$AsyncReprojectionSurfaceView);
  com.google.vr.ndk.base.GvrLayoutImpl$AsyncReprojectionSurfaceView this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl$FrameFlushWorkaround {
  android.view.Choreographer choreographer;
  int framesRemaining;
   <init>();
  void onResume();
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl$PresentationFactory {
  android.app.Presentation create(android.content.Context, android.view.Display);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl$PresentationHelper {
  android.hardware.display.DisplayManager displayManager;
   <init>(android.content.Context, android.widget.FrameLayout, android.view.View, com.google.vr.cardboard.DisplaySynchronizer, java.lang.String);
  android.widget.RelativeLayout$LayoutParams layout;
  android.view.View view;
  boolean hasCurrentPresentationExpired();
  void shutdown();
  void setDisplay(android.view.Display);
  void addListener(com.google.vr.ndk.base.GvrLayoutImpl$PresentationListener);
  android.app.Presentation presentation;
  com.google.vr.cardboard.DisplaySynchronizer displaySynchronizer;
  void onResume();
  void onDetachedFromWindow();
  boolean isPresenting();
  boolean isValidExternalDisplay(android.view.Display);
  void detachViewFromParent(android.view.View);
  void onPause();
  android.widget.FrameLayout originalParent;
  android.content.Context context;
  java.lang.String externalDisplayName;
  java.util.List listeners;
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl$PresentationListener {
  void onPresentationStarted(android.view.Display);
  void onPresentationStopped();
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl$ScreenOnManager {
  long access$800(com.google.vr.ndk.base.GvrLayoutImpl$ScreenOnManager);
  long QUIET_PERIOD_AFTER_RESUME_MILLIS;
  boolean isIdle;
  long access$900();
  android.view.View parentView;
  boolean access$600(com.google.vr.ndk.base.GvrLayoutImpl$ScreenOnManager);
  boolean access$1000(com.google.vr.ndk.base.GvrLayoutImpl$ScreenOnManager);
   <init>(android.view.View);
  void onPause();
  boolean isResumed;
  boolean access$602(com.google.vr.ndk.base.GvrLayoutImpl$ScreenOnManager, boolean);
  void onResume();
  void access$700(com.google.vr.ndk.base.GvrLayoutImpl$ScreenOnManager);
  boolean access$1002(com.google.vr.ndk.base.GvrLayoutImpl$ScreenOnManager, boolean);
  void updateSetScreenOn();
  long lastResumeTimeMillis;
  void setEnabled(boolean);
  boolean isEnabled;
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl$ScreenOnManager$1 {
   <init>(com.google.vr.ndk.base.GvrLayoutImpl$ScreenOnManager, boolean);
  boolean val$newIsEnabled;
  com.google.vr.ndk.base.GvrLayoutImpl$ScreenOnManager this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImpl$ScreenOnManager$2 {
   <init>(com.google.vr.ndk.base.GvrLayoutImpl$ScreenOnManager, boolean);
  com.google.vr.ndk.base.GvrLayoutImpl$ScreenOnManager this$0;
  boolean val$newIsIdle;
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrLayoutImplWrapper {
  com.google.vr.ndk.base.GvrLayoutImpl impl;
   <init>(com.google.vr.ndk.base.GvrLayoutImpl);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrSurfaceView {
  int mEGLContextClientVersion;
  android.opengl.GLSurfaceView$EGLConfigChooser access$500(com.google.vr.ndk.base.GvrSurfaceView);
  void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser);
  android.opengl.GLSurfaceView$Renderer access$1000(com.google.vr.ndk.base.GvrSurfaceView);
  boolean mPreserveEGLContextOnPause;
  void onPause();
   <init>(android.content.Context);
  void init();
  android.opengl.GLSurfaceView$EGLWindowSurfaceFactory mEGLWindowSurfaceFactory;
  com.google.vr.cardboard.EglReadyListener access$300(com.google.vr.ndk.base.GvrSurfaceView);
  boolean mDetached;
  com.google.vr.ndk.base.GvrSurfaceView$GLWrapper mGLWrapper;
  android.opengl.GLSurfaceView$EGLContextFactory mEGLContextFactory;
  void onSurfaceDestroyed(java.lang.Runnable);
  void queueEvent(java.lang.Runnable);
  void onResume();
  int access$800(com.google.vr.ndk.base.GvrSurfaceView);
  android.opengl.GLSurfaceView$EGLWindowSurfaceFactory access$600(com.google.vr.ndk.base.GvrSurfaceView);
  void setEGLContextClientVersion(int);
  com.google.vr.ndk.base.GvrSurfaceView$GLThread mGLThread;
  android.opengl.GLSurfaceView$Renderer mRenderer;
  int access$200(com.google.vr.ndk.base.GvrSurfaceView);
  com.google.vr.cardboard.EglReadyListener mAppContextListener;
  void setRenderer(android.opengl.GLSurfaceView$Renderer);
   <init>(android.content.Context, android.util.AttributeSet);
  void onAttachedToWindow();
  void checkRenderThreadState();
  android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser;
  int mDebugFlags;
  void requestExitAndWait();
  boolean access$900(com.google.vr.ndk.base.GvrSurfaceView);
  boolean mPreserveGlThreadOnDetachedFromWindow;
  java.lang.ref.WeakReference mThisWeakRef;
  com.google.vr.ndk.base.GvrSurfaceView$GLWrapper access$700(com.google.vr.ndk.base.GvrSurfaceView);
  android.opengl.GLSurfaceView$EGLContextFactory access$400(com.google.vr.ndk.base.GvrSurfaceView);
  void onDetachedFromWindow();
  android.view.SurfaceHolder getHolder();
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrSurfaceView$BaseConfigChooser {
  com.google.vr.ndk.base.GvrSurfaceView this$0;
  int[] mConfigSpec;
  javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig[]);
   <init>(com.google.vr.ndk.base.GvrSurfaceView, int[]);
  javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay);
  int[] filterConfigSpec(int[]);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrSurfaceView$ComponentSizeChooser {
  int mGreenSize;
  int mAlphaSize;
  int mBlueSize;
  int mRedSize;
  int findConfigAttrib(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, int, int);
  int mDepthSize;
  int mStencilSize;
   <init>(com.google.vr.ndk.base.GvrSurfaceView, int, int, int, int, int, int);
  int[] mValue;
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrSurfaceView$DefaultContextFactory {
   <init>(com.google.vr.ndk.base.GvrSurfaceView);
   <init>(com.google.vr.ndk.base.GvrSurfaceView, com.google.vr.ndk.base.GvrSurfaceView$1);
  com.google.vr.ndk.base.GvrSurfaceView this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrSurfaceView$DefaultWindowSurfaceFactory {
   <init>();
   <init>(com.google.vr.ndk.base.GvrSurfaceView$1);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrSurfaceView$EglHelper {
  void initialize();
  int swap();
  javax.microedition.khronos.opengles.GL createGL();
  void start();
  void finish();
  java.lang.String getHex(int);
  java.lang.String getErrorString(int);
  javax.microedition.khronos.egl.EGLContext mEglContext;
  javax.microedition.khronos.egl.EGLSurface mEglSurface;
  void setEglSurfaceAttrib(int, int);
  void destroySurfaceImp();
  void logEglErrorAsWarning(java.lang.String, java.lang.String, int);
  void createPendingEglContext();
  void destroySurface();
  void throwEglException(java.lang.String);
  void throwEglException(java.lang.String, int);
  javax.microedition.khronos.egl.EGLConfig mEglConfig;
  javax.microedition.khronos.egl.EGLDisplay mPendingEglDisplay;
   <init>(java.lang.ref.WeakReference);
  boolean createSurface();
  java.lang.ref.WeakReference mGvrSurfaceViewWeakRef;
  javax.microedition.khronos.egl.EGLContext mPendingEglContext;
  javax.microedition.khronos.egl.EGL10 mEgl;
  javax.microedition.khronos.egl.EGLDisplay mEglDisplay;
  java.lang.String formatEglError(java.lang.String, int);
  void renewPendingEglContext();
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrSurfaceView$GLThread {
  void setName(java.lang.String);
  void guardedRun();
  boolean mPaused;
  void onWindowResize(int, int);
  boolean ableToDraw();
  com.google.vr.ndk.base.GvrSurfaceView$GLThread$GLThreadManager mGLThreadManager;
  boolean mSizeChanged;
  void setRenderMode(int);
  void setSwapMode(int);
  boolean mRenderComplete;
  boolean mHaveEglSurface;
  boolean mShouldExit;
  int mRenderMode;
  boolean mHasSurface;
  boolean mSurfaceIsBad;
  boolean readyToDraw();
  void onPause(java.lang.Runnable);
  boolean mWaitingForSurface;
  void requestRender();
  void onResume();
  void start();
  int getRenderMode();
  int mHeight;
  boolean mRequestRender;
  boolean mFinishedCreatingEglSurface;
  int getSwapMode();
  int mWidth;
  int mRequestedSwapMode;
  void stopEglSurfaceLocked();
  boolean mShouldReleaseEglContext;
  void stopEglContextLocked();
  java.lang.ref.WeakReference mGvrSurfaceViewWeakRef;
  boolean access$1102(com.google.vr.ndk.base.GvrSurfaceView$GLThread, boolean);
  void surfaceDestroyed(java.lang.Runnable);
  boolean mHaveEglContext;
  void requestExitAndWait();
  void surfaceCreated();
   <init>(java.lang.ref.WeakReference);
  long getId();
  java.util.ArrayList mEventQueue;
  boolean mRequestPaused;
  void requestRenderAndWait();
  void queueEvent(java.lang.Runnable);
  boolean mExited;
  boolean mWantRenderNotification;
  com.google.vr.ndk.base.GvrSurfaceView$EglHelper mEglHelper;
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrSurfaceView$GLThread$GLThreadManager {
  void releaseEglContextLocked(com.google.vr.ndk.base.GvrSurfaceView$GLThread);
   <init>(com.google.vr.ndk.base.GvrSurfaceView$1);
  void threadExiting(com.google.vr.ndk.base.GvrSurfaceView$GLThread);
   <init>();
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrSurfaceView$GLWrapper {
  javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrSurfaceView$LogWriter {
  java.lang.StringBuilder mBuilder;
  void flushBuilder();
   <init>();
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrSurfaceView$SimpleEGLConfigChooser {
   <init>(com.google.vr.ndk.base.GvrSurfaceView, boolean);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrUiLayout {
  void setSettingsButtonListener(java.lang.Runnable);
  com.google.vr.vrcore.library.api.IGvrUiLayout impl;
   <init>(com.google.vr.vrcore.library.api.IGvrUiLayout);
  void setCloseButtonListener(java.lang.Runnable);
  void launchOrInstallGvrApp(android.app.Activity);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrUiLayoutImpl {
  android.animation.ObjectAnimator uiLayerDimmingAnimation;
  void cancelDimmingUiLayer();
  void setDimmedUiTouchOverride();
  void delayDimmingUiLayer(long);
  android.view.ViewGroup getRoot();
  void setEnabled(boolean);
   <init>(android.content.Context, java.lang.Runnable, com.google.vr.ndk.base.DaydreamUtilsWrapper);
  void lambda$setDimmedUiTouchOverride$0$GvrUiLayoutImpl();
  com.google.vr.ndk.base.GvrUiLayoutImpl$CloseButtonListenerWrapper closeButtonListener;
  com.google.vr.cardboard.UiLayer uiLayer;
  java.lang.Runnable access$000(android.content.Context, com.google.vr.ndk.base.DaydreamUtilsWrapper);
  java.lang.Runnable createDefaultCloseButtonListener(android.content.Context, com.google.vr.ndk.base.DaydreamUtilsWrapper);
  void invokeCloseButtonListener();
  void beginDimmingUiLayer();
  void delayDimmingUiLayerAfterVisible();
  boolean daydreamModeEnabled;
  void bridge$lambda$0$GvrUiLayoutImpl();
  java.lang.Runnable beginDimmingUiLayerRunnable;
  java.lang.Runnable delayDimmingUiLayerAfterVisibleRunnable;
  void setDaydreamModeEnabled(boolean);
   <init>(android.content.Context, java.lang.Runnable);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrUiLayoutImpl$$Lambda$0 {
  com.google.vr.ndk.base.GvrUiLayoutImpl arg$1;
   <init>(com.google.vr.ndk.base.GvrUiLayoutImpl);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrUiLayoutImpl$$Lambda$1 {
  com.google.vr.ndk.base.GvrUiLayoutImpl arg$1;
   <init>(com.google.vr.ndk.base.GvrUiLayoutImpl);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrUiLayoutImpl$$Lambda$2 {
   <init>(com.google.vr.ndk.base.GvrUiLayoutImpl);
  com.google.vr.ndk.base.GvrUiLayoutImpl arg$1;
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrUiLayoutImpl$1 {
  android.content.Intent val$homeIntent;
  android.content.Context val$context;
   <init>(android.content.Context, android.content.Intent);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrUiLayoutImpl$2 {
  android.app.Activity val$activity;
  android.content.Intent val$homeIntent;
   <init>(android.app.Activity, android.content.Intent);
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrUiLayoutImpl$3 {
   <init>(android.app.Activity);
  android.app.Activity val$activity;
}

-keep,allowobfuscation class com.google.vr.ndk.base.GvrUiLayoutImpl$CloseButtonListenerWrapper {
  void run();
  void setClientCloseButtonListener(java.lang.Runnable);
  java.lang.Runnable defaultCloseButtonListener;
   <init>(android.content.Context, java.lang.Runnable, com.google.vr.ndk.base.DaydreamUtilsWrapper);
  boolean invokingCloseButton;
  java.lang.Runnable activeCloseButtonListener;
  android.content.Context context;
  java.lang.Runnable passiveCloseButtonListener;
}

-keep,allowobfuscation class com.google.vr.ndk.base.Properties {
   <init>(long);
  long nativeProperties;
}

-keep,allowobfuscation class com.google.vr.ndk.base.SdkConfigurationReader {
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams sParams;
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams getParams(android.content.Context);
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams readParamsFromProvider(com.google.vr.cardboard.VrParamsProvider);
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams DEFAULT_PARAMS;
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams REQUESTED_PARAMS;
}

-keep,allowobfuscation class com.google.vr.ndk.base.SdkDaydreamTouchListener {
   <init>(com.google.vr.ndk.base.GvrLayoutImpl);
  boolean isDaydreamImageAlignmentEnabled;
  void setDeviceParams(com.google.vr.sdk.proto.nano.CardboardDevice$DeviceParams);
  com.google.vr.ndk.base.GvrApi gvrApi;
  com.google.vr.cardboard.VrParamsProvider vrParamsProvider;
  com.google.vr.ndk.base.GvrLayoutImpl gvrLayout;
  void initWithDisplayParams(android.util.DisplayMetrics, com.google.vr.sdk.proto.nano.Display$DisplayParams);
  void shutdown();
  void refreshViewerProfile();
  void setEnabled(boolean);
  void access$300(com.google.vr.ndk.base.SdkDaydreamTouchListener, android.util.DisplayMetrics, com.google.vr.sdk.proto.nano.Display$DisplayParams);
  com.google.vr.cardboard.VrParamsProvider access$200(com.google.vr.ndk.base.SdkDaydreamTouchListener);
  boolean handleTouch(android.view.MotionEvent, float, float);
  void init(android.util.DisplayMetrics, com.google.vr.sdk.proto.nano.Display$DisplayParams);
}

-keep,allowobfuscation class com.google.vr.ndk.base.SdkDaydreamTouchListener$FinishInitilizationTask {
  android.os.AsyncTask execute(java.lang.Object[]);
   <init>(com.google.vr.ndk.base.SdkDaydreamTouchListener, com.google.vr.ndk.base.SdkDaydreamTouchListener$1);
  com.google.vr.sdk.proto.nano.Display$DisplayParams doInBackground(java.lang.Void[]);
   <init>(com.google.vr.ndk.base.SdkDaydreamTouchListener);
  com.google.vr.ndk.base.SdkDaydreamTouchListener this$0;
  void onProgressUpdate(java.lang.Void[]);
  android.view.Display display;
  void onPostExecute(com.google.vr.sdk.proto.nano.Display$DisplayParams);
}

-keep,allowobfuscation class com.google.vr.ndk.base.SdkDaydreamTouchListener$RefreshViewerProfileTask {
  void onProgressUpdate(java.lang.Void[]);
   <init>(com.google.vr.ndk.base.SdkDaydreamTouchListener);
  void onPostExecute(com.google.vr.sdk.proto.nano.CardboardDevice$DeviceParams);
  com.google.vr.sdk.proto.nano.CardboardDevice$DeviceParams doInBackground(java.lang.Void[]);
  android.os.AsyncTask execute(java.lang.Object[]);
  com.google.vr.ndk.base.SdkDaydreamTouchListener this$0;
   <init>(com.google.vr.ndk.base.SdkDaydreamTouchListener, com.google.vr.ndk.base.SdkDaydreamTouchListener$1);
}

-keep,allowobfuscation class com.google.vr.ndk.base.SwapChain {
  void shutdown();
   <init>(long);
  int currentFrame;
  com.google.vr.ndk.base.Frame[] frames;
  long nativeSwapChain;
  java.lang.String TAG;
}

-keep,allowobfuscation class com.google.vr.ndk.base.ThrottlingMonitor {
  com.google.vr.vrcore.performance.api.IPerformanceService perfService;
  android.os.Handler mainHandler;
  java.lang.Object access$000(com.google.vr.ndk.base.ThrottlingMonitor);
  java.lang.Object lock;
  android.content.Context context;
  int addTriggerInternal(android.content.ComponentName, int, float, com.google.vr.ndk.base.ThrottlingMonitor$TemperatureTrigger, long, android.os.Handler);
  android.content.ServiceConnection connection;
  com.google.vr.vrcore.performance.api.IPerformanceService access$102(com.google.vr.ndk.base.ThrottlingMonitor, com.google.vr.vrcore.performance.api.IPerformanceService);
  java.util.ArrayList access$200(com.google.vr.ndk.base.ThrottlingMonitor);
  java.util.ArrayList setupCallbacks;
   <init>(android.content.Context);
}

-keep,allowobfuscation class com.google.vr.ndk.base.ThrottlingMonitor$1 {
   <init>(com.google.vr.ndk.base.ThrottlingMonitor);
  com.google.vr.ndk.base.ThrottlingMonitor this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.ThrottlingMonitor$2 {
  com.google.vr.ndk.base.ThrottlingMonitor$SetupCallback val$callback;
   <init>(com.google.vr.ndk.base.ThrottlingMonitor, com.google.vr.ndk.base.ThrottlingMonitor$SetupCallback);
}

-keep,allowobfuscation class com.google.vr.ndk.base.ThrottlingMonitor$SetupCallback {
  void onInitialized();
}

-keep,allowobfuscation class com.google.vr.ndk.base.ThrottlingMonitor$TemperatureTrigger {
  void onTemperatureEvent(float, long);
}

-keep,allowobfuscation class com.google.vr.ndk.base.ThrottlingMonitor$ThrottlingTriggerCallback {
  com.google.vr.ndk.base.ThrottlingMonitor$TemperatureTrigger trigger;
  com.google.vr.ndk.base.ThrottlingMonitor$TemperatureTrigger access$300(com.google.vr.ndk.base.ThrottlingMonitor$ThrottlingTriggerCallback);
   <init>(com.google.vr.ndk.base.ThrottlingMonitor$TemperatureTrigger, android.os.Handler);
  android.os.Handler handler;
}

-keep,allowobfuscation class com.google.vr.ndk.base.ThrottlingMonitor$ThrottlingTriggerCallback$1 {
   <init>(com.google.vr.ndk.base.ThrottlingMonitor$ThrottlingTriggerCallback, float, long);
  float val$temperature;
  long val$timeRemaining;
  com.google.vr.ndk.base.ThrottlingMonitor$ThrottlingTriggerCallback this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.TraceCompat {
  void endSection();
  void beginSection(java.lang.String);
}

-keep,allowobfuscation class com.google.vr.ndk.base.UserPrefs {
   <init>(long);
  long nativeUserPrefs;
  java.lang.String TAG;
}

-keep,allowobfuscation class com.google.vr.ndk.base.Value {
  void close();
  long nativeValue;
}

-keep,allowobfuscation class com.google.vr.ndk.base.Version {
   <init>(int, int, int);
  com.google.vr.ndk.base.Version parse(java.lang.String);
  java.lang.String toString();
  int minorVersion;
  boolean isAtLeast(com.google.vr.ndk.base.Version);
  com.google.vr.ndk.base.Version CURRENT;
  int patchVersion;
  com.google.vr.ndk.base.Version MIN;
  int majorVersion;
}

-keep,allowobfuscation class com.google.vr.ndk.base.VrCoreSdkClient {
  com.google.vr.vrcore.common.api.IDaydreamManager access$200(com.google.vr.ndk.base.VrCoreSdkClient);
  boolean access$900(com.google.vr.ndk.base.VrCoreSdkClient);
  void onPause();
  void handleNoDaydreamManager();
  com.google.vr.vrcore.logging.api.IVrCoreLoggingService access$1102(com.google.vr.ndk.base.VrCoreSdkClient, com.google.vr.vrcore.logging.api.IVrCoreLoggingService);
  void resumeTracking(com.google.vr.ndk.base.GvrApi, com.google.vr.vrcore.common.api.HeadTrackingState);
  com.google.vr.vrcore.common.api.IVrCoreSdkService access$102(com.google.vr.ndk.base.VrCoreSdkClient, com.google.vr.vrcore.common.api.IVrCoreSdkService);
  com.google.vr.ndk.base.FadeOverlayView fadeOverlayView;
  android.content.Context context;
  void setReentryIntent(android.app.PendingIntent);
  android.app.AlertDialog helpCenterDialog;
  void warnIfIncompatibleClient();
  void access$1400(com.google.vr.ndk.base.GvrApi, com.google.vr.vrcore.common.api.HeadTrackingState);
  void access$000(com.google.vr.ndk.base.VrCoreSdkClient);
  android.content.ComponentName access$400(com.google.vr.ndk.base.VrCoreSdkClient);
  void setOnDonNotNeededListener(java.lang.Runnable);
  com.google.vr.vrcore.common.api.IVrCoreSdkService access$100(com.google.vr.ndk.base.VrCoreSdkClient);
  int prepareVr(com.google.vr.vrcore.common.api.HeadTrackingState);
  java.lang.Runnable access$700(com.google.vr.ndk.base.VrCoreSdkClient);
  com.google.vr.ndk.base.DaydreamUtilsWrapper daydreamUtils;
  int access$600(com.google.vr.ndk.base.VrCoreSdkClient, com.google.vr.vrcore.common.api.HeadTrackingState);
  void handleBindFailed();
  java.lang.Runnable onDonNotNeededListener;
  boolean isEnabled;
  int vrCoreClientApiVersion;
  void resumeTracking(com.google.vr.vrcore.common.api.HeadTrackingState);
  android.content.ServiceConnection serviceConnection;
  com.google.vr.vrcore.logging.api.IVrCoreLoggingService loggingService;
   <init>(android.content.Context, com.google.vr.ndk.base.GvrApi, android.content.ComponentName, com.google.vr.ndk.base.DaydreamUtilsWrapper, java.lang.Runnable, com.google.vr.ndk.base.FadeOverlayView);
  android.app.PendingIntent optionalReentryIntent;
  com.google.vr.ndk.base.VrCoreSdkClient$DaydreamListenerImpl daydreamListener;
  boolean onResume();
  void handlePrepareVrFailed();
  android.content.ComponentName componentName;
  com.google.vr.vrcore.common.api.IVrCoreSdkService vrCoreSdkService;
  com.google.vr.ndk.base.VrCoreSdkClient$DaydreamListenerImpl access$500(com.google.vr.ndk.base.VrCoreSdkClient);
  boolean doBind();
  com.google.vr.vrcore.logging.api.IVrCoreLoggingService getLoggingService();
  boolean hasCompatibleSdkService(android.content.Context);
  boolean isResumed;
  boolean shouldBind;
  void access$800(com.google.vr.ndk.base.VrCoreSdkClient);
  boolean isBound;
  com.google.vr.vrcore.common.api.HeadTrackingState getHeadTrackingState();
  com.google.vr.ndk.base.GvrApi gvrApi;
  com.google.vr.vrcore.common.api.IDaydreamManager daydreamManager;
  com.google.vr.vrcore.common.api.IDaydreamManager access$202(com.google.vr.ndk.base.VrCoreSdkClient, com.google.vr.vrcore.common.api.IDaydreamManager);
  void setEnabled(boolean);
  void onExitingFromVr();
  java.lang.Runnable closeVrRunnable;
  void access$1000(com.google.vr.ndk.base.VrCoreSdkClient, com.google.vr.vrcore.common.api.HeadTrackingState);
  void access$300(com.google.vr.ndk.base.VrCoreSdkClient);
  void doUnbind();
}

-keep,allowobfuscation class com.google.vr.ndk.base.VrCoreSdkClient$1 {
   <init>(com.google.vr.ndk.base.VrCoreSdkClient);
  com.google.vr.ndk.base.VrCoreSdkClient this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.VrCoreSdkClient$DaydreamListenerImpl {
  void cancelSafeguard(int);
  java.lang.ref.WeakReference closeVrRunnableWeak;
  void resetSafeguards();
   <init>(com.google.vr.ndk.base.GvrApi, com.google.vr.ndk.base.FadeOverlayView, java.lang.Runnable);
  void access$1200(com.google.vr.ndk.base.VrCoreSdkClient$DaydreamListenerImpl, int, long, int);
  java.lang.ref.WeakReference fadeOverlayViewWeak;
  void rescheduleSafeguard(int, long);
  void applyColorfulFadeImpl(int, long, int);
  java.lang.ref.WeakReference gvrApiWeak;
  void access$1300(com.google.vr.ndk.base.VrCoreSdkClient$DaydreamListenerImpl, com.google.vr.vrcore.common.api.HeadTrackingState);
  android.os.Handler safeguardHandler;
  void resumeHeadTrackingImpl(com.google.vr.vrcore.common.api.HeadTrackingState);
}

-keep,allowobfuscation class com.google.vr.ndk.base.VrCoreSdkClient$DaydreamListenerImpl$1 {
   <init>(com.google.vr.ndk.base.VrCoreSdkClient$DaydreamListenerImpl);
  com.google.vr.ndk.base.VrCoreSdkClient$DaydreamListenerImpl this$0;
}

-keep,allowobfuscation class com.google.vr.ndk.base.VrCoreSdkClient$DaydreamListenerImpl$2 {
  int val$color;
  long val$durationMillis;
   <init>(com.google.vr.ndk.base.VrCoreSdkClient$DaydreamListenerImpl, com.google.vr.ndk.base.FadeOverlayView, int, long, int);
  com.google.vr.ndk.base.FadeOverlayView val$fadeOverlayView;
  int val$fadeType;
}

-keep,allowobfuscation class com.google.vr.sdk.common.deps.a {
  java.lang.String mDescriptor;
  android.os.IBinder mRemote;
   <init>(android.os.IBinder, java.lang.String);
}

-keep,allowobfuscation class com.google.vr.sdk.common.deps.b {
   <init>();
  java.lang.String getInterfaceDescriptor();
}

-keep,allowobfuscation class com.google.vr.sdk.common.deps.c {
  void a(android.os.Parcel, android.os.Parcelable);
  boolean a(android.os.Parcel);
  android.os.Parcelable a(android.os.Parcel, android.os.Parcelable$Creator);
  void a(android.os.Parcel, android.os.IInterface);
  void b(android.os.Parcel, android.os.Parcelable);
  void a(android.os.Parcel, boolean);
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Analytics$AnalyticsRequest {
  com.google.vr.sdk.proto.nano.Analytics$AnalyticsRequest clear();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
   <init>();
  com.google.vr.sdk.proto.nano.Analytics$AnalyticsRequest[] _emptyArray;
  int bitField0_;
  com.google.vr.sdk.proto.nano.Analytics$AnalyticsRequest clone();
  com.google.vr.sdk.proto.nano.Analytics$AnalyticsRequest mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  long prevSampleTimestampNanoseconds_;
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Analytics$AnalyticsSample {
  com.google.vr.sdk.proto.nano.Analytics$AnalyticsSample[] _emptyArray;
  com.google.vr.sdk.proto.nano.Analytics$AnalyticsSample clone();
  long timestampNanoseconds_;
  int cachedSize;
  int bitField0_;
  com.google.vr.sdk.proto.nano.Analytics$AppAnalytics appAnalytics;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics asyncReprojectionAnalytics;
  com.google.vr.sdk.proto.nano.Analytics$AnalyticsSample mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
   <init>();
  com.google.vr.sdk.proto.nano.Analytics$AnalyticsSample clear();
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Analytics$AppAnalytics {
  com.google.vr.sdk.proto.nano.Analytics$AppAnalytics clone();
  com.google.vr.sdk.proto.nano.Analytics$AppAnalytics$SubmitStatus[] submitStatus;
  float fps_;
  com.google.vr.sdk.proto.nano.Analytics$AppAnalytics[] _emptyArray;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
   <init>();
  com.google.vr.sdk.proto.nano.Analytics$AppAnalytics mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int bitField0_;
  com.google.vr.sdk.proto.nano.Analytics$AppAnalytics clear();
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Analytics$AppAnalytics$SubmitStatus {
  com.google.vr.sdk.proto.nano.Analytics$AppAnalytics$SubmitStatus[] _emptyArray;
  com.google.vr.sdk.proto.nano.Analytics$AppAnalytics$SubmitStatus clear();
  com.google.vr.sdk.proto.nano.Analytics$AppAnalytics$SubmitStatus clone();
  com.google.vr.sdk.proto.nano.Analytics$AppAnalytics$SubmitStatus[] emptyArray();
  long timestampNanoseconds_;
  int bitField0_;
  boolean wasBlockedOnGpu_;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  com.google.vr.sdk.proto.nano.Analytics$AppAnalytics$SubmitStatus mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
   <init>();
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics {
  int bitField0_;
   <init>();
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus[] vsyncStatus;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics[] _emptyArray;
  float fps_;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics clone();
  int totalMissedVsyncs_;
  int cachedSize;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics clear();
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus {
  int oneof_Status_;
   <init>();
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$NewAppFrame newAppFrame;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus[] _emptyArray;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus clone();
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$MissedVsync missedVsync;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus clear();
  int bitField0_;
  long timestampNanoseconds_;
  int cachedSize;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$ReusedAppFrame reusedAppFrame;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus[] emptyArray();
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$MissedVsync {
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$MissedVsync mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$MissedVsync clone();
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$MissedVsync[] _emptyArray;
   <init>();
  int cachedSize;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$MissedVsync clear();
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$NewAppFrame {
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$NewAppFrame clear();
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$NewAppFrame mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  long sinceSubmitNanoseconds_;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$NewAppFrame[] _emptyArray;
  int numSkippedAppFrames_;
  int bitField0_;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$NewAppFrame clone();
  int cachedSize;
   <init>();
  com.google.protobuf.nano.FieldArray unknownFieldData;
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$ReusedAppFrame {
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$ReusedAppFrame clone();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$ReusedAppFrame mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
   <init>();
  long sinceSubmitNanoseconds_;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$ReusedAppFrame[] _emptyArray;
  com.google.vr.sdk.proto.nano.Analytics$AsyncReprojectionAnalytics$VsyncStatus$ReusedAppFrame clear();
  int bitField0_;
  int cachedSize;
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.CardboardDevice$CardboardInternalParams {
  int checkOrientationTypeOrThrow(int);
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  java.lang.String gyroscope_;
  com.google.vr.sdk.proto.nano.CardboardDevice$CardboardInternalParams clone();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.String accelerometer_;
  com.google.vr.sdk.proto.nano.CardboardDevice$CardboardInternalParams mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
   <init>();
  float yPpiOverride_;
  int[] eyeOrientations;
  float screenCenterToLensDistance_;
  int bitField0_;
  com.google.vr.sdk.proto.nano.CardboardDevice$CardboardInternalParams[] _emptyArray;
  float xPpiOverride_;
  int cachedSize;
  com.google.vr.sdk.proto.nano.CardboardDevice$CardboardInternalParams clear();
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.CardboardDevice$DaydreamInternalParams {
  int distortionMeshResolution_;
  boolean sensorOrientationIndependentOfDisplay_;
  com.google.vr.sdk.proto.nano.CardboardDevice$DaydreamInternalParams clone();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.vr.sdk.proto.nano.CardboardDevice$DaydreamInternalParams mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int version_;
   <init>();
  com.google.vr.sdk.proto.nano.CardboardDevice$DaydreamInternalParams[] _emptyArray;
  com.google.vr.sdk.proto.nano.CardboardDevice$VignetteParams vignetteParams;
  int cachedSize;
  com.google.vr.sdk.proto.nano.CardboardDevice$ScreenAlignmentMarker[] alignmentMarkers;
  int bitField0_;
  com.google.vr.sdk.proto.nano.CardboardDevice$DaydreamInternalParams clear();
  boolean clipFieldOfViewToDisplay_;
  boolean getUseRotationalAlignmentCorrection();
  boolean useRotationalAlignmentCorrection_;
  boolean clampDistortionToMaximumFieldOfView_;
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.CardboardDevice$DeviceParams {
   <init>();
  int primaryButton_;
  boolean hasMagnet_;
  java.lang.String getVendor();
  int cachedSize;
  float trayToLensDistance_;
  com.google.vr.sdk.proto.nano.CardboardDevice$DaydreamInternalParams daydreamInternal;
  float[] distortionCoefficients;
  java.lang.String vendor_;
  java.lang.String model_;
  float[] greenDistortionCoefficients;
  int bitField0_;
  com.google.vr.sdk.proto.nano.CardboardDevice$DeviceParams clear();
  int verticalAlignment_;
  float getTrayToLensDistance();
  float[] leftEyeFieldOfViewAngles;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.vr.sdk.proto.nano.CardboardDevice$DeviceParams[] _emptyArray;
  com.google.vr.sdk.proto.nano.CardboardDevice$DeviceParams mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int checkVerticalAlignmentTypeOrThrow(int);
  com.google.vr.sdk.proto.nano.CardboardDevice$DeviceParams clone();
  float[] blueDistortionCoefficients;
  float screenToLensDistance_;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  float interLensDistance_;
  com.google.vr.sdk.proto.nano.CardboardDevice$CardboardInternalParams internal;
  java.lang.String getModel();
  int checkButtonTypeOrThrow(int);
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.CardboardDevice$ScreenAlignmentMarker {
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.vr.sdk.proto.nano.CardboardDevice$ScreenAlignmentMarker mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  float getVertical();
  com.google.vr.sdk.proto.nano.CardboardDevice$ScreenAlignmentMarker clone();
  com.google.vr.sdk.proto.nano.CardboardDevice$ScreenAlignmentMarker clear();
   <init>();
  com.google.vr.sdk.proto.nano.CardboardDevice$ScreenAlignmentMarker[] emptyArray();
  float vertical_;
  float getHorizontal();
  com.google.vr.sdk.proto.nano.CardboardDevice$ScreenAlignmentMarker[] _emptyArray;
  int cachedSize;
  float horizontal_;
  int bitField0_;
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.CardboardDevice$VignetteParams {
  com.google.vr.sdk.proto.nano.CardboardDevice$VignetteParams clear();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.vr.sdk.proto.nano.CardboardDevice$VignetteParams mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
   <init>();
  int condition_;
  float value_;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  int checkVignetteParamsConditionOrThrow(int);
  com.google.vr.sdk.proto.nano.CardboardDevice$VignetteParams clone();
  int cachedSize;
  int bitField0_;
  com.google.vr.sdk.proto.nano.CardboardDevice$VignetteParams[] _emptyArray;
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Display$DisplayParams {
  float bottomBezelHeight_;
  float xPpi_;
  float yPpi_;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int bitField0_;
  com.google.vr.sdk.proto.nano.Display$DisplayParams[] _emptyArray;
  com.google.vr.sdk.proto.nano.Display$DisplayParams clone();
   <init>();
  com.google.vr.sdk.proto.nano.Display$DisplayParams clear();
  com.google.vr.sdk.proto.nano.Display$DisplayParams setXPpi(float);
  boolean hasXPpi();
  float[] dEPRECATEDGyroBias;
  float getYPpi();
  int cachedSize;
  com.google.vr.sdk.proto.nano.Display$DisplayParams mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  float getXPpi();
  com.google.vr.sdk.proto.nano.Display$DisplayParams setYPpi(float);
  boolean hasBottomBezelHeight();
  float getBottomBezelHeight();
  boolean hasYPpi();
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Preferences$DeveloperPrefs {
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  boolean getOpenglKhrDebugEnabled();
  int checkMotophoPatchModeOrThrow(int);
  boolean developerLoggingEnabled_;
  boolean dEPRECATEDHeadTrackingServiceEnabled_;
  com.google.vr.sdk.proto.nano.Preferences$DeveloperPrefs[] _emptyArray;
  int motophoPatchMode_;
  boolean captureEnabled_;
  boolean dEPRECATEDGvrPlatformLibraryEnabled_;
  boolean sensorLoggingEnabled_;
  int cachedSize;
  boolean performanceMonitoringEnabled_;
  com.google.vr.sdk.proto.nano.Preferences$DeveloperPrefs clear();
   <init>();
  boolean openglKhrDebugEnabled_;
  boolean forceUndistortedRendering_;
  com.google.vr.sdk.proto.nano.Preferences$DeveloperPrefs clone();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int bitField0_;
  boolean dEPRECATEDMotophoPatchEnabled_;
  boolean performanceLoggingActivated_;
  com.google.vr.sdk.proto.nano.Preferences$DeveloperPrefs mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  boolean performanceHudEnabled_;
  boolean frameTrackerEnabled_;
  com.google.vr.sdk.proto.nano.Preferences$SafetyCylinderParams safetyCylinderParams;
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Preferences$FrameReuseMonitoringParams {
  com.google.vr.sdk.proto.nano.Preferences$FrameReuseMonitoringParams clear();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  long frameWindowMs_;
  float failureProportion_;
  com.google.vr.sdk.proto.nano.Preferences$FrameReuseMonitoringParams[] _emptyArray;
  int bitField0_;
  int cachedSize;
  float recoveryProportion_;
  long fadeInDurationMs_;
  com.google.vr.sdk.proto.nano.Preferences$FrameReuseMonitoringParams clone();
   <init>();
  long promptUserToKillDelayMs_;
  long fadeOutDurationMs_;
  com.google.vr.sdk.proto.nano.Preferences$FrameReuseMonitoringParams mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Preferences$SafetyCylinderParams {
  com.google.vr.sdk.proto.nano.Preferences$SafetyCylinderParams clone();
  float anchorWarningDistance_;
  com.google.vr.sdk.proto.nano.Preferences$SafetyCylinderParams mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  boolean graphicsEnabled_;
  float[] outerFogColor;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  float collisionSphereRadius_;
  int bitField0_;
  float innerRadius_;
  float outerRadius_;
  int cachedSize;
  float enterEventRadius_;
   <init>();
  float[] innerFogColor;
  float exitEventRadius_;
  com.google.vr.sdk.proto.nano.Preferences$SafetyCylinderParams[] _emptyArray;
  com.google.vr.sdk.proto.nano.Preferences$SafetyCylinderParams clear();
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Preferences$UserPrefs {
  int controllerHandedness_;
  int bitField0_;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
  com.google.vr.sdk.proto.nano.Preferences$UserPrefs mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.vr.sdk.proto.nano.Preferences$UserPrefs[] _emptyArray;
   <init>();
  com.google.vr.sdk.proto.nano.Preferences$UserPrefs clone();
  com.google.vr.sdk.proto.nano.Preferences$UserPrefs clear();
  com.google.vr.sdk.proto.nano.Preferences$DeveloperPrefs developerPrefs;
  int cachedSize;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int checkHandednessOrThrow(int);
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.SdkConfiguration$SdkConfigurationRequest {
   <init>();
  int cachedSize;
  com.google.vr.sdk.proto.nano.SdkConfiguration$SdkConfigurationRequest clear();
  com.google.vr.sdk.proto.nano.SdkConfiguration$SdkConfigurationRequest[] _emptyArray;
  com.google.common.logging.nano.Vr$VREvent$SdkConfigurationParams requestedParams;
  com.google.vr.sdk.proto.nano.SdkConfiguration$SdkConfigurationRequest mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  java.lang.String sdkVersion;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.vr.sdk.proto.nano.SdkConfiguration$SdkConfigurationRequest clone();
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Session$HeadTrackingServiceState {
  com.google.vr.sdk.proto.nano.Session$HeadTrackingServiceState clone();
  int bitField0_;
  int cachedSize;
  com.google.vr.sdk.proto.nano.Session$HeadTrackingServiceState clear();
   <init>();
  boolean applyDisplayFromSensorRotation_;
  com.google.vr.sdk.proto.nano.Session$RecenteredState recenteredState;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.vr.sdk.proto.nano.Session$HeadTrackingServiceState mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.vr.sdk.proto.nano.Session$SafeRegionState safeRegionState;
  com.google.vr.sdk.proto.nano.Session$HeadTrackingServiceState[] _emptyArray;
  float defaultFloorHeight_;
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Session$Pose {
  float[] p;
  com.google.vr.sdk.proto.nano.Session$Pose mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.protobuf.nano.FieldArray unknownFieldData;
   <init>();
  com.google.vr.sdk.proto.nano.Session$Pose clone();
  com.google.vr.sdk.proto.nano.Session$Pose clear();
  float[] q;
  int cachedSize;
  com.google.vr.sdk.proto.nano.Session$Pose[] _emptyArray;
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Session$RecenteredState {
  com.google.vr.sdk.proto.nano.Session$RecenteredState[] _emptyArray;
  boolean storeUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano, int);
   <init>();
  com.google.vr.sdk.proto.nano.Session$Pose headRecenterPoseInTrackingSpace;
  int cachedSize;
  com.google.vr.sdk.proto.nano.Session$RecenteredState clear();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  boolean applyDisplayFromSensorRotation_;
  int bitField0_;
  com.google.vr.sdk.proto.nano.Session$RecenteredState mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.vr.sdk.proto.nano.Session$RecenteredState clone();
  int checkTypeOrThrow(int);
  long timestampNs_;
  int type_;
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Session$SafeRegionState {
  boolean inside_;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
  long counter_;
  com.google.vr.sdk.proto.nano.Session$SafeRegionState clone();
  com.google.vr.sdk.proto.nano.Session$SafeRegionState clear();
  int bitField0_;
  com.google.vr.sdk.proto.nano.Session$SafeRegionState[] _emptyArray;
   <init>();
  com.google.vr.sdk.proto.nano.Session$SafeRegionState mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
}

-keep,allowobfuscation class com.google.vr.sdk.proto.nano.Session$TrackerState {
  double[] magnetometerBias;
  com.google.vr.sdk.proto.nano.Session$TrackerState[] _emptyArray;
  long timeSinceEpochSeconds_;
  long magCalibrationTimeSinceEpochSeconds_;
   <init>();
  boolean trackingInVrcore_;
  double[] gyroscopeBias;
  float[] lensOffset;
  float[] rightLensOffset;
  com.google.vr.sdk.proto.nano.Session$TrackerState mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  com.google.vr.sdk.proto.nano.Session$TrackerState clone();
  double[] lastGyroscopeSample;
  com.google.vr.sdk.proto.nano.Session$TrackerState clear();
  double[] q;
  double magneticFieldStrength_;
  double lastGyroscopeTimestamp_;
  int bitField0_;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int cachedSize;
}

-keep,allowobfuscation class com.google.vr.vrcore.base.api.BuildUtils {
  java.lang.Boolean isDebug;
  boolean isDebugBuild(android.content.Context);
  boolean computeIsDebugBuild(android.content.Context);
}

-keep,allowobfuscation class com.google.vr.vrcore.base.api.ParcelableProto {
  boolean shouldSerializeEmptyInsteadOfNullBuffer();
   <init>(byte[]);
  boolean isEmpty();
  byte[] data;
  void readFromParcel(android.os.Parcel);
  int getSizeBytes();
   <init>();
  java.lang.String TAG;
  void setFromProto(com.google.protobuf.nano.MessageNano);
  void clear();
  void setData(byte[]);
  boolean shouldSerializeDataLength();
   <init>(android.os.Parcel);
   <init>(com.google.protobuf.nano.MessageNano);
}

-keep,allowobfuscation class com.google.vr.vrcore.base.api.SignatureUtils {
  android.content.pm.Signature VRCORE_DEBUG_SIGNATURE;
  android.content.pm.Signature VRCORE_RELEASE_SIGNATURE;
  android.content.pm.Signature KEYBOARD_RELEASE_SIGNATURE;
  android.content.pm.Signature KEYBOARD_DEBUG_SIGNATURE;
  android.content.pm.Signature BLAZE_DEBUG_SIGNATURE;
  android.content.pm.Signature signatureFromBase64(java.lang.String);
  android.content.pm.Signature ANDROID_DEBUG_SIGNATURE;
  boolean verifySignature(android.content.pm.PackageInfo, android.content.pm.Signature[]);
}

-keep,allowobfuscation class com.google.vr.vrcore.base.api.VrCoreNotAvailableException {
  int errorCode;
   <init>(int);
}

-keep,allowobfuscation class com.google.vr.vrcore.base.api.VrCoreUtils {
  int getVrCoreClientApiVersion(android.content.Context);
  java.lang.String getConnectionResultString(int);
  java.lang.String getVrCoreSdkLibraryVersion(android.content.Context);
  int checkVrCoreAvailability(android.content.Context);
  boolean isVrCorePackage(java.lang.String);
  int checkVrCoreAvailabilityImpl(android.content.Context);
  boolean verifyRemotePackageSignature(android.content.Context);
  java.lang.String TAG;
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.HeadTrackingServiceState {
   <init>(android.os.Parcel, com.google.vr.vrcore.common.api.HeadTrackingServiceState$1);
  byte[] getData();
   <init>(android.os.Parcel);
  int getSizeBytes();
  android.os.Parcelable$Creator CREATOR;
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.HeadTrackingServiceState$1 {
   <init>();
  com.google.vr.vrcore.common.api.HeadTrackingServiceState createFromParcel(android.os.Parcel);
  com.google.vr.vrcore.common.api.HeadTrackingServiceState[] newArray(int);
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.HeadTrackingState {
  byte[] getData();
   <init>();
   <init>(android.os.Parcel);
  boolean isEmpty();
  int getSizeBytes();
   <init>(byte[]);
  void readFromParcel(android.os.Parcel);
   <init>(android.os.Parcel, com.google.vr.vrcore.common.api.HeadTrackingState$1);
  android.os.Parcelable$Creator CREATOR;
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.HeadTrackingState$1 {
   <init>();
  com.google.vr.vrcore.common.api.HeadTrackingState createFromParcel(android.os.Parcel);
  com.google.vr.vrcore.common.api.HeadTrackingState[] newArray(int);
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.IDaydreamListener$Stub {
  void setLensOffset(float, float, float);
  void applyFade(int, long);
  void recenterHeadTracking();
   <init>();
  boolean routeToSuperOrEnforceInterface(int, android.os.Parcel, android.os.Parcel, int);
  int getTargetApiVersion();
  com.google.vr.vrcore.common.api.IDaydreamListener asInterface(android.os.IBinder);
  void resumeHeadTracking(com.google.vr.vrcore.common.api.HeadTrackingState);
  void applyColorfulFade(int, long, int);
  void invokeCloseAction();
  void deprecated_setLensOffsets(float, float, float, float);
  void attachInterface(android.os.IInterface, java.lang.String);
  com.google.vr.vrcore.common.api.HeadTrackingState requestStopTracking();
  void dumpDebugData();
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.IDaydreamListener$Stub$Proxy {
  android.os.Parcel obtainAndWriteInterfaceToken();
  android.os.Parcel transactAndReadException(int, android.os.Parcel);
  void transactOneway(int, android.os.Parcel);
   <init>(android.os.IBinder);
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.IDaydreamManager {
  void handleInsertionIntoHeadset(byte[]);
  int prepareVr(android.content.ComponentName, com.google.vr.vrcore.common.api.HeadTrackingState);
  void handleRemovalFromHeadset();
  boolean launchVrTransition(com.google.vr.vrcore.common.api.ITransitionCallbacks);
  int prepareVr2(android.content.ComponentName, int, android.app.PendingIntent, com.google.vr.vrcore.common.api.HeadTrackingState);
  boolean launchInVr(android.app.PendingIntent, android.content.ComponentName);
  boolean unregisterListener(android.content.ComponentName);
  boolean launchVrHome();
  void onExitingFromVr();
  void unregisterDaydreamIntent();
  void registerDaydreamIntent(android.app.PendingIntent);
  int prepareVr3(android.os.Bundle, com.google.vr.vrcore.common.api.HeadTrackingState);
  boolean registerListener(android.content.ComponentName, com.google.vr.vrcore.common.api.IDaydreamListener);
  boolean exitFromVr(android.app.PendingIntent);
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.IDaydreamManager$Stub {
  boolean registerListener(android.content.ComponentName, com.google.vr.vrcore.common.api.IDaydreamListener);
  com.google.vr.vrcore.common.api.IDaydreamManager asInterface(android.os.IBinder);
  boolean launchVrTransition(com.google.vr.vrcore.common.api.ITransitionCallbacks);
  int prepareVr(android.content.ComponentName, com.google.vr.vrcore.common.api.HeadTrackingState);
  void attachInterface(android.os.IInterface, java.lang.String);
  boolean launchInVr(android.app.PendingIntent, android.content.ComponentName);
  boolean routeToSuperOrEnforceInterface(int, android.os.Parcel, android.os.Parcel, int);
  boolean unregisterListener(android.content.ComponentName);
  int prepareVr2(android.content.ComponentName, int, android.app.PendingIntent, com.google.vr.vrcore.common.api.HeadTrackingState);
  boolean launchVrHome();
  int prepareVr3(android.os.Bundle, com.google.vr.vrcore.common.api.HeadTrackingState);
  boolean exitFromVr(android.app.PendingIntent);
  void onExitingFromVr();
  void launchVrTransition2(android.os.Bundle);
  void registerDaydreamIntent(android.app.PendingIntent);
  boolean deprecatedLaunchInVr(android.app.PendingIntent);
  void handleRemovalFromHeadset();
  void handleInsertionIntoHeadset(byte[]);
  void unregisterDaydreamIntent();
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.IDaydreamManager$Stub$Proxy {
  android.os.Parcel transactAndReadException(int, android.os.Parcel);
   <init>(android.os.IBinder);
  void transactOneway(int, android.os.Parcel);
  android.os.Parcel obtainAndWriteInterfaceToken();
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.ITransitionCallbacks {
  void onTransitionComplete();
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.ITransitionCallbacks$Stub {
  void attachInterface(android.os.IInterface, java.lang.String);
  com.google.vr.vrcore.common.api.ITransitionCallbacks asInterface(android.os.IBinder);
  boolean routeToSuperOrEnforceInterface(int, android.os.Parcel, android.os.Parcel, int);
   <init>();
  void onTransitionComplete();
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.ITransitionCallbacks$Stub$Proxy {
  android.os.Parcel obtainAndWriteInterfaceToken();
  void transactOneway(int, android.os.Parcel);
   <init>(android.os.IBinder);
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.IVrCoreSdkService {
  boolean setClientOptions(android.content.ComponentName, android.os.Bundle);
  boolean initialize(int);
  com.google.vr.vrcore.logging.api.IVrCoreLoggingService getLoggingService();
  com.google.vr.vrcore.common.api.IDaydreamManager getDaydreamManager();
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.IVrCoreSdkService$Stub {
  com.google.vr.vrcore.common.api.IVrCoreSdkService asInterface(android.os.IBinder);
  boolean initialize(int);
  com.google.vr.vrcore.common.api.IDaydreamManager getDaydreamManager();
  com.google.vr.vrcore.logging.api.IVrCoreLoggingService getLoggingService();
  void attachInterface(android.os.IInterface, java.lang.String);
  boolean routeToSuperOrEnforceInterface(int, android.os.Parcel, android.os.Parcel, int);
  boolean setClientOptions(android.content.ComponentName, android.os.Bundle);
}

-keep,allowobfuscation class com.google.vr.vrcore.common.api.IVrCoreSdkService$Stub$Proxy {
  android.os.Parcel transactAndReadException(int, android.os.Parcel);
  android.os.Parcel obtainAndWriteInterfaceToken();
   <init>(android.os.IBinder);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerAccelEvent {
  int getByteSize();
   <init>();
  void writeToParcel(android.os.Parcel, int);
  android.os.Parcelable$Creator CREATOR;
  int controllerId;
  float y;
  float x;
  void readFromParcel(android.os.Parcel);
  float z;
  long timestampNanos;
   <init>(android.os.Parcel);
  void copyFrom(com.google.vr.vrcore.controller.api.ControllerEvent);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerAccelEvent$1 {
   <init>();
  com.google.vr.vrcore.controller.api.ControllerAccelEvent createFromParcel(android.os.Parcel);
  com.google.vr.vrcore.controller.api.ControllerAccelEvent[] newArray(int);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerBatteryEvent {
   <init>();
   <init>(android.os.Parcel);
  void writeToParcel(android.os.Parcel, int);
  void copyFrom(com.google.vr.vrcore.controller.api.ControllerEvent);
  void readFromParcel(android.os.Parcel);
  android.os.Parcelable$Creator CREATOR;
  long timestampNanos;
  int getByteSize();
  int controllerId;
  boolean charging;
  int batteryLevelBucket;
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerBatteryEvent$1 {
   <init>();
  com.google.vr.vrcore.controller.api.ControllerBatteryEvent createFromParcel(android.os.Parcel);
  com.google.vr.vrcore.controller.api.ControllerBatteryEvent[] newArray(int);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerButtonEvent {
  int controllerId;
  long timestampNanos;
  boolean down;
  int getByteSize();
  int[] ALL_BUTTONS;
   <init>(android.os.Parcel);
  void writeToParcel(android.os.Parcel, int);
   <init>();
  void readFromParcel(android.os.Parcel);
  int button;
  android.os.Parcelable$Creator CREATOR;
  void copyFrom(com.google.vr.vrcore.controller.api.ControllerEvent);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerButtonEvent$1 {
   <init>();
  com.google.vr.vrcore.controller.api.ControllerButtonEvent createFromParcel(android.os.Parcel);
  com.google.vr.vrcore.controller.api.ControllerButtonEvent[] newArray(int);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerEvent {
   <init>();
  void copyFrom(com.google.vr.vrcore.controller.api.ControllerEvent);
  int controllerId;
  void writeToParcel(android.os.Parcel, int);
  void readFromParcel(android.os.Parcel);
  long timestampNanos;
  int getByteSize();
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerEventPacket {
  void readFromParcel(android.os.Parcel);
  java.lang.Object poolLock;
  com.google.vr.vrcore.controller.api.ControllerButtonEvent[] buttonEvents;
  void recycle();
  com.google.vr.vrcore.controller.api.ControllerOrientationEvent getOrientationEvent(int);
  com.google.vr.vrcore.controller.api.ControllerTouchEvent getTouchEvent(int);
  int touchEventCount;
  void clear();
  int buttonEventCount;
  int getGyroEventCount();
  int getAccelEventCount();
  void setEventsControllerIndex(int);
  void writeToParcel(android.os.Parcel, int);
  int calculateParcelByteLength();
  com.google.vr.vrcore.controller.api.ControllerGyroEvent[] gyroEvents;
  com.google.vr.vrcore.controller.api.ControllerOrientationEvent[] orientationEvents;
  int gyroEventCount;
  com.google.vr.vrcore.controller.api.ControllerTouchEvent[] touchEvents;
  int orientationEventCount;
  com.google.vr.vrcore.controller.api.ControllerAccelEvent[] accelEvents;
  java.util.ArrayDeque pool;
  int getTouchEventCount();
  android.os.Parcelable$Creator CREATOR;
   <init>();
  com.google.vr.vrcore.controller.api.ControllerGyroEvent getGyroEvent(int);
  void setControllerIndex(int, int, com.google.vr.vrcore.controller.api.ControllerEvent[]);
  int accelEventCount;
  void copyFrom(com.google.vr.vrcore.controller.api.ControllerEventPacket);
  int getButtonEventCount();
  com.google.vr.vrcore.controller.api.ControllerButtonEvent getButtonEvent(int);
  com.google.vr.vrcore.controller.api.ControllerEventPacket obtain();
  com.google.vr.vrcore.controller.api.ControllerAccelEvent getAccelEvent(int);
  void checkIsValidEventCount(int);
  int getOrientationEventCount();
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerEventPacket$1 {
  com.google.vr.vrcore.controller.api.ControllerEventPacket[] newArray(int);
   <init>();
  com.google.vr.vrcore.controller.api.ControllerEventPacket createFromParcel(android.os.Parcel);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerEventPacket2 {
  com.google.vr.vrcore.controller.api.ControllerEventPacket2 obtain();
  void setControllerIndex(int, int, com.google.vr.vrcore.controller.api.ControllerEvent[]);
   <init>();
  void readFromParcel(android.os.Parcel);
  int getPositionEventCount();
  android.os.Parcelable$Creator CREATOR;
  java.lang.Object poolLock;
  com.google.vr.vrcore.controller.api.ControllerPositionEvent getPositionEvent(int);
  boolean hasBatteryEvent;
  long getSystemTimeMillis();
  boolean hasBatteryEvent();
  com.google.vr.vrcore.controller.api.ControllerPositionEvent[] positionEvents;
  int positionEventCount;
  void recycle();
  int calculateParcelByteLength();
  void setEventsControllerIndex(int);
  com.google.vr.vrcore.controller.api.ControllerBatteryEvent batteryEvent;
  void checkIsValidEventCount(int);
  java.util.ArrayDeque pool;
  long timestampMillis;
  long getTimestampMillis();
  com.google.vr.vrcore.controller.api.ControllerBatteryEvent getBatteryEvent();
  void clear();
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerEventPacket2$1 {
  com.google.vr.vrcore.controller.api.ControllerEventPacket2 createFromParcel(android.os.Parcel);
  com.google.vr.vrcore.controller.api.ControllerEventPacket2[] newArray(int);
   <init>();
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerGyroEvent {
  void readFromParcel(android.os.Parcel);
  int getByteSize();
  long timestampNanos;
  void writeToParcel(android.os.Parcel, int);
  void copyFrom(com.google.vr.vrcore.controller.api.ControllerEvent);
  float x;
  int controllerId;
  float y;
   <init>();
  float z;
   <init>(android.os.Parcel);
  android.os.Parcelable$Creator CREATOR;
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerGyroEvent$1 {
   <init>();
  com.google.vr.vrcore.controller.api.ControllerGyroEvent createFromParcel(android.os.Parcel);
  com.google.vr.vrcore.controller.api.ControllerGyroEvent[] newArray(int);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerInitResults {
  java.lang.String toString(int);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerListenerOptions {
  boolean enableGestures;
  boolean enableOrientation;
   <init>(android.os.Parcel);
  boolean enableAccel;
  android.os.Parcelable$Creator CREATOR;
   <init>(int);
  boolean enableGyro;
   <init>();
  boolean enableTouch;
  void readFromParcel(android.os.Parcel);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerListenerOptions$1 {
  com.google.vr.vrcore.controller.api.ControllerListenerOptions createFromParcel(android.os.Parcel);
   <init>();
  com.google.vr.vrcore.controller.api.ControllerListenerOptions[] newArray(int);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerOrientationEvent {
  int getByteSize();
  void readFromParcel(android.os.Parcel);
   <init>(android.os.Parcel);
  float qy;
  float qx;
  float qw;
  android.os.Parcelable$Creator CREATOR;
  void copyFrom(com.google.vr.vrcore.controller.api.ControllerEvent);
  int controllerId;
  void writeToParcel(android.os.Parcel, int);
  long timestampNanos;
  float qz;
   <init>();
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerOrientationEvent$1 {
  com.google.vr.vrcore.controller.api.ControllerOrientationEvent[] newArray(int);
  com.google.vr.vrcore.controller.api.ControllerOrientationEvent createFromParcel(android.os.Parcel);
   <init>();
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerPositionEvent {
  void copyFrom(com.google.vr.vrcore.controller.api.ControllerEvent);
   <init>(android.os.Parcel);
  float x;
  int controllerId;
  void readFromParcel(android.os.Parcel);
  void writeToParcel(android.os.Parcel, int);
  long timestampNanos;
  android.os.Parcelable$Creator CREATOR;
   <init>();
  float z;
  float y;
  int getByteSize();
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerPositionEvent$1 {
  com.google.vr.vrcore.controller.api.ControllerPositionEvent[] newArray(int);
   <init>();
  com.google.vr.vrcore.controller.api.ControllerPositionEvent createFromParcel(android.os.Parcel);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerRequest {
   <init>();
   <init>(android.os.Parcel);
  void setFromProto(com.google.protobuf.nano.MessageNano);
  android.os.Parcelable$Creator CREATOR;
  com.google.protobuf.nano.MessageNano parseToProto(java.lang.Class);
  void checkArgument(boolean, java.lang.String, java.lang.Object[]);
  byte[] getData();
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerRequest$1 {
  com.google.vr.vrcore.controller.api.ControllerRequest[] newArray(int);
   <init>();
  com.google.vr.vrcore.controller.api.ControllerRequest createFromParcel(android.os.Parcel);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerTouchEvent {
  android.os.Parcelable$Creator CREATOR;
  int action;
  float x;
  float y;
  int getByteSize();
  int fingerId;
  void copyFrom(com.google.vr.vrcore.controller.api.ControllerEvent);
  int controllerId;
   <init>();
  long timestampNanos;
  void readFromParcel(android.os.Parcel);
  void writeToParcel(android.os.Parcel, int);
   <init>(android.os.Parcel);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.ControllerTouchEvent$1 {
   <init>();
  com.google.vr.vrcore.controller.api.ControllerTouchEvent createFromParcel(android.os.Parcel);
  com.google.vr.vrcore.controller.api.ControllerTouchEvent[] newArray(int);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.IControllerListener$Stub {
  int getApiVersion();
  boolean routeToSuperOrEnforceInterface(int, android.os.Parcel, android.os.Parcel, int);
  void onControllerEventPacket(com.google.vr.vrcore.controller.api.ControllerEventPacket);
  void attachInterface(android.os.IInterface, java.lang.String);
  void onControllerRecentered(com.google.vr.vrcore.controller.api.ControllerOrientationEvent);
  com.google.vr.vrcore.controller.api.ControllerListenerOptions getOptions();
  void onControllerStateChanged(int, int);
  void onControllerEventPacket2(com.google.vr.vrcore.controller.api.ControllerEventPacket2);
  com.google.vr.vrcore.controller.api.IControllerListener asInterface(android.os.IBinder);
   <init>();
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.IControllerListener$Stub$Proxy {
   <init>(android.os.IBinder);
  android.os.Parcel transactAndReadException(int, android.os.Parcel);
  void transactOneway(int, android.os.Parcel);
  android.os.Parcel obtainAndWriteInterfaceToken();
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.IControllerService {
  boolean unregisterServiceListener(com.google.vr.vrcore.controller.api.IControllerServiceListener);
  boolean registerServiceListener(com.google.vr.vrcore.controller.api.IControllerServiceListener);
  void request(int, com.google.vr.vrcore.controller.api.ControllerRequest);
  int initialize(int);
  int getNumberOfControllers();
  boolean registerListener(int, java.lang.String, com.google.vr.vrcore.controller.api.IControllerListener);
  boolean unregisterListener(java.lang.String);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.IControllerService$Stub {
  int getNumberOfControllers();
  void onHeadTrackingRecentered(float[], float[]);
  int initialize(int);
  boolean registerListener(int, java.lang.String, com.google.vr.vrcore.controller.api.IControllerListener);
  boolean unregisterListener(java.lang.String);
  com.google.vr.vrcore.controller.api.IControllerService asInterface(android.os.IBinder);
  boolean unregisterServiceListener(com.google.vr.vrcore.controller.api.IControllerServiceListener);
  void request(int, com.google.vr.vrcore.controller.api.ControllerRequest);
  boolean routeToSuperOrEnforceInterface(int, android.os.Parcel, android.os.Parcel, int);
  boolean registerServiceListener(com.google.vr.vrcore.controller.api.IControllerServiceListener);
  void attachInterface(android.os.IInterface, java.lang.String);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.IControllerService$Stub$Proxy {
  android.os.Parcel obtainAndWriteInterfaceToken();
  void transactAndReadExceptionReturnVoid(int, android.os.Parcel);
  android.os.Parcel transactAndReadException(int, android.os.Parcel);
   <init>(android.os.IBinder);
  void transactOneway(int, android.os.Parcel);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.IControllerServiceListener$Stub {
   <init>();
  void onControllerServiceEvent(int);
  void attachInterface(android.os.IInterface, java.lang.String);
  int getApiVersion();
  boolean routeToSuperOrEnforceInterface(int, android.os.Parcel, android.os.Parcel, int);
  com.google.vr.vrcore.controller.api.IControllerServiceListener asInterface(android.os.IBinder);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.IControllerServiceListener$Stub$Proxy {
  android.os.Parcel obtainAndWriteInterfaceToken();
   <init>(android.os.IBinder);
  android.os.Parcel transactAndReadException(int, android.os.Parcel);
  void transactOneway(int, android.os.Parcel);
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.nano.Proto$Request {
  com.google.vr.vrcore.controller.api.nano.Proto$Request clear();
  com.google.vr.vrcore.controller.api.nano.Proto$Request[] _emptyArray;
   <init>();
  com.google.vr.vrcore.controller.api.nano.Proto$Request clone();
  com.google.protobuf.nano.FieldArray unknownFieldData;
  com.google.vr.vrcore.controller.api.nano.Proto$Request mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int cachedSize;
  com.google.vr.vrcore.controller.api.nano.Proto$Request$Vibration vibration;
}

-keep,allowobfuscation class com.google.vr.vrcore.controller.api.nano.Proto$Request$Vibration {
  int cachedSize;
  int volumePercentage_;
  int getFrequencyHz();
  com.google.vr.vrcore.controller.api.nano.Proto$Request$Vibration setDurationMs(int);
  int frequencyHz_;
  int bitField0_;
  com.google.vr.vrcore.controller.api.nano.Proto$Request$Vibration clone();
  com.google.vr.vrcore.controller.api.nano.Proto$Request$Vibration clear();
   <init>();
  com.google.vr.vrcore.controller.api.nano.Proto$Request$Vibration mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int durationMs_;
  com.google.vr.vrcore.controller.api.nano.Proto$Request$Vibration setFrequencyHz(int);
  com.google.protobuf.nano.FieldArray unknownFieldData;
  int getVolumePercentage();
  com.google.vr.vrcore.controller.api.nano.Proto$Request$Vibration[] _emptyArray;
  int getDurationMs();
  com.google.vr.vrcore.controller.api.nano.Proto$Request$Vibration setVolumePercentage(int);
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IGvrLayout {
  boolean enableAsyncReprojection(int);
  void onBackPressed();
  void onPause();
  void setStereoModeEnabled(boolean);
  com.google.vr.vrcore.library.api.IObjectWrapper getRootView();
  com.google.vr.vrcore.library.api.IGvrUiLayout getUiLayout();
  long getNativeGvrContext();
  void onResume();
  boolean enableCardboardTriggerEmulation(com.google.vr.vrcore.library.api.IObjectWrapper);
  boolean setOnDonNotNeededListener(com.google.vr.vrcore.library.api.IObjectWrapper);
  void shutdown();
  void setReentryIntent(com.google.vr.vrcore.library.api.IObjectWrapper);
  void setPresentationView(com.google.vr.vrcore.library.api.IObjectWrapper);
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IGvrLayout$Stub {
  void onResume();
  com.google.vr.vrcore.library.api.IObjectWrapper getRootView();
  void attachInterface(android.os.IInterface, java.lang.String);
  void setReentryIntent(com.google.vr.vrcore.library.api.IObjectWrapper);
   <init>();
  com.google.vr.vrcore.library.api.IGvrUiLayout getUiLayout();
  boolean enableCardboardTriggerEmulation(com.google.vr.vrcore.library.api.IObjectWrapper);
  boolean setOnDonNotNeededListener(com.google.vr.vrcore.library.api.IObjectWrapper);
  void setPresentationView(com.google.vr.vrcore.library.api.IObjectWrapper);
  com.google.vr.vrcore.library.api.IGvrLayout asInterface(android.os.IBinder);
  void onPause();
  long getNativeGvrContext();
  void shutdown();
  boolean enableAsyncReprojection(int);
  void setStereoModeEnabled(boolean);
  boolean routeToSuperOrEnforceInterface(int, android.os.Parcel, android.os.Parcel, int);
  void onBackPressed();
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IGvrLayout$Stub$Proxy {
  android.os.Parcel obtainAndWriteInterfaceToken();
  void transactAndReadExceptionReturnVoid(int, android.os.Parcel);
  android.os.Parcel transactAndReadException(int, android.os.Parcel);
   <init>(android.os.IBinder);
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IGvrUiLayout {
  void setEnabled(boolean);
  void setSettingsButtonListener(com.google.vr.vrcore.library.api.IObjectWrapper);
  void setTransitionViewEnabled(boolean);
  void setSettingsButtonEnabled(boolean);
  void setViewerName(java.lang.String);
  void setTransitionViewListener(com.google.vr.vrcore.library.api.IObjectWrapper);
  void setCloseButtonListener(com.google.vr.vrcore.library.api.IObjectWrapper);
  boolean isEnabled();
  com.google.vr.vrcore.library.api.IObjectWrapper getRootView();
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IGvrUiLayout$Stub {
  void setTransitionViewListener(com.google.vr.vrcore.library.api.IObjectWrapper);
  com.google.vr.vrcore.library.api.IGvrUiLayout asInterface(android.os.IBinder);
  com.google.vr.vrcore.library.api.IObjectWrapper getRootView();
  void setSettingsButtonEnabled(boolean);
  void setSettingsButtonListener(com.google.vr.vrcore.library.api.IObjectWrapper);
  void attachInterface(android.os.IInterface, java.lang.String);
  void setEnabled(boolean);
  void setCloseButtonListener(com.google.vr.vrcore.library.api.IObjectWrapper);
  boolean isEnabled();
  void setTransitionViewEnabled(boolean);
   <init>();
  void setViewerName(java.lang.String);
  boolean routeToSuperOrEnforceInterface(int, android.os.Parcel, android.os.Parcel, int);
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IGvrUiLayout$Stub$Proxy {
  void transactAndReadExceptionReturnVoid(int, android.os.Parcel);
  android.os.Parcel obtainAndWriteInterfaceToken();
  android.os.Parcel transactAndReadException(int, android.os.Parcel);
   <init>(android.os.IBinder);
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IObjectWrapper {
  android.os.IBinder asBinder();
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IObjectWrapper$Stub {
  void attachInterface(android.os.IInterface, java.lang.String);
   <init>();
  com.google.vr.vrcore.library.api.IObjectWrapper asInterface(android.os.IBinder);
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IObjectWrapper$Stub$Proxy {
   <init>(android.os.IBinder);
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IVrCreator {
  com.google.vr.vrcore.library.api.IVrNativeLibraryLoader newNativeLibraryLoader(com.google.vr.vrcore.library.api.IObjectWrapper, com.google.vr.vrcore.library.api.IObjectWrapper);
  com.google.vr.vrcore.library.api.IGvrLayout newGvrLayout(com.google.vr.vrcore.library.api.IObjectWrapper, com.google.vr.vrcore.library.api.IObjectWrapper);
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IVrCreator$Stub {
  com.google.vr.vrcore.library.api.IVrCreator asInterface(android.os.IBinder);
  com.google.vr.vrcore.library.api.IVrNativeLibraryLoader DEPRECATED_newNativeLibraryLoader(com.google.vr.vrcore.library.api.IObjectWrapper);
  com.google.vr.vrcore.library.api.IGvrLayout newGvrLayout(com.google.vr.vrcore.library.api.IObjectWrapper, com.google.vr.vrcore.library.api.IObjectWrapper);
  void attachInterface(android.os.IInterface, java.lang.String);
  boolean routeToSuperOrEnforceInterface(int, android.os.Parcel, android.os.Parcel, int);
  com.google.vr.vrcore.library.api.IVrNativeLibraryLoader newNativeLibraryLoader(com.google.vr.vrcore.library.api.IObjectWrapper, com.google.vr.vrcore.library.api.IObjectWrapper);
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IVrCreator$Stub$Proxy {
   <init>(android.os.IBinder);
  android.os.Parcel transactAndReadException(int, android.os.Parcel);
  android.os.Parcel obtainAndWriteInterfaceToken();
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IVrNativeLibraryLoader {
  long loadNativeGvrLibrary(int, int, int);
  long loadNativeGvrLibraryWithMinVersion(java.lang.String, java.lang.String);
  long loadNativeDlsymMethod();
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IVrNativeLibraryLoader$Stub {
  void closeNativeGvrLibrary(long);
  long loadNativeGvrLibraryWithMinVersion(java.lang.String, java.lang.String);
  long loadNativeDlsymMethod();
  com.google.vr.vrcore.library.api.IVrNativeLibraryLoader asInterface(android.os.IBinder);
  long loadNativeGvrLibrary(int, int, int);
  void attachInterface(android.os.IInterface, java.lang.String);
  boolean routeToSuperOrEnforceInterface(int, android.os.Parcel, android.os.Parcel, int);
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.IVrNativeLibraryLoader$Stub$Proxy {
  android.os.Parcel obtainAndWriteInterfaceToken();
  void transactAndReadExceptionReturnVoid(int, android.os.Parcel);
  android.os.Parcel transactAndReadException(int, android.os.Parcel);
   <init>(android.os.IBinder);
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.ObjectWrapper {
  java.lang.Object wrappedObject;
  java.lang.Object unwrap(com.google.vr.vrcore.library.api.IObjectWrapper, java.lang.Class);
   <init>(java.lang.Object);
  com.google.vr.vrcore.library.api.IObjectWrapper wrap(java.lang.Object);
}

-keep,allowobfuscation class com.google.vr.vrcore.library.api.VrCoreLoader {
  java.lang.String TAG;
  int getRemoteContextClientApiVersion(android.content.Context);
  com.google.vr.vrcore.library.api.IVrCreator getRemoteCreator(android.content.Context);
  com.google.vr.vrcore.library.api.IVrCreator sCreator;
  int sRemoteContextApiVersion;
  android.content.Context sRemoteContext;
  android.content.Context getRemoteContext(android.content.Context);
  android.os.IBinder newBinderInstance(java.lang.ClassLoader, java.lang.String);
}

-keep,allowobfuscation class com.google.vr.vrcore.logging.api.IVrCoreLoggingService {
  void log(com.google.vr.vrcore.logging.api.VREventParcelable);
}

-keep,allowobfuscation class com.google.vr.vrcore.logging.api.IVrCoreLoggingService$Stub {
  void logBatched(com.google.vr.vrcore.logging.api.VREventParcelable[]);
  void attachInterface(android.os.IInterface, java.lang.String);
  com.google.vr.vrcore.logging.api.IVrCoreLoggingService asInterface(android.os.IBinder);
  void log(com.google.vr.vrcore.logging.api.VREventParcelable);
  boolean routeToSuperOrEnforceInterface(int, android.os.Parcel, android.os.Parcel, int);
}

-keep,allowobfuscation class com.google.vr.vrcore.logging.api.IVrCoreLoggingService$Stub$Proxy {
  void transactOneway(int, android.os.Parcel);
  android.os.Parcel obtainAndWriteInterfaceToken();
   <init>(android.os.IBinder);
}

-keep,allowobfuscation class com.google.vr.vrcore.logging.api.VREventParcelable {
   <init>(int, com.google.common.logging.nano.Vr$VREvent);
  com.google.common.logging.nano.Vr$VREvent event;
  int eventCode;
   <init>(android.os.Parcel);
  java.lang.String TAG;
  android.os.Parcelable$Creator CREATOR;
   <init>(android.os.Parcel, com.google.vr.vrcore.logging.api.VREventParcelable$1);
}

-keep,allowobfuscation class com.google.vr.vrcore.logging.api.VREventParcelable$1 {
  com.google.vr.vrcore.logging.api.VREventParcelable[] newArray(int);
  com.google.vr.vrcore.logging.api.VREventParcelable createFromParcel(android.os.Parcel);
   <init>();
}

-keep,allowobfuscation class com.google.vr.vrcore.performance.api.IPerformanceService {
  void addTrigger(android.content.ComponentName, com.google.vr.vrcore.performance.api.IThrottlingTriggerCallback, long, float, int);
  long getCurrentEstimatedThrottleWarningTime();
  void getCurrentThrottlingRelativeTemperature(com.google.vr.vrcore.performance.api.TimestampedTemperature);
  void removeAllTriggers(android.content.ComponentName);
}

-keep,allowobfuscation class com.google.vr.vrcore.performance.api.IPerformanceService$Stub {
  void getCurrentThrottlingRelativeTemperature(com.google.vr.vrcore.performance.api.TimestampedTemperature);
  com.google.vr.vrcore.performance.api.IPerformanceService asInterface(android.os.IBinder);
  void addTrigger(android.content.ComponentName, com.google.vr.vrcore.performance.api.IThrottlingTriggerCallback, long, float, int);
  long getCurrentEstimatedThrottleWarningTime();
  boolean routeToSuperOrEnforceInterface(int, android.os.Parcel, android.os.Parcel, int);
  void removeAllTriggers(android.content.ComponentName);
  void attachInterface(android.os.IInterface, java.lang.String);
}

-keep,allowobfuscation class com.google.vr.vrcore.performance.api.IPerformanceService$Stub$Proxy {
  void transactAndReadExceptionReturnVoid(int, android.os.Parcel);
   <init>(android.os.IBinder);
  android.os.Parcel obtainAndWriteInterfaceToken();
  android.os.Parcel transactAndReadException(int, android.os.Parcel);
}

-keep,allowobfuscation class com.google.vr.vrcore.performance.api.IThrottlingTriggerCallback$Stub {
  void onTriggerActivated(float, long);
   <init>();
  com.google.vr.vrcore.performance.api.IThrottlingTriggerCallback asInterface(android.os.IBinder);
  boolean routeToSuperOrEnforceInterface(int, android.os.Parcel, android.os.Parcel, int);
  void attachInterface(android.os.IInterface, java.lang.String);
}

-keep,allowobfuscation class com.google.vr.vrcore.performance.api.IThrottlingTriggerCallback$Stub$Proxy {
  void transactOneway(int, android.os.Parcel);
  android.os.Parcel obtainAndWriteInterfaceToken();
   <init>(android.os.IBinder);
}

-keep,allowobfuscation class com.google.vr.vrcore.performance.api.TimestampedTemperature {
   <init>();
  float temperature;
  void set(long, float);
  void readFromParcel(android.os.Parcel);
  long timestamp;
   <init>(android.os.Parcel);
  android.os.Parcelable$Creator CREATOR;
}

-keep,allowobfuscation class com.google.vr.vrcore.performance.api.TimestampedTemperature$1 {
  com.google.vr.vrcore.performance.api.TimestampedTemperature createFromParcel(android.os.Parcel);
  com.google.vr.vrcore.performance.api.TimestampedTemperature[] newArray(int);
   <init>();
}

-keep,allowobfuscation class com.google.vrtoolkit.cardboard.ScreenOnFlagHelper {
  android.hardware.Sensor sensor;
  boolean screenAlwaysOn;
  android.hardware.SensorManager sensorManager;
  android.app.Activity activity;
  com.google.vrtoolkit.cardboard.SensorReadingStats sensorStats;
  long lastSampleTimestamp;
  void setKeepScreenOnFlag(boolean);
  void updateFlag();
  boolean isFlagSet;
}

-keep,allowobfuscation class com.google.vrtoolkit.cardboard.SensorReadingStats {
  void reset();
  boolean statsAvailable();
  int writePos;
  float[][] sampleBuf;
  int numAxes;
  int samplesAdded;
   <init>(int, int);
  void addSample(float[]);
  float getMaxAbsoluteDeviation();
  int sampleBufSize;
  float getAverage(int);
  java.lang.String TAG;
  float getMaxAbsoluteDeviation(int);
}

-keep,allowobfuscation class logs.proto.wireless.performance.mobile.nano.MemoryMetric$AndroidMemoryStats {
  java.lang.Integer nativePssKb;
   <init>();
  java.lang.Integer dalvikPssKb;
  java.lang.Integer totalSwappablePssKb;
  java.lang.Integer summaryCodeKb;
  java.lang.Integer totalMemoryMb;
  java.lang.Integer summarySystemKb;
  com.google.protobuf.nano.FieldArray unknownFieldData;
  java.lang.Integer otherGraphicsPssKb;
  java.lang.Integer availableMemoryKb;
  java.lang.Integer nativePrivateDirtyKb;
  java.lang.Integer summaryPrivateOtherKb;
  java.lang.Integer summaryStackKb;
  java.lang.Integer totalPrivateCleanKb;
  java.lang.Integer totalSharedDirtyKb;
  logs.proto.wireless.performance.mobile.nano.MemoryMetric$AndroidMemoryStats clear();
  logs.proto.wireless.performance.mobile.nano.MemoryMetric$AndroidMemoryStats clone();
  logs.proto.wireless.performance.mobile.nano.MemoryMetric$AndroidMemoryStats mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano);
  int cachedSize;
  java.lang.Integer otherPssKb;
  java.lang.Integer summaryGraphicsKb;
  java.lang.Integer dalvikPrivateDirtyKb;
  java.lang.Integer summaryJavaHeapKb;
  java.lang.Integer otherPrivateDirtyKb;
}

-keep,allowobfuscation class org.apache.http.conn.ssl.AbstractVerifier {
   <init>();
}

-keep,allowobfuscation class org.apache.http.conn.ssl.SSLSocketFactory {
  org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER;
  org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;
  org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER;
}

-keep,allowobfuscation class org.chromium.base.ApiCompatibilityUtils {
  int checkPermission(android.content.Context, java.lang.String, int, int);
}

-keep,allowobfuscation class org.chromium.base.ApplicationStatus {
  android.app.Activity getLastTrackedFocusedActivity();
  void registerStateListenerForAllActivities(org.chromium.base.ApplicationStatus$ActivityStateListener);
  int getStateForActivity(android.app.Activity);
  void registerStateListenerForActivity(org.chromium.base.ApplicationStatus$ActivityStateListener, android.app.Activity);
}

-keep,allowobfuscation class org.chromium.base.ContextUtils {
  android.content.Context getApplicationContext();
  android.content.SharedPreferences getAppSharedPreferences();
}

-keep,allowobfuscation class org.chromium.base.Log {
  void i(java.lang.String, java.lang.String, java.lang.Object[]);
  void e(java.lang.String, java.lang.String, java.lang.Object[]);
}

-keep,allowobfuscation class org.chromium.base.PackageUtils {
  int getPackageVersion(android.content.Context, java.lang.String);
}

-keep,allowobfuscation class org.chromium.base.StrictModeContext {
  void close();
  org.chromium.base.StrictModeContext allowDiskWrites();
}

-keep,allowobfuscation class org.chromium.base.ThreadUtils {
  void assertOnUiThread();
}

-keep,allowobfuscation class org.chromium.base.TraceEvent {
  void close();
  org.chromium.base.TraceEvent scoped(java.lang.String);
}

-keep,allowobfuscation class org.chromium.base.library_loader.LibraryLoader {
  boolean isInitialized();
  org.chromium.base.library_loader.LibraryLoader getInstance();
}

-keep,allowobfuscation class org.chromium.base.metrics.CachedMetrics$BooleanHistogramSample {
  void record(boolean);
   <init>(java.lang.String);
}

-keep,allowobfuscation class org.chromium.base.metrics.RecordUserAction {
  void record(java.lang.String);
}

-keep,allowobfuscation class org.chromium.base.task.AsyncTask {
  java.util.concurrent.Executor THREAD_POOL_EXECUTOR;
   <init>();
}

-keep,allowobfuscation class org.chromium.base.task.PostTask {
  java.lang.Object runSynchronously(org.chromium.base.task.TaskTraits, java.util.concurrent.Callable);
  void runSynchronously(org.chromium.base.task.TaskTraits, java.lang.Runnable);
  void postTask(org.chromium.base.task.TaskTraits, java.lang.Runnable);
}

-keep,allowobfuscation class org.chromium.build.BuildHooksAndroid {
  boolean isEnabledImpl();
  void initCustomResourcesImpl(android.content.Context);
  android.content.Context createConfigurationContextImpl(android.content.Context);
  void maybeRecordResourceMetricsImpl();
  android.content.res.Resources getResourcesImpl(android.content.Context);
  org.chromium.build.BuildHooksAndroid get();
  android.content.res.Resources$Theme getThemeImpl(android.content.Context);
  int getIdentifierImpl(android.content.res.Resources, java.lang.String, java.lang.String, java.lang.String);
  org.chromium.build.BuildHooksAndroid sInstance;
  android.content.res.AssetManager getAssetsImpl(android.content.Context);
  org.chromium.build.BuildHooksAndroid constructBuildHooksAndroidImpl();
  void setThemeImpl(android.content.Context, int);
   <init>();
}

-keep,allowobfuscation class org.chromium.chrome.R$anim {
  int stay_hidden;
}

-keep,allowobfuscation class org.chromium.chrome.R$id {
  int new_tab_button;
  int recent_tabs_menu_id;
  int vr_overlay_view;
  int help_id;
  int open_history_menu_id;
  int share_menu_id;
  int downloads_menu_id;
  int all_bookmarks_menu_id;
  int preferences_id;
}

-keep,allowobfuscation class org.chromium.chrome.R$layout {
  int modal_dialog_view;
}

-keep,allowobfuscation class org.chromium.chrome.R$string {
  int no_thanks;
}

-keep,allowobfuscation class org.chromium.chrome.R$style {
  int Theme_Chromium_ModalDialog;
}

-keep,allowobfuscation class org.chromium.chrome.browser.ApplicationLifetime {
  void terminate(boolean);
}

-keep,allowobfuscation class org.chromium.chrome.browser.ChromeActivity {
  boolean onMenuOrKeyboardAction(int, boolean);
  org.chromium.chrome.browser.toolbar.ToolbarManager getToolbarManager();
  boolean isInOverviewMode();
  void onExitVr();
  boolean hasWindowFocus();
  void recreate();
  org.chromium.chrome.browser.tabmodel.TabCreatorManager$TabCreator getTabCreator(boolean);
  boolean isActivityFinishingOrDestroyed();
  void unregisterReceiver(android.content.BroadcastReceiver);
  android.content.res.Resources getResources();
  void overrideModalDialogManager(org.chromium.ui.modaldialog.ModalDialogManager);
  int getRequestedOrientation();
  org.chromium.ui.modaldialog.ModalDialogManager getModalDialogManager();
  int getTaskId();
  void setRequestedOrientation(int);
  android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter);
  boolean isFinishing();
  org.chromium.chrome.browser.fullscreen.ChromeFullscreenManager getFullscreenManager();
  org.chromium.chrome.browser.tabmodel.TabModelSelector getTabModelSelector();
  org.chromium.chrome.browser.widget.findinpage.FindToolbarManager getFindToolbarManager();
  org.chromium.chrome.browser.tab.Tab getActivityTab();
  android.view.View findViewById(int);
  void startActivity(android.content.Intent, android.os.Bundle);
  android.view.WindowManager getWindowManager();
  java.lang.String getPackageName();
  android.content.ContentResolver getContentResolver();
  org.chromium.chrome.browser.tabmodel.TabCreatorManager$TabCreator getCurrentTabCreator();
  android.view.Window getWindow();
  org.chromium.ui.base.ActivityWindowAndroid getWindowAndroid();
  void startActivityForResult(android.content.Intent, int);
  void onEnterVr();
  java.lang.String getString(int);
  org.chromium.chrome.browser.compositor.CompositorViewHolder getCompositorViewHolder();
  android.content.Intent getIntent();
  android.content.Context getApplicationContext();
  java.lang.Object getSystemService(java.lang.String);
}

-keep,allowobfuscation class org.chromium.chrome.browser.ChromeFeatureList {
  int getFieldTrialParamByFeatureAsInt(java.lang.String, java.lang.String, int);
  boolean isEnabled(java.lang.String);
}

-keep,allowobfuscation class org.chromium.chrome.browser.ChromeTabbedActivity {
  boolean handleBackPressed();
  boolean backShouldCloseTab(org.chromium.chrome.browser.tab.Tab);
}

-keep,allowobfuscation class org.chromium.chrome.browser.compositor.CompositorSurfaceManager$SurfaceManagerCallbackTarget {
  void surfaceDestroyed(android.view.Surface);
  void surfaceChanged(android.view.Surface, int, int, int);
  void surfaceCreated(android.view.Surface);
}

-keep,allowobfuscation class org.chromium.chrome.browser.compositor.CompositorView {
  void replaceSurfaceManagerForVr(org.chromium.chrome.browser.compositor.CompositorSurfaceManager, org.chromium.ui.base.WindowAndroid);
  void surfaceRedrawNeededAsync(java.lang.Runnable);
  void onExitVr(org.chromium.ui.base.WindowAndroid);
}

-keep,allowobfuscation class org.chromium.chrome.browser.compositor.CompositorViewHolder {
  org.chromium.chrome.browser.compositor.CompositorView getCompositorView();
  void onEnterVr();
  boolean requestFocus();
  void onExitVr();
}

-keep,allowobfuscation class org.chromium.chrome.browser.fullscreen.ChromeFullscreenManager {
  int getContentOffset();
  void exitPersistentFullscreenMode();
}

-keep,allowobfuscation class org.chromium.chrome.browser.help.HelpAndFeedback {
  void showFeedback(android.app.Activity, org.chromium.chrome.browser.profiles.Profile, java.lang.String, java.lang.String);
  org.chromium.chrome.browser.help.HelpAndFeedback getInstance(android.content.Context);
}

-keep,allowobfuscation class org.chromium.chrome.browser.infobar.SimpleConfirmInfoBarBuilder {
  void create(org.chromium.chrome.browser.tab.Tab, org.chromium.chrome.browser.infobar.SimpleConfirmInfoBarBuilder$Listener, int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean);
}

-keep,allowobfuscation class org.chromium.chrome.browser.modaldialog.ModalDialogViewBinder {
   <init>();
}

-keep,allowobfuscation class org.chromium.chrome.browser.page_info.PageInfoController {
  void show(android.app.Activity, org.chromium.chrome.browser.tab.Tab, java.lang.String, int);
}

-keep,allowobfuscation class org.chromium.chrome.browser.preferences.ChromePreferenceManager {
  void writeBoolean(java.lang.String, boolean);
  org.chromium.chrome.browser.preferences.ChromePreferenceManager getInstance();
}

-keep,allowobfuscation class org.chromium.chrome.browser.tab.EmptyTabObserver {
   <init>();
}

-keep,allowobfuscation class org.chromium.chrome.browser.tab.Tab {
  org.chromium.ui.base.WindowAndroid getWindowAndroid();
  java.lang.String getTitle();
  void removeObserver(org.chromium.chrome.browser.tab.TabObserver);
  boolean isIncognito();
  int getId();
  android.view.ViewGroup getContentView();
  org.chromium.chrome.browser.profiles.Profile getProfile();
  boolean canGoForward();
  org.chromium.content_public.browser.WebContents getWebContents();
  void reload();
  void addObserver(org.chromium.chrome.browser.tab.TabObserver);
  boolean canGoBack();
  java.lang.String getUrl();
  org.chromium.chrome.browser.ChromeActivity getActivity();
  void updateWindowAndroid(org.chromium.ui.base.WindowAndroid);
  int loadUrl(org.chromium.content_public.browser.LoadUrlParams);
}

-keep,allowobfuscation class org.chromium.chrome.browser.tab.TabAssociatedApp {
  boolean isOpenedFromExternalApp(org.chromium.chrome.browser.tab.Tab);
}

-keep,allowobfuscation class org.chromium.chrome.browser.tab.TabBrowserControlsState {
  void update(org.chromium.chrome.browser.tab.Tab, int, boolean);
}

-keep,allowobfuscation class org.chromium.chrome.browser.tab.TabObserver {
  void onContentChanged(org.chromium.chrome.browser.tab.Tab);
}

-keep,allowobfuscation class org.chromium.chrome.browser.tab.TabRedirectHandler {
   <init>(android.content.Context);
  org.chromium.chrome.browser.tab.TabRedirectHandler swapFor(org.chromium.chrome.browser.tab.Tab, org.chromium.chrome.browser.tab.TabRedirectHandler);
}

-keep,allowobfuscation class org.chromium.chrome.browser.tabmodel.ChromeTabCreator {
  void setWindowAndroid(org.chromium.ui.base.WindowAndroid);
}

-keep,allowobfuscation class org.chromium.chrome.browser.tabmodel.EmptyTabModelSelectorObserver {
   <init>();
}

-keep,allowobfuscation class org.chromium.chrome.browser.tabmodel.TabCreatorManager$TabCreator {
  org.chromium.chrome.browser.tab.Tab createNewTab(org.chromium.content_public.browser.LoadUrlParams, int, org.chromium.chrome.browser.tab.Tab);
  void launchNTP();
}

-keep,allowobfuscation class org.chromium.chrome.browser.tabmodel.TabModel {
  org.chromium.chrome.browser.tab.Tab getTabAt(int);
  void closeAllTabs();
  int getCount();
}

-keep,allowobfuscation class org.chromium.chrome.browser.tabmodel.TabModelSelector {
  org.chromium.chrome.browser.tabmodel.TabModel getModel(boolean);
  void removeObserver(org.chromium.chrome.browser.tabmodel.TabModelSelectorObserver);
  java.util.List getModels();
  int getTotalTabCount();
  void addObserver(org.chromium.chrome.browser.tabmodel.TabModelSelectorObserver);
}

-keep,allowobfuscation class org.chromium.chrome.browser.tabmodel.TabModelSelectorTabObserver {
  void destroy();
   <init>(org.chromium.chrome.browser.tabmodel.TabModelSelector);
}

-keep,allowobfuscation class org.chromium.chrome.browser.toolbar.NewTabButton {
  boolean callOnClick();
}

-keep,allowobfuscation class org.chromium.chrome.browser.toolbar.ToolbarManager {
  boolean back();
  boolean forward();
  void setProgressBarEnabled(boolean);
}

-keep,allowobfuscation class org.chromium.chrome.browser.util.FeatureUtilities {
  boolean isRecognitionIntentPresent(android.content.Context, boolean);
}

-keep,allowobfuscation class org.chromium.chrome.browser.util.IntentUtils {
  android.os.Parcelable safeGetParcelableExtra(android.content.Intent, java.lang.String);
  boolean safeStartActivity(android.content.Context, android.content.Intent);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.AndroidUiGestureTarget {
  long access$002(org.chromium.chrome.browser.vr.AndroidUiGestureTarget, long);
   <init>(android.view.View, float, float, int);
  long mNativePointer;
  org.chromium.content_public.browser.MotionEventSynthesizer mMotionEventSynthesizer;
  long mLastTimestampMs;
  long access$000(org.chromium.chrome.browser.vr.AndroidUiGestureTarget);
  long nativeInit(float, float, int);
  org.chromium.content_public.browser.MotionEventSynthesizer access$100(org.chromium.chrome.browser.vr.AndroidUiGestureTarget);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.AndroidUiGestureTarget$1 {
  int val$x;
  org.chromium.chrome.browser.vr.AndroidUiGestureTarget this$0;
  int val$action;
  long val$timeInMs;
  int val$delayMs;
  int val$y;
   <init>(org.chromium.chrome.browser.vr.AndroidUiGestureTarget, long, int, int, int, int);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.AndroidVSyncHelper {
   <init>(long);
  android.view.Choreographer$FrameCallback mCallback;
  long mNativeAndroidVSyncHelper;
  long access$000(org.chromium.chrome.browser.vr.AndroidVSyncHelper);
  void access$100(org.chromium.chrome.browser.vr.AndroidVSyncHelper, long, long);
  void nativeOnVSync(long, long);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.AndroidVSyncHelper$1 {
  org.chromium.chrome.browser.vr.AndroidVSyncHelper this$0;
   <init>(org.chromium.chrome.browser.vr.AndroidVSyncHelper);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.EmptySniffingVrViewContainer {
  android.view.View getChildAt(int);
  java.lang.Boolean mEmpty;
  void onEmpty();
  org.chromium.chrome.browser.vr.NoopCanvas mNoopCanvas;
  void resize(int, int);
   <init>(android.content.Context, org.chromium.chrome.browser.vr.EmptySniffingVrViewContainer$EmptyListener);
  void onNonEmpty();
  int getChildCount();
  void postInvalidate();
  void removeAllViews();
  void destroy();
  org.chromium.chrome.browser.vr.EmptySniffingVrViewContainer$EmptyListener mListener;
  android.view.ViewParent getParent();
  android.view.View getInputTarget();
  void addView(android.view.View);
  void setSurface(android.view.Surface);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.EmptySniffingVrViewContainer$EmptyListener {
  void onVrViewEmpty();
  void onVrViewNonEmpty();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.NoopCanvas {
  void restoreToCount(int);
   <init>(android.graphics.Bitmap, boolean);
  org.chromium.chrome.browser.vr.NoopCanvas$NoopException mException;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.NoopCanvas$1 {
  org.chromium.chrome.browser.vr.NoopCanvas this$0;
   <init>(org.chromium.chrome.browser.vr.NoopCanvas);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.NoopCanvas$NoopException {
   <init>();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.OnDispatchTouchEventCallback {
  void onDispatchTouchEvent(boolean);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.OnExitVrRequestListener {
  void onDenied();
  void onSucceeded();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrAlertDialog {
  org.chromium.chrome.browser.vr.VrAlertDialog$DialogButton access$000(org.chromium.chrome.browser.vr.VrAlertDialog);
  org.chromium.ui.modelutil.PropertyModel mModalDialogModel;
  java.lang.CharSequence mMessage;
  org.chromium.chrome.browser.vr.VrAlertDialog$DialogButton access$100(org.chromium.chrome.browser.vr.VrAlertDialog);
  android.view.View mView;
   <init>(android.content.Context, org.chromium.ui.modaldialog.ModalDialogManager);
  org.chromium.chrome.browser.vr.VrAlertDialog$DialogButton mButtonPositive;
  org.chromium.ui.modaldialog.ModalDialogManager mModalDialogManager;
  org.chromium.chrome.browser.vr.VrAlertDialog$DialogButton mButtonNegative;
  boolean $assertionsDisabled;
  void dismiss();
  org.chromium.ui.modelutil.PropertyModel createDialogModel();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrAlertDialog$1 {
  org.chromium.chrome.browser.vr.VrAlertDialog this$0;
   <init>(org.chromium.chrome.browser.vr.VrAlertDialog);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrAlertDialog$DialogButton {
  int getId();
  java.lang.String mText;
  org.chromium.chrome.browser.vr.VrAlertDialog this$0;
  java.lang.String getText();
  android.content.DialogInterface$OnClickListener getListener();
  android.content.DialogInterface$OnClickListener mListener;
  int mId;
   <init>(org.chromium.chrome.browser.vr.VrAlertDialog, int, java.lang.String, android.content.DialogInterface$OnClickListener);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrCancelAnimationActivity {
  void overridePendingTransition(int, int);
  void finish();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrCompositorSurfaceManager {
  int mFormat;
  void surfaceResized(int, int);
  void setSurface(android.view.Surface, int, int, int);
  void shutDown();
   <init>(org.chromium.chrome.browser.compositor.CompositorSurfaceManager$SurfaceManagerCallbackTarget);
  void surfaceDestroyed();
  org.chromium.chrome.browser.compositor.CompositorSurfaceManager$SurfaceManagerCallbackTarget mClient;
  int mHeight;
  int mWidth;
  android.view.Surface mSurface;
  boolean $assertionsDisabled;
  int mSurfaceState;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrCoreInfo {
   <init>(org.chromium.chrome.browser.vr.VrCoreInfo$GvrVersion, int);
  org.chromium.chrome.browser.vr.VrCoreInfo$GvrVersion gvrVersion;
  int compatibility;
  long nativeInit(int, int, int, int);
  long makeNativeVrCoreInfo();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrCoreInfo$GvrVersion {
   <init>(int, int, int);
  int majorVersion;
  int patchVersion;
  int minorVersion;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrCoreVersionChecker {
  int getVrCoreCompatibility();
  long makeNativeVrCoreInfo();
  org.chromium.chrome.browser.vr.VrCoreInfo getVrCoreInfo();
   <init>();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrDaydreamApi {
  boolean launchInVr(android.app.PendingIntent);
  boolean registerDaydreamIntent(android.app.PendingIntent);
  boolean unregisterDaydreamIntent();
  boolean exitFromVr(android.app.Activity, int, android.content.Intent);
  com.google.vr.ndk.base.DaydreamApi mDaydreamApi;
  com.google.vr.ndk.base.DaydreamApi getDaydreamApi();
  boolean isDaydreamCurrentViewer();
  boolean launchVrHomescreen();
   <init>();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrDelegate {
   <init>();
  boolean relaunchOnMainDisplayIfNecessary(android.app.Activity, android.content.Intent);
  void removeBlackOverlayView(android.app.Activity, boolean);
  boolean bootsToVr();
  boolean willChangeDensityInVr(org.chromium.chrome.browser.ChromeActivity);
  boolean activitySupportsVrBrowsing(android.app.Activity);
  void addBlackOverlayViewForActivity(org.chromium.chrome.browser.ChromeActivity);
  void setSystemUiVisibilityForVr(android.app.Activity);
  boolean USE_HIDE_ANIMATION;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrDelegateImpl {
   <init>();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrDelegateProviderImpl {
  org.chromium.chrome.browser.vr.VrIntentDelegateImpl mIntentDelegate;
  org.chromium.chrome.browser.vr.VrDelegateImpl mDelegate;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrDialog {
  void setBackgroundColor(int);
  org.chromium.chrome.browser.vr.VrDialogManager access$000(org.chromium.chrome.browser.vr.VrDialog);
  void addView(android.view.View, android.view.ViewGroup$LayoutParams);
   <init>(android.content.Context, org.chromium.chrome.browser.vr.VrDialogManager);
  int getWidth();
  void setLayoutParams(android.view.ViewGroup$LayoutParams);
  void dismiss();
  org.chromium.chrome.browser.vr.VrDialogManager mVrDialogManager;
  void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener);
  void initVrDialog();
  void disableSoftKeyboard(android.view.ViewGroup);
  int getHeight();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrDialog$1 {
  org.chromium.chrome.browser.vr.VrDialog this$0;
   <init>(org.chromium.chrome.browser.vr.VrDialog);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrDialogManager {
  void setDialogView(android.view.View);
  void setDialogFloating(boolean);
  void setDialogSize(int, int);
  void setDialogLocation(int, int);
  void initVrDialog(int, int);
  void closeVrDialog();
  void setVrDialogDismissHandler(java.lang.Runnable);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrFeedbackStatus {
  void setFeedbackOptOut(boolean);
  boolean getFeedbackOptOut();
  int getFeedbackFrequency();
  void setUserExitedAndEntered2DCount(int);
  int getUserExitedAndEntered2DCount();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrFirstRunActivity {
  org.chromium.base.metrics.CachedMetrics$BooleanHistogramSample sFreNotCompleteBrowserHistogram;
  void recordFreHistogram();
  void showFre();
  android.content.Intent getIntent();
  void finish();
  boolean $assertionsDisabled;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrFirstRunActivity$1 {
   <init>(org.chromium.chrome.browser.vr.VrFirstRunActivity, org.chromium.chrome.browser.vr.VrDaydreamApi);
  org.chromium.chrome.browser.vr.VrFirstRunActivity this$0;
  org.chromium.chrome.browser.vr.VrDaydreamApi val$daydreamApi;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrInputConnection {
  org.chromium.content_public.browser.ImeAdapter mImeAdapter;
  void access$100(org.chromium.chrome.browser.vr.VrInputConnection, long, java.lang.String);
  long mNativeVrInputConnection;
   <init>(long, org.chromium.content_public.browser.WebContents);
  android.os.Handler mImeThreadResponseHandler;
  android.os.Handler access$200(org.chromium.chrome.browser.vr.VrInputConnection);
  boolean $assertionsDisabled;
  void nativeUpdateTextState(long, java.lang.String);
  long access$000(org.chromium.chrome.browser.vr.VrInputConnection);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrInputConnection$1 {
   <init>(org.chromium.chrome.browser.vr.VrInputConnection, android.view.inputmethod.InputConnection);
  org.chromium.chrome.browser.vr.VrInputConnection this$0;
  android.view.inputmethod.InputConnection val$ic;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrInputConnection$1$1 {
   <init>(org.chromium.chrome.browser.vr.VrInputConnection$1, java.lang.String);
  java.lang.String val$textState;
  org.chromium.chrome.browser.vr.VrInputConnection$1 this$1;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrInputConnection$2 {
  boolean $assertionsDisabled;
   <init>(org.chromium.chrome.browser.vr.VrInputConnection, android.view.inputmethod.InputConnection, org.chromium.chrome.browser.vr.keyboard.TextEditAction[]);
  org.chromium.chrome.browser.vr.keyboard.TextEditAction[] val$edits;
  android.view.inputmethod.InputConnection val$ic;
  org.chromium.chrome.browser.vr.VrInputConnection this$0;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrInputConnection$3 {
   <init>(org.chromium.chrome.browser.vr.VrInputConnection, android.view.inputmethod.InputConnection);
  org.chromium.chrome.browser.vr.VrInputConnection this$0;
  android.view.inputmethod.InputConnection val$ic;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrIntentDelegate {
   <init>();
  boolean isLaunchingIntoVr(android.app.Activity, android.content.Intent);
  boolean isVrIntent(android.content.Intent);
  android.content.Intent setupVrIntent(android.content.Intent);
  void removeVrExtras(android.content.Intent);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrIntentDelegateImpl {
  boolean isVrIntent(android.content.Intent);
   <init>();
  boolean $assertionsDisabled;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrModalPresenter {
  android.content.Context mContext;
  org.chromium.chrome.browser.vr.VrDialog mVrDialog;
  void dismissCurrentDialog(int);
  org.chromium.ui.modelutil.PropertyModelChangeProcessor mModelChangeProcessor;
  void closeCurrentDialog();
   <init>(android.content.Context, org.chromium.chrome.browser.vr.VrDialogManager);
  org.chromium.chrome.browser.vr.VrDialogManager mVrDialogManager;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrModuleProvider {
  void onExitVr();
  org.chromium.chrome.browser.vr.VrDelegate getDelegate();
  org.chromium.chrome.browser.vr.VrIntentDelegate getIntentDelegate();
  void registerJni();
  void onEnterVr();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrPopupWindow {
  int mHeight;
  android.graphics.drawable.Drawable getBackground();
  void dismiss();
  android.widget.PopupWindow$OnDismissListener mOnDismissListener;
  android.content.Context mContext;
  void showAtLocation(android.view.View, int, int, int);
  android.view.View getContentView();
  android.widget.FrameLayout mVrPopupContainer;
   <init>(android.content.Context, org.chromium.chrome.browser.vr.VrDialogManager);
  int mWidth;
  boolean isShowing();
  boolean mIsShowing;
  org.chromium.chrome.browser.vr.VrDialogManager mVrDialogManager;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrPopupWindow$1 {
   <init>(org.chromium.chrome.browser.vr.VrPopupWindow);
  org.chromium.chrome.browser.vr.VrPopupWindow this$0;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShell {
  void nativeOnTriggerEvent(long, boolean);
  org.chromium.chrome.browser.vr.VrShellDelegate access$1400(org.chromium.chrome.browser.vr.VrShell);
  void onPause();
  void restoreTabFromVR();
  boolean mReprojectedRendering;
  void nativeSetDialogLocation(long, float, float);
  void nativeWatchElementForVisibilityStatusForTesting(long, int, int, boolean);
  void nativeOnTabListCreated(long, org.chromium.chrome.browser.tab.Tab[], org.chromium.chrome.browser.tab.Tab[]);
  void attachTabModelSelectorTabObserver();
  void nativeOnTabUpdated(long, boolean, int, java.lang.String);
   <init>(org.chromium.chrome.browser.ChromeActivity, org.chromium.chrome.browser.vr.VrShellDelegate, org.chromium.chrome.browser.tabmodel.TabModelSelector);
  void setWebVrModeEnabled(boolean);
  void nativeOnResume(long);
  void setContentCssSize(float, float, float);
  void swapToForegroundTab();
  org.chromium.ui.modaldialog.ModalDialogManager mNonVrModalDialogManager;
  void configWebContentsImeForVr(org.chromium.content_public.browser.WebContents);
  void nativeDestroy(long);
  void nativeSetUiExpectingActivityForTesting(long, int);
  void requestToExitVr(int, boolean);
  org.chromium.chrome.browser.tabmodel.TabModelSelectorTabObserver mTabModelSelectorTabObserver;
  void nativeAcceptDoffPromptForTesting(long);
  org.chromium.chrome.browser.vr.EmptySniffingVrViewContainer mNonVrViews;
  boolean nativeGetWebVrMode(long);
  float mLastContentHeight;
  void access$900(org.chromium.chrome.browser.vr.VrShell);
  void nativeSetAlertDialogSize(long, float, float);
  void restoreWebContentsImeFromVr(org.chromium.content_public.browser.WebContents);
  org.chromium.chrome.browser.vr.VrModalPresenter mVrModalPresenter;
  void launchNTP();
  long access$100(org.chromium.chrome.browser.vr.VrShell);
  void nativeSwapContents(long, org.chromium.chrome.browser.tab.Tab);
  void nativeSetSurface(long, android.view.Surface);
  int getTouchSlop();
  org.chromium.chrome.browser.vr.VrWindowAndroid mContentVrWindowAndroid;
  void nativeCancelToast(long);
  void lambda$setWebVrModeEnabled$0();
  void injectVrHostedUiView();
  java.lang.Runnable mVrDialogDismissHandler;
  void nativeSaveNextFrameBufferToDiskForTesting(long, java.lang.String);
  org.chromium.chrome.browser.vr.VrViewContainer mVrUiViewContainer;
  void nativeSetWebVrMode(long, boolean);
  float mLastContentDpr;
  void access$1000(org.chromium.chrome.browser.vr.VrShell, long, boolean, int, java.lang.String);
  void nativeBufferBoundsChanged(long, int, int, int, int);
  org.chromium.content_public.browser.ViewEventSink access$000(org.chromium.chrome.browser.vr.VrShell);
  void access$700(org.chromium.chrome.browser.vr.VrShell, org.chromium.content_public.browser.WebContents);
  void swapToTab(org.chromium.chrome.browser.tab.Tab);
  void shutdown();
  boolean $assertionsDisabled;
  void pause();
  void nativeSetAndroidGestureTarget(long, org.chromium.chrome.browser.vr.AndroidUiGestureTarget);
  void setVisibility(int);
  float access$300(org.chromium.chrome.browser.vr.VrShell);
  java.lang.Boolean lambda$isDisplayingUrlForTesting$1();
  android.view.View$OnTouchListener mTouchListener;
  void nativeOnLoadProgressChanged(long, double);
  void access$1500(org.chromium.chrome.browser.vr.VrShell, long, boolean, int);
  org.chromium.chrome.browser.vr.VrCompositorSurfaceManager mVrCompositorSurfaceManager;
  void nativeUpdateWebInputIndices(long, int, int, int, int);
  boolean getWebVrModeEnabled();
  java.util.ArrayList mUiOperationResultCallbacks;
  android.view.Surface mContentSurface;
  void nativeCloseAlertDialog(long);
  long nativeInit(org.chromium.chrome.browser.vr.VrShellDelegate, boolean, boolean, boolean, long, boolean, float, float, int, int, boolean, boolean, boolean);
  boolean nativeHasUiFinishedLoading(long);
  void nativeSetAlertDialog(long, float, float);
  org.chromium.chrome.browser.vr.AndroidUiGestureTarget mAndroidDialogGestureTarget;
  boolean mPendingVSyncPause;
  void nativeOnTabRemoved(long, boolean, int);
  java.lang.Boolean mPaused;
  org.chromium.chrome.browser.tab.TabRedirectHandler mNonVrTabRedirectHandler;
  void access$1100(org.chromium.chrome.browser.vr.VrShell, long, boolean);
  org.chromium.chrome.browser.vr.OnDispatchTouchEventCallback mOnDispatchTouchEventForTesting;
  void nativeSetHistoryButtonsEnabled(long, boolean, boolean);
  org.chromium.chrome.browser.compositor.CompositorView mCompositorView;
  java.lang.Runnable mOnVSyncPausedForTesting;
  org.chromium.chrome.browser.vr.AndroidUiGestureTarget mAndroidUiGestureTarget;
  android.view.View mPresentationView;
  void access$1200(org.chromium.chrome.browser.vr.VrShell, long, boolean);
  void access$800(org.chromium.chrome.browser.vr.VrShell, long, double);
  void teardown();
  java.util.ArrayList mUiOperationResults;
  org.chromium.chrome.browser.tab.TabObserver mTabObserver;
  float getNativePageScrollRatio();
  void lambda$rawTopContentOffsetChanged$2();
  void nativeShowToast(long, java.lang.String);
  org.chromium.chrome.browser.vr.VrInputConnection nativeGetVrInputConnectionForTesting(long);
  float access$200(org.chromium.chrome.browser.vr.VrShell);
  java.lang.Boolean mCanGoBack;
  org.chromium.chrome.browser.tabmodel.TabModelSelector mTabModelSelector;
  void nativeRequestToExitVr(long, int);
  void createTabList();
  void resume();
  void setReentryIntent(android.app.PendingIntent);
  void nativeRequestRecordAudioPermissionResult(long, boolean);
  org.chromium.chrome.browser.tab.TabRedirectHandler mTabRedirectHandler;
  void lambda$performKeyboardInputForTesting$3(int, java.lang.String);
  org.chromium.content_public.browser.ViewEventSink mViewEventSink;
  org.chromium.ui.modaldialog.ModalDialogManager mVrModalDialogManager;
  void initializeNative(boolean, boolean);
  void nativeOnPause(long);
  void onResume();
  org.chromium.ui.widget.UiWidgetFactory mNonVrUiWidgetFactory;
  void openNewTab(boolean);
  org.chromium.content_public.browser.ViewEventSink access$002(org.chromium.chrome.browser.vr.VrShell, org.chromium.content_public.browser.ViewEventSink);
  org.chromium.chrome.browser.ChromeActivity mActivity;
  void nativeSetDialogGestureTarget(long, org.chromium.chrome.browser.vr.AndroidUiGestureTarget);
  org.chromium.ui.display.VirtualDisplayAndroid mContentVirtualDisplay;
  boolean hasRecordAudioPermission();
  void nativeLogUnsupportedModeUserMetric(long, int);
  android.widget.FrameLayout getContainer();
  void rawTopContentOffsetChanged(float);
  java.lang.Boolean mCanGoForward;
  android.widget.FrameLayout mUiView;
  void nativeResumeContentRendering(long);
  com.google.vr.ndk.base.GvrUiLayout getUiLayout();
  void initializeTabForVR();
  boolean nativeIsDisplayingUrlForTesting(long);
  boolean mVrBrowsingEnabled;
  org.chromium.chrome.browser.vr.keyboard.VrInputMethodManagerWrapper mInputMethodManagerWrapper;
  void access$500(org.chromium.chrome.browser.vr.VrShell, long, org.chromium.chrome.browser.tab.Tab);
  long mNativeVrShell;
  void updateHistoryButtonsVisibility();
  boolean setAsyncReprojectionEnabled(boolean);
  boolean canRequestRecordAudioPermission();
  void nativeSetDialogFloating(long, boolean);
  void nativeShowSoftInput(long, boolean);
  void setPresentationView(android.view.View);
  void removeVrRootView();
  void injectVrRootView();
  void access$600(org.chromium.chrome.browser.vr.VrShell);
  void nativeSetDialogBufferSize(long, int, int);
  com.google.vr.ndk.base.GvrApi getGvrApi();
  void nativeOnOverlayTextureEmptyChanged(long, boolean);
  boolean hasUiFinishedLoading();
  org.chromium.chrome.browser.tabmodel.TabModelSelectorObserver mTabModelSelectorObserver;
  org.chromium.chrome.browser.ChromeActivity access$1300(org.chromium.chrome.browser.vr.VrShell);
  void reparentAllTabs(org.chromium.ui.base.WindowAndroid);
  void nativePerformControllerActionForTesting(long, int, int, float, float);
  float mLastContentWidth;
  void nativePerformKeyboardInputForTesting(long, int, java.lang.String);
  float access$400(org.chromium.chrome.browser.vr.VrShell);
  org.chromium.chrome.browser.vr.VrShellDelegate mDelegate;
  org.chromium.chrome.browser.tab.Tab mTab;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShell$1 {
  org.chromium.chrome.browser.vr.VrShell this$0;
   <init>(org.chromium.chrome.browser.vr.VrShell, android.content.Context);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShell$2 {
  void onContentChanged(org.chromium.chrome.browser.tab.Tab);
  org.chromium.chrome.browser.vr.VrShell this$0;
   <init>(org.chromium.chrome.browser.vr.VrShell);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShell$3 {
  org.chromium.chrome.browser.vr.VrShell this$0;
   <init>(org.chromium.chrome.browser.vr.VrShell);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShell$4 {
  org.chromium.chrome.browser.vr.VrShell this$0;
   <init>(org.chromium.chrome.browser.vr.VrShell);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShell$5 {
   <init>(org.chromium.chrome.browser.vr.VrShell);
  org.chromium.chrome.browser.vr.VrShell this$0;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShell$5$1 {
   <init>(org.chromium.chrome.browser.vr.VrShell$5);
  org.chromium.chrome.browser.vr.VrShell$5 this$1;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShell$5$1$1 {
  int[] val$grantResults;
  org.chromium.chrome.browser.vr.VrShell$5$1 this$2;
   <init>(org.chromium.chrome.browser.vr.VrShell$5$1, int[]);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShell$6 {
  org.chromium.chrome.browser.vr.VrShell this$0;
   <init>(org.chromium.chrome.browser.vr.VrShell);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShell$7 {
  org.chromium.chrome.browser.vr.VrShell this$0;
   <init>(org.chromium.chrome.browser.vr.VrShell, org.chromium.chrome.browser.tabmodel.TabModelSelector);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShell$UiOperationData {
  boolean visibility;
  int elementName;
  java.lang.Runnable resultCallback;
  int timeoutMs;
  int actionType;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShellDelegate {
  void requestToExitVrForSearchEnginePromoDialog(org.chromium.chrome.browser.vr.OnExitVrRequestListener, android.app.Activity);
  void maybeUnregisterVrEntryHook();
  boolean mExitedDueToUnsupportedMode;
  org.chromium.chrome.browser.vr.VrShellDelegate access$200();
  java.lang.Boolean mIsDaydreamCurrentViewer;
  org.chromium.chrome.browser.vr.VrCoreVersionChecker sVrCoreVersionChecker;
  boolean access$1302(org.chromium.chrome.browser.vr.VrShellDelegate, boolean);
  void onVrIntentUnsupported();
  boolean mPaused;
  boolean supports2dInVr();
  void nativeOnLibraryAvailable();
  boolean isVrBrowsingEnabled();
  org.chromium.chrome.browser.ChromeActivity mActivity;
  boolean sRegisteredDaydreamHook;
  void restoreWindowMode();
  void swapHostActivity(org.chromium.chrome.browser.ChromeActivity, boolean);
  boolean onDensityChanged(int, int);
  void unregisterDaydreamIntent();
  int mCachedGvrKeyboardPackageVersion;
  boolean expectedDensityChange();
  void access$2200(org.chromium.chrome.browser.ChromeActivity);
  void nativeDisplayActivate(long);
  void onNativeLibraryAvailable();
  boolean access$1702(org.chromium.chrome.browser.vr.VrShellDelegate, boolean);
  boolean onBackPressed();
  void onExitVrResult(boolean);
  void lambda$requestToExitVrForSearchEnginePromoDialog$0(org.chromium.chrome.browser.vr.OnExitVrRequestListener);
  int mExpectedDensityChange;
  void onPause();
  boolean isDaydreamReadyDevice();
  void requestToExitVrAndRunOnSuccess(java.lang.Runnable, int);
  void exitWebVRAndClearState();
  void doPreInflationStartup(org.chromium.chrome.browser.ChromeActivity, android.os.Bundle);
  boolean mVisible;
  void onStart();
  boolean cancelStartupAnimationIfNeeded();
  java.lang.Runnable getVrSettingsButtonListener();
  java.lang.Integer sVrSupportLevel;
  boolean mInternalIntentUsedToStartVr;
  void access$2100(boolean);
  void nativeRegisterVrAssetsComponent();
  boolean mProbablyInDon;
  boolean hasDaydreamSupport();
  android.app.PendingIntent getEnterVrPendingIntent(org.chromium.chrome.browser.ChromeActivity);
  boolean mMaybeActivateAfterHeadsetInsertion;
  boolean mTestWorkaroundDontCancelVrEntryOnResume;
  boolean mRequestedWebVr;
  void ensureLifecycleObserverInitialized();
  boolean access$602(org.chromium.chrome.browser.vr.VrShellDelegate, boolean);
  org.chromium.chrome.browser.vr.VrShellDelegate sInstance;
  boolean mActivateFromHeadsetInsertion;
  void nativeSetPresentResult(long, boolean);
  org.chromium.chrome.browser.vr.VrShell getVrShell();
  void shutdownVr(boolean, boolean);
  boolean isInVrSession();
  org.chromium.chrome.browser.vr.VrShellDelegate$VrBroadcastReceiver sVrBroadcastReceiver;
  void initAfterModuleInstall();
  void promptForFeedback(org.chromium.chrome.browser.tab.Tab);
  int getVrSupportLevel();
  org.chromium.chrome.browser.vr.VrShellDelegate$VrLifecycleObserver sVrLifecycleObserver;
  org.chromium.chrome.browser.vr.VrShellDelegate$VrBroadcastReceiver access$000();
  void onActivityHidden();
  void exitWebVRPresent();
  void access$300();
  int enterVrInternal();
  void onActivityHidden(org.chromium.chrome.browser.ChromeActivity);
  void onMultiWindowModeChanged(boolean);
  boolean mListeningForWebVrActivate;
  void onSaveInstanceState(android.os.Bundle);
  boolean access$900(org.chromium.chrome.browser.vr.VrShellDelegate);
  boolean access$800(org.chromium.chrome.browser.vr.VrShellDelegate);
  boolean access$1602(org.chromium.chrome.browser.vr.VrShellDelegate, boolean);
  void nativeOnPause(long);
  boolean mDonSucceeded;
  void destroyVrShell();
  int mFeedbackFrequency;
  org.chromium.chrome.browser.vr.VrCoreVersionChecker getVrCoreVersionChecker();
  void nativeDestroy(long);
  int access$1900();
  boolean createVrShell();
  void promptForKeyboardUpdate();
  long mNativeVrShellDelegate;
  void onActivityShown();
  java.lang.Runnable getVrCloseButtonListener();
  void requestToExitVr(org.chromium.chrome.browser.vr.OnExitVrRequestListener, int);
  boolean canEnterVr();
  boolean isVrBrowsingSupported(org.chromium.chrome.browser.ChromeActivity);
  boolean sTestVrShellDelegateOnStartup;
  org.chromium.chrome.browser.vr.VrShellDelegate access$400(org.chromium.chrome.browser.ChromeActivity);
  org.chromium.chrome.browser.vr.VrShellDelegate getInstance();
  void registerDaydreamIntent(org.chromium.chrome.browser.ChromeActivity);
  boolean access$1500(org.chromium.chrome.browser.vr.VrShellDelegate);
  boolean sRegisteredVrAssetsComponent;
  boolean isVrBrowsingEnabled(org.chromium.chrome.browser.ChromeActivity, int);
  boolean access$502(org.chromium.chrome.browser.vr.VrShellDelegate, boolean);
  boolean access$2600(org.chromium.chrome.browser.vr.VrShellDelegate);
  void lambda$setListeningForWebVrActivate$1();
  int mCachedVrCorePackageVersion;
  void nativeOnResume(long);
  void maybeSetPresentResult(boolean);
  boolean mShowingDoffForGvrUpdate;
  void onBroadcastReceived();
  void access$1800(org.chromium.chrome.browser.vr.VrShellDelegate);
  boolean onBackPressedInternal();
  void maybeUpdateVrSupportLevel();
  void setVrModeEnabled(android.app.Activity, boolean);
  void onResume();
  org.chromium.chrome.browser.vr.VrShellDelegate getInstance(org.chromium.chrome.browser.ChromeActivity);
  java.lang.Runnable mSettingsButtonListener;
  void registerVrAssetsComponentIfDaydreamUser(boolean);
  boolean activitySupportsPresentation(android.app.Activity);
  void callOnExitVrRequestListener(boolean);
  boolean mStartedFromVrIntent;
  void onVrServicesMaybeUpdated();
  boolean canLaunch2DIntentsInternal();
  org.chromium.chrome.browser.vr.OnExitVrRequestListener mOnExitVrRequestListener;
  void maybeRegisterVrEntryHook(org.chromium.chrome.browser.ChromeActivity);
  boolean hasRecordAudioPermission();
  boolean onActivityResultWithNative(int, int);
  int getGvrKeyboardPackageVersion();
  java.util.Set sVrModeEnabledActivitys;
  boolean isVrCoreCompatible();
  boolean isDaydreamCurrentViewerInternal();
  java.lang.Runnable mCloseButtonListener;
  void requestToExitVrAndRunOnSuccess(java.lang.Runnable);
  void nativeRecordVrStartAction(long, int);
  void removeVrViews();
  boolean isInVr();
  boolean mRestoreSystemUiVisibility;
  void requestToExitVr(org.chromium.chrome.browser.vr.OnExitVrRequestListener);
  boolean enterVrAfterDon();
  boolean enterVrIfNecessary();
  void forceExitVrImmediately();
  void enterVr(boolean);
  org.chromium.chrome.browser.vr.VrShell mVrShell;
  android.os.Handler mClearMaybeActivateHandler;
  void onExitVrRequestResult(boolean);
  void setExpectingIntent(boolean);
  java.lang.Boolean mShowVrServicesUpdatePrompt;
  boolean showDoff(boolean);
  boolean isWindowModeCorrectForVr();
  void rawTopContentOffsetChanged(float);
  org.chromium.chrome.browser.vr.VrShellDelegate$VrBroadcastReceiver access$002(org.chromium.chrome.browser.vr.VrShellDelegate$VrBroadcastReceiver);
  boolean access$2500(org.chromium.chrome.browser.vr.VrShellDelegate);
  void promptForFeedbackIfNeeded(boolean);
  void onGvrKeyboardMaybeUpdated();
  void access$2700(org.chromium.chrome.browser.vr.VrShellDelegate, boolean, boolean);
  boolean $assertionsDisabled;
  boolean mShowingDaydreamDoff;
  int getVrCorePackageVersion();
  void handleDonFlowSuccess();
  void addVrViews();
  boolean access$1400(org.chromium.chrome.browser.vr.VrShellDelegate);
  org.chromium.chrome.browser.ChromeActivity access$700(org.chromium.chrome.browser.vr.VrShellDelegate);
  void onActivityStateChange(android.app.Activity, int);
  java.lang.Runnable mPendingExitVrRequest;
  boolean mNeedsAnimationCancel;
  void promptToUpdateVrServices();
  java.lang.Integer mRestoreOrientation;
  void destroy();
  void startFeedback(org.chromium.chrome.browser.tab.Tab);
  void onStop();
  void maybeHandleVrIntentPreNative(org.chromium.chrome.browser.ChromeActivity, android.content.Intent);
   <init>(org.chromium.chrome.browser.ChromeActivity);
  boolean mCancellingEntryAnimation;
  void onNewVrIntent();
  boolean maybeExitVrToUpdateVrServices();
  void access$1100(org.chromium.chrome.browser.vr.VrShellDelegate, long, int);
  org.chromium.chrome.browser.vr.VrDaydreamApi getVrDaydreamApi();
  void onActivityShown(org.chromium.chrome.browser.ChromeActivity);
  boolean isDaydreamCurrentViewer();
  long nativeInit();
  void setWindowModeForVr();
  void access$2300(org.chromium.chrome.browser.tab.Tab);
  java.util.Set access$100();
  org.chromium.chrome.browser.vr.VrDaydreamApi sVrDaydreamApi;
  boolean activitySupportsExitFeedback(android.app.Activity);
  void requestToExitVrInternal(org.chromium.chrome.browser.vr.OnExitVrRequestListener, int, boolean);
  void cancelPendingVrEntry();
  boolean mShowingExitVrPrompt;
  boolean canRequestRecordAudioPermission();
  boolean access$1200(org.chromium.chrome.browser.vr.VrShellDelegate);
  boolean mInVr;
  boolean mVrBrowserUsed;
  void updateVrSupportLevel(java.lang.Integer);
  void runPendingExitVrTask();
  boolean mDoffOptional;
  boolean access$2000();
  void onNewIntentWithNative(org.chromium.chrome.browser.ChromeActivity, android.content.Intent);
  boolean canLaunch2DIntents();
  long access$1000(org.chromium.chrome.browser.vr.VrShellDelegate);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShellDelegate$1 {
  java.lang.Integer doInBackground();
   <init>(org.chromium.chrome.browser.ChromeActivity);
  void onPostExecute(java.lang.Integer);
  org.chromium.base.task.AsyncTask executeOnExecutor(java.util.concurrent.Executor);
  org.chromium.chrome.browser.ChromeActivity val$activity;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShellDelegate$2 {
  java.lang.Runnable val$onSuccess;
   <init>(java.lang.Runnable);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShellDelegate$3 {
   <init>(org.chromium.chrome.browser.tab.Tab);
  org.chromium.chrome.browser.tab.Tab val$tab;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShellDelegate$4 {
   <init>(org.chromium.chrome.browser.vr.VrShellDelegate);
  org.chromium.chrome.browser.vr.VrShellDelegate this$0;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShellDelegate$5 {
  org.chromium.chrome.browser.vr.VrShellDelegate this$0;
   <init>(org.chromium.chrome.browser.vr.VrShellDelegate);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShellDelegate$6 {
  org.chromium.chrome.browser.vr.VrShellDelegate this$0;
   <init>(org.chromium.chrome.browser.vr.VrShellDelegate);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShellDelegate$7 {
   <init>(org.chromium.chrome.browser.vr.VrShellDelegate);
  org.chromium.chrome.browser.vr.VrShellDelegate this$0;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShellDelegate$8 {
   <init>(org.chromium.chrome.browser.vr.VrShellDelegate);
  org.chromium.chrome.browser.vr.VrShellDelegate this$0;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShellDelegate$VrBroadcastReceiver {
  boolean $assertionsDisabled;
  java.lang.ref.WeakReference targetActivity();
   <init>(org.chromium.chrome.browser.ChromeActivity);
  java.lang.ref.WeakReference mTargetActivity;
  void unregister();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShellDelegate$VrLifecycleObserver {
   <init>(org.chromium.chrome.browser.vr.VrShellDelegate$1);
   <init>();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrShellDelegate$VrUnsupportedException {
   <init>();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrToast {
  org.chromium.chrome.browser.vr.VrToastManager mVrToastManager;
  boolean $assertionsDisabled;
   <init>(android.content.Context, org.chromium.chrome.browser.vr.VrToastManager);
  android.widget.TextView findTextViewRecursive(android.view.View);
  android.view.View getView();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrToastManager {
  void showToast(java.lang.CharSequence);
  void cancelToast();
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrUiWidgetFactory {
  org.chromium.chrome.browser.vr.VrShell mVrShell;
   <init>(org.chromium.chrome.browser.vr.VrShell, org.chromium.ui.modaldialog.ModalDialogManager);
  org.chromium.ui.modaldialog.ModalDialogManager mModalDialogManager;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrViewContainer {
  android.view.View getInputTarget();
  void removeAllViews();
  void setLayoutParams(android.view.ViewGroup$LayoutParams);
  android.view.ViewTreeObserver getViewTreeObserver();
  boolean $assertionsDisabled;
  void setSurface(android.view.Surface);
  void resize(int, int);
  android.view.Surface mSurface;
  void drawSuper(android.graphics.Canvas);
  boolean isDirty();
  void invalidate();
  void destroy();
  int getChildCount();
  void addView(android.view.View);
  void setBackgroundColor(int);
  android.view.ViewTreeObserver$OnPreDrawListener mPredrawListener;
  android.view.View getChildAt(int);
   <init>(android.content.Context);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrViewContainer$1 {
   <init>(org.chromium.chrome.browser.vr.VrViewContainer);
  org.chromium.chrome.browser.vr.VrViewContainer this$0;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrWindowAndroid {
  org.chromium.ui.display.DisplayAndroid getDisplay();
  void onActivityStarted();
  android.app.Activity activityFromContext(android.content.Context);
  void onActivityStopped();
  java.lang.ref.WeakReference getContext();
  void setAndroidPermissionDelegate(org.chromium.ui.base.AndroidPermissionDelegate);
  void setVSyncPaused(boolean);
   <init>(android.content.Context, org.chromium.ui.display.DisplayAndroid);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.VrWindowAndroid$ActivityAndroidPermissionDelegate {
   <init>(org.chromium.chrome.browser.vr.VrWindowAndroid);
  org.chromium.chrome.browser.vr.VrWindowAndroid this$0;
   <init>(org.chromium.chrome.browser.vr.VrWindowAndroid, org.chromium.chrome.browser.vr.VrWindowAndroid$1);
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.keyboard.GvrKeyboardLoaderClient {
  boolean sFailLoadForTesting;
  com.google.vr.keyboard.IGvrKeyboardLoader sLoader;
  android.content.Context getRemoteContext(android.content.Context);
  java.lang.Object getRemoteClassLoader();
  org.chromium.chrome.browser.vr.keyboard.GvrKeyboardLoaderClient$KeyboardContextWrapper sContextWrapper;
  com.google.vr.keyboard.IGvrKeyboardLoader getLoader();
  android.os.IBinder newBinder(java.lang.ClassLoader, java.lang.String);
  java.lang.ClassLoader sRemoteClassLoader;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.keyboard.GvrKeyboardLoaderClient$KeyboardContextWrapper {
   <init>(android.content.Context, android.content.Context);
   <init>(android.content.Context, android.content.Context, org.chromium.chrome.browser.vr.keyboard.GvrKeyboardLoaderClient$1);
  android.content.Context mKeyboardContext;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.keyboard.TextEditAction {
  int mType;
  java.lang.String mText;
  int mNewCursorPosition;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.keyboard.VrInputMethodManagerWrapper {
  org.chromium.chrome.browser.vr.keyboard.VrInputMethodManagerWrapper$BrowserKeyboardInterface mKeyboard;
   <init>(android.content.Context, org.chromium.chrome.browser.vr.keyboard.VrInputMethodManagerWrapper$BrowserKeyboardInterface);
  android.view.View mView;
  android.content.Context mContext;
}

-keep,allowobfuscation class org.chromium.chrome.browser.vr.keyboard.VrInputMethodManagerWrapper$BrowserKeyboardInterface {
  void updateIndices(int, int, int, int);
  void showSoftInput(boolean);
}

-keep,allowobfuscation class org.chromium.chrome.browser.widget.findinpage.FindToolbarManager {
  void hideToolbar();
}

-keep,allowobfuscation class org.chromium.chrome.vr.R {
  void onResourcesLoadedString(int);
  boolean sResourcesDidLoad;
  void onResourcesLoadedDrawable(int);
  boolean $assertionsDisabled;
}

-keep,allowobfuscation class org.chromium.chrome.vr.R$drawable {
  int vr_services;
}

-keep,allowobfuscation class org.chromium.chrome.vr.R$string {
  int vr_shell_feedback_infobar_description;
  int vr_services_check_infobar_update_button;
  int vr_services_check_infobar_update_text;
  int vr_services_check_infobar_install_text;
  int vr_services_check_infobar_install_button;
  int vr_shell_feedback_infobar_feedback_button;
}

-keep,allowobfuscation class org.chromium.content_public.browser.ImeAdapter {
  void setInputMethodManagerWrapper(org.chromium.content_public.browser.InputMethodManagerWrapper);
  org.chromium.content_public.browser.InputMethodManagerWrapper createDefaultInputMethodManagerWrapper(android.content.Context);
  android.view.inputmethod.InputConnection getActiveInputConnection();
  org.chromium.content_public.browser.ImeAdapter fromWebContents(org.chromium.content_public.browser.WebContents);
}

-keep,allowobfuscation class org.chromium.content_public.browser.LoadUrlParams {
   <init>(java.lang.String);
}

-keep,allowobfuscation class org.chromium.content_public.browser.MotionEventSynthesizer {
  org.chromium.content_public.browser.MotionEventSynthesizer create(android.view.View);
  void setPointer(int, int, int, int, int);
  void inject(int, int, long);
}

-keep,allowobfuscation class org.chromium.content_public.browser.ScreenOrientationProvider {
  void setOrientationDelegate(org.chromium.content_public.browser.ScreenOrientationDelegate);
}

-keep,allowobfuscation class org.chromium.content_public.browser.UiThreadTaskTraits {
  org.chromium.base.task.TaskTraits DEFAULT;
}

-keep,allowobfuscation class org.chromium.content_public.browser.ViewEventSink {
  void onWindowFocusChanged(boolean);
  org.chromium.content_public.browser.ViewEventSink from(org.chromium.content_public.browser.WebContents);
}

-keep,allowobfuscation class org.chromium.content_public.browser.WebContents {
  org.chromium.ui.base.EventForwarder getEventForwarder();
  void setSize(int, int);
}

-keep,allowobfuscation class org.chromium.device.vr.NonPresentingGvrContext {
  long mNativeGvrDevice;
   <init>(long);
  com.google.vr.ndk.base.GvrApi mGvrApi;
  void resume();
  boolean mResumed;
  com.google.vr.cardboard.DisplaySynchronizer mDisplaySynchronizer;
  void onDisplayConfigurationChanged();
  void nativeOnDisplayConfigurationChanged(long);
}

-keep,allowobfuscation class org.chromium.device.vr.NonPresentingGvrContext$1 {
   <init>(org.chromium.device.vr.NonPresentingGvrContext, android.content.Context, android.view.Display);
  org.chromium.device.vr.NonPresentingGvrContext this$0;
}

-keep,allowobfuscation class org.chromium.ui.UiUtils {
  void removeViewFromParent(android.view.View);
}

-keep,allowobfuscation class org.chromium.ui.base.ActivityWindowAndroid {
  boolean canRequestPermission(java.lang.String);
  void requestPermissions(java.lang.String[], org.chromium.ui.base.PermissionCallback);
  boolean hasPermission(java.lang.String);
  org.chromium.ui.display.DisplayAndroid getDisplay();
}

-keep,allowobfuscation class org.chromium.ui.base.EventForwarder {
  boolean onGenericMotionEvent(android.view.MotionEvent);
  boolean dispatchKeyEvent(android.view.KeyEvent);
}

-keep,allowobfuscation class org.chromium.ui.base.PermissionCallback {
  void onRequestPermissionsResult(java.lang.String[], int[]);
}

-keep,allowobfuscation class org.chromium.ui.base.WindowAndroid {
   <init>(android.content.Context, org.chromium.ui.display.DisplayAndroid);
}

-keep,allowobfuscation class org.chromium.ui.display.DisplayAndroid {
  float getDipScale();
  org.chromium.ui.display.DisplayAndroid getNonMultiDisplay(android.content.Context);
  float getAndroidUIScaling();
}

-keep,allowobfuscation class org.chromium.ui.display.VirtualDisplayAndroid {
  void update(android.graphics.Point, java.lang.Float, java.lang.Float, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Boolean, java.lang.Boolean, java.lang.Float, android.view.Display$Mode, java.util.List);
  void setTo(org.chromium.ui.display.DisplayAndroid);
  void destroy();
  org.chromium.ui.display.VirtualDisplayAndroid createVirtualDisplay();
}

-keep,allowobfuscation class org.chromium.ui.modaldialog.ModalDialogManager {
  void dismissDialog(org.chromium.ui.modelutil.PropertyModel, int);
  void showDialog(org.chromium.ui.modelutil.PropertyModel, int);
  void dismissAllDialogs(int);
   <init>(org.chromium.ui.modaldialog.ModalDialogManager$Presenter, int);
}

-keep,allowobfuscation class org.chromium.ui.modaldialog.ModalDialogManager$Presenter {
   <init>();
}

-keep,allowobfuscation class org.chromium.ui.modaldialog.ModalDialogProperties {
  org.chromium.ui.modelutil.PropertyKey[] ALL_KEYS;
  org.chromium.ui.modelutil.PropertyModel$ReadableObjectPropertyKey CONTROLLER;
  org.chromium.ui.modelutil.PropertyModel$WritableObjectPropertyKey CUSTOM_VIEW;
  org.chromium.ui.modelutil.PropertyModel$WritableObjectPropertyKey NEGATIVE_BUTTON_TEXT;
  org.chromium.ui.modelutil.PropertyModel$WritableObjectPropertyKey MESSAGE;
  org.chromium.ui.modelutil.PropertyModel$WritableObjectPropertyKey POSITIVE_BUTTON_TEXT;
}

-keep,allowobfuscation class org.chromium.ui.modelutil.PropertyModel$Builder {
  org.chromium.ui.modelutil.PropertyModel$Builder with(org.chromium.ui.modelutil.PropertyModel$ReadableObjectPropertyKey, java.lang.Object);
  org.chromium.ui.modelutil.PropertyModel build();
   <init>(org.chromium.ui.modelutil.PropertyKey[]);
}

-keep,allowobfuscation class org.chromium.ui.modelutil.PropertyModelChangeProcessor {
  void destroy();
  org.chromium.ui.modelutil.PropertyModelChangeProcessor create(org.chromium.ui.modelutil.PropertyObservable, java.lang.Object, org.chromium.ui.modelutil.PropertyModelChangeProcessor$ViewBinder);
}

-keep,allowobfuscation class org.chromium.ui.widget.UiWidgetFactory {
  org.chromium.ui.widget.UiWidgetFactory getInstance();
   <init>();
  void setInstance(org.chromium.ui.widget.UiWidgetFactory);
}

-keep,allowobfuscation class org.json.JSONObject {
  java.lang.Object NULL;
}
