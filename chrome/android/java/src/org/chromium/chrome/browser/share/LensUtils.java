// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package org.chromium.chrome.browser.share;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.text.TextUtils;

import org.chromium.base.ContextUtils;
import org.chromium.chrome.browser.IntentHandler;

/**
 * This class provides utilities for intenting into Google Lens.
 */
public class LensUtils {
    private static final String LENS_CONTRACT_URI = "googleapp://lens";
    private static final String LENS_BITMAP_URI_KEY = "LensBitmapUriKey";
    private static final String MIN_AGSA_VERSION_NAME_FOR_LENS_POSTCAPTURE = "8.19";

    /**
     * Resolve the activity to verify that lens is ready to accept an intent and also
     * retrieve the version name.
     *
     * @param context The relevant application context with access to the activity.
     * @return The version name string of the AGSA app or an empty string if not available.
     */
    public static String getLensActivityVersionNameIfAvailable(Context context) {
        try {
            PackageManager pm = context.getPackageManager();
            Intent lensIntent = getShareWithGoogleLensIntent(Uri.EMPTY);
            ComponentName lensActivity = lensIntent.resolveActivity(pm);
            PackageInfo packageInfo = pm.getPackageInfo(lensActivity.getPackageName(), 0);
            if (packageInfo == null) {
                return "";
            } else {
                return packageInfo.versionName;
            }
        } catch (PackageManager.NameNotFoundException e) {
            return "";
        }
    }

    /**
     * Checks if the AGSA version is below a certain {@code String} version name
     * which denotes support for the Lens postcapture experience.
     * @param installedVersionName The AGSA version installed on this device,
     * @return Whether the AGSA version on the device is high enough.
     */
    public static boolean isAgsaVersionBelowMinimum(String installedVersionName) {
        if (TextUtils.isEmpty(installedVersionName)) {
            return true;
        }

        String[] agsaNumbers = installedVersionName.split("\\.", -1);
        String[] targetAgsaNumbers = MIN_AGSA_VERSION_NAME_FOR_LENS_POSTCAPTURE.split("\\.", -1);

        // To avoid IndexOutOfBounds
        int maxIndex = Math.min(agsaNumbers.length, targetAgsaNumbers.length);
        for (int i = 0; i < maxIndex; ++i) {
            int agsaNumber = Integer.parseInt(agsaNumbers[i]);
            int targetAgsaNumber = Integer.parseInt(targetAgsaNumbers[i]);

            if (agsaNumber < targetAgsaNumber) {
                return true;
            } else if (agsaNumber > targetAgsaNumber) {
                return false;
            }
        }

        // If versions are the same so far, but they have different length...
        return agsaNumbers.length < targetAgsaNumbers.length;
    }

    /**
     * Get a deeplink intent to Google Lens with an optional content provider image URI.
     * @param imageUri The content provider URI generated by chrome (or empty URI)
     *                 if only resolving the activity.
     * @return The intent to Google Lens.
     */
    public static Intent getShareWithGoogleLensIntent(Uri imageUri) {
        Uri lensUri = Uri.parse(LENS_CONTRACT_URI);
        if (!Uri.EMPTY.equals(imageUri)) {
            lensUri = lensUri.buildUpon()
                              .appendQueryParameter(LENS_BITMAP_URI_KEY, imageUri.toString())
                              .build();
            ContextUtils.getApplicationContext().grantUriPermission(
                    IntentHandler.PACKAGE_GSA, imageUri, Intent.FLAG_GRANT_READ_URI_PERMISSION);
        }
        Intent intent = new Intent(Intent.ACTION_VIEW).setData(lensUri);
        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
        return intent;
    }
}
