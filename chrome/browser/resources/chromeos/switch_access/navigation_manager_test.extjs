// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

GEN_INCLUDE(['switch_access_e2e_test_base.js']);

/**
 * @constructor
 * @extends {SwitchAccessE2ETest}
 */
function SwitchAccessNavigationManagerTest() {
  SwitchAccessE2ETest.call(this);
}

SwitchAccessNavigationManagerTest.prototype = {
  __proto__: SwitchAccessE2ETest.prototype
}

function moveToPageContents() {
  const navigator = switchAccess.navigationManager_;
  // Start from the desktop node.
  navigator.group_ = RootNodeWrapper.buildDesktopTree(navigator.desktop_);
  navigator.node_ = navigator.group_.firstChild;

  // The first item should be the browser window.
  navigator.selectCurrentNode();

  // The third item in the browser window is the page contents.
  // TODO(anastasi): find the browser window dynamically.
  navigator.moveForward();
  navigator.moveForward();
  navigator.selectCurrentNode();
}

function currentNode() {
  return switchAccess.navigationManager_.node_;
}

TEST_F('SwitchAccessNavigationManagerTest', 'SelectButton', function() {
  const website =
      `<button id="test" aria-pressed=false>First Button</button>
      <script>
        let state = false;
        let button = document.getElementById("test");
        button.onclick = () => {
          state = !state;
          button.setAttribute("aria-pressed", state);
        };
      </script>`;

  this.runWithLoadedTree(website, function(desktop) {
    moveToPageContents();

    let node = currentNode().automationNode;
    assertTrue(!!node, 'Node is invalid');
    assertEquals(node.name, 'First Button', 'Did not find the right node');

    node.addEventListener(
      chrome.automation.EventType.CHECKED_STATE_CHANGED,
      this.newCallback((event) => {
        assertEquals(node.name, event.target.name,
            'Checked state changed on unexpected node');
      }));

    // The event listener is not set instantaneously. Set a timeout of 0 to
    // yield to pending processes.
    setTimeout(this.newCallback(switchAccess.selectCurrentNode), 0);
  });
});
