// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

GEN_INCLUDE(['switch_access_e2e_test_base.js']);

/**
 * @constructor
 * @extends {SwitchAccessE2ETest}
 */
function SwitchAccessPredicateTest() {
  SwitchAccessE2ETest.call(this);
}

SwitchAccessPredicateTest.prototype = {
  __proto__: SwitchAccessE2ETest.prototype,

  setDesktop: function(desktop) {
    this.desktop = desktop;
  },

  getNodeByName: function(name) {
    assertTrue(this.desktop != undefined);
    const node = new AutomationTreeWalker(this.desktop, constants.Dir.FORWARD,
      { visit:
          function(node) { return node.name === this.name; }.bind({name})
      }).next().node;
    assertTrue(node != null);

    return node;
  },

  getNodesForRole: function(role) {
    return new AutomationTreeWalker(this.desktop, constants.Dir.FORWARD,
      { visit: (node) => node.role === role });
  }
};

function fakeLoc(x) {
  return {left: x, top: x, width: x, height: x};
}

// This page has a 1:1 correlation between DOM nodes and accessibility nodes.
function testWebsite() {
  return 'data:text/html;charset=utf-8,' +
         '<div aria-label="upper1">' +
           '<div aria-label="lower1">' +
             '<button>leaf1</button>' +
             '<p aria-label="leaf2">leaf2</p>' +
             '<button>leaf3</button>' +
           '</div><div aria-label="lower2">' +
             '<p aria-label="leaf4">leaf4</p>' +
             '<button>leaf5</button>' +
           '</div>' +
         '</div><div aria-label="upper2" role="button">' +
           '<div aria-label="lower3" >' +
             '<p aria-label="leaf6">leaf6</p>' +
             '<p aria-label="leaf7">leaf7</p>';
}

function getTree(desktop) {
  const root = new AutomationTreeWalker(desktop, constants.Dir.FORWARD,
    { visit: (node) =>
                  node.role === chrome.automation.RoleType.ROOT_WEB_AREA &&
                  node.firstChild && node.firstChild.name === "upper1"
    }
  ).next().node;
  assertTrue(root != null);

  const upper1 = root.firstChild;
  assertTrue(upper1 && upper1.name === "upper1");
  const upper2 = upper1.nextSibling;
  assertTrue(upper2 && upper2.name === "upper2");
  const lower1 = upper1.firstChild;
  assertTrue(lower1 && lower1.name === "lower1");
  const lower2 = lower1.nextSibling;
  assertTrue(lower2 && lower2.name === "lower2");
  const lower3 = upper2.firstChild;
  assertTrue(lower3 && lower3.name === "lower3");
  const leaf1 = lower1.firstChild;
  assertTrue(leaf1 && leaf1.name === "leaf1");
  const leaf2 = leaf1.nextSibling;
  assertTrue(leaf2 && leaf2.name === "leaf2");
  const leaf3 = leaf2.nextSibling;
  assertTrue(leaf3 && leaf3.name === "leaf3");
  const leaf4 = lower2.firstChild;
  assertTrue(leaf4 && leaf4.name === "leaf4");
  const leaf5 = leaf4.nextSibling;
  assertTrue(leaf5 && leaf5.name === "leaf5");
  const leaf6 = lower3.firstChild;
  assertTrue(leaf6 && leaf6.name === "leaf6");
  const leaf7 = leaf6.nextSibling;
  assertTrue(leaf7 && leaf7.name === "leaf7");

  return { root, upper1, upper2, lower1, lower2, lower3, leaf1, leaf2, leaf3,
           leaf4, leaf5, leaf6, leaf7 };
}

TEST_F('SwitchAccessPredicateTest', 'IsSubtreeLeaf', function() {
  this.runWithLoadedTree(testWebsite(),
      function(desktop) {
        const t = getTree(desktop);

        assertTrue(SwitchAccessPredicate.isSubtreeLeaf(t.root, t.root));
        assertTrue(SwitchAccessPredicate.isSubtreeLeaf(t.upper1, t.root));
        assertTrue(SwitchAccessPredicate.isSubtreeLeaf(t.upper2, t.root));
        assertTrue(SwitchAccessPredicate.isSubtreeLeaf(t.lower1, t.upper1));
        assertFalse(SwitchAccessPredicate.isSubtreeLeaf(t.lower2, t.upper1));
        assertFalse(SwitchAccessPredicate.isSubtreeLeaf(t.lower3, t.root));
        assertTrue(SwitchAccessPredicate.isSubtreeLeaf(t.leaf1, t.lower1));
        assertFalse(SwitchAccessPredicate.isSubtreeLeaf(t.leaf2, t.lower1));
        assertTrue(SwitchAccessPredicate.isSubtreeLeaf(t.leaf3, t.lower1));
        assertFalse(SwitchAccessPredicate.isSubtreeLeaf(t.leaf4, t.upper1));
        assertTrue(SwitchAccessPredicate.isSubtreeLeaf(t.leaf5, t.upper1));
        assertFalse(SwitchAccessPredicate.isSubtreeLeaf(t.leaf6, t.lower3));
        assertFalse(SwitchAccessPredicate.isSubtreeLeaf(t.leaf7, t.lower3));
      }
  );
});

TEST_F('SwitchAccessPredicateTest', 'IsGroup', function() {
  this.runWithLoadedTree(testWebsite(),
      function(desktop) {
        const t = getTree(desktop);

        assertTrue(SwitchAccessPredicate.isGroup(t.root, t.root));
        assertTrue(SwitchAccessPredicate.isGroup(t.upper1, t.root));
        assertFalse(SwitchAccessPredicate.isGroup(t.upper2, t.root));
        assertTrue(SwitchAccessPredicate.isGroup(t.lower1, t.upper1));
        assertFalse(SwitchAccessPredicate.isGroup(t.lower2, t.upper1));
        assertFalse(SwitchAccessPredicate.isGroup(t.lower3, t.root));
        assertFalse(SwitchAccessPredicate.isGroup(t.leaf1, t.lower1));
        assertFalse(SwitchAccessPredicate.isGroup(t.leaf2, t.lower1));
        assertFalse(SwitchAccessPredicate.isGroup(t.leaf3, t.lower1));
        assertFalse(SwitchAccessPredicate.isGroup(t.leaf4, t.upper1));
        assertFalse(SwitchAccessPredicate.isGroup(t.leaf5, t.upper1));
        assertFalse(SwitchAccessPredicate.isGroup(t.leaf6, t.lower3));
        assertFalse(SwitchAccessPredicate.isGroup(t.leaf7, t.lower3));
      }
  );
});

TEST_F('SwitchAccessPredicateTest', 'IsInterestingSubtree', function() {
  this.runWithLoadedTree(testWebsite(),
      function(desktop) {
        const t = getTree(desktop);

        assertTrue(SwitchAccessPredicate.isInterestingSubtree(t.root));
        assertTrue(SwitchAccessPredicate.isInterestingSubtree(t.upper1));
        assertTrue(SwitchAccessPredicate.isInterestingSubtree(t.upper2));
        assertTrue(SwitchAccessPredicate.isInterestingSubtree(t.lower1));
        assertTrue(SwitchAccessPredicate.isInterestingSubtree(t.lower2));
        assertFalse(SwitchAccessPredicate.isInterestingSubtree(t.lower3));
        assertTrue(SwitchAccessPredicate.isInterestingSubtree(t.leaf1));
        assertFalse(SwitchAccessPredicate.isInterestingSubtree(t.leaf2));
        assertTrue(SwitchAccessPredicate.isInterestingSubtree(t.leaf3));
        assertFalse(SwitchAccessPredicate.isInterestingSubtree(t.leaf4));
        assertTrue(SwitchAccessPredicate.isInterestingSubtree(t.leaf5));
        assertFalse(SwitchAccessPredicate.isInterestingSubtree(t.leaf6));
        assertFalse(SwitchAccessPredicate.isInterestingSubtree(t.leaf7));
      }
  );
});

TEST_F('SwitchAccessPredicateTest', 'IsActionable', function() {
  const treeString =
      '<button style="position:absolute; top:-100px;">button1</button>' +
      '<button disabled>button2</button>' +
      '<a href="https://www.google.com/" aria-label="link1">link1</a>' +
      '<input type="text" aria-label="input1">input1</input>' +
      '<button>button3</button>' +
      '<div aria-label="div1"><p>p1</p></div>'
  this.runWithLoadedTree('data:text/html;charset=utf-8,' + treeString,
      function(desktop) {
        this.setDesktop(desktop);
        // Objects that are offscreen should not be actionable.
        const button1 = this.getNodeByName('button1');
        assertFalse(SwitchAccessPredicate.isActionable(button1));

        // Disabled objects are not actionable.
        const button2 = this.getNodeByName('button2');
        assertFalse(SwitchAccessPredicate.isActionable(button2));

        // Root web areas are not directly actionable.
        const treeWalker = this.getNodesForRole(
                               chrome.automation.RoleType.ROOT_WEB_AREA);
        while (treeWalker.node) {
          assertFalse(SwitchAccessPredicate.isActionable(treeWalker.node));
          treeWalker.next();
        }

        // Links are considered actionable.
        const link1 = this.getNodeByName('link1');
        assertTrue(SwitchAccessPredicate.isActionable(link1));

        // Inputs are also considered actionable.
        const input1 = this.getNodeByName('input1');
        assertTrue(SwitchAccessPredicate.isActionable(input1));

        // Buttons are generally actionable.
        const button3 = this.getNodeByName('button3');
        assertTrue(SwitchAccessPredicate.isActionable(button3));

        // Divs are not generally actionable.
        const div1 = this.getNodeByName('div1');
        assertFalse(SwitchAccessPredicate.isActionable(div1));

        // Static text is not actionable.
        const p1 = this.getNodeByName('p1');
        assertFalse(SwitchAccessPredicate.isActionable(p1));
      }
  );
});


TEST_F('SwitchAccessPredicateTest', 'LeafPredicate', function() {
  this.runWithLoadedTree(testWebsite(),
      function(desktop) {
        const t = getTree(desktop);

        // Start with root as scope
        let leaf = SwitchAccessPredicate.leaf(t.root);
        assertFalse(leaf(t.root));
        assertTrue(leaf(t.upper1));
        assertTrue(leaf(t.upper2));

        // Set upper1 as scope
        leaf = SwitchAccessPredicate.leaf(t.upper1);
        assertFalse(leaf(t.upper1));
        assertTrue(leaf(t.lower1));
        assertTrue(leaf(t.leaf4));
        assertTrue(leaf(t.leaf5));

        // Set lower1 as scope
        leaf = SwitchAccessPredicate.leaf(t.lower1);
        assertFalse(leaf(t.lower1));
        assertTrue(leaf(t.leaf1));
        assertTrue(leaf(t.leaf2));
        assertTrue(leaf(t.leaf3));
      }
  );
});

TEST_F('SwitchAccessPredicateTest', 'RootPredicate', function() {
  this.runWithLoadedTree(testWebsite(),
      function(desktop) {
        const t = getTree(desktop);

        // Start with root as scope
        let root = SwitchAccessPredicate.root(t.root);
        assertTrue(root(t.root));
        assertFalse(root(t.upper1));
        assertFalse(root(t.upper2));

        // Set upper1 as scope
        root = SwitchAccessPredicate.root(t.upper1);
        assertTrue(root(t.upper1));
        assertFalse(root(t.lower1));
        assertFalse(root(t.lower2));

        // Set lower1 as scope
        root = SwitchAccessPredicate.root(t.lower1);
        assertTrue(root(t.lower1));
        assertFalse(root(t.leaf1));
        assertFalse(root(t.leaf2));
        assertFalse(root(t.leaf3));
      }
  );
});

TEST_F('SwitchAccessPredicateTest', 'VisitPredicate', function() {
  this.runWithLoadedTree(testWebsite(),
      function(desktop) {
        const t = getTree(desktop);

        // Start with root as scope
        let visit = SwitchAccessPredicate.visit(t.root);
        assertTrue(visit(t.root));
        assertTrue(visit(t.upper1));
        assertTrue(visit(t.upper2));

        // Set upper1 as scope
        visit = SwitchAccessPredicate.visit(t.upper1);
        assertTrue(visit(t.upper1));
        assertTrue(visit(t.lower1));
        assertFalse(visit(t.lower2));
        assertFalse(visit(t.leaf4));
        assertTrue(visit(t.leaf5));

        // Set lower1 as scope
        visit = SwitchAccessPredicate.visit(t.lower1);
        assertTrue(visit(t.lower1));
        assertTrue(visit(t.leaf1));
        assertFalse(visit(t.leaf2));
        assertTrue(visit(t.leaf3));

        // An uninteresting subtree should return false, regardless of scope
        assertFalse(visit(t.lower3));
        assertFalse(visit(t.leaf6));
        assertFalse(visit(t.leaf7));
      }
  );
});
