// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Include test fixture.
GEN_INCLUDE(['../../testing/chromevox_next_e2e_test_base.js']);

GEN_INCLUDE(['../../testing/mock_feedback.js']);

/**
 * Test fixture for LanguageSwitching.
 * @constructor
 * @extends {ChromeVoxE2ETest}
 */
function ChromeVoxLanguageSwitchingTest() {
  ChromeVoxNextE2ETest.call(this);
}

ChromeVoxLanguageSwitchingTest.prototype = {
  __proto__: ChromeVoxNextE2ETest.prototype,

  /** @override */
  setUp: function() {
    window.doCmd = this.doCmd;
  },

  /**
   * @return {!MockFeedback}
   */
  createMockFeedback: function() {
    var mockFeedback = new MockFeedback(this.newCallback(),
      this.newCallback.bind(this));

    mockFeedback.install();
    return mockFeedback;
  },

  /**
   * Create a function which performs the command |cmd|.
   * @param {string} cmd
   * @return {function(): void}
   */
  doCmd: function(cmd) {
    return function() {
      CommandHandler.onCommand(cmd);
    }
  },

  multipleLanguagesDoc: function() {/*!
    <p lang="en">Hello.</p>
    <p lang="es">Hola.</p>
    <p lang="fr">Salut.</p>
    <span lang="it">Ciao amico.</span>
  */},

  nestedLanguagesDoc: function() {/*!
    <p id="breakfast" lang="en">In the morning, I sometimes eat breakfast.</p>
    <p id="lunch" lang="fr">Dans l'apres-midi, je dejeune.</p>
    <p id="greeting" lang="en">
      Hello it's a pleasure to meet you.
    <span lang="fr">Comment ca va?</span>Switching back to English.<span lang="es">Hola.</span>Goodbye.
</p>
  */},

  buttonAndLinkDoc: function() {/*!
    <body lang="es">
      <p>This is a paragraph, spoken in English.</p>
      <button type="submit">This is a button, spoken in Spanish.</button>
      <a href="https://www.google.com">This is a link, spoken in Spanish.</a>
    </body>
  */},

  japaneseAndEnglishDoc: function() {/*!
    <head>
    <meta charset="utf-8">
    <p>Hello, my name is 太田あきひろ. It's a pleasure to meet you. どうぞよろしくお願いします.</p>
    </head>
  */},

  switchWhenUnlabeledDoc: function() {/*!
  <head>
  <meta charset="utf-8">
  <p>This text should be read in English. 차에 한하여 중임할 수. Followed by English.</p>
  </head>
  */},

  noSwitchEnglishFrenchDoc: function() {/*!
    <p>
      This entire object should be read in English, even the following French
      passage: salut mon ami! Ca va? Bien, et toi? It's hard to differentiate
      between latin-based languages.
    </p>
  */},

  japaneseAndChineseUnlabeledDoc: function() {/*!
    <meta charset="utf-8">
    <p>
      天気はいいですね. 右万諭全中結社原済権人点掲年難出面者会追
    </p>
  */},

  japaneseAndKoreanNotEnoughJapaneseDoc: function() {/*!
    <meta charset="utf-8">
    <p lang="ko">
      私は. 법률이 정하는 바에 의하여 대법관이 아닌 법관을 둘 수 있다
    </p>
  */},

  unlabeledSingleCharacterDoc: function() {/*!
    <meta charset="utf-8">
    <p>ど</p>
  */},

  // The purpose of this doc is to test functionality with three-letter language
  // codes. Asturian has a language code of 'ast'. It is a language spoken
  // in Principality of Asturias, Spain.
  asturianAndJapaneseDoc: function() {/*!
    <meta charset="utf-8">
    <p lang="ja">ど</p>
    <p lang="ast">
      Pretend that this text is Asturian. Testing three-letter language code logic.
    </p>
  */},
};

TEST_F('ChromeVoxLanguageSwitchingTest', 'MultipleLanguagesTest', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.multipleLanguagesDoc, function() {
    // Turn on language switching.
    localStorage['languageSwitching'] = 'true';
    mockFeedback.call(doCmd('jumpToTop')).expectSpeechWithLanguage('en', 'en: Hello.');
    mockFeedback.call(doCmd('nextLine')).expectSpeechWithLanguage('es', 'es: Hola.');
    mockFeedback.call(doCmd('nextLine')).expectSpeechWithLanguage('fr', 'fr: Salut.');
    mockFeedback.call(doCmd('nextLine')).expectSpeechWithLanguage('it', 'it: Ciao amico.');
    mockFeedback.replay();
  });
});

TEST_F('ChromeVoxLanguageSwitchingTest', 'NestedLanguagesTest', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.nestedLanguagesDoc, function() {
    localStorage['languageSwitching'] = 'true';
    // We should be able to switch languages when each component is labeled
    // with a language.
    mockFeedback.call(doCmd('jumpToTop'))
        .expectSpeechWithLanguage('en', 'en: In the morning, I sometimes eat breakfast.');
    mockFeedback.call(doCmd('nextLine'))
        .expectSpeechWithLanguage('fr', "fr: Dans l'apres-midi, je dejeune.");
    mockFeedback.call(doCmd('nextLine'))
        .expectSpeechWithLanguage('en', "en: Hello it's a pleasure to meet you. ");
    mockFeedback.call(doCmd('nextLine'))
        .expectSpeechWithLanguage('fr', 'fr: Comment ca va?');
    mockFeedback.call(doCmd('nextLine'))
        .expectSpeechWithLanguage('en', 'en: Switching back to English.');
    mockFeedback.call(doCmd('nextLine'))
        .expectSpeechWithLanguage('es', 'es: Hola.');
    mockFeedback.call(doCmd('nextLine'))
        .expectSpeechWithLanguage('en', 'en: Goodbye.');
    mockFeedback.replay();
  });
});

// TODO(akihiroota): Investigate why this test fails on linux-cros-rel.
TEST_F('ChromeVoxLanguageSwitchingTest', 'DISABLED_ButtonAndLinkTest', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.buttonAndLinkDoc, function(root) {
    localStorage['languageSwitching'] = 'true';
    mockFeedback.call(doCmd('jumpToTop'))
      // Inner-node language detection is able to label this as 'en' and
      // overwrite the author-provided language of 'es'.
      .expectSpeechWithLanguage('en', 'en: This is a paragraph, spoken in English.')
      .call(doCmd('nextObject'))
      .expectSpeechWithLanguage('es', 'es: This is a button, spoken in Spanish.')
      .expectSpeechWithLanguage(undefined, 'Button', 'Press Search+Space to activate.')
      .call(doCmd('nextObject'))
      .expectSpeechWithLanguage('es', 'This is a link, spoken in Spanish.')
      .expectSpeechWithLanguage(undefined, 'Link');
    mockFeedback.replay();
  });
});

TEST_F('ChromeVoxLanguageSwitchingTest', 'JapaneseAndEnglishUnlabeledTest', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.japaneseAndEnglishDoc, function(root) {
    localStorage['languageSwitching'] = 'true';
    // We are able to separate out English and Japanese because they use
    // different scripts.
    mockFeedback.call(doCmd('jumpToTop'))
      .expectSpeechWithLanguage('en', 'en: Hello, my name is ')
      .expectSpeechWithLanguage('ja', 'ja: 太田あきひろ. ')
      // Expect 'en-us' because inner-node language of 'en' doesn't come with
      // high enough probability. We fall back on node-level detected language,
      // which is 'en-us'.
      .expectSpeechWithLanguage('en-us', "en-us: It's a pleasure to meet you. ")
      .expectSpeechWithLanguage('ja', 'ja: どうぞよろしくお願いします.');
    mockFeedback.replay();
  });
});


TEST_F('ChromeVoxLanguageSwitchingTest', 'SwitchWhenUnlabeledTest', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.switchWhenUnlabeledDoc, function(root) {
    localStorage['languageSwitching'] = 'true';
    // We are able to separate out English and Korean because they use
    // different scripts.
    mockFeedback.call(doCmd('jumpToTop'))
      .expectSpeechWithLanguage('en', 'en: This text should be read in English. ')
      .expectSpeechWithLanguage('ko', 'ko: 차에 한하여 중임할 수. ')
      // Expect 'en-us' because inner-node language of 'en' doesn't come with
      // high enough probability. We fall back on node-level detected language,
      // which is 'en-us'.
      .expectSpeechWithLanguage('en-us', 'en-us: Followed by English.');
    mockFeedback.replay();
  });
});


TEST_F('ChromeVoxLanguageSwitchingTest', 'NoSwitchEnglishFrenchTest', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.noSwitchEnglishFrenchDoc, function(root) {
    localStorage['languageSwitching'] = 'true';
    // Unable to separate out English and French when unlabeled.
    mockFeedback.call(doCmd('jumpToTop'))
      .expectSpeechWithLanguage('en', "en: This entire object should be read in English, even the following French passage: salut mon ami! Ca va? Bien, et toi? It's hard to differentiate between latin-based languages.");
    mockFeedback.replay();
  });
});

TEST_F('ChromeVoxLanguageSwitchingTest', 'UnlabeledSingleCharacterTest', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.unlabeledSingleCharacterDoc, function(root) {
    localStorage['languageSwitching'] = 'true';
    // We are able to detect and switch at the character level if the character
    // is unique to a certian script. In this case, 'ど' only appears in
    // Japanese, and therefore we can confidently switch languages.
    mockFeedback.call(doCmd('jumpToTop'))
        .expectSpeechWithLanguage('ja', 'ja: ど');
    mockFeedback.replay();
  });
});

TEST_F('ChromeVoxLanguageSwitchingTest', 'JapaneseAndChineseUnlabeled', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.japaneseAndChineseUnlabeledDoc, function(root) {
    localStorage['languageSwitching'] = 'true';
    // Unable to separate out Japanese and Chinese if unlabeled.
    mockFeedback.call(doCmd('jumpToTop'))
        .expectSpeechWithLanguage('ja', 'ja: 天気はいいですね. 右万諭全中結社原済権人点掲年難出面者会追');
    mockFeedback.replay();
  });
});

TEST_F('ChromeVoxLanguageSwitchingTest', 'JapaneseAndKoreanNotEnoughJapanese', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.japaneseAndKoreanNotEnoughJapaneseDoc, function(root) {
    localStorage['languageSwitching'] = 'true';
    // Unable to separate out Japanese and Korean if unlabeled.
    mockFeedback.call(doCmd('jumpToTop'))
        .expectSpeechWithLanguage('ko', 'ko: 私は. 법률이 정하는 바에 의하여 대법관이 아닌 법관을 둘 수 있다');
    mockFeedback.replay();
  });
});

TEST_F('ChromeVoxLanguageSwitchingTest', 'AsturianTest', function() {
  var mockFeedback = this.createMockFeedback();
  this.runWithLoadedTree(this.asturianAndJapaneseDoc, function(root) {
    localStorage['languageSwitching'] = 'true';
    mockFeedback.call(doCmd('jumpToTop'))
        .expectSpeechWithLanguage('ja', 'ja: ど')
        .call(doCmd('nextObject'))
        .expectSpeechWithLanguage('ast', 'ast: Pretend that this text is Asturian. Testing three-letter language code logic.');
    mockFeedback.replay();
  });
});
