// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

GEN_INCLUDE(['../../testing/assert_additions.js']);
GEN_INCLUDE(['../../testing/chromevox_next_e2e_test_base.js']);

/**
 * Gets the braille output and asserts that it matches expected values.
 * Annotations in the output that are primitive strings are ignored.
 */
function checkBrailleOutput(expectedText, expectedSpans, output) {
  var actualOutput = output.brailleOutputForTest;
  // Remove string annotations.  These are tested in the speech output and
  // there's no need to clutter the tests with the corresponding braille
  // annotations.
  var actualSpans = actualOutput.spans_.filter(function(span) {
    return (typeof span.value !== 'string');
  });
  checkOutput_(
      expectedText, expectedSpans, actualOutput.toString(), actualSpans);
}

function checkSpeechOutput(expectedText, expectedSpans, output) {
  var actualOutput = output.speechOutputForTest;
  checkOutput_(expectedText,
               expectedSpans,
               actualOutput.toString(),
               actualOutput.spans_);
}

/** @private */
function checkOutput_(expectedText, expectedSpans, actualText, actualSpans) {
  assertEquals(expectedText, actualText);

  function describeSpanPrettyPrint(span) {
    return describeSpan(span).replace(':', ': ')
        .replace('"value":', 'value:')
        .replace('"start":', 'start:')
        .replace('"end":', 'end:')
        .replace('"', '\'');
  }

  function describeSpan(span) {
    var obj = {value: span.value, start: span.start, end: span.end};
    if (obj.value instanceof Output.NodeSpan) {
      obj.value.node = (obj.value.node.name || '') + ' ' +
          obj.value.node.toString();
    }
    return JSON.stringify(obj);
  }

  function describeActualSpans() {
    return '\nAll actual spans:\n' +
        actualSpans.map(describeSpanPrettyPrint).join('\n');
  }

  for (var i = 0, max = Math.max(expectedSpans.length, actualSpans.length);
       i < max; ++i) {
    var expectedSpan = expectedSpans[i];
    var actualSpan = actualSpans[i];
    if (!expectedSpan)
      throw Error('Unexpected span in ' + expectedText + ': ' +
          describeSpan(actualSpan) + describeActualSpans());
    if (!actualSpan)
      throw Error('Missing expected span in ' + expectedText + ': ' +
          describeSpan(expectedSpan) + describeActualSpans());
    var equal = true;
    if (expectedSpan.start !== actualSpan.start ||
        expectedSpan.end !== actualSpan.end) {
      equal = false;
    } else if (expectedSpan.value instanceof Output.NodeSpan &&
        (!(actualSpan.value instanceof Output.NodeSpan) ||
        expectedSpan.value.node !== actualSpan.value.node)) {
      equal = false;
    } else {
      equal = (JSON.stringify(expectedSpan.value) ===
          JSON.stringify(actualSpan.value));
    }
    if (!equal) {
      throw Error('Spans differ in ' + expectedText + ':\n' +
          'Expected: ' + describeSpan(expectedSpan) + '\n' +
          'Got     : ' + describeSpan(actualSpan) + describeActualSpans());
    }
  }
}

/**
 * Test fixture for output.js.
 * @constructor
 * @extends {ChromeVoxNextE2ETestBase}
 */
function OutputE2ETest() {
  ChromeVoxNextE2ETest.call(this);
}

OutputE2ETest.prototype = {
  __proto__: ChromeVoxNextE2ETest.prototype,

  /** @override */
  setUp: function() {
    window.Dir = AutomationUtil.Dir;
    window.RoleType = chrome.automation.RoleType;
    this.forceContextualLastOutput();   
  }
};

TEST_F('OutputE2ETest', 'Links', function() {
  this.runWithLoadedTree('<a href="#">Click here</a>',
    function(root) {
      var el = root.firstChild.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'Click here|Link', 'spans_': [
        // Attributes.
        {value: 'name', start: 0, end: 10},

        // Link earcon (based on the name).
        {value: {earconId: 'LINK'}, start: 0, end: 10},

        {value: 'role', start: 11, end: 15}
      ]}, o.speechOutputForTest);
      checkBrailleOutput(
          'Click here lnk',
          [{value: new Output.NodeSpan(el), start: 0, end: 14}],
          o);
  });
});

TEST_F('OutputE2ETest', 'Checkbox', function() {
  this.runWithLoadedTree('<input type="checkbox">',
    function(root) {
      var el = root.firstChild.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      checkSpeechOutput('|Check box|Not checked',
          [
            {value: new Output.EarconAction('CHECK_OFF'), start: 0, end: 0},
            {value: 'role', start: 1, end: 10}
          ],
          o);
      checkBrailleOutput(
          'chk ( )',
          [{value: new Output.NodeSpan(el), start: 0, end: 7}],
          o);
  });
});

TEST_F('OutputE2ETest', 'InLineTextBoxValueGetsIgnored', function() {
  this.runWithLoadedTree('<p>OK',
    function(root) {
      var el = root.firstChild.firstChild.firstChild;
      assertEquals('inlineTextBox', el.role);
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'OK', 'spans_': [
        // Attributes.
        {value: 'name', start: 0, end: 2}
      ]}, o.speechOutputForTest);
      checkBrailleOutput(
          'OK',
          [{value: new Output.NodeSpan(el), start: 0, end: 2}],
          o);

      el = root.firstChild.firstChild;
      assertEquals('staticText', el.role);
      range = cursors.Range.fromNode(el);
      o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'OK', 'spans_': [
        // Attributes.
        {value: 'name', start: 0, end: 2}
      ]}, o.speechOutputForTest);
      checkBrailleOutput(
          'OK',
          [{value: new Output.NodeSpan(el), start: 0, end: 2}],
          o);
  });
});

TEST_F('OutputE2ETest', 'Headings', function() {
  this.runWithLoadedTree(function() {/*!
      <h1>a</h1><h2>b</h2><h3>c</h3><h4>d</h4><h5>e</h5><h6>f</h6>
      <h1><a href="a.com">b</a></h1> */},
    function(root) {
      var el = root.firstChild;
      for (var i = 1; i <= 6; ++i) {
        var range = cursors.Range.fromNode(el);
        var o = new Output().withSpeechAndBraille(range, null, 'navigate');
        var letter = String.fromCharCode('a'.charCodeAt(0) + i -1);
        assertEqualsJSON({string_: letter + '|Heading ' + i, 'spans_': [
          // Attributes.
          {value: 'nameOrDescendants', start: 0, end: 1}
        ]}, o.speechOutputForTest);
        checkBrailleOutput(
            letter + ' h' + i,
            [{value: new Output.NodeSpan(el), start: 0, end: 4}],
            o);
        el = el.nextSibling;
      }

      range = cursors.Range.fromNode(el);
      o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'b|Heading 1', 'spans_': [
        {value: 'nameOrDescendants', start: 0, end: 1}
      ]}, o.speechOutputForTest);
      checkBrailleOutput(
          'b h1',
          [{value: new Output.NodeSpan(el), start: 0, end: 4}],
          o);
  });
});

TEST_F('OutputE2ETest', 'Audio', function() {
  this.runWithLoadedTree('<audio src="foo.mp3" controls></audio>',
    function(root) {
      var el = root.find({role: 'button'});
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');

      checkSpeechOutput('play|Button|begin playback|audio|Tool bar',
          [
            {value: new Output.EarconAction('BUTTON'), start: 0, end: 4},
            {value: 'description', start: 12, end: 26},
            {value: 'name', start: 27, end: 32},
            {value: 'role', start: 33, end: 41}
          ],
          o);

      checkBrailleOutput(
          'play btn begin playback audio tlbar',
          [{value: new Output.NodeSpan(el), start: 0, end: 23},
           {value: new Output.NodeSpan(el.parent), start: 24, end: 35}],
          o);

      el = el.nextSibling.nextSibling;
      var prevRange = range;
      range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, prevRange, 'navigate');
      checkSpeechOutput('0|Min 0|Max 0||Slider|audio time scrubber',
          [
            {value: 'valueForRange', start: 0, end: 1},
            {value: 'name', start: 14, end: 14},
            {value: new Output.EarconAction('SLIDER'), start: 14, end: 14},
            {value: 'role', start: 15, end: 21},
            {value: 'description', start: 22, end: 41}
          ],
          o);
      checkBrailleOutput(
          '0 min:0 max:0 sldr audio time scrubber',
          [{value: new Output.NodeSpan(el), start: 0, end: 38}],
          o);
  });
});

TEST_F('OutputE2ETest', 'Input', function() {
  this.runWithLoadedTree(
      '<input type="text"></input>' +
      '<input type="email"></input>' +
      '<input type="password"></input>' +
      '<input type="tel"></input>'          +
      '<input type="number"></input>' +
      '<input type="time"></input>' +
      '<input type="date"></input>' +
      '<input type="file"</input>' +
      '<input type="search"</input>' +
      '<input type="invalidType"</input>',
    function(root) {
      var expectedSpans = [
        {value: 'name', start: 0, end: 0},
        {value: new Output.EarconAction('EDITABLE_TEXT'), start: 0, end: 0},
        {value: new Output.SelectionSpan(0, 0, 0), start: 1, end: 1},
        {value: 'value', start: 1, end: 1},
        {value: 'inputType', start: 2}
      ];

      var expectedSpeechValues = [
        '||Edit text',
        '||Edit text, email entry',
        '||Password edit text',
        '||Edit text numeric only',
        ['0|Min 0|Max 0||Spin button',
         [{value: 'valueForRange', start: 0, end: 1},
          {value: 'name', start: 14, end: 14},
          {value: new Output.EarconAction('LISTBOX'), start: 14, end: 14},
          {value: 'role', start: 15, end: 26}]
        ],
        ['Time control',
         [{value: 'role', start: 0, end: 12}]
        ],
        ['Date control',
         [{value: 'role', start: 0, end: 12}]
        ],
        ['Choose File|No file chosen|Button',
         [{value: 'name', start: 0, end: 11},
          {value: new Output.EarconAction("BUTTON"), start: 0, end: 11},
          {value: 'value', start: 12, end: 26},
          {value: 'role', start: 27, end: 33}]
        ],
        '||Edit text, search entry',
        '||Edit text'
      ];
      // TODO(plundblad): Some of these are wrong, there should be an initial
      // space for the cursor in edit fields.
      var expectedBrailleValues = [
        ' ed',
        ' @ed 8dot',
        ' pwded',
        ' #ed',
        {string_: '0 min:0 max:0 spnbtn'},
        {string_: 'time'},
        {string_: 'date'},
        {string_: 'Choose File No file chosen btn'},
        ' srched',
        ' ed'
      ];
      assertEquals(expectedSpeechValues.length, expectedBrailleValues.length);

      var el = root.firstChild.firstChild;
      expectedSpeechValues.forEach(function(expectedValue) {
        var range = cursors.Range.fromNode(el);
        var o = new Output().withSpeechAndBraille(range, null, 'navigate');
        if (typeof expectedValue == 'object') {
          checkSpeechOutput(expectedValue[0], expectedValue[1], o);
        } else {
          expectedSpans[4].end = expectedValue.length;
          checkSpeechOutput(expectedValue, expectedSpans, o);
        }
        el = el.nextSibling;
      });

      el = root.firstChild.firstChild;
      expectedBrailleValues.forEach(function(expectedValue) {
        var range = cursors.Range.fromNode(el);
        var o = new Output().withBraille(range, null, 'navigate');
        if (typeof expectedValue === 'string') {
          checkBrailleOutput(
              expectedValue,
              [{value: {startIndex: 0, endIndex: 0},
                start: 0, end: 0},
               {value: new Output.NodeSpan(el), start: 0,
                end: expectedValue.length}],
              o);
        } else {
          checkBrailleOutput(
              expectedValue.string_,
              [{value: new Output.NodeSpan(el), start: 0,
                end: expectedValue.string_.length}],
              o);
        }
        el = el.nextSibling;
      });
  });
});

TEST_F('OutputE2ETest', 'List', function() {
  this.runWithLoadedTree(
      '<ul><li aria-label="a">a<li>b<li>c</ul>',
    function(root) {
      var el = root.firstChild.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      checkSpeechOutput('a||List item|list|with 3 items',
          [
            { value: 'nameOrDescendants', start: 0, end: 1 },
            { value: { earconId: 'LIST_ITEM' }, start: 2, end: 2 },
            { value: 'role', start: 13, end: 17 }
          ],
          o);
      // TODO(plundblad): This output is wrong.  Add special handling for
      // braille here.
      checkBrailleOutput(
          'a lstitm list +3',
          [
            {value: new Output.NodeSpan(el), start: 0, end: 8},
            {value: new Output.NodeSpan(el.parent), start: 9, end: 16}
          ],
          o);
  });
});

TEST_F('OutputE2ETest', 'Tree', function() {
  this.runWithLoadedTree(function() {/*!
    <ul role="tree">
      <li aria-expanded="true" role="treeitem">a
      <li role="treeitem">b
      <li aria-expanded="false" role="treeitem">c
    </ul>
  */},
  function(root) {
    var el = root.firstChild.children[0].firstChild;
    var range = cursors.Range.fromNode(el);
    var o = new Output().withSpeechAndBraille(range, null, 'navigate');
    checkSpeechOutput(
        'a|Tree item|Expanded| 1 of 3 | level 1 |Tree|with 3 items',
        [
          {value: 'name', 'start': 0, end: 1},
          {value: 'state', start: 12, end: 20},
          {value: 'role','start': 40, end: 44},
        ],
    o);
    checkBrailleOutput(
        'a tritm - 1/3 level 1 tree +3',
        [{value: new Output.NodeSpan(el), start: 0, end: 1},
         {value: new Output.NodeSpan(el.parent), start: 2, end: 22},
         {value: new Output.NodeSpan(el.parent.parent), start: 22, end: 29}],
        o);

    el = root.firstChild.children[1].firstChild;
    range = cursors.Range.fromNode(el);
    o = new Output().withSpeechAndBraille(range, null, 'navigate');
    checkSpeechOutput(
        'b|Tree item| 2 of 3 | level 1 |Tree|with 3 items',
        [
          {value: 'name', start: 0, end: 1},
          {value: 'role', 'start': 31, end: 35}
        ],
        o);
    checkBrailleOutput(
        'b tritm 2/3 level 1 tree +3',
        [{value: new Output.NodeSpan(el), start: 0, end: 1},
         {value: new Output.NodeSpan(el.parent), start: 2, end: 20},
         {value: new Output.NodeSpan(el.parent.parent), start: 20, end: 27}],
        o);

    el = root.firstChild.children[2].firstChild;
    range = cursors.Range.fromNode(el);
    o = new Output().withSpeechAndBraille(range, null, 'navigate');
    checkSpeechOutput(
        'c|Tree item|Collapsed| 3 of 3 | level 1 |Tree|with 3 items',
        [
          {value: 'name', 'start': 0, end: 1},
          {value: 'state', start: 12, end: 21},
          {value: 'role','start': 41, end: 45},
        ],
        o);
    checkBrailleOutput(
        'c tritm + 3/3 level 1 tree +3',
        [{value: new Output.NodeSpan(el), start: 0, end: 1},
         {value: new Output.NodeSpan(el.parent), start: 2, end: 22},
         {value: new Output.NodeSpan(el.parent.parent), start: 22, end: 29}],
        o);
  });
});

TEST_F('OutputE2ETest', 'Menu', function() {
  this.runWithLoadedTree(function() {/*!
    <div role="menu">
      <div role="menuitem">a</div>
    </div>
  */},
  function(root) {
    var el = root.firstChild.firstChild;
    var range = cursors.Range.fromNode(el);
    var o = new Output().withSpeechAndBraille(range, null, 'navigate');
    checkSpeechOutput('a|Menu item| 1 of 1 |Menu', [
      {value: 'name', start: 0, end: 1},
      {value: 'role', start: 21, end: 25}], o);
    checkBrailleOutput(
        'a mnuitm 1/1 mnu',
        [{value: new Output.NodeSpan(el), start: 0, end: 12},
         {value: new Output.NodeSpan(el.parent), start: 13, end: 16}],
        o);
  });
});

TEST_F('OutputE2ETest', 'ListBox', function() {
  this.runWithLoadedTree(function() {/*!
    <select multiple>
      <option>1</option>
      <option>2</option>
    </select>
  */},
  function(root) {
    var el = root.firstChild.firstChild.firstChild;
    var range = cursors.Range.fromNode(el);
    var o = new Output().withSpeechAndBraille(range, null, 'navigate');
    checkSpeechOutput('1|List item| 1 of 2 |List box|with 2 items',
        [
          {value: 'name', start: 0, end: 1},
          {value: new Output.EarconAction('LIST_ITEM'), start: 0,end: 1},
          {value: 'role', start: 21, end: 29}
        ],
        o);
    checkBrailleOutput(
        '1 lstitm 1/2 lstbx +2',
        [{value: new Output.NodeSpan(el), start: 0, end: 12},
         {value: new Output.NodeSpan(el.parent), start: 13, end: 21}],
        o);
  });
});

SYNC_TEST_F('OutputE2ETest', 'MessageIdAndEarconValidity', function() {
  for (var key in Output.ROLE_INFO_) {
    var value = Output.ROLE_INFO_[key];
    if (value.msgId) {
      Msgs.getMsg(value.msgId);
      Msgs.getMsg(value.msgId + '_brl');
      assertFalse(/[A-Z]+/.test(value.msgId));
    }
    if (value.earconId)
      assertNotNullNorUndefined(cvox.Earcon[value.earconId]);
  }
  for (var key in Output.STATE_INFO_) {
    var value = Output.STATE_INFO_[key];
    for (innerKey in value) {
      var innerValue = value[innerKey];
      if (typeof(innerValue) == 'boolean') {
        assertEquals('isRoleSpecific', innerKey);
        continue;
      }
      Msgs.getMsg(innerValue.msgId);
      Msgs.getMsg(innerValue.msgId + '_brl');
      assertFalse(/[A-Z]+/.test(innerValue.msgId));
      if (innerValue.earconId)
        assertNotNullNorUndefined(cvox.Earcon[innerValue.earconId]);
    }
  }
  for (var key in Output.INPUT_TYPE_MESSAGE_IDS_) {
    var msgId = Output.INPUT_TYPE_MESSAGE_IDS_[key];
    assertFalse(/[A-Z]+/.test(msgId));
    Msgs.getMsg(msgId);
    Msgs.getMsg(msgId + '_brl');
  }
});

TEST_F('OutputE2ETest', 'DivOmitsRole', function() {
  this.runWithLoadedTree(function() {/*!
    <div>that has content</div>
    <div></div>
    <div role='group'><div>nested content</div></div>
  */},
  function(root) {
    var el = root.firstChild.firstChild;
    var range = cursors.Range.fromNode(el);
    var o = new Output().withSpeechAndBraille(range, null, 'navigate');
    checkSpeechOutput('that has content',
                      [{value: 'name', start: 0, end: 16}], o);
    checkBrailleOutput(
        'that has content',
        [{value: new Output.NodeSpan(el), start: 0, end: 16}],
        o);
  });
});

TEST_F('OutputE2ETest', 'LessVerboseAncestry', function() {
  this.runWithLoadedTree(function() {/*!
    <div role="article"><p>inside</p></div>
    <div role="article"><p>inside</p></div>
    <div role="banner"><p>inside</p></div>
  */},
  function(root) {
    var first = root.children[0].firstChild;
    var second = root.children[1].firstChild;
    var third = root.children[2].firstChild;
    var firstRange = cursors.Range.fromNode(first);
    var secondRange = cursors.Range.fromNode(second);
    var thirdRange = cursors.Range.fromNode(third);

    var oWithoutPrev = new Output().withSpeech(firstRange, null, 'navigate');
    var oWithPrev =
        new Output().withSpeech(secondRange, firstRange, 'navigate');
    var oWithPrevExit =
        new Output().withSpeech(thirdRange, secondRange, 'navigate');
    assertEquals('inside|Article', oWithoutPrev.speechOutputForTest.string_);

    // Make sure we don't read the exited article ancestry change.
    assertEquals('inside|Article', oWithPrev.speechOutputForTest.string_);

    // Different role; do read the exited article ancestry here.
    assertEquals('inside|Exited Article.|Banner',
                 oWithPrevExit.speechOutputForTest.string_);
  });
});

TEST_F('OutputE2ETest', 'Brief', function() {
  this.runWithLoadedTree(function() {/*!
    <div role="article"><p>inside</p></div>
  */},
  function(root) {
    var node = root.children[0].firstChild;
    var range = cursors.Range.fromNode(node);

    localStorage['useVerboseMode'] = 'false';
    var oWithoutPrev = new Output().withSpeech(range, null, 'navigate');
    assertEquals('inside', oWithoutPrev.speechOutputForTest.string_);
  });
});

TEST_F('OutputE2ETest', 'AuralStyledHeadings', function() {

  function toFixed(num) {
    return parseFloat(Number(num).toFixed(1));
  }
  this.runWithLoadedTree(function() {/*!
      <h1>a</h1><h2>b</h2><h3>c</h3><h4>d</h4><h5>e</h5><h6>f</h6>
      <h1><a href="a.com">b</a></h1> */},
    function(root) {
      var el = root.firstChild;
      for (var i = 1; i <= 6; ++i) {
        var range = cursors.Range.fromNode(el);
        var o = new Output().withRichSpeech(range, null, 'navigate');
        var letter = String.fromCharCode('a'.charCodeAt(0) + i -1);
        assertEqualsJSON({string_: letter + '|Heading ' + i, 'spans_': [
          // Aural styles.
          {value: {'relativePitch': toFixed(-0.1 * i)}, start: 0, end: 0},

          // Attributes.
          {value: 'nameOrDescendants', start: 0, end: 1},

          {value: {'relativePitch': -0.2}, start: 2, end: 2}
        ]}, o.speechOutputForTest);
        el = el.nextSibling;
      }
  });
});
TEST_F('OutputE2ETest', 'ToggleButton', function() {
  this.runWithLoadedTree(function() {/*!
      <div role="button" aria-pressed="true">Subscribe</div>*/},
    function(root) {
      var el = root.firstChild;
      var o = new Output().withSpeech(cursors.Range.fromNode(el));
      assertEqualsJSON({string_: '|Subscribe|Button|Pressed', spans_: [
        {value: {earconId: 'CHECK_ON'}, start: 0, end: 0},
        {value: 'name', start: 1, end:10},
        {value: 'role', start: 11, end: 17}
      ]}, o.speechOutputForTest);
  });
});

TEST_F('OutputE2ETest', 'JoinDescendants', function() {
  this.runWithLoadedTree(function() {/*!
      <p>This</p>
      <p>fragment</p>
      <p>Should be separated</p>
      <p>with spaces</p>
    */},
    function(root) {
      var unjoined = new Output().format('$descendants', root);
      assertEquals('This|fragment|Should be separated|with spaces'
                   , unjoined.speechOutputForTest.string_);

      var joined = new Output().format('$joinedDescendants', root);
      assertEquals('This fragment Should be separated with spaces'
                   , joined.speechOutputForTest.string_);
  });
});

TEST_F('OutputE2ETest', 'ComplexDiv', function() {
  this.runWithLoadedTree(function() {/*!
      <div><button>ok</button></div>
    */},
    function(root) {
      var div = root.find({role: 'genericContainer'});
      var o = new Output().withSpeech(cursors.Range.fromNode(div));
      assertEquals('ok', o.speechOutputForTest.string_);
  });
});

TEST_F('OutputE2ETest', 'ContainerFocus', function() {
  this.runWithLoadedTree(function() {/*!
      <div role="row" tabindex=0 aria-label="start"></div>
      <div role="row" tabindex=0 aria-label="end"></div>
    */},
    function(root) {
      var r1 = cursors.Range.fromNode(root.firstChild);
      var r2 = cursors.Range.fromNode(root.lastChild);
      assertEquals('start|Row',
          new Output().withSpeech(r1, r2).speechOutputForTest.string_);
  });
});

TEST_F('OutputE2ETest', 'BraileWhitespace', function() {
  this.runWithLoadedTree(function() {/*!
    <p>this is a <em>test</em>of emphasized text</p>
  */},
  function(root) {
    var start = root.firstChild.firstChild;
    var end = root.firstChild.lastChild;
    var range = new cursors.Range(
        cursors.Cursor.fromNode(start),
        cursors.Cursor.fromNode(end)
        );
    var o = new Output().withBraille(range, null, 'navigate');
    checkBrailleOutput(
        'this is a test of emphasized text',
        [
          {value: new Output.NodeSpan(start), start: 0, end: 10},
          {value: new Output.NodeSpan(start.nextSibling), start: 10, end: 14},
          {value: new Output.NodeSpan(end), start: 15, end: 33}
        ],
        o);
  });
});

TEST_F('OutputE2ETest', 'BrailleAncestry', function() {
  this.runWithLoadedTree(function() {/*!
    <ul><li><a href="#">test</a></li></ul>
  */},
  function(root) {
    var text = root.find({role: 'inlineTextBox'});
    var link = root.find({role: 'link'});
    var listItem = root.find({role: 'listItem'});
    var list = root.find({role: 'list'});
    var range = cursors.Range.fromNode(text);
    var o = new Output().withBraille(range, null, 'navigate');
    checkBrailleOutput(
        'test lnk lstitm list +1',
        [
          {value: new Output.NodeSpan(text), start: 0, end: 4},
          {value: new Output.NodeSpan(link), start: 5, end: 8},
          {value: new Output.NodeSpan(listItem), start: 9, end: 15},
          {value: new Output.NodeSpan(list), start: 16, end: 23}
        ],

        o);
  });
});

TEST_F('OutputE2ETest', 'RangeOutput', function() {
  this.runWithLoadedTree(function(root) {/*!
    <div role="slider" aria-valuemin="1" aria-valuemax="10" aria-valuenow="2"
                       aria-label="volume"></div>
    <progress aria-valuemin="1" aria-valuemax="10"
              aria-valuenow="2" aria-label="volume"></progress>
    <meter aria-valuemin="1" aria-valuemax="10" aria-valuenow="2"
           aria-label="volume"></meter>
    <div role="spinbutton" aria-valuemin="1" aria-valuemax="10"
                           aria-valuenow="2" aria-label="volume"></div>
  */}, function(root) {

    var obj = root.find({role: RoleType.SLIDER});
    var o = new Output().withSpeech(cursors.Range.fromNode(obj));
      checkSpeechOutput('2|Min 1|Max 10|volume|Slider',
          [
            {value: 'valueForRange', start: 0, end: 1},
            {value: 'name', start: 15,end: 21},
            {value: new Output.EarconAction('SLIDER'), start: 15, end: 21},
            {value: 'role', start: 22, end: 28}
          ],
          o);

    obj = root.find({role: RoleType.PROGRESS_INDICATOR});
    o = new Output().withSpeech(cursors.Range.fromNode(obj));
      checkSpeechOutput('2|Min 1|Max 10|volume|Progress indicator',
          [
            {value: 'valueForRange', start: 0, end: 1},
            {value: 'name', start: 15,end: 21},
            {value: 'role', start: 22, end: 40}
          ],
          o);

    obj = root.find({role: RoleType.METER});
    o = new Output().withSpeech(cursors.Range.fromNode(obj));
      checkSpeechOutput('2|Min 1|Max 10|volume|Meter',
          [
            {value: 'valueForRange', start: 0, end: 1},
            {value: 'name', start: 15,end: 21},
            {value: 'role', start: 22, end: 27}
          ],
          o);

    obj = root.find({role: RoleType.SPIN_BUTTON});
    o = new Output().withSpeech(cursors.Range.fromNode(obj));
      checkSpeechOutput('2|Min 1|Max 10|volume|Spin button',
          [
            {value: 'valueForRange', start: 0, end: 1},
            {value: 'name', start: 15,end: 21},
            {value: new Output.EarconAction('LISTBOX'), start: 15, end: 21},
            {value: 'role', start: 22, end: 33}
          ],
          o);
  });
});

TEST_F('OutputE2ETest', 'RoleDescription', function() {
  this.runWithLoadedTree(function(root) {/*!
    <div aria-label="hi" role="button" aria-roledescription="foo"></div>
  */}, function(root) {
    var obj = root.find({role: RoleType.BUTTON});
    var o = new Output().withSpeech(cursors.Range.fromNode(obj));
    checkSpeechOutput('hi|foo',
        [
          {value: 'name', start: 0, end: 2},
          {value: new Output.EarconAction('BUTTON'), start: 0, end: 2},
          {value: 'role', start: 3, end: 6}
        ],
      o);
  });
});

SYNC_TEST_F('OutputE2ETest', 'ValidateCommonProperties', function() {
  var stateStr = '$state';
  var restrictionStr = '$restriction';
  var descStr = '$description';
  var missingState = [];
  var missingRestriction = [];
  var missingDescription = [];
  for (var key in Output.RULES.navigate) {
    var speak = Output.RULES.navigate[key].speak;
    if (!speak)
    continue;

    if (speak.indexOf(stateStr) == -1)
      missingState.push(key);
    if (speak.indexOf(restrictionStr) == -1)
      missingRestriction.push(key);
    if (speak.indexOf(descStr) == -1)
      missingDescription.push(key);
  }

  // This filters out known roles that don't have states or descriptions.
  var notStated = [RoleType.CLIENT, RoleType.EMBEDDED_OBJECT,
      RoleType.INLINE_TEXT_BOX, RoleType.LIST_MARKER,
      RoleType.PARAGRAPH, RoleType.ROOT_WEB_AREA,
      RoleType.STATIC_TEXT, RoleType.WINDOW];
  var notRestricted = [RoleType.ALERT, RoleType.ALERT_DIALOG, RoleType.CELL,
      RoleType.CLIENT, RoleType.EMBEDDED_OBJECT, RoleType.GENERIC_CONTAINER,
      RoleType.IMAGE, RoleType.INLINE_TEXT_BOX, RoleType.LIST,
      RoleType.LIST_MARKER, RoleType.PARAGRAPH, RoleType.REGION,
      RoleType.ROOT_WEB_AREA, RoleType.ROW_HEADER, RoleType.STATIC_TEXT,
      RoleType.TABLE_HEADER_CONTAINER, RoleType.TIMER, RoleType.WINDOW];
  var notDescribed = [RoleType.CLIENT, RoleType.EMBEDDED_OBJECT,
      RoleType.INLINE_TEXT_BOX, RoleType.LIST_MARKER, RoleType.PARAGRAPH,
      RoleType.ROOT_WEB_AREA, RoleType.STATIC_TEXT, RoleType.WINDOW];
  missingState = missingState.filter(function(state) {
    return notStated.indexOf(state) == -1;
  });
  missingRestriction = missingRestriction.filter(function(restriction) {
    return notRestricted.indexOf(restriction) == -1;
  });
  missingDescription = missingDescription.filter(function(desc) {
    return notDescribed.indexOf(desc) == -1;
  });

  assertEquals(0, missingState.length,
               'Unexpected missing states for output rules ' +
                   missingState.join(' '));
  assertEquals(0, missingRestriction.length,
               'Unexpected missing rectriction for output rules ' +
                   missingRestriction.join(' '));
  assertEquals(0, missingDescription.length,
               'Unexpected missing descriptions for output rules ' +
                   missingDescription.join(' '));

  // If you fail this test, you likely need to insert a $state, $restriction or
  // $description into the output rules for the printed roles. Typically,
  // $description goes towards the end of the output rule, though this depends
  // on the role. For example, it could make sense to put $description before
  // $value or $state.

  // You can also add the role to be excluded from this check. You are
  // encouraged to write a more intelligent output rule to provide friendlier
  // feedback. For example, 'not selected apple item 2 out of 3' coming from a
  // message template like '@smart_selection($state, $name, $indexInParent,
  // $childCount)'.
  // In such cases, you are responsible for ensuring you include all states and
  // descriptions somewhere in the output.
});
