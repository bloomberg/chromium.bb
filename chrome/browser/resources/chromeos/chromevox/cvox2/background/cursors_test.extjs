// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Include test fixture.
GEN_INCLUDE(['../../testing/chromevox_next_e2e_test_base.js']);

/**
 * Test fixture for cvox2.cursors.
 * @constructor
 * @extends {ChromeVoxNextE2ETest}
 */
function CursorsTest() {
  ChromeVoxNextE2ETest.call(this);
}

CursorsTest.prototype = {
  __proto__: ChromeVoxNextE2ETest.prototype,

  /** Test cursors.Cursor. @const {string} */
  CURSOR: 'cursor',

  /** Test cursors.Range. @const {string} */
  RANGE: 'range',

  /** @override */
  setUp: function() {
    // Various aliases.
    window.BACKWARD = constants.Dir.BACKWARD;
    window.FORWARD = constants.Dir.FORWARD;
    window.CHARACTER = cursors.Unit.CHARACTER;
    window.WORD = cursors.Unit.WORD;
    window.LINE = cursors.Unit.LINE;
    window.NODE = cursors.Unit.NODE;
    window.BOUND = cursors.Movement.BOUND;
    window.DIRECTIONAL = cursors.Movement.DIRECTIONAL;
    window.RoleType = chrome.automation.RoleType;
  },

  /**
   * Performs a series of operations on a cursor and asserts the result.
   * @param {cursors.Cursor} cursor The starting cursor.
   * @param {!Array<Array<
   *     cursors.Unit|
   *     cursors.Movement|
   *     constants.Dir|
   *     Object>>}
   *     moves An array of arrays. Each inner array contains 4 items: unit,
   *     movement, direction, and assertions object. See example below.
   */
  cursorMoveAndAssert: function(cursor, moves) {
    var move = null;
    while (move = moves.shift()) {
      cursor = cursor.move(move[0], move[1], move[2]);
      var expected = move[3];
      this.makeCursorAssertion(expected, cursor);
    }
  },

  /**
   * Performs a series of operations on a range and asserts the result.
   * @param {cursors.Range} range The starting range.
   * @param {!Array<Array<
   *          cursors.Unit|
   *          cursors.Movement|
   *          constants.Dir|
   *          Object>>}
   *     moves An array of arrays. Each inner array contains 4 items: unit,
   *     direction, start and end assertions objects. See example below.
   */
  rangeMoveAndAssert: function(range, moves) {
    var move = null;
    while (move = moves.shift()) {
      range = range.move(move[0], move[1]);
      var expectedStart = move[2];
      var expectedEnd = move[3];

      this.makeCursorAssertion(expectedStart, range.start);
      this.makeCursorAssertion(expectedEnd, range.end);
    }
  },

  /**
   * Makes assertions about the given |cursor|.
   * @param {Object} expected
   * @param {Cursor} cursor
   */
  makeCursorAssertion: function(expected, cursor) {
    if (goog.isDef(expected.value))
      assertEquals(expected.value, cursor.node.name);
    if (goog.isDef(expected.index))
      assertEquals(expected.index, cursor.index);
  },

  /**
   * Runs the specified moves on the |doc| and asserts expectations.
   * @param {function} doc
   * @param {string=} opt_testType Either CURSOR or RANGE.
   */
  runCursorMovesOnDocument: function(doc, moves, opt_testType) {
    this.runWithLoadedTree(doc,
    function(root) {
      var start = null;

      // This occurs as a result of a load complete.
      var start = AutomationUtil.findNodePost(root,
          FORWARD,
          AutomationPredicate.leaf);

      var cursor = new cursors.Cursor(start, 0);
      if (!opt_testType || opt_testType == this.CURSOR) {
        var cursor = new cursors.Cursor(start, 0);
        this.cursorMoveAndAssert(cursor, moves);
      } else if (opt_testType == this.RANGE) {
        var range = new cursors.Range(cursor, cursor);
        this.rangeMoveAndAssert(range, moves);
      }
    });
  },

simpleDoc: function() {/*!
    <p>start <span>same line</span>
    <p>end
  */},

  multiInlineDoc: function() {/*!
    <p style='max-width: 5px'>start diff line</p>
    <p>end
  */}
};

TEST_F('CursorsTest', 'CharacterCursor', function() {
  this.runCursorMovesOnDocument(this.simpleDoc, [
    [CHARACTER, DIRECTIONAL, FORWARD, {index: 1, value: 'start '}],
    [CHARACTER, DIRECTIONAL, BACKWARD, {index: 0, value: 'start '}],
    // Bumps up against edge.
    [CHARACTER, DIRECTIONAL, BACKWARD, {index: 0, value: 'start '}],

    [CHARACTER, DIRECTIONAL, FORWARD, {index: 1, value: 'start '}],
    [CHARACTER, DIRECTIONAL, FORWARD, {index: 2, value: 'start '}],
    [CHARACTER, DIRECTIONAL, FORWARD, {index: 3, value: 'start '}],
    [CHARACTER, DIRECTIONAL, FORWARD, {index: 4, value: 'start '}],
    [CHARACTER, DIRECTIONAL, FORWARD, {index: 5, value: 'start '}],

    [CHARACTER, DIRECTIONAL, FORWARD, {index: 0, value: 'same line'}],
    [CHARACTER, DIRECTIONAL, FORWARD, {index: 1, value: 'same line'}],
    [CHARACTER, DIRECTIONAL, BACKWARD, {index: 0, value: 'same line'}],

    [CHARACTER, DIRECTIONAL, BACKWARD, {index: 5, value: 'start '}],]);
});

TEST_F('CursorsTest', 'WordCursor', function() {
  this.runCursorMovesOnDocument(this.simpleDoc, [
    // Word (BOUND).
    [WORD, BOUND, BACKWARD, {index: 0, value: 'start '}],
    [WORD, BOUND, BACKWARD, {index: 0, value: 'start '}],
    [WORD, BOUND, FORWARD, {index: 5, value: 'start '}],
    [WORD, BOUND, FORWARD, {index: 5, value: 'start '}],

    // Word (DIRECTIONAL).
    [WORD, DIRECTIONAL, FORWARD, {index: 0, value: 'same line'}],
    [WORD, DIRECTIONAL, FORWARD, {index: 5, value: 'same line'}],

    [WORD, DIRECTIONAL, FORWARD, {index: 0, value: 'end'}],
    [WORD, DIRECTIONAL, FORWARD, {index: 0, value: 'end'}],

    [WORD, DIRECTIONAL, BACKWARD, {index: 5, value: 'same line'}],
    [WORD, DIRECTIONAL, BACKWARD, {index: 0, value: 'same line'}],

    [WORD, DIRECTIONAL, BACKWARD, {index: 0, value: 'start '}],
    [WORD, DIRECTIONAL, BACKWARD, {index: 0, value: undefined}]]);
});

TEST_F('CursorsTest', 'CharacterWordCursor', function() {
  this.runCursorMovesOnDocument(this.simpleDoc, [
    [CHARACTER, DIRECTIONAL, FORWARD, {index: 1, value: 'start '}],

    [WORD, DIRECTIONAL, FORWARD, {index: 0, value: 'same line'}],
    [CHARACTER, DIRECTIONAL, FORWARD, {index: 1, value: 'same line'}],
    [WORD, DIRECTIONAL, FORWARD, {index: 5, value: 'same line'}],
    [CHARACTER, DIRECTIONAL, BACKWARD, {index: 4, value: 'same line'}],
    [WORD, DIRECTIONAL, FORWARD, {index: 5, value: 'same line'}],
    [CHARACTER, DIRECTIONAL, FORWARD, {index: 6, value: 'same line'}],
    [WORD, DIRECTIONAL, BACKWARD, {index: 0, value: 'same line'}],
    [CHARACTER, DIRECTIONAL, BACKWARD, {index: 5, value: 'start '}],
    [CHARACTER, DIRECTIONAL, BACKWARD, {index: 4, value: 'start '}],
    [WORD, DIRECTIONAL, BACKWARD, {index: 0, value: 'start '}]]);
});

TEST_F('CursorsTest', 'LineCursor', function() {
  this.runCursorMovesOnDocument(this.simpleDoc, [
    // Line (BOUND).
    [LINE, BOUND, FORWARD, {value: 'same line'}],
    [LINE, BOUND, FORWARD, {value: 'same line'}],
    [LINE, BOUND, BACKWARD, {value: 'start '}],
    [LINE, BOUND, BACKWARD, {value: 'start '}],

    // Line (DIRECTIONAL).
    [LINE, DIRECTIONAL, FORWARD, {value: 'end'}],
    [LINE, DIRECTIONAL, FORWARD, {value: 'end'}],
    [LINE, DIRECTIONAL, BACKWARD, {value: 'same line'}],
    // Bump against an edge.
    [LINE, DIRECTIONAL, BACKWARD, {value: 'same line'}],
    [LINE, BOUND, BACKWARD, {value: 'start '}]]);
});

TEST_F('CursorsTest', 'CharacterRange', function() {
  this.runCursorMovesOnDocument(this.simpleDoc, [
      [CHARACTER, FORWARD,
          {value: 'start ', index: 1}, {value: 'start ', index: 2}],
      [CHARACTER, FORWARD,
          {value: 'start ', index: 2}, {value: 'start ', index: 3}],
      [CHARACTER, FORWARD,
          {value: 'start ', index: 3}, {value: 'start ', index: 4}],
      [CHARACTER, FORWARD,
          {value: 'start ', index: 4}, {value: 'start ', index: 5}],
      [CHARACTER, FORWARD,
          {value: 'start ', index: 5}, {value: 'start ', index: 6}],

      [CHARACTER, FORWARD,
          {value: 'same line', index: 0}, {value: 'same line', index: 1}],

      [CHARACTER, BACKWARD,
          {value: 'start ', index: 5}, {value: 'start ', index: 6}],
      [CHARACTER, BACKWARD,
          {value: 'start ', index: 4}, {value: 'start ', index: 5}],
      [CHARACTER, BACKWARD,
          {value: 'start ', index: 3}, {value: 'start ', index: 4}],
      [CHARACTER, BACKWARD,
          {value: 'start ', index: 2}, {value: 'start ', index: 3}],
      [CHARACTER, BACKWARD,
          {value: 'start ', index: 1}, {value: 'start ', index: 2}],
      [CHARACTER, BACKWARD,
          {value: 'start ', index: 0}, {value: 'start ', index: 1}],
      [CHARACTER, BACKWARD,
          {value: undefined, index: 0}, {value: undefined, index: 1}],
  ], this.RANGE);
});

TEST_F('CursorsTest', 'WordRange', function() {
  this.runCursorMovesOnDocument(this.simpleDoc, [
      [WORD, FORWARD,
          {value: 'same line', index: 0}, {value: 'same line', index: 4}],
      [WORD, FORWARD,
          {value: 'same line', index: 5}, {value: 'same line', index: 9}],

      [WORD, FORWARD,
          {value: 'end', index: 0}, {value: 'end', index: 3}],
      [WORD, FORWARD,
          {value: 'end', index: 0}, {value: 'end', index: 3}],

      [WORD, BACKWARD,
          {value: 'same line', index: 5}, {value: 'same line', index: 9}],
      [WORD, BACKWARD,
          {value: 'same line', index: 0}, {value: 'same line', index: 4}],

      [WORD, BACKWARD,
          {value: 'start ', index: 0}, {value: 'start ', index: 5}],
      [WORD, BACKWARD,
          {value: undefined, index: 0}, {value: undefined, index: 5}],
  ], this.RANGE);
});


TEST_F('CursorsTest', 'LineRange', function() {
  this.runCursorMovesOnDocument(this.simpleDoc, [
        [LINE, FORWARD, {value: 'end', index: 0}, {value: 'end', index: 3}],
      [LINE, FORWARD, {value: 'end', index: 0}, {value: 'end', index: 3}],
      [LINE, FORWARD, {value: 'end', index: 0}, {value: 'end', index: 3}],
      [LINE, FORWARD, {value: 'end', index: 0}, {value: 'end', index: 3}],

      [LINE, BACKWARD,
          {value: 'start ', index: 0}, {value: 'same line', index: 9}],

      [LINE, BACKWARD,
          {value: 'start ', index: 0}, {value: 'same line', index: 9}]
  ], this.RANGE);
});

TEST_F('CursorsTest', 'DontSplitOnNodeNavigation', function() {
  this.runWithLoadedTree(this.multiInlineDoc, function(root) {
    var para = root.firstChild;
    assertEquals('paragraph', para.role);
    var cursor = new cursors.Cursor(para.firstChild, 0);
    cursor = cursor.move(NODE, DIRECTIONAL, FORWARD);
    assertEquals('staticText', cursor.node.role);
    assertEquals('end', cursor.node.name);

    cursor = cursor.move(NODE, DIRECTIONAL, BACKWARD);
    assertEquals('staticText', cursor.node.role);
    assertEquals('start diff line', cursor.node.name);

    assertEquals('inlineTextBox', cursor.node.firstChild.role);
    assertEquals('start ', cursor.node.firstChild.name);
    assertEquals('diff ', cursor.node.firstChild.nextSibling.name);
    assertEquals('line', cursor.node.lastChild.name);
  });
});

TEST_F('CursorsTest', 'WrappingCursors', function() {
  this.runWithLoadedTree(this.multiInlineDoc, function(root) {
    var first = root;
    var last = root.lastChild.firstChild;
    var cursor = new cursors.WrappingCursor(first, -1);

    // Wrap from first node to last node.
    cursor = cursor.move(NODE, DIRECTIONAL, BACKWARD);
    assertEquals(last, cursor.node);

    // Wrap from last node to first node.
    cursor = cursor.move(NODE, DIRECTIONAL, FORWARD);
    assertEquals(first, cursor.node);
  });
});

TEST_F('CursorsTest', 'IsInWebRange', function() {
  this.runWithLoadedTree(this.simpleDoc, function(root) {
    var para = root.firstChild;
    var webRange = new cursors.Range.fromNode(para);
    var auraRange = cursors.Range.fromNode(root.parent);
    assertFalse(auraRange.isWebRange());
    assertTrue(webRange.isWebRange());
  });
});

TEST_F('CursorsTest', 'DISABLED_SingleDocSelection', function() {
  this.runWithLoadedTree(function() {/*!
    <span>start</span>
    <p><a href="google.com">google home page</a></p>
    <p>some more text</p>
    <p>end of text</p>
  */},
  function(root) {
    var link = root.find({role: RoleType.LINK});
    var p1 = root.find({role: RoleType.PARAGRAPH});
    var p2 = p1.nextSibling;

    var singleSel = new cursors.Range(
        new cursors.Cursor(link, 0),
        new cursors.Cursor(link, 1));

    var multiSel = new cursors.Range(
        new cursors.Cursor(p1.firstChild, 2),
        new cursors.Cursor(p2.firstChild, 4));

    function verifySel() {
      if (root.anchorObject == link.firstChild) {
        assertEquals(link.firstChild, root.anchorObject);
        assertEquals(0, root.anchorOffset);
        assertEquals(link.firstChild, root.focusObject);
        assertEquals(1, root.focusOffset);
        this.listenOnce(root, 'textSelectionChanged', verifySel);
        multiSel.select();
      } else if (root.anchorObject == p1.firstChild) {
        assertEquals(p1.firstChild, root.anchorObject);
        assertEquals(2, root.anchorOffset);
        assertEquals(p2.firstChild, root.focusObject);
        assertEquals(4, root.focusOffset);
      }
    }

    this.listenOnce(root, 'textSelectionChanged', verifySel, true);
    singleSel.select();
  });
});

TEST_F('CursorsTest', 'MultiLineOffsetSelection', function() {
  this.runWithLoadedTree(this.multiInlineDoc, function(root) {
    var secondLine = root.firstChild.firstChild.firstChild.nextSibling;
    assertEquals('inlineTextBox', secondLine.role);
    assertEquals('diff ', secondLine.name);

    var secondLineCursor = new cursors.Cursor(secondLine, -1);
    // The selected node moves to the static text node.
    assertEquals(secondLineCursor.node.parent,
                 secondLineCursor.selectionNode_);

    // This selects the entire node via a character offset.
    assertEquals(6, secondLineCursor.selectionIndex_);

    // Index into the characters.
    secondLineCursor = new cursors.Cursor(secondLine, 1);
    assertEquals(7, secondLineCursor.selectionIndex_);

    // Now, try selecting via node offsets.
    var cursor = new cursors.Cursor(root.firstChild, -1);
    assertEquals(root, cursor.selectionNode_);
    assertEquals(0, cursor.selectionIndex_);

    cursor = new cursors.Cursor(root.firstChild.nextSibling, -1);
    assertEquals(root, cursor.selectionNode_);
    assertEquals(1, cursor.selectionIndex_);
  });
});

TEST_F('CursorsTest', 'InlineElementOffset', function() {
  this.runWithLoadedTree(function() {/*!
    <span>start</span>
    <p>This<br> is a<a href="#g">test</a>of selection</p>
  */}, function(root) {
    root.addEventListener('textSelectionChanged', this.newCallback(function(evt) {
      // Test setup moves initial focus; ensure we don't test that here.
      if (testNode != root.anchorObject)
        return;

      // This is a little unexpected though not really incorrect; Ctrl+C works.
      assertEquals(testNode, root.anchorObject);
      assertEquals(ofSelectionNode, root.focusObject);
      assertEquals(4, root.anchorOffset);
      assertEquals(1, root.focusOffset);
    }));

    // This is the link's static text.
    var testNode = root.lastChild.lastChild.previousSibling.firstChild;
    assertEquals(RoleType.STATIC_TEXT, testNode.role);
    assertEquals('test', testNode.name);

    var ofSelectionNode = root.lastChild.lastChild;
    var cur = new cursors.Cursor(ofSelectionNode, 0);
    assertEquals('of selection', cur.selectionNode_.name);
    assertEquals(RoleType.STATIC_TEXT, cur.selectionNode_.role);
    assertEquals(0, cur.selectionIndex_);

    var curIntoO = new cursors.Cursor(ofSelectionNode, 1);
    assertEquals('of selection', curIntoO.selectionNode_.name);
    assertEquals(RoleType.STATIC_TEXT, curIntoO.selectionNode_.role);
    assertEquals(1, curIntoO.selectionIndex_);

    var oRange = new cursors.Range(cur, curIntoO);
    oRange.select();
  });
});

TEST_F('CursorsTest', 'ContentEquality', function() {
  this.runWithLoadedTree(function() {/*!
    <div role="region">this is a test</button>
  */}, function(root) {
    var region = root.firstChild;
    assertEquals(RoleType.REGION, region.role);
    var staticText = region.firstChild;
    assertEquals(RoleType.STATIC_TEXT, staticText.role);
    var inlineTextBox = staticText.firstChild;
    assertEquals(RoleType.INLINE_TEXT_BOX, inlineTextBox.role);

    var rootRange = cursors.Range.fromNode(root);
    var regionRange = cursors.Range.fromNode(region);
    var staticTextRange = cursors.Range.fromNode(staticText);
    var inlineTextBoxRange = cursors.Range.fromNode(inlineTextBox);

    // Positive cases.
    assertTrue(regionRange.contentEquals(staticTextRange));
    assertTrue(staticTextRange.contentEquals(regionRange));
    assertTrue(inlineTextBoxRange.contentEquals(staticTextRange));
    assertTrue(staticTextRange.contentEquals(inlineTextBoxRange));

    // Negative cases.
    assertFalse(rootRange.contentEquals(regionRange));
    assertFalse(rootRange.contentEquals(staticTextRange));
    assertFalse(rootRange.contentEquals(inlineTextBoxRange));
    assertFalse(regionRange.contentEquals(rootRange));
    assertFalse(staticTextRange.contentEquals(rootRange));
    assertFalse(inlineTextBoxRange.contentEquals(rootRange));
  });
});

TEST_F('CursorsTest', 'DeepEquivalency', function() {
  this.runWithLoadedTree(function() {/*!
    <p style="word-spacing:100000px">this is a test</p>
  */}, function(root) {
    var textNode = root.find({role: RoleType.STATIC_TEXT});

    var text = new cursors.Cursor(textNode, 2);
    deep = text.deepEquivalent;
    assertEquals('this ', deep.node.name);
    assertEquals(RoleType.INLINE_TEXT_BOX, deep.node.role);
    assertEquals(2, deep.index);

    text = new cursors.Cursor(textNode, 5);
    deep = text.deepEquivalent;
    assertEquals('is ', deep.node.name);
    assertEquals(RoleType.INLINE_TEXT_BOX, deep.node.role);
    assertEquals(0, deep.index);

    text = new cursors.Cursor(textNode, 7);
    deep = text.deepEquivalent;
    assertEquals('is ', deep.node.name);
    assertEquals(RoleType.INLINE_TEXT_BOX, deep.node.role);
    assertEquals(2, deep.index);

    text = new cursors.Cursor(textNode, 8);
    deep = text.deepEquivalent;
    assertEquals('a ', deep.node.name);
    assertEquals(RoleType.INLINE_TEXT_BOX, deep.node.role);
    assertEquals(0, deep.index);

    text = new cursors.Cursor(textNode, 11);
    deep = text.deepEquivalent;
    assertEquals('test', deep.node.name);
    assertEquals(RoleType.INLINE_TEXT_BOX, deep.node.role);
    assertEquals(1, deep.index);

    // This is the only selection that can be placed at the length of the node's
    // text. This only happens at the end of a line.
    text = new cursors.Cursor(textNode, 14);
    deep = text.deepEquivalent;
    assertEquals('test', deep.node.name);
    assertEquals(RoleType.INLINE_TEXT_BOX, deep.node.role);
    assertEquals(4, deep.index);

    // However, any offset larger is invalid.
    text = new cursors.Cursor(textNode, 15);
    deep = text.deepEquivalent;
    assertTrue(text.equals(deep));
  });
});
