// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * Test fixture for select_to_speak.js.
 * @constructor
 * @extends {testing.Test}
 */
function SelectToSpeakUnitTest () {
  testing.Test.call(this);
}

SelectToSpeakUnitTest.prototype = {
  __proto__: testing.Test.prototype,

  /** @override */
  extraLibraries: [
    'test_support.js',
    'select_to_speak.js'
  ]
};

TEST_F('SelectToSpeakUnitTest', 'Overlaps', function() {
  var rect1 = {left: 0, top: 0, width: 100, height: 100};
  var rect2 = {left: 80, top: 0, width: 100, height: 20};
  var rect3 = {left: 0, top: 80, width: 20, height: 100};

  assertTrue(overlaps(rect1, rect1));
  assertTrue(overlaps(rect2, rect2));
  assertTrue(overlaps(rect3, rect3));
  assertTrue(overlaps(rect1, rect2));
  assertTrue(overlaps(rect1, rect3));
  assertFalse(overlaps(rect2, rect3));
});

TEST_F('SelectToSpeakUnitTest', 'RectFromPoints', function() {
  var rect = {left: 10, top: 20, width: 50, height: 60};

  assertNotEquals(
      JSON.stringify(rect),
      JSON.stringify(rectFromPoints(0, 0, 10, 10)));
  assertEquals(
      JSON.stringify(rect),
      JSON.stringify(rectFromPoints(10, 20, 60, 80)));
  assertEquals(
      JSON.stringify(rect),
      JSON.stringify(rectFromPoints(60, 20, 10, 80)));
  assertEquals(
      JSON.stringify(rect),
      JSON.stringify(rectFromPoints(10, 80, 60, 20)));
  assertEquals(
      JSON.stringify(rect),
      JSON.stringify(rectFromPoints(60, 80, 10, 20)));
});

TEST_F('SelectToSpeakUnitTest', 'GetNodeVisibilityState', function() {
  let nodeWithoutRoot1 = {root: null};
  let nodeWithoutRoot2 = {root: null, state: {invisible: true}};
  assertEquals(getNodeState(nodeWithoutRoot1), NodeState.NODE_STATE_INVALID);
  assertEquals(getNodeState(nodeWithoutRoot2), NodeState.NODE_STATE_INVALID);

  let invisibleNode1 = {root: {}, parent: {role: ''}, state: {invisible: true}};
  // Currently nodes aren't actually marked 'invisible', so we need to navigate
  // up their tree.
  let invisibleNode2 = {root: {}, parent: {role: 'window',
                        state: {invisible: true}}, state: {}};
  let invisibleNode3 = {root: {}, parent: invisibleNode2, state: {}};
  let invisibleNode4 = {root: {}, parent: invisibleNode3, state: {}};
  assertEquals(getNodeState(invisibleNode1), NodeState.NODE_STATE_INVISIBLE);
  assertEquals(getNodeState(invisibleNode2), NodeState.NODE_STATE_INVISIBLE);
  assertEquals(getNodeState(invisibleNode3), NodeState.NODE_STATE_INVISIBLE);

  let normalNode1 = {root: {}, parent: {role: 'window', state: {}}, state: {}};
  let normalNode2 = {root: {}, parent: {normalNode1}, state: {}};
  assertEquals(getNodeState(normalNode1), NodeState.NODE_STATE_NORMAL);
  assertEquals(getNodeState(normalNode2), NodeState.NODE_STATE_NORMAL);
});

TEST_F('SelectToSpeakUnitTest', 'GetNodeVisibilityStateWithRootWebArea',
    function() {
  // Currently nodes aren't actually marked 'invisible', so we need to navigate
  // up their tree.
  let window = {root: {}, role: 'window', state: {invisible: true}};
  let rootNode = {root: {}, parent: window, state: {}, role: 'rootWebArea'};
  let container = {root: rootNode, parent: rootNode, state: {}};
  let node = {root: rootNode, parent: container, state: {}};
  assertEquals(getNodeState(window), NodeState.NODE_STATE_INVISIBLE);
  assertEquals(getNodeState(container), NodeState.NODE_STATE_INVISIBLE);
  assertEquals(getNodeState(node), NodeState.NODE_STATE_INVISIBLE);

  // Make a fake iframe in this invisible window by adding another RootWebArea.
  // The iframe has no root but is parented to the container above.
  let iframeRoot = {parent: container, state: {}, role: 'rootWebArea'};
  let iframeContainer = {root: iframeRoot, parent: iframeRoot, state: {}};
  let iframeNode = {root: iframeRoot, parent: iframeContainer, state: {}};
  assertEquals(getNodeState(iframeContainer), NodeState.NODE_STATE_INVISIBLE);
  assertEquals(getNodeState(iframeNode), NodeState.NODE_STATE_INVISIBLE);

  // Make the window visible and try again.
  window.state = {};
  assertEquals(getNodeState(window), NodeState.NODE_STATE_NORMAL);
  assertEquals(getNodeState(container), NodeState.NODE_STATE_NORMAL);
  assertEquals(getNodeState(node), NodeState.NODE_STATE_NORMAL);
  assertEquals(getNodeState(iframeContainer), NodeState.NODE_STATE_NORMAL);
  assertEquals(getNodeState(iframeNode), NodeState.NODE_STATE_NORMAL);
});