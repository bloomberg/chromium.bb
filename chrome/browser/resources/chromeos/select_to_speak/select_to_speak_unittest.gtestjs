// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * Test fixture for select_to_speak.js.
 * @constructor
 * @extends {testing.Test}
 */
function SelectToSpeakUnitTest () {
  testing.Test.call(this);
}

SelectToSpeakUnitTest.prototype = {
  __proto__: testing.Test.prototype,

  /** @override */
  extraLibraries: [
    'test_support.js',
    'select_to_speak.js'
  ]
};

TEST_F('SelectToSpeakUnitTest', 'Overlaps', function() {
  var rect1 = {left: 0, top: 0, width: 100, height: 100};
  var rect2 = {left: 80, top: 0, width: 100, height: 20};
  var rect3 = {left: 0, top: 80, width: 20, height: 100};

  assertTrue(overlaps(rect1, rect1));
  assertTrue(overlaps(rect2, rect2));
  assertTrue(overlaps(rect3, rect3));
  assertTrue(overlaps(rect1, rect2));
  assertTrue(overlaps(rect1, rect3));
  assertFalse(overlaps(rect2, rect3));
});

TEST_F('SelectToSpeakUnitTest', 'RectFromPoints', function() {
  var rect = {left: 10, top: 20, width: 50, height: 60};

  assertNotEquals(
      JSON.stringify(rect),
      JSON.stringify(rectFromPoints(0, 0, 10, 10)));
  assertEquals(
      JSON.stringify(rect),
      JSON.stringify(rectFromPoints(10, 20, 60, 80)));
  assertEquals(
      JSON.stringify(rect),
      JSON.stringify(rectFromPoints(60, 20, 10, 80)));
  assertEquals(
      JSON.stringify(rect),
      JSON.stringify(rectFromPoints(10, 80, 60, 20)));
  assertEquals(
      JSON.stringify(rect),
      JSON.stringify(rectFromPoints(60, 80, 10, 20)));
});

TEST_F('SelectToSpeakUnitTest', 'GetNodeVisibilityState', function() {
  let nodeWithoutRoot1 = {root: null};
  let nodeWithoutRoot2 = {root: null, state: {invisible: true}};
  assertEquals(getNodeState(nodeWithoutRoot1), NodeState.NODE_STATE_INVALID);
  assertEquals(getNodeState(nodeWithoutRoot2), NodeState.NODE_STATE_INVALID);

  let invisibleNode1 = {root: {}, parent: {role: ''}, state: {invisible: true}};
  // Currently nodes aren't actually marked 'invisible', so we need to navigate
  // up their tree.
  let invisibleNode2 = {root: {}, parent: {role: 'window',
                        state: {invisible: true}}, state: {}};
  let invisibleNode3 = {root: {}, parent: invisibleNode2, state: {}};
  let invisibleNode4 = {root: {}, parent: invisibleNode3, state: {}};
  assertEquals(getNodeState(invisibleNode1), NodeState.NODE_STATE_INVISIBLE);
  assertEquals(getNodeState(invisibleNode2), NodeState.NODE_STATE_INVISIBLE);
  assertEquals(getNodeState(invisibleNode3), NodeState.NODE_STATE_INVISIBLE);

  let normalNode1 = {root: {}, parent: {role: 'window', state: {}}, state: {}};
  let normalNode2 = {root: {}, parent: {normalNode1}, state: {}};
  assertEquals(getNodeState(normalNode1), NodeState.NODE_STATE_NORMAL);
  assertEquals(getNodeState(normalNode2), NodeState.NODE_STATE_NORMAL);
});

TEST_F('SelectToSpeakUnitTest', 'GetNodeVisibilityStateWithRootWebArea',
    function() {
  // Currently nodes aren't actually marked 'invisible', so we need to navigate
  // up their tree.
  let window = {root: {}, role: 'window', state: {invisible: true}};
  let rootNode = {root: {}, parent: window, state: {}, role: 'rootWebArea'};
  let container = {root: rootNode, parent: rootNode, state: {}};
  let node = {root: rootNode, parent: container, state: {}};
  assertEquals(getNodeState(window), NodeState.NODE_STATE_INVISIBLE);
  assertEquals(getNodeState(container), NodeState.NODE_STATE_INVISIBLE);
  assertEquals(getNodeState(node), NodeState.NODE_STATE_INVISIBLE);

  // Make a fake iframe in this invisible window by adding another RootWebArea.
  // The iframe has no root but is parented to the container above.
  let iframeRoot = {parent: container, state: {}, role: 'rootWebArea'};
  let iframeContainer = {root: iframeRoot, parent: iframeRoot, state: {}};
  let iframeNode = {root: iframeRoot, parent: iframeContainer, state: {}};
  assertEquals(getNodeState(iframeContainer), NodeState.NODE_STATE_INVISIBLE);
  assertEquals(getNodeState(iframeNode), NodeState.NODE_STATE_INVISIBLE);

  // Make the window visible and try again.
  window.state = {};
  assertEquals(getNodeState(window), NodeState.NODE_STATE_NORMAL);
  assertEquals(getNodeState(container), NodeState.NODE_STATE_NORMAL);
  assertEquals(getNodeState(node), NodeState.NODE_STATE_NORMAL);
  assertEquals(getNodeState(iframeContainer), NodeState.NODE_STATE_NORMAL);
  assertEquals(getNodeState(iframeNode), NodeState.NODE_STATE_NORMAL);
});

TEST_F('SelectToSpeakUnitTest', 'getNextWordStartWithoutWordStarts', function() {
  let node = {node: {}};
  assertEquals(0, getNextWordStart('kitty cat', 0, node));
  assertEquals(1, getNextWordStart(' kitty cat', 0, node));
  assertEquals(6, getNextWordStart('kitty cat', 5, node));
  assertEquals(6, getNextWordStart('kitty cat', 6, node));
  assertEquals(7, getNextWordStart('kitty "cat"', 5, node));
});

TEST_F('SelectToSpeakUnitTest', 'getNextWordEndWithoutWordEnds', function() {
  let node = {node: {}};
  assertEquals(5, getNextWordEnd('kitty cat', 0, node));
  assertEquals(6, getNextWordEnd(' kitty cat', 0, node));
  assertEquals(9, getNextWordEnd('kitty cat', 6, node));
  assertEquals(9, getNextWordEnd('kitty cat', 7, node));
});

TEST_F('SelectToSpeakUnitTest', 'getNextWordStart', function() {
  let node = {node: {wordStarts: [0, 6]}, startChar: 0};
  assertEquals(0, getNextWordStart('kitty cat', 0, node));
  assertEquals(6, getNextWordStart('kitty cat', 5, node));
  assertEquals(6, getNextWordStart('kitty cat', 6, node));

  node.startChar = 10;
  assertEquals(10, getNextWordStart('once upon kitty cat', 9, node));
  assertEquals(16, getNextWordStart('once upon kitty cat', 15, node));
});

TEST_F('SelectToSpeakUnitTest', 'getNextWordEnd', function() {
  let node = {node: {wordEnds: [5, 9]}, startChar: 0};
  assertEquals(5, getNextWordEnd('kitty cat', 0, node));
  assertEquals(5, getNextWordEnd('kitty cat', 5, node));
  assertEquals(9, getNextWordEnd('kitty cat', 6, node));

  node.startChar = 10;
  assertEquals(15, getNextWordEnd('once upon kitty cat', 9, node));
  assertEquals(19, getNextWordEnd('once upon kitty cat', 17, node));
});

TEST_F('SelectToSpeakUnitTest', 'findAllMatching', function() {
  let rect = {left: 0, top: 0, width: 100, height: 100};
  let rootNode = {root: {}, state: {}, role: 'rootWebArea', state: {},
      location: {left: 0, top: 0, width: 600, height: 600}};
  let container1 = {root: rootNode, parent: rootNode, role: 'staticText',
      name: 'one two', state: {},
      location: {left: 0, top: 0, width: 200, height: 200}};
  let container2 = {root: rootNode, parent: rootNode, state: {},
      role: 'genericContainer',
      location: {left: 0, top: 0, width: 200, height: 200}};
  let node1 = {root: rootNode, parent: container1, name: 'one',
      role: 'inlineTextBox', state: {},
      location: {left: 50, top: 0, width: 50, height: 50}};
  let node2 = {root: rootNode, parent: container1, name: 'two',
      role: 'inlineTextBox', state: {},
      location: {left: 0, top: 50, width: 50, height: 50}};

  // Set up relationships between nodes.
  rootNode.children = [container1, container2];
  rootNode.firstChild = container1;
  container1.nextSibling = container2;
  container1.children = [node1, node2];
  container1.firstChild = node1;
  node1.nextSibling = node2;

  // Should get both children of the first container, without getting
  // the first container itself or the empty container.
  let result = [];
  assertTrue(findAllMatching(rootNode, rect, result));
  assertEquals(2, result.length);
  assertEquals(node1, result[0]);
  assertEquals(node2, result[1]);

  // If a node doesn't have a name, it should not be included.
  result = [];
  node2.name = undefined;
  assertTrue(findAllMatching(rootNode, rect, result));
  assertEquals(1, result.length);
  assertEquals(node1, result[0]);

  // Try a rect that only overlaps one of the children.
  result = [];
  node2.name = 'two';
  rect.height = 25;
  assertTrue(findAllMatching(rootNode, rect, result));
  assertEquals(1, result.length);
  assertEquals(node1, result[0]);

  // Now just overlap a different child.
  result = [];
  rect.top = 50;
  assertTrue(findAllMatching(rootNode, rect, result));
  assertEquals(1, result.length);
  assertEquals(node2, result[0]);

  // Offscreen should cause a node to be skipped.
  result = [];
  node2.state = {offscreen: true}
  assertFalse(findAllMatching(rootNode, rect, result));
  assertEquals(0, result.length);

  // No location should cause a node to be skipped.
  result = [];
  node2.state = {};
  node2.location = undefined;
  assertFalse(findAllMatching(rootNode, rect, result));

  // A non staticText container without a name should still have
  // children found.
  result = [];
  let node3 = {root: rootNode, parent: container2, name: 'three',
      state: {}, location: {left: 0, top: 50, width: 50, height: 50}};
  container2.firstChild = node3;
  assertTrue(findAllMatching(rootNode, rect, result));
  assertEquals(1, result.length);
  assertEquals(node3, result[0]);

  // A non staticText container with a valid name should not be
  // read if its children are read. Children take precidence.
  result = [];
  container2.name = 'container2';
  assertTrue(findAllMatching(rootNode, rect, result));
  assertEquals(1, result.length);
  assertEquals(node3, result[0]);

  // A non staticText container with a valid name which has only
  // children without names should be read instead of its children.
  result = [];
  node3.name = undefined;
  assertTrue(findAllMatching(rootNode, rect, result));
  assertEquals(1, result.length);
  assertEquals(container2, result[0]);
});

TEST_F('SelectToSpeakUnitTest', 'getDeepEquivalentForSelectionNoChildren',
    function() {
  let node = {name: 'Hello, world', children: []};
  let result = getDeepEquivalentForSelection(node, 0);
  assertEquals(node, result.node);
  assertEquals(0, result.offset);

  result = getDeepEquivalentForSelection(node, 6);
  assertEquals(node, result.node);
  assertEquals(6, result.offset);
});

TEST_F('SelectToSpeakUnitTest', 'getDeepEquivalentForSelectionSimpleChildren',
    function() {
  let child1 = {name: 'Hello,', children: []};
  let child2 = {name: ' world', children: []};
  let root = {name: 'Hello, world', children: [child1, child2]};
  let result = getDeepEquivalentForSelection(root, 0);
  assertEquals(child1, result.node);
  assertEquals(0, result.offset);

  result = getDeepEquivalentForSelection(root, 5);
  assertEquals(child1, result.node);
  assertEquals(5, result.offset);

  result = getDeepEquivalentForSelection(root, 6);
  assertEquals(child2, result.node);
  assertEquals(0, result.offset);

  result = getDeepEquivalentForSelection(root, 9);
  assertEquals(child2, result.node);
  assertEquals(3, result.offset);
});

TEST_F('SelectToSpeakUnitTest', 'getDeepEquivalentForSelectionComplexChildren',
    function() {
  let child1 = {name: 'Hello', children: []};
  let child2 = {name: undefined, children: []};  // Empty name
  let child3 = {name: ',', children: []};
  let child4 = {name: 'Hello,', children: [child1, child2, child3]};

  let child5 = {name: ' ', children: []};
  let child6 = {name: 'world', children: []};
  let child7 = {name: ' world', children: [child5, child6]};

  let root = {name: 'Hello, world', children: [child4, child7]};

  let result = getDeepEquivalentForSelection(root, 0);
  assertEquals(child1, result.node);
  assertEquals(0, result.offset);

  result = getDeepEquivalentForSelection(root, 5);
  assertEquals(child3, result.node);
  assertEquals(0, result.offset);

  result = getDeepEquivalentForSelection(root, 6);
  assertEquals(child5, result.node);
  assertEquals(0, result.offset);

  result = getDeepEquivalentForSelection(root, 9);
  assertEquals(child6, result.node);
  assertEquals(2, result.offset);
});