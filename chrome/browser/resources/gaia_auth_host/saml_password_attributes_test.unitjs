// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

GEN_INCLUDE([
    '//ui/webui/resources/js/cr.js',
    'saml_timestamps.js',
    'saml_password_attributes.js',
]);

function SamlPasswordAttributesUnitTest() {}

SamlPasswordAttributesUnitTest.prototype = {
  __proto__: testing.Test.prototype,

  // WebUI tests run accessibility checks by default, but unit tests don't.
  // Ideally this would be a unit test, but unit tests can't use the DOMParser.
  // WebUI tests can, so this is a WebUI test. But, this test has no UI to run
  // accessibility checks on, so we turn this off manually.
  runAccessibilityChecks: false,

  /** @override */
  testGenCppIncludes() {
    GEN(`#include "chrome/test/base/ui_test_utils.h"`);
    GEN(`#include "content/public/test/browser_test.h"`);
  },

  /** @override */
  testGenPreamble() {
    // Generates a preamble that calls InitializeTestData with the contents
    // of chrome/test/data/chromeos/login/saml_with_password_attributes.xml
    GEN(`
  BrowsePreload(GURL("chrome://DummyURL"));
  base::ScopedAllowBlockingForTesting allow_blocking;
  std::string xml_test_data;
  base::FilePath xml_path = ui_test_utils::GetTestFilePath(
        base::FilePath(FILE_PATH_LITERAL("chromeos/login")),
        base::FilePath(FILE_PATH_LITERAL("saml_with_password_attributes.xml")));
  base::ReadFileToString(xml_path, &xml_test_data);
  RunJavascriptFunction("initializeTestData", base::Value(xml_test_data));
    `);
  },
};

let XML_TEST_DATA;
let XML_TEST_DATA_WITH_ATTRIBUTES_REMOVED;

const initializeTestData = function(xml_test_data) {
  XML_TEST_DATA = xml_test_data;
  // Strips out the timestamps that are in the <AttributeValue> tags.
  XML_TEST_DATA_WITH_ATTRIBUTES_REMOVED = XML_TEST_DATA.replace(
      /<AttributeValue>[^<>]+/g,
      '<AttributeValue>');
};

TEST_F('SamlPasswordAttributesUnitTest', 'ReadInvalid', function() {
  // Make sure empty result is returned for empty input:
  let result = samlPasswordAttributes.readPasswordAttributes('');
  assertEquals('', result.modifiedTime);
  assertEquals('', result.expirationTime);
  assertEquals('', result.passwordChangeUrl);

  // Make sure empty result is returned for random junk:
  result = samlPasswordAttributes.readPasswordAttributes('<abc></abc>');
  assertEquals('', result.modifiedTime);
  assertEquals('', result.expirationTime);
  assertEquals('', result.passwordChangeUrl);

  // Make sure empty result is returned when the input is almost valid, but not quite:
  result = samlPasswordAttributes.readPasswordAttributes(
      XML_TEST_DATA_WITH_ATTRIBUTES_REMOVED);
  assertEquals('', result.modifiedTime);
  assertEquals('', result.expirationTime);
  assertEquals('', result.passwordChangeUrl);
});

TEST_F('SamlPasswordAttributesUnitTest', 'ReadValid', function() {
  const result = samlPasswordAttributes.readPasswordAttributes(XML_TEST_DATA);

  assertEquals(String(Date.parse('2019-02-22T11:50:58.421Z')),
               result.modifiedTime);
  assertEquals(String(Date.parse('2019-03-06T11:50:58.421Z')),
               result.expirationTime);
  assertEquals('https://example.com/adfs/portal/updatepassword/',
               result.passwordChangeUrl);
});
