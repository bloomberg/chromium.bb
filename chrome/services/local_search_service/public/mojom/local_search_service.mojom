// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module local_search_service.mojom;

import "chrome/services/local_search_service/public/mojom/types.mojom";

// LocalSearchService will run as a singleton service so that clients
// can request Indices from it. LocalSearchService will be responsible for
// creating Indices, but data update will be the responsibility of
// clients.
interface LocalSearchService {
  // Identifies a globally unique Index of related search data.
  enum IndexId {
    CROS_SETTINGS = 0
  };

  // A client can call this function to get the Index for |index_id|. If
  // the Index isn't created when this function is called, LocalSearchService
  // will create one.
  // Note, there should be one primary client that is the owner of the
  // data and can read/write the data to the Index. The other clients
  // should only use the Index for query search.
  GetIndex(IndexId index_id, pending_receiver<Index> index);
};

// An Index can serve multiple clients, but only one client (the primary
// client) that owns the data should be allowed to modify the Index.
interface Index {
  // Returns number of data items.
  GetSize() => (uint64 num_items);

  // Adds or updates data and callbacks upon completion.
  // Only the primary client should be allowed to do this operation.
  AddOrUpdate(array<Data> data) => ();

  // Deletes data with |ids| and returns number of items deleted.
  // If an id doesn't exist in the Index, no operation will be done.
  // Only the primary client should be allowed to do this operation.
  Delete(array<string> ids) => (uint32 num_deleted);

  // Takes an asynchronous search request call and returns results and status
  // code via a callback.
  // |max_latency_in_ms| = -1 means there is no maximum latency.
  Find(string query, int32 max_latency_in_ms, int32 max_results)
      => (ResponseStatus status, array<Result>? results);
};
