# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

assert(is_chromeos, "Non-ChromeOS builds cannot depend on //chromeos")

static_library("tether") {
  sources = [
    "active_host.cc",
    "active_host.h",
    "active_host_network_state_updater.cc",
    "active_host_network_state_updater.h",
    "ble_advertisement_device_queue.cc",
    "ble_advertisement_device_queue.h",
    "ble_advertiser.cc",
    "ble_advertiser.h",
    "ble_connection_manager.cc",
    "ble_connection_manager.h",
    "ble_constants.h",
    "ble_scanner.cc",
    "ble_scanner.h",
    "ble_synchronizer.cc",
    "ble_synchronizer.h",
    "ble_synchronizer_base.cc",
    "ble_synchronizer_base.h",
    "connect_tethering_operation.cc",
    "connect_tethering_operation.h",
    "crash_recovery_manager.cc",
    "crash_recovery_manager.h",
    "device_id_tether_network_guid_map.cc",
    "device_id_tether_network_guid_map.h",
    "device_status_util.cc",
    "device_status_util.h",
    "disconnect_tethering_operation.cc",
    "disconnect_tethering_operation.h",
    "disconnect_tethering_request_sender.cc",
    "disconnect_tethering_request_sender.h",
    "disconnect_tethering_request_sender_impl.cc",
    "disconnect_tethering_request_sender_impl.h",
    "error_tolerant_ble_advertisement.cc",
    "error_tolerant_ble_advertisement.h",
    "error_tolerant_ble_advertisement_impl.cc",
    "error_tolerant_ble_advertisement_impl.h",
    "host_connection_metrics_logger.cc",
    "host_connection_metrics_logger.h",
    "host_scan_cache.cc",
    "host_scan_cache.h",
    "host_scan_cache_entry.cc",
    "host_scan_cache_entry.h",
    "host_scan_device_prioritizer.h",
    "host_scan_device_prioritizer_impl.cc",
    "host_scan_device_prioritizer_impl.h",
    "host_scan_scheduler.cc",
    "host_scan_scheduler.h",
    "host_scanner.cc",
    "host_scanner.h",
    "host_scanner_operation.cc",
    "host_scanner_operation.h",
    "initializer.cc",
    "initializer.h",
    "initializer_impl.cc",
    "initializer_impl.h",
    "keep_alive_operation.cc",
    "keep_alive_operation.h",
    "keep_alive_scheduler.cc",
    "keep_alive_scheduler.h",
    "master_host_scan_cache.cc",
    "master_host_scan_cache.h",
    "message_transfer_operation.cc",
    "message_transfer_operation.h",
    "message_wrapper.cc",
    "message_wrapper.h",
    "network_configuration_remover.cc",
    "network_configuration_remover.h",
    "network_connection_handler_tether_delegate.cc",
    "network_connection_handler_tether_delegate.h",
    "network_host_scan_cache.cc",
    "network_host_scan_cache.h",
    "network_list_sorter.cc",
    "network_list_sorter.h",
    "notification_presenter.h",
    "notification_remover.cc",
    "notification_remover.h",
    "persistent_host_scan_cache.h",
    "persistent_host_scan_cache_impl.cc",
    "persistent_host_scan_cache_impl.h",
    "pref_names.cc",
    "pref_names.h",
    "tether_connector.h",
    "tether_connector_impl.cc",
    "tether_connector_impl.h",
    "tether_disconnector.h",
    "tether_disconnector_impl.cc",
    "tether_disconnector_impl.h",
    "tether_host_fetcher.cc",
    "tether_host_fetcher.h",
    "tether_host_response_recorder.cc",
    "tether_host_response_recorder.h",
    "tether_network_disconnection_handler.cc",
    "tether_network_disconnection_handler.h",
    "timer_factory.cc",
    "timer_factory.h",
    "wifi_hotspot_connector.cc",
    "wifi_hotspot_connector.h",
    "wifi_hotspot_disconnector.h",
    "wifi_hotspot_disconnector_impl.cc",
    "wifi_hotspot_disconnector_impl.h",
  ]

  deps = [
    "//base",
    "//chromeos",
    "//chromeos/components/tether/proto",
    "//components/cryptauth",
    "//components/cryptauth/ble",
    "//components/prefs",
    "//components/proximity_auth/logging",
    "//components/signin/core/browser",
    "//device/bluetooth",
    "//ui/gfx",
    "//ui/message_center",
  ]

  public_deps = [
    "//components/cryptauth/proto",
  ]
}

static_library("test_support") {
  testonly = true

  sources = [
    "fake_active_host.cc",
    "fake_active_host.h",
    "fake_ble_connection_manager.cc",
    "fake_ble_connection_manager.h",
    "fake_ble_synchronizer.cc",
    "fake_ble_synchronizer.h",
    "fake_disconnect_tethering_request_sender.cc",
    "fake_disconnect_tethering_request_sender.h",
    "fake_error_tolerant_ble_advertisement.cc",
    "fake_error_tolerant_ble_advertisement.h",
    "fake_host_scan_cache.cc",
    "fake_host_scan_cache.h",
    "fake_initializer.cc",
    "fake_initializer.h",
    "fake_network_configuration_remover.cc",
    "fake_network_configuration_remover.h",
    "fake_notification_presenter.cc",
    "fake_notification_presenter.h",
    "fake_tether_connector.cc",
    "fake_tether_connector.h",
    "fake_tether_disconnector.cc",
    "fake_tether_disconnector.h",
    "fake_tether_host_fetcher.cc",
    "fake_tether_host_fetcher.h",
    "fake_wifi_hotspot_connector.cc",
    "fake_wifi_hotspot_connector.h",
    "fake_wifi_hotspot_disconnector.cc",
    "fake_wifi_hotspot_disconnector.h",
    "host_scan_test_util.cc",
    "host_scan_test_util.h",
    "mock_host_connection_metrics_logger.cc",
    "mock_host_connection_metrics_logger.h",
    "mock_tether_host_response_recorder.cc",
    "mock_tether_host_response_recorder.h",
    "proto_test_util.cc",
    "proto_test_util.h",
  ]

  public_deps = [
    ":tether",
  ]

  deps = [
    "//base",
    "//chromeos",
    "//chromeos/components/tether/proto",
    "//components/cryptauth",
    "//device/bluetooth",
    "//testing/gmock",
    "//testing/gtest",
    "//ui/message_center:test_support",
  ]
}

source_set("unit_tests") {
  testonly = true

  sources = [
    "active_host_network_state_updater_unittest.cc",
    "active_host_unittest.cc",
    "ble_advertisement_device_queue_unittest.cc",
    "ble_advertiser_unittest.cc",
    "ble_connection_manager_unittest.cc",
    "ble_scanner_unittest.cc",
    "ble_synchronizer_unittest.cc",
    "connect_tethering_operation_unittest.cc",
    "crash_recovery_manager_unittest.cc",
    "device_status_util_unittest.cc",
    "disconnect_tethering_operation_unittest.cc",
    "disconnect_tethering_request_sender_impl_unittest.cc",
    "error_tolerant_ble_advertisement_impl_unittest.cc",
    "host_connection_metrics_logger_unittest.cc",
    "host_scan_cache_unittest.cc",
    "host_scan_device_prioritizer_impl_unittest.cc",
    "host_scan_scheduler_unittest.cc",
    "host_scanner_operation_unittest.cc",
    "host_scanner_unittest.cc",
    "initializer_impl_unittest.cc",
    "keep_alive_operation_unittest.cc",
    "keep_alive_scheduler_unittest.cc",
    "master_host_scan_cache_unittest.cc",
    "message_transfer_operation_unittest.cc",
    "message_wrapper_unittest.cc",
    "network_configuration_remover_unittest.cc",
    "network_connection_handler_tether_delegate_unittest.cc",
    "network_host_scan_cache_unittest.cc",
    "network_list_sorter_unittest.cc",
    "notification_remover_unittest.cc",
    "persistent_host_scan_cache_impl_unittest.cc",
    "tether_connector_impl_unittest.cc",
    "tether_disconnector_impl_unittest.cc",
    "tether_host_fetcher_unittest.cc",
    "tether_host_response_recorder_unittest.cc",
    "tether_network_disconnection_handler_unittest.cc",
    "wifi_hotspot_connector_unittest.cc",
    "wifi_hotspot_disconnector_impl_unittest.cc",
  ]

  deps = [
    ":test_support",
    ":tether",
    "//base/test:test_support",
    "//chromeos",
    "//chromeos:test_support",
    "//chromeos/components/tether/proto",
    "//components/cryptauth",
    "//components/cryptauth:test_support",
    "//components/cryptauth/ble",
    "//components/prefs:test_support",
    "//components/signin/core/browser:test_support",
    "//device/bluetooth",
    "//device/bluetooth:mocks",
    "//testing/gmock",
    "//testing/gtest",
    "//ui/message_center:test_support",
  ]
}
