# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//services/service_manager/public/cpp/service.gni")
import("//services/service_manager/public/service_manifest.gni")
import("//services/service_manager/public/tools/test/service_test.gni")

assert(is_chromeos, "Non-ChromeOS builds cannot depend on //chromeos")

static_library("multidevice_setup") {
  sources = [
    "account_status_change_delegate_notifier.cc",
    "account_status_change_delegate_notifier.h",
    "account_status_change_delegate_notifier_impl.cc",
    "account_status_change_delegate_notifier_impl.h",
    "eligible_host_devices_provider.h",
    "eligible_host_devices_provider_impl.cc",
    "eligible_host_devices_provider_impl.h",
    "host_backend_delegate.cc",
    "host_backend_delegate.h",
    "host_backend_delegate_impl.cc",
    "host_backend_delegate_impl.h",
    "host_status_provider.cc",
    "host_status_provider.h",
    "host_status_provider_impl.cc",
    "host_status_provider_impl.h",
    "host_verifier.cc",
    "host_verifier.h",
    "host_verifier_impl.cc",
    "host_verifier_impl.h",
    "multidevice_setup_base.cc",
    "multidevice_setup_base.h",
    "multidevice_setup_impl.cc",
    "multidevice_setup_impl.h",
    "multidevice_setup_initializer.cc",
    "multidevice_setup_initializer.h",
    "multidevice_setup_service.cc",
    "multidevice_setup_service.h",
    "setup_flow_completion_recorder.h",
    "setup_flow_completion_recorder_impl.cc",
    "setup_flow_completion_recorder_impl.h",
  ]

  deps = [
    "//base",
    "//chromeos/components/proximity_auth/logging",
    "//chromeos/services/device_sync/public/cpp",
    "//chromeos/services/device_sync/public/mojom",
    "//chromeos/services/multidevice_setup/proto",
    "//chromeos/services/multidevice_setup/public/mojom",
    "//chromeos/services/secure_channel/public/cpp/client",
    "//chromeos/services/secure_channel/public/mojom",
    "//components/cryptauth",
    "//components/pref_registry",
    "//components/prefs:prefs",
    "//services/service_manager/public/cpp",
  ]
}

service_manifest("manifest") {
  name = "multidevice_setup"
  source = "manifest.json"
}

static_library("test_support") {
  testonly = true

  sources = [
    "fake_account_status_change_delegate.cc",
    "fake_account_status_change_delegate.h",
    "fake_account_status_change_delegate_notifier.h",
    "fake_eligible_host_devices_provider.cc",
    "fake_eligible_host_devices_provider.h",
    "fake_host_backend_delegate.cc",
    "fake_host_backend_delegate.h",
    "fake_host_status_observer.cc",
    "fake_host_status_observer.h",
    "fake_host_status_provider.cc",
    "fake_host_status_provider.h",
    "fake_host_verifier.cc",
    "fake_host_verifier.h",
    "fake_setup_flow_completion_recorder.cc",
    "fake_setup_flow_completion_recorder.h",
  ]

  deps = [
    ":multidevice_setup",
    "//base",
    "//chromeos/services/multidevice_setup/public/mojom",
    "//components/cryptauth",
    "//testing/gmock",
    "//testing/gtest",
  ]
}

source_set("unit_tests") {
  testonly = true

  sources = [
    "account_status_change_delegate_notifier_impl_unittest.cc",
    "eligible_host_devices_provider_impl_unittest.cc",
    "host_backend_delegate_impl_unittest.cc",
    "host_status_provider_impl_unittest.cc",
    "host_verifier_impl_unittest.cc",
    "multidevice_setup_impl_unittest.cc",
    "multidevice_setup_service_unittest.cc",
    "setup_flow_completion_recorder_impl_unittest.cc",
  ]

  deps = [
    ":multidevice_setup",
    ":test_support",
    "//base",
    "//base/test:test_support",
    "//chromeos/services/device_sync/public/cpp:test_support",
    "//chromeos/services/multidevice_setup/public/cpp:test_support",
    "//chromeos/services/multidevice_setup/public/cpp:unit_tests",
    "//chromeos/services/multidevice_setup/public/mojom",
    "//chromeos/services/secure_channel/public/cpp/client:test_support",
    "//components/cryptauth:test_support",
    "//components/sync_preferences:test_support",
    "//services/service_manager/public/cpp/test:test_support",
    "//testing/gmock",
    "//testing/gtest",
  ]
}
