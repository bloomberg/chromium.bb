// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module chromeos.power.mojom;

enum SetBacklightBrightnessRequestTransition {
  kGradual,
  kInstant,
};

enum SetBacklightBrightnessRequestCause {
  kUserRequest,
  kModel,
};

struct SetBacklightBrightnessRequest {
  // The brightness percent is in the range [0.0, 100.0].
  double percent;
  SetBacklightBrightnessRequestTransition transition;
  SetBacklightBrightnessRequestCause cause;
};

// TODO(https://crbug.com/657632): This struct wrapper exists to allow the value
// to be null.
struct Brightness {
  // Brightness percent, in the range [0.0, 100.0].
  double value;
};

// Correlates to power_manager::BacklightBrightnessChange_Cause
enum BacklightBrightnessChangeCause {
  kUserRequest,
  kUserActivity,
  kUserInactivity,
  kAmbientLightChanged,
  kExternalPowerConnected,
  kExternalPowerDisconnected,
  kForcedOff,
  kNoLongerForcedOff,
  kOther,
  kModel,
  kWakeNotification,
};

// Correlates to power_manager::BacklightBrightnessChange
struct BacklightBrightnessChange {
  // The brightness percent is in the range [0.0, 100.0].
  double percent;
  BacklightBrightnessChangeCause cause;
};

enum RequestRestartReason {
  kForUser,
  kForUpdate,
  kOther,
};

// The interface for handling out-of-process calls that query or adjust power
// related state. The implementation relays calls to the D-Bus client, which
// uses D-Bus to communicate with the Power Manager daemon. In Mash, this lives
// in the Ash process.
interface PowerManagerController {
  SetObserver(associated PowerManagerObserver observer);

  // All following methods and their semantics are copied from the
  // PowerManagerClient interface. Refer to that for documentation.
  SetScreenBrightness(SetBacklightBrightnessRequest request);
  GetScreenBrightnessPercent() => (Brightness? brightness);
  RequestRestart(RequestRestartReason reason, string description);
};

// An interface for observing changes to power state. The changes are dispatched
// over mojo from PowerManagerController.
interface PowerManagerObserver {
  // All following methods and their semantics are copied from the
  // PowerManagerClient::Observer interface. Refer to that for documentation.
  PowerManagerBecameAvailable(bool available);
  ScreenBrightnessChanged(BacklightBrightnessChange change);
  KeyboardBrightnessChanged(BacklightBrightnessChange change);
};
