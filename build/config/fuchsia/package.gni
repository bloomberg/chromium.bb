# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Creates a Fuchsia .far package file.
#
# Parameters are:
# package_name: The name of the package to build.
# binary: The name of the executable which should be launched by the package.
#         Will be renamed as "bin/app" in the package contents.
# deps: A list of targets whose output will be included in the package.
template("package") {
  pkg = {
    package_name = target_name
    forward_variables_from(invoker, "*")
  }
  assert(defined(pkg.binary))

  _pkg_out_dir = "$root_out_dir/gen/" + get_label_info(pkg.package_name, "dir")
  _runtime_deps_file = "$_pkg_out_dir/${pkg.package_name}.runtime_deps"
  _manifest_file = "$_pkg_out_dir/${pkg.package_name}.archive_manifest"
  _archive_file = "$_pkg_out_dir/${pkg.package_name}.far"
  _write_manifest_target = "${pkg.package_name}__write_manifest"

  # Generates a manifest file based on the GN runtime deps
  # suitable for "far" tool consumption.
  action(_write_manifest_target) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "public_deps",
                             "testonly",
                           ])

    script = "//build/config/fuchsia/build_manifest.py"

    inputs = [
      _runtime_deps_file,
    ]

    outputs = [
      _manifest_file,
    ]

    data_deps = pkg.deps

    args = [
      rebase_path("//"),
      rebase_path(root_out_dir),
      pkg.binary,
      rebase_path(_runtime_deps_file),
      rebase_path(_manifest_file),
    ]

    write_runtime_deps = _runtime_deps_file
  }

  # Packages an executable target and its dependencies into a Fuchsia archive
  # file (.far).
  action(target_name) {
    forward_variables_from(invoker, [ "testonly" ])

    far_tool_path = "//third_party/fuchsia-sdk/tools/far"
    script = "//build/gn_run_binary.py"

    deps = [
      ":$_write_manifest_target",
    ]

    outputs = [
      _archive_file,
    ]

    data = [
      _archive_file,
    ]

    args = [
      rebase_path(far_tool_path, root_build_dir),
      "create",
      "--archive=" + rebase_path(_archive_file),
      "--manifest=" + rebase_path(_manifest_file),
    ]
  }
}
