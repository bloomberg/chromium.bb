// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.mojom;

import "components/account_id/interfaces/account_id.mojom";
import "mojo/public/mojom/base/time.mojom";

// Interface for ash client (e.g. Chrome) to set session info for ash.
interface SessionController {
  // Prepares ash for lock screen. Currently this ensures the current active
  // window could not be used to mimic the lock screen. Lock screen is created
  // after this call returns.
  PrepareForLock() => ();

  // Runs the pre-lock animation to start locking ash. When the call returns,
  // |locked| == true means that the ash post-lock animation is finished and ash
  // is fully locked. Otherwise |locked| is false, which means something is
  // wrong for the lock and ash is not locked. When the call returns with a true
  // |locked|, screen locker runs the post lock jobs such as a11y announcement
  // etc. Invoked by the screen locker during initialization.
  StartLock() => (bool locked);

  // Notifies ash that chrome lock animations are finished. This is the last
  // event for locking. SessionController forwards it to PowerEventObserver.
  NotifyChromeLockAnimationsComplete();

  // Runs the pre-unlock animation. Invoked by the screen locker before
  // dismissing. When the mojo call returns, screen locker takes that as a
  // signal of finished unlock animation and dismisses itself.
  RunUnlockAnimation() => ();

  // Notifies that chrome is terminating.
  NotifyChromeTerminating();

  // Adds a countdown timer to the system tray menu and creates or updates a
  // notification saying the session length is limited (e.g. a public session in
  // a library). Setting |length_limit| to zero removes the notification.
  // NOTE: Chrome enforces the limit, not ash. Ash could enforce it if local
  // state prefs and user activity monitoring were available under mustash.
  // http://crbug.com/729808
  SetSessionLengthLimit(mojo_base.mojom.TimeDelta length_limit,
                        mojo_base.mojom.TimeTicks start_time);

  // Returns whether it's ok to switch the active multiprofile user. May affect
  // or be affected by system state such as window overview mode and screen
  // casting.
  CanSwitchActiveUser() => (bool can_switch);

  // Shows a dialog to explain the implications of signing in multiple users.
  // If |on_accept| is false, |permanently_accept| is ignored.
  ShowMultiprofilesIntroDialog() => (bool on_accept, bool permanently_accept);

  // Shows a dialog to confirm that the user wants to teleport a window to
  // another desktop. If |on_accept| is false, |permanently_accept| is ignored.
  ShowTeleportWarningDialog() => (bool on_accept, bool permanently_accept);

  // Shows a dialog that explains that the given user is no longer allowed in
  // the session due to a policy change, and aborts the session.
  ShowMultiprofilesSessionAbortedDialog(string user_email);
};

