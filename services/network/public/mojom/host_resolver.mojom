// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module network.mojom;

import "mojo/public/mojom/base/time.mojom";
import "services/network/public/mojom/address_list.mojom";
import "services/network/public/mojom/ip_address.mojom";
import "services/network/public/mojom/ip_endpoint.mojom";
import "services/network/public/mojom/network_param.mojom";
import "services/network/public/mojom/url_loader.mojom";

// A single entry from a HOSTS file.
struct DnsHost {
  string hostname;
  IPAddress address;
};

// An HTTPS server to send DNS queries to, per the DNS Queries over HTTPS spec.
// spec:  https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-12
struct DnsOverHttpsServer {
  // DNS over HTTPS server URI template. Must be HTTPS.
  string server_template;

  // Whether to use POST to do DNS lookups. Otherwise, GET is used. See spec
  // for more details.
  bool use_post = false;
};

// Overridable DNS configuration values for host resolution. All fields default
// to a non-overriding state where the relevant value will be used from system
// DNS configuration.
struct DnsConfigOverrides {
  // Representation of an optional boolean. Needed because Mojo does not support
  // optional primitive types.
  enum Tristate {
    NO_OVERRIDE,
    TRISTATE_TRUE,
    TRISTATE_FALSE,
  };

  // List of nameserver addresses.
  array<IPEndPoint>? nameservers;

  // Suffix search list, used on first lookup when number of dots in given name
  // is less than |ndots|.
  array<string>? search;

  // Entries from a HOSTS file. This array is intended for serialization to/from
  // a lookup map, so unlike the source data from actual HOSTS files, each entry
  // should represent a unique host query key (|hostname| and AddressFamily).
  array<DnsHost>? hosts;

  // Whether suffix search should be performed for multi-label names.
  Tristate append_to_multi_label_name = Tristate.NO_OVERRIDE;

  // Whether source port randomization is required. This uses additional
  // resources on some platforms.
  Tristate randomize_ports = Tristate.NO_OVERRIDE;

  // Minimum number of dots before global resolution precedes |search|.
  int8 ndots = -1;  // -1 for no override.

  // Time between retransmissions, see res_state.retrans.
  mojo_base.mojom.TimeDelta? timeout;

  // Maximum number of attempts, see res_state.retry.
  int32 attempts = -1;  // -1 for no override.

  // Whether to roundrobin entries in |nameservers| for subsequent requests.
  Tristate rotate = Tristate.NO_OVERRIDE;

  // Whether system configuration uses local IPv6 connectivity, e.g.,
  // DirectAccess. This is exposed for HostResolver to skip IPv6 probes,
  // as it may cause them to return incorrect results.
  Tristate use_local_ipv6 = Tristate.NO_OVERRIDE;

  // List of servers to query over HTTPS, queried in order
  // (https://tools.ietf.org/id/draft-ietf-doh-dns-over-https-12.txt).
  array<DnsOverHttpsServer>? dns_over_https_servers;
};

// Control handle used to control outstanding NetworkContext::ResolveHost
// requests. Handle is optional for all requests, and may be closed at any time
// without affecting the request.
//
// TODO(crbug.com/821021): Add support to change priority.
interface ResolveHostHandle {
  // Requests cancellation of the resolution request. Doing so may have no
  // effect if a result was already sent. If successful, cancellation results in
  // ResolveHostClient::OnComplete being invoked with |result|, which should be
  // a non-OK network error code.
  Cancel(int32 result);
};

// Response interface used to receive results of NetworkContext::ResolveHost
// requests.
//
// TODO(crbug.com/821021): Add additional methods to receive non-address
// results (eg TXT DNS responses).
interface ResolveHostClient {
  // Called on completion of a resolve host request. Results are a network error
  // code, and on success (network error code OK), an AddressList.
  OnComplete(int32 result, AddressList? resolved_addresses);
};

// Parameter-grouping struct for additional optional parameters for
// HostResolver::ResolveHost() calls. All fields are optional and have a
// reasonable default.
struct ResolveHostParameters {
  // DNS query type for a ResolveHostRequest.
  // See:
  // https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4
  enum DnsQueryType {
    UNSPECIFIED,
    A,
    AAAA,
  };

  // Requested DNS query type. If UNSPECIFIED, resolver will pick A or AAAA (or
  // both) based on IPv4/IPv6 settings.
  DnsQueryType dns_query_type = DnsQueryType.UNSPECIFIED;

  // The initial net priority for the host resolution request.
  RequestPriority initial_priority = RequestPriority.kLowest;

  // Enumeration to specify the allowed results source for requests.
  enum Source {
    // Resolver will pick an appropriate source. Results could come from DNS,
    // MulticastDNS, HOSTS file, etc.
    ANY,

    // Results will only be retrieved from the system or OS, e.g. via the
    // getaddrinfo() system call.
    SYSTEM,

    // Results will only come from DNS queries.
    DNS,

    // Results will only come from Multicast DNS queries.
    MULTICAST_DNS,
  };

  // The source to use for resolved addresses. Default allows the resolver to
  // pick an appropriate source. Only affects use of big external sources (eg
  // calling the system for resolution or using DNS). Even if a source is
  // specified, results can still come from cache, resolving "localhost" or IP
  // literals, etc.
  Source source = Source.ANY;

  // If |false|, results will not come from the host cache.
  bool allow_cached_response = true;

  // If set, the outstanding request can be controlled, eg cancelled, via the
  // handle.
  ResolveHostHandle&? control_handle;

  // If |true|, requests that the resolver include AddressList::canonical_name
  // in the results. If the resolver can do so without significant performance
  // impact, canonical_name may still be included even if parameter is set to
  // |false|.
  bool include_canonical_name = false;

  // Hint to the resolver that resolution is only being requested for loopback
  // hosts.
  bool loopback_only = false;

  // Set |true| iff the host resolve request is only being made speculatively
  // to fill the cache and the result addresses will not be used. The request
  // will receive special logging/observer treatment, and
  // ResolveHostClient::OnComplete will not receive any addresses.
  bool is_speculative = false;
};

// Interface that can be passed to code/processes without direct access to
// NetworkContext to make ResolveHost requests. If destroyed, all outstanding
// ResolveHost requests from the destroyed interface will be cancelled.
interface HostResolver {
  // Resolves the given hostname (or IP address literal). Results are a network
  // error code, and on success (network error code OK), an AddressList. All
  // results are sent via the passed |response_client|.
  //
  // Additional optional parameters may be set using |optional_parameters|. If
  // unset, reasonable defaults will be used, equivalent to using a
  // ResolveHostParameters struct without changing any fields from their default
  // values.
  //
  // Results in ERR_NAME_NOT_RESOLVED if hostname is invalid, or if it is an
  // incompatible IP literal (e.g. IPv6 is disabled and it is an IPv6 literal).
  //
  // All outstanding requests are cancelled if the HostResolver or parent
  // NetworkContext are destroyed. Such requests will receive ERR_FAILED via
  // |response_client|.
  //
  // TODO(crbug.com/821021): Implement more complex functionality to meet full
  // capabilities of Resolve() and DnsClient/MDnsClient functionality.
  ResolveHost(HostPortPair host,
              ResolveHostParameters? optional_parameters,
              ResolveHostClient response_client);
};

// A client interface that subscribes to DNS config change events from
// DnsConfigChangeManager.
interface DnsConfigChangeManagerClient {
  // Notifies that a potential change has been detected in the DNS settings of
  // the system that may affect results of host resolution.
  OnSystemDnsConfigChanged();
};

// An interface that broadcasts DNS config change events.
interface DnsConfigChangeManager {
  // Requests to receive notification when there is a DNS config change.
  RequestNotifications(DnsConfigChangeManagerClient client_ptr);
};
