// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module network.mojom;

import "net/interfaces/address_list.mojom";
import "services/network/public/mojom/network_param.mojom";

// Control handle used to control outstanding NetworkContext::ResolveHost
// requests. Handle is optional for all requests, and may be closed at any time
// without affecting the request.
//
// TODO(crbug.com/821021): Add support to change priority.
interface ResolveHostHandle {
  // Requests cancellation of the resolution request. Doing so may have no
  // effect if a result was already sent. If successful, cancellation results in
  // ResolveHostClient::OnComplete being invoked with |result|, which should be
  // a non-OK network error code.
  Cancel(int32 result);
};

// Response interface used to receive results of NetworkContext::ResolveHost
// requests.
//
// TODO(crbug.com/821021): Add additional methods to receive non-address
// results (eg TXT DNS responses).
interface ResolveHostClient {
  // Called on completion of a resolve host request. Results are a network error
  // code, and on success (network error code OK), an AddressList.
  OnComplete(int32 result, net.interfaces.AddressList? resolved_addresses);
};

// Interface that can be passed to code/processes without direct access to
// NetworkContext to make ResolveHost requests. If destroyed, all outstanding
// ResolveHost requests from the destroyed interface will be cancelled.
interface HostResolver {
  // Resolves the given hostname (or IP address literal). Results are a network
  // error code, and on success (network error code OK), an AddressList. All
  // results are sent via the passed |response_client|.
  //
  // Results in ERR_NAME_NOT_RESOLVED if hostname is invalid, or if it is an
  // incompatible IP literal (e.g. IPv6 is disabled and it is an IPv6 literal).
  //
  // If passed an optional |control_handle|, the outstanding request can be
  // controlled, eg cancelled, via the handle.
  //
  // All outstanding requests are cancelled if the HostResolver or parent
  // NetworkContext are destroyed. Such requests will receive ERR_FAILED via
  // |response_client|.
  //
  // TODO(crbug.com/821021): Implement more complex functionality to meet full
  // capabilities of Resolve() and DnsClient/MDnsClient functionality.
  ResolveHost(HostPortPair host,
              ResolveHostHandle&? control_handle,
              ResolveHostClient response_client);
};
