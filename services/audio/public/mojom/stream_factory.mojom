// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module audio.mojom;

import "media/mojo/interfaces/audio_data_pipe.mojom";
import "media/mojo/interfaces/audio_logging.mojom";
import "media/mojo/interfaces/audio_output_stream.mojom";
import "media/mojo/interfaces/audio_parameters.mojom";
import "mojo/public/mojom/base/unguessable_token.mojom";

// Mutes a group of AudioOutputStreams while at least one binding to an instance
// exists. Once the last binding is dropped, all streams in the group are
// un-muted.
interface LocalMuter {};

// This interface is exposed by the audio service to allow trusted clients
// (like the browser process) to create streams. Note that while the factory
// interface itself is only for trusted clients, the created streams and data
// pipes may be forwarded to untrusted clients.
//
// The client must keep the connection to the factory while streams are
// running.
// TODO(803102): Add other stream creation functionality to this interface.
interface StreamFactory {
  // Creates an AudioOutputStream and returns the AudioDataPipe it reads data
  // from. |data_pipe| is null in case stream creation failed. |device_id| is
  // either the |unique_id| field from an AudioDeviceDescription obtained from
  // the audio.mojom.SystemInfo interface, or "default". The stream |group_id|
  // will later be used for muting streams or capturing them for loopback.
  CreateOutputStream(
    media.mojom.AudioOutputStream& stream,
    media.mojom.AudioOutputStreamClient client,
    associated media.mojom.AudioOutputStreamObserver observer,
    media.mojom.AudioLog log,
    string device_id, media.mojom.AudioParameters params,
    mojo_base.mojom.UnguessableToken group_id)
    => (media.mojom.AudioDataPipe? data_pipe);

  // Binds the request to the LocalMuter associated with the given |group_id|.
  // While one or more bindings to a group's LocalMuter exists, all local audio
  // playout for the streams in that group is muted.
  //
  // It is the responsibility of the client to bind to a muter before creating
  // any output streams that should be started muted. Likewise, if existing
  // output streams must remain muted until they are shut down, the binding to
  // the muter must not be closed until after all other streams' binding. (This
  // is the reason for the associated request argument.)
  BindMuter(associated LocalMuter& request,
            mojo_base.mojom.UnguessableToken group_id);
};
