// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This is a generated file. Please see the "service_manifest" template in
// src/services/service_manager/public/service_manifest.gni for more details.

#include "{{path}}.h"

#include <set>

#include "base/files/file_path.h"
#include "base/no_destructor.h"
#include "build/build_config.h"
#include "services/service_manager/public/cpp/manifest_builder.h"
{%  for info in packaged_services %}
#include "{{info.header}}"
{%- endfor %}
{%  for info in overlays %}
#include "{{info.header}}"
{%- endfor %}

{%- macro generate_manifest_builder(manifest, packaged_services=[],
                                    overlays=[]) -%}
service_manager::ManifestBuilder()
    .WithServiceName("{{manifest['name']}}")
{%-   if 'display_name' in manifest %}
    .WithDisplayName("{{manifest['display_name']}}")
{%-   endif %}
    .WithOptions(service_manager::ManifestOptionsBuilder()
{%-   if 'sandbox_type' in manifest %}
                     .WithSandboxType("{{manifest['sandbox_type']}}")
{%-   endif %}

{%-   set options = manifest.get('options', {}) %}
{%-   set instance_sharing = options.get('instance_sharing', None) %}
{%-   if instance_sharing == 'singleton' %}
                     .WithInstanceSharingPolicy(
                          service_manager::Manifest::InstanceSharingPolicy::
                              kSingleton)
{%-   elif instance_sharing == 'shared_instance_across_users' %}
                     .WithInstanceSharingPolicy(
                          service_manager::Manifest::InstanceSharingPolicy::
                              kSharedAcrossGroups)
{%-   endif %}
{%-   if options.get('can_connect_to_other_services_as_any_user', False) %}
                     .CanConnectToInstancesInAnyGroup(true)
{%-   endif %}
{%-   if options.get('can_connect_to_other_services_with_any_instance_name',
                     False) %}
                     .CanConnectToInstancesWithAnyId(true)
{%-   endif %}
{%-   if options.get('can_create_other_service_instances', False) %}
                     .CanRegisterOtherServiceInstances(true)
{%-   endif %}
                     .Build())

{%-   set specs = manifest.get('interface_provider_specs', {}) %}
{%-   set main_spec = specs.pop('service_manager:connector', None) %}
{%-   if main_spec %}
{%-     for name, interfaces in main_spec.get('provides', {}).iteritems() %}
    .ExposeCapability(
        "{{name}}", std::set<const char*>{
{%-       for interface_name in interfaces %}
            "{{interface_name}}",
{%-       endfor -%}})
{%-     endfor %}
{%-     for service, caps in main_spec.get('requires', {}).iteritems() %}
{%-       if caps == [] %}
    .RequireCapability("{{service}}", "")
{%-       else %}
{%-         for capability in caps %}
    .RequireCapability("{{service}}", "{{capability}}")
{%-         endfor %}
{%-       endif %}
{%-     endfor %}
{%-   endif %}
{%-   for filter_name, filter_spec in specs.iteritems() %}
{%-     for name, interfaces in filter_spec.get('provides', {}).iteritems() %}
    .ExposeInterfaceFilterCapability_Deprecated(
        "{{filter_name}}", "{{name}}", std::set<const char*>{
{%-       for interface_name in interfaces %}
            "{{interface_name}}" {%- if not loop.last %},{% endif %}
{%-       endfor -%}})
{%-     endfor %}
{%-     for service, caps in filter_spec.get('requires', {}).iteritems() %}
{%-       for capability in caps %}
    .RequireInterfaceFilterCapability_Deprecated(
        "{{service}}", "{{filter_name}}", "{{capability}}")
{%-       endfor %}
{%-     endfor %}
{%-   endfor %}

{%-  for key, entries in manifest.get('required_files', {}).iteritems() %}
{%-    for entry in entries %}
{%-      if entry['platform'] == 'linux' %}
#if defined(OS_LINUX)
{%-      elif entry['platform'] == 'android' %}
#if defined(OS_ANDROID)
{%-      endif %}
    .PreloadFile(
        "{{key}}",
        base::FilePath(FILE_PATH_LITERAL("{{entry['path']}}")))
#endif
{%-    endfor %}
{%-  endfor %}

{%-  for packaged_service_manifest in manifest.get('services', []) %}
    .PackageService(
        {{generate_manifest_builder(packaged_service_manifest)|indent(8)}})
{%-  endfor %}
{%-  for info in packaged_services %}
    .PackageService({{info.namespace}}::GetManifest())
{%-  endfor %}
    .Build()
{%-  for info in overlays %}
        .Amend({{info.namespace}}::GetManifest())
{%-  endfor %}
{%- endmacro %}

{% for namespace in namespaces %}
namespace {{namespace}} {
{%- endfor %}

{%  if root_manifest %}
const service_manager::Manifest& {{function_name}}() {
  static base::NoDestructor<service_manager::Manifest> manifest{
      {{generate_manifest_builder(root_manifest,
            packaged_services=packaged_services, overlays=overlays)
            |indent(6)}} };
  return *manifest;
}
{%  else %}
const std::vector<service_manager::Manifest>& {{function_name}}() {
  static base::NoDestructor<std::vector<service_manager::Manifest>> manifests{ {
{%- for info in packaged_services %}
      {{info.namespace}}::GetManifest(){%- if not loop.last %},{%- endif %}
{%- endfor -%} }};
  return *manifests;
}
{%  endif %}

{%- for namespace in namespaces|reverse %}
}  // namespace {{namespace}}
{%- endfor %}
