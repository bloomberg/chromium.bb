// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module resource_coordinator.mojom;

import "mojo/public/mojom/base/process_id.mojom";
import "mojo/public/mojom/base/time.mojom";
import "services/resource_coordinator/public/mojom/lifecycle.mojom";

// Any new type here needs to be mirrored between coordination_unit_types.h and
// coordination_unit.mojom, and have mappings between the two defined in
// coordination_unit_mojom_traits.h/.cc (see comment in coordination_unit_id.h).
enum CoordinationUnitType {
  kFrame,
  kPage,
  kProcess,
  kSystem,
};

// Intervention policy status. This mirrors the definitions used by the
// InterventionPolicyDatabase defined in
// chrome/browser/resource_coordinator/intervention_policy_database.proto
enum InterventionPolicy {
  // The frame/page policy is yet unknown. This is the state while a frame is
  // still loading.
  kUnknown,
  // The frame/page has explicitly opted-in to an intervention.
  kOptIn,
  // The frame/page has explicitly opted-out from an intervention.
  kOptOut,
  // The frame/page has neither opted-in or opted-out. The intervention will be
  // applied usings its own heuristics.
  kDefault,
};

// A list of interventions for which policy is communicated from individual
// frames and propagated through the frame tree. As each frame loads it will
// communicate the policy state to the associated FrameCoordinationUnit, and
// these will eventually be aggregated to the parent PageCoordinationUnit and
// applied to an entire frame tree.
enum PolicyControlledIntervention {
  // Page lifecycles is a feature that causes pages to transition through
  // lifecycle states in an attempt to save/reclaim resources.
  kPageLifecycleTransitions,
};

// Interface used by a blink::Document to communicate state associated with
// resource management to the embedder.
interface DocumentCoordinationUnit {
  // Property signals.
  SetNetworkAlmostIdle();
  SetLifecycleState(LifecycleState state);
  SetHasNonEmptyBeforeUnload(bool has_nonempty_beforeunload);
  SetInterventionPolicy(PolicyControlledIntervention intervention,
                        InterventionPolicy policy);
  SetIsAdFrame();

  // Event signals.
  OnNonPersistentNotificationCreated();
};

interface ProcessCoordinationUnit {
  // Property signals.
  SetExpectedTaskQueueingDuration(mojo_base.mojom.TimeDelta duration);
  SetMainThreadTaskLoadIsLow(bool main_thread_task_load_is_low);
};
