// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module resource_coordinator.mojom;

import "mojo/public/mojom/base/process_id.mojom";
import "mojo/public/mojom/base/time.mojom";
import "services/resource_coordinator/public/mojom/lifecycle.mojom";
import "services/resource_coordinator/public/mojom/signals.mojom";

// Any new type here needs to be mirrored between coordination_unit_types.h and
// coordination_unit.mojom, and have mappings between the two defined in
// coordination_unit_mojom_traits.h/.cc (see comment in coordination_unit_id.h).
enum CoordinationUnitType {
  kFrame,
  kPage,
  kProcess,
  kSystem,
};

struct CoordinationUnitID {
  CoordinationUnitType type;
  int64 id;
};

struct ProcessResourceMeasurement {
  // Identifies the process associated with this measurement.
  mojo_base.mojom.ProcessId pid;

  // The cumulative CPU usage accrued to this process from its start.
  mojo_base.mojom.TimeDelta cpu_usage;

  // The private memory footprint of the process.
  uint32 private_footprint_kb = 0;
};

struct ProcessResourceMeasurementBatch {
  // These times bracket the capture of the entire dump, e.g. each distinct
  // measurement is captured somewhere between |batch_started_time| and
  // |batch_ended_time|.
  mojo_base.mojom.TimeTicks batch_started_time;
  mojo_base.mojom.TimeTicks batch_ended_time;

  array<ProcessResourceMeasurement> measurements;
};

// A FrameCoordinationUnit has at most one ProcessCoordinationUnit as its
// parent, at most one PageCoordinationUnit as its parent, at most one
// FrameCoordinationUnit as parent frame, and can have many child frames.
interface FrameCoordinationUnit {
  // Mainly used to force a round-trip to the service over the pipe for
  // a specific unit, so we don't have to deal with possibly-not-yet-created
  // children.
  GetID() => (CoordinationUnitID id);

  // Add a new binding to an existing FrameCoordinationUnit.
  AddBinding(FrameCoordinationUnit& request);
  AddChildFrame(CoordinationUnitID cu_id);
  RemoveChildFrame(CoordinationUnitID cu_id);

  // Property signals.
  SetAudibility(bool audible);
  SetNetworkAlmostIdle(bool idle);
  SetLifecycleState(LifecycleState state);

  // Event signals.
  OnAlertFired();
  OnNonPersistentNotificationCreated();
};

interface PageCoordinationUnit {
  // Mainly used to force a round-trip to the service over the pipe for
  // a specific unit, so we don't have to deal with possibly-not-yet-created
  // children.
  GetID() => (CoordinationUnitID id);

  // Add a new binding to an existing PageCoordinationUnit.
  AddBinding(PageCoordinationUnit& request);
  AddFrame(CoordinationUnitID cu_id);
  RemoveFrame(CoordinationUnitID cu_id);

  // Property signals.
  SetIsLoading(bool is_loading);
  SetVisibility(bool visible);
  SetUKMSourceId(int64 ukm_source_id);

  // Event signals.
  OnFaviconUpdated();
  OnTitleUpdated();
  OnMainFrameNavigationCommitted();
};

interface ProcessCoordinationUnit {
  // Mainly used to force a round-trip to the service over the pipe for
  // a specific unit, so we don't have to deal with possibly-not-yet-created
  // children.
  GetID() => (CoordinationUnitID id);

  // Add a new binding to an existing ProcessCoordinationUnit.
  AddBinding(ProcessCoordinationUnit& request);
  AddFrame(CoordinationUnitID cu_id);
  RemoveFrame(CoordinationUnitID cu_id);

  // Property signals.
  SetCPUUsage(double cpu_usage);
  SetExpectedTaskQueueingDuration(mojo_base.mojom.TimeDelta duration);
  SetLaunchTime(mojo_base.mojom.Time launch_time);
  SetMainThreadTaskLoadIsLow(bool main_thread_task_load_is_low);
  SetPID(int64 pid);
};

// There is exactly one SystemCoordinationUnit at all times.
interface SystemCoordinationUnit {
  // Gets the ID of this coordination unit.
  GetID() => (CoordinationUnitID id);

  // Add a new binding to an existing SystemCoordinationUnit.
  AddBinding(SystemCoordinationUnit& request);

  // Event signals.

  // Fired when all ProcessCUs have been adorned with consistent CPU usage
  // metrics. This allows for subsequent heuristics to propagate these
  // measurements to PageCUs via a heuristic.
  OnProcessCPUUsageReady();

  // Distributes a measurement batch onto the CU graph. This may generate
  // events.
  DistributeMeasurementBatch(ProcessResourceMeasurementBatch measurement_batch);
};
