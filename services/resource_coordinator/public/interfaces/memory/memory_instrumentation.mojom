// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module memory_instrumentation.mojom;

import "mojo/common/process_id.mojom";

enum DumpType {
  PERIODIC_INTERVAL,
  EXPLICITLY_TRIGGERED,
  PEAK_MEMORY_USAGE,
  SUMMARY_ONLY 
};

enum LevelOfDetail {
  BACKGROUND,
  LIGHT,
  DETAILED
};

struct RequestArgs {
  uint64 dump_guid;
  DumpType dump_type;
  LevelOfDetail level_of_detail;
};

struct PlatformPrivateFootprint {
  uint64 phys_footprint_bytes = 0;
  uint64 internal_bytes = 0;
  uint64 compressed_bytes = 0;
  uint64 rss_anon_bytes = 0;
  uint64 vm_swap_bytes = 0;
};

struct OSMemDump {
  uint32 resident_set_kb = 0;
  PlatformPrivateFootprint platform_private_footprint;
};

struct ChromeMemDump {
  uint32 malloc_total_kb = 0;
  uint32 partition_alloc_total_kb = 0;
  uint32 blink_gc_total_kb = 0;
  uint32 v8_total_kb = 0;
};

struct MemoryDumpCallbackResult {
  OSMemDump os_dump;
  ChromeMemDump chrome_dump;
  map<mojo.common.mojom.ProcessId, OSMemDump> extra_processes_dump;
};

// There should be at most one implementation of this interface per process.
interface ProcessLocalDumpManager {
  // When successful, the dump is appended in the process-local trace buffer of
  // the target process and an ACK. A summary of the dump is also returned in
  // case of success.
  RequestProcessMemoryDump(RequestArgs args) =>
      (uint64 dump_guid, bool success, MemoryDumpCallbackResult? result);
};

// Memory Infra service implements this interface. ProcessLocalDumpManagers
// register themselves using the RegisterProcessLocalDumpManager method and
// suggest a global memory dump using the RequestGlobalMemoryDump method.
interface Coordinator {
  RegisterProcessLocalDumpManager(ProcessLocalDumpManager local_manager);
  RequestGlobalMemoryDump(RequestArgs args) => (uint64 dump_guid, bool success);
};
