// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module memory_instrumentation.mojom;

import "mojo/common/process_id.mojom";

// Common structs:

enum DumpType {
  PERIODIC_INTERVAL,
  EXPLICITLY_TRIGGERED,
  PEAK_MEMORY_USAGE,
  SUMMARY_ONLY
};

enum LevelOfDetail {
  BACKGROUND,
  LIGHT,
  DETAILED
};

enum ProcessType {
  OTHER,
  BROWSER,
  RENDERER,
  GPU,
  UTILITY,
  PLUGIN
};

struct RequestArgs {
  uint64 dump_guid;
  DumpType dump_type;
  LevelOfDetail level_of_detail;
};

struct ChromeMemDump {
  uint32 malloc_total_kb = 0;
  uint32 command_buffer_total_kb = 0;
  uint32 partition_alloc_total_kb = 0;
  uint32 blink_gc_total_kb = 0;
  uint32 v8_total_kb = 0;
};

// These structs are internal only (only for the communication between
// the service and the ClientProcess library)

// Keep this in sync with ProcessMemoryTotals::PlatformPrivateFootprint
// in base/trace_event/process_memory_totals.h.
//
// See that header for explanation of the fields.
struct PlatformPrivateFootprint {
  uint64 phys_footprint_bytes = 0;
  uint64 internal_bytes = 0;
  uint64 compressed_bytes = 0;
  uint64 rss_anon_bytes = 0;
  uint64 vm_swap_bytes = 0;
  uint64 private_bytes = 0;
};

struct RawOSMemDump {
  uint32 resident_set_kb = 0;
  PlatformPrivateFootprint platform_private_footprint;
};

// This struct is used for internal communication between the memory
// service (Coordinator) and the client library (ClientProcessImpl).
struct RawProcessMemoryDump {
  RawOSMemDump os_dump;
  ChromeMemDump chrome_dump;

  // This is used only on Linux/CrOS to get around sandboxing.
  // See crbug.com/461788.
  map<mojo.common.mojom.ProcessId, RawOSMemDump> extra_processes_dumps;
};

// These structs are public:

struct OSMemDump {
  uint32 resident_set_kb = 0;

  // This is roughly private, anonymous, non-discardable, resident or swapped
  // memory in kilobytes. For more details, see https://goo.gl/3kPb9S.
  uint32 private_footprint_kb = 0;
};

// This struct is used for the public-facing API
// Coordinator::RequestGlobalMemoryDump().
struct ProcessMemoryDump {
  ProcessType process_type;
  OSMemDump os_dump;
  ChromeMemDump chrome_dump;
};


// This struct is returned by the public-facing API
// Coordinator::RequestGlobalMemoryDump().
struct GlobalMemoryDump {
  array<ProcessMemoryDump> process_dumps;
};

// This is the interface implemented by the per-process client library. This
// allows a process to contribute to memory-infra dumps. There should be at
// most one instance of this per hosting process.
interface ClientProcess {
  // When |success| == true the dump is appended in the process-local trace
  // buffer of the target process and an ACK. A summary of the dump is also
  // returned in case of success.
  RequestProcessMemoryDump(RequestArgs args) =>
      (bool success, uint64 dump_id, RawProcessMemoryDump? process_memory_dump);

  // Requests an OSMemDump for each pid in |pids|.
  // The Memory-infra service deals with two kinds of information:
  // 1) Chrome's view of its own memory use (recorded as ChromeMemDumps)
  // 2) The OS's view of Chrome's memory use (recorded as OSMemDumps)
  // Both of these are collected per process. On most platforms each process
  // can make the system calls to collect its own OSMemDump however on some
  // platforms *cough* Linux *cough* due to sandboxing only the browser
  // process can collect OSMemDumps. This API allows for these two cases.
  // On most platforms we send this message to each ClientProcess with
  // with one pid - kNullProcessId - meaning return just your own OSMemDump.
  // On Linux we call this once on the browser process ClientProcess passing
  // the pids for all processes.
  // See crbug.com/461788
  RequestOSMemoryDump(array<mojo.common.mojom.ProcessId> pids) =>
      (bool success, map<mojo.common.mojom.ProcessId, RawOSMemDump> dumps);
};

// The memory-infra service implements this interface. There is one instance for
// the whole system. The coordinator maintains a list of registered client
// processes and polls them whenever a global dump is required.
interface Coordinator {
  // Registers a client process.
  RegisterClientProcess(ClientProcess client_process, ProcessType process_type);

  // Broadcasts a dump request to all registered client processes, injects the
  // dump in the trace buffer (if tracing is enabled) and returns a summarized
  // dump back (if args.dump_type == SUMMARY_ONLY).
  RequestGlobalMemoryDump(RequestArgs args) =>
      (bool success, uint64 dump_id, GlobalMemoryDump? global_memory_dump);
};
