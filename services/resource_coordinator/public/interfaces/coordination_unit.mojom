// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module resource_coordinator.mojom;

import "mojo/common/time.mojom";
import "signals.mojom";

// Any new type here needs to be mirrored between coordination_unit_types.h and
// coordination_unit.mojom, and have mappings between the two defined in
// coordination_unit_struct_traits.h/.cc (see comment in coordination_unit_id.h).
enum CoordinationUnitType {
  kFrame,
  kPage,
  kProcess,
};

struct CoordinationUnitID {
  CoordinationUnitType type;
  int64 id;
};

// TODO(lpy) Remove this interface once the per-type interface is fully in use.
interface CoordinationUnit {
  // Mainly used to force a round-trip to the service over the pipe for
  // a specific unit, so we don't have to deal with possibly-not-yet-created
  // children in AddChild()
  GetID() => (CoordinationUnitID id);

  // Add a new binding to an existing CoordinationUnit.
  AddBinding(CoordinationUnit& request);

  // child_id must represent a CU that already exists service-side,
  // and can't be a direct ascendent or descendent of the current unit.
  AddChild(CoordinationUnitID child_id);

  // child_id must represent a CU that already exists service-side
  // and is a direct descendent of the current unit.
  RemoveChild(CoordinationUnitID child_id);

  // Sends event signal to CoordinationUnit, an event signal are non-persistent.
  SendEvent(Event event);

  // Sets a property on the CoordinationUnit's internal key-value store.
  SetProperty(PropertyType property_type, int64 value);
};

// A FrameCoordinationUnit has at most one ProcessCoordinationUnit as its
// parent, at most one PageCoordinationUnit as its parent, at most one
// FrameCoordinationUnit as parent frame, and can have many child frames.
interface FrameCoordinationUnit {
  // Property signals.
  SetAudibility(bool audible);
  SetNetworkAlmostIdleness(bool idle);

  // Event signals.
  OnAlertFired();
  OnNonPersistentNotificationCreated();
};

interface PageCoordinationUnit {
  // Property signals.
  SetVisibility(bool visible);
  SetUKMSourceId(int64 ukm_source_id);

  // Event signals.
  OnFaviconUpdated();
  OnTitleUpdated();
  OnMainFrameNavigationCommitted();
};

interface ProcessCoordinationUnit {
  // Property signals.
  SetCPUUsage(double cpu_usage);
  SetExpectedTaskQueueingDuration(mojo.common.mojom.TimeDelta duration);
  SetLaunchTime(mojo.common.mojom.Time launch_time);
  SetPID(int64 pid);
};