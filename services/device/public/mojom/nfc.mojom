// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module device.mojom;

enum NDEFErrorType {
  // No permssion.
  NOT_ALLOWED,
  // No hardware support, no NFC adapter, the connection cannot be established,
  // or operation is not supported by the NFC Adapter.
  NOT_SUPPORTED,
  // NFC adapter is disabled.
  NOT_READABLE,
  NOT_FOUND,
  INVALID_MESSAGE,
  OPERATION_CANCELLED,
  CANNOT_CANCEL,
  // Transfer data error.
  IO_ERROR
};

enum NDEFPushTarget {
  // The target of a push operation must be the NFC tag.
  TAG,
  // The target of a push operation must be the NFC peer (device to device).
  PEER,
  // The target of a push operation must be either NFC tag or peer.
  ANY
};

struct NDEFError {
  NDEFErrorType error_type;
};

// https://w3c.github.io/web-nfc/#dom-ndefrecord
struct NDEFRecord {
  // The type of NDEFRecord.
  string record_type;

  // Represents the IANA media type of the NDEFRecord data field.
  string? media_type;

  // The id of NDEFRecord. https://w3c.github.io/web-nfc/#dom-ndefrecord-id
  string? id;

  // The encoding name used for encoding the payload in the case it is textual
  // data.
  string? encoding;

  // The language tag of the NDEFRecord payload in the case that was encoded.
  // Example: "en-US"
  string? lang;

  // Payload of the NDEFRecord.
  array<uint8> data;

  // |data| parsed as an NDEFMessage. This field may be set for some
  // "smart-poster" or external type records. This field may be null even if
  // |data| is valid.
  NDEFMessage? payload_message;
};

struct NDEFMessage {
  // The body of the NDEFMessage is a collection of NDEFRecord objects.
  array<NDEFRecord> data;

  // The |url| field is an ASCII serialized origin, optionally followed by a URL
  // path. It represents Web NFC id, that can be used for matching Web NFC
  // content with the filter specified by |url| field in NDEFScanOptions.
  string? url;

  // Maximum size of NFC message that can be sent over IPC is 32KB.
  const uint32 kMaxSize = 32768;
};

struct NDEFPushOptions {
  // The target of the push operation.
  NDEFPushTarget target;

  // If the property is true, the push operation will suspend active watchers
  // until its completion.
  bool ignore_read;
};

struct NDEFScanOptions {
  // Defines filtering constraint for NFC messages with specified |id|.
  string? id;

  // Defines record type filtering constraint.
  string? record_type;

  // Defines media type filtering constraint.
  string? media_type;
};

interface NFC {
  // NFCClient interface is used to notify |client| when NDEFMessage matches one
  // or more pending watch operations.
  SetClient(pending_remote<NFCClient> client);

  // Pushes data to NFC device.
  // NDEFPushOptions specify type of device where data should be pushed.
  Push(NDEFMessage message, NDEFPushOptions? options) => (NDEFError? error);

  // Cancels pending push request.
  CancelPush(NDEFPushTarget target) => (NDEFError? error);

  // Starts watching for nearby NFC devices with data that matches
  // NDEFScanOptions filtering criteria. |id| identifies each watch request on
  // the current Mojo connection.
  Watch(NDEFScanOptions options, uint32 id) => (NDEFError? error);

  // Cancels watch operation with provided id.
  CancelWatch (uint32 id) => (NDEFError? error);

  // Cancels all watch operations.
  CancelAllWatches () => (NDEFError? error);

  // Suspends all pending NFC operations. Could be used when web page
  // visibility is lost.
  SuspendNFCOperations();

  // Resumes all suspended NFC operations.
  ResumeNFCOperations();
};

interface NFCClient {
  // Sends |message| to those readers that have registered |watch_ids| via
  // NFC.Watch(), i.e. |message| matches their filtering criteria.
  // |serial_number| is the serial number of the nfc device used for
  // anti-collision and identification, or empty string in case none is
  // available.
  OnWatch(array<uint32> watch_ids, string? serial_number, NDEFMessage message);
};
