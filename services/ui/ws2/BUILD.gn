# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/ui.gni")
import("//testing/test.gni")
import("//services/catalog/public/tools/catalog.gni")
import("//services/service_manager/public/cpp/service.gni")
import("//services/service_manager/public/service_manifest.gni")
import("//services/service_manager/public/tools/test/service_test.gni")

component("lib") {
  sources = [
    "client_change.cc",
    "client_change.h",
    "client_change_tracker.cc",
    "client_change_tracker.h",

    # TODO: client_root should be internal and moved to a different target.
    "client_root.cc",
    "client_root.h",
    "ids.h",

    # TODO: window_data should be internal and moved to a different target.
    "window_data.cc",
    "window_data.h",
    "window_host_frame_sink_client.cc",
    "window_host_frame_sink_client.h",
    "window_service.cc",
    "window_service.h",
    "window_service_client.cc",
    "window_service_client.h",
    "window_service_client_binding.cc",
    "window_service_client_binding.h",
    "window_service_delegate.h",
    "window_tree_factory.cc",
    "window_tree_factory.h",
  ]

  public_deps = [
    "//components/viz/host",
    "//services/ui/common:mus_common",
    "//services/ui/public/interfaces",
    "//ui/aura",
  ]

  defines = [ "IS_WINDOW_SERVICE_IMPL" ]
}

static_library("test_support") {
  testonly = true

  sources = [
    "test_change_tracker.cc",
    "test_change_tracker.h",
    "test_window_service_delegate.cc",
    "test_window_service_delegate.h",
    "test_window_tree_client.cc",
    "test_window_tree_client.h",
    "window_server_service_test_base.cc",
    "window_server_service_test_base.h",
    "window_service_client_test_helper.cc",
    "window_service_client_test_helper.h",
  ]

  deps = [
    ":lib",
    "//base",
    "//base/test:test_config",
    "//components/viz/test:test_support",
    "//mojo/public/cpp/bindings:bindings",
    "//services/service_manager/public/cpp",
    "//services/service_manager/public/cpp:service_test_support",
    "//services/ui/common:mus_common",
    "//services/ui/public/cpp",
    "//services/ui/public/interfaces",
    "//testing/gtest",
    "//ui/aura",
    "//ui/display:test_support",
    "//ui/gfx/geometry/mojo",
    "//ui/gl",
    "//ui/wm",
  ]

  data_deps = [
    "//services/ui/ime/test_ime_driver",
  ]
}

service_manifest("unittests_manifest") {
  name = "ui_ws2_service_unittests"
  source = "test_manifest.json"
}

catalog("tests_catalog") {
  testonly = true
  embedded_services = [ ":unittests_manifest" ]
  standalone_services = [ "//services/ui/test_ws:manifest" ]
}

source_set("tests") {
  testonly = true

  sources = [
    "window_service_client_unittest.cc",
    "window_tree_client_unittest.cc",
  ]

  deps = [
    ":lib",
    ":test_support",
    "//base",
    "//base/test:test_support",
    "//components/viz/common",
    "//mojo/public/cpp/bindings",
    "//services/service_manager/public/cpp:service_test_support",
    "//services/service_manager/public/mojom",
    "//services/ui/public/interfaces",
    "//testing/gtest",
    "//third_party/mesa:osmesa",
    "//ui/aura:test_support",
    "//ui/compositor:test_support",
    "//ui/gl:test_support",
  ]

  data_deps = [
    "//services/ui/test_ws",
  ]
}
