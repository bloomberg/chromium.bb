# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//third_party/inspector_protocol/inspector_protocol.gni")
import("//third_party/protobuf/proto_library.gni")
import("//tools/grit/grit_rule.gni")

group("resources") {
  if (!is_android) {
    public_deps = [ ":devtools_resources" ]
  }
}

grit("devtools_resources") {
  source = "$root_gen_dir/devtools/devtools_resources.grd"

  # Required because the .grd is generated.
  enable_input_discovery_for_gn_analyze = false
  use_brotli = true

  outputs = [
    "grit/devtools_resources.h",
    "devtools_resources.pak",
    "grit/devtools_resources_map.cc",
    "grit/devtools_resources_map.h",
  ]

  grit_flags = [
    "-E",
    "protocol_file=" + rebase_path(
            "$root_gen_dir/third_party/blink/public/devtools_protocol/protocol.json",
            root_build_dir),
  ]

  defines =
      [ "SHARED_INTERMEDIATE_DIR=" + rebase_path(root_gen_dir, root_build_dir) ]

  deps = [
    "//third_party/blink/public/devtools_protocol:protocol_version",

    # This is the action that generates out .grd input file.
    "//third_party/blink/public:blink_generate_devtools_grd",
  ]
}

inspector_protocol_generate("protocol_sources") {
  visibility = [ "//content/browser" ]
  deps = [ "//third_party/blink/public/devtools_protocol:protocol_version" ]
  _blink_protocol_path = rebase_path(
          "$root_gen_dir/third_party/blink/public/devtools_protocol/protocol.json",
          root_build_dir)

  inspector_protocol_dir = "//third_party/inspector_protocol"
  out_dir = target_gen_dir
  config_file = "protocol_config.json"
  config_values = [ "protocol.path=$_blink_protocol_path" ]

  inputs = [
    "$root_gen_dir/third_party/blink/public/devtools_protocol/protocol.json",
    config_file,
  ]

  # These are relative to $target_gen_dir.
  outputs = [
    "protocol/audits.cc",
    "protocol/audits.h",
    "protocol/background_service.cc",
    "protocol/background_service.h",
    "protocol/base_string_adapter.cc",
    "protocol/base_string_adapter.h",
    "protocol/browser.cc",
    "protocol/browser.h",
    "protocol/dom.cc",
    "protocol/dom.h",
    "protocol/emulation.cc",
    "protocol/emulation.h",
    "protocol/fetch.cc",
    "protocol/fetch.h",
    "protocol/forward.h",
    "protocol/input.cc",
    "protocol/input.h",
    "protocol/inspector.cc",
    "protocol/inspector.h",
    "protocol/io.cc",
    "protocol/io.h",
    "protocol/log.cc",
    "protocol/log.h",
    "protocol/memory.cc",
    "protocol/memory.h",
    "protocol/network.cc",
    "protocol/network.h",
    "protocol/overlay.cc",
    "protocol/overlay.h",
    "protocol/page.cc",
    "protocol/page.h",
    "protocol/protocol.cc",
    "protocol/protocol.h",
    "protocol/runtime.cc",
    "protocol/runtime.h",
    "protocol/schema.cc",
    "protocol/schema.h",
    "protocol/security.cc",
    "protocol/security.h",
    "protocol/service_worker.cc",
    "protocol/service_worker.h",
    "protocol/storage.cc",
    "protocol/storage.h",
    "protocol/system_info.cc",
    "protocol/system_info.h",
    "protocol/target.cc",
    "protocol/target.h",
    "protocol/tethering.cc",
    "protocol/tethering.h",
    "protocol/tracing.cc",
    "protocol/tracing.h",
    "protocol/web_authn.cc",
    "protocol/web_authn.h",
  ]
}

proto_library("devtools_background_services_proto") {
  sources = [ "devtools_background_services.proto" ]
}
