#!/usr/bin/env python

# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""Copies file_manager/main.html to file_manager/test/main.html.

Modifies it to be able to run the CrOS FileManager app
as a regular webapp.
"""


import argparse
import os
import sys


assert __name__ == '__main__'

# If --output is provided, create specified empty file.
parser = argparse.ArgumentParser()
parser.add_argument('--output')
args = parser.parse_args()
if args.output:
  with open(args.output, 'w') as output:
    output.write('')


root = os.path.abspath(os.path.join(sys.path[0], '../..'))
scripts = []
GENERATED_HTML = ('<!-- Generated by:\n  -- ui/file_manager/file_manager/'
                  'tests/scripts/create_test_main.py\n  -->\n\n')
GENERATED_JS = ('// Generated by:\n// ui/file_manager/file_manager/'
                'tests/scripts/create_test_main.py\n\n')


def read(path):
  with open(os.path.join(root, path)) as f:
    return f.read()


def write(path, content):
  fullpath = os.path.join(root, path)
  if not os.path.exists(os.path.dirname(fullpath)):
    os.makedirs(os.path.dirname(fullpath))
  with open(fullpath, 'w') as f:
    f.write(content)


def insertbeforeline(f, match, lines):
  """Insert lines into file before matching line."""
  for i in range(len(f)):
    if match in f[i]:
      return f[:i] + lines + f[i:]
  return f


def replaceline(f, match, lines):
  """Replace matching line in file with lines."""
  for i in range(len(f)):
    if match in f[i]:
      return f[:i] + lines + f[i+1:]
  return f


def includes2scripts(f, prefix):
  """Convert <include src='foo'> to <script src='<prefix>foo'></script>."""
  for i in range(len(f)):
    l = f[i]
    # Join back any include with a line-break.
    if l == '// <include' and main_scripts[i+1].startswith('// src='):
      main_scripts[i+1] = l + main_scripts[i+1][2:]
      continue
    if l.startswith('// <include '):
      l = l.replace('// <include ', '<script ')
      # Special fix for analytics.
      if 'webui/resources/js/analytics.js' in l:
        l = l.replace('webui/resources/js/analytics.js',
                      '../third_party/analytics/google-analytics-bundle.js')
      # main.js should be defer.
      if 'src="main.js"' in l:
        l = l.replace('src="main.js"', 'src="main.js" defer')
      # Fix the path for scripts to be relative to file_manager/test/main.html.
      if 'src="../../' in l:
        l = l.replace('src="../../', 'src="../')
      else:
        l = l.replace('src="', 'src="../' + prefix)
      tag = l + '</script>'
      if tag not in scripts:
        scripts.append(tag)

# Add / fix js libs in main.html.
# Change src="foreground/..." to src="../foreground/...".
# Fix link to action_link.css and text_defaults.css.
main_html = (read('main.html')
             .replace('="foreground/', '="../foreground/')
             .replace('chrome://resources/css/action_link.css',
                      '../../../webui/resources/css/action_link.css')
             .replace('chrome://resources/css/text_defaults.css',
                      'css/text_defaults.css')
             .split('\n'))


# Fix text_defaults.css.  Copy and replace placeholders.
text_defaults = (read('../../webui/resources/css/text_defaults.css')
                 .replace('$i18n{textDirection}', 'ltr')
                 .replace('$i18nRaw{fontFamily}', 'Roboto, sans-serif')
                 .replace('$i18nRaw{fontSize}', '75%'))
write('test/css/text_defaults.css', GENERATED_HTML + text_defaults)

# Fix stylesheet from extension.
main_html = replaceline(
    main_html,
    ('chrome-extension://fbjakikfhfdajcamjleinfciajelkpek/'
     'cws_widget/cws_widget_container.css'),
    [('<link rel="stylesheet" href="../../../../components/chrome_apps/'
      'webstore_widget/cws_widget/cws_widget_container.css">')])

# Replace elements_importer.js to use updated path, add polymer js.
elements_importer = read('foreground/js/elements_importer.js').replace(
    "'foreground/", "'../foreground/")
write('test/js/elements_importer.js', GENERATED_JS + elements_importer)
main_html = replaceline(
    main_html,
    'foreground/js/elements_importer.js',
    [
        '<script src="js/elements_importer.js"></script>',
        ('<link rel="import" href="../../../../third_party/polymer/v1_0/'
         'components-chromium/polymer/polymer.html">'),
    ])

# Add scripts for testing.
scripts += ['<script src="%s"></script>' % s for s in (
    'js/chrome_api_test_impl.js',
    '../../../webui/resources/js/assert.js',
    '../../../webui/resources/js/cr.js',
    '../../../webui/resources/js/cr/event_target.js',
    '../../../webui/resources/js/cr/ui/array_data_model.js">',
    '../../../webui/resources/js/load_time_data.js',
    '../../../webui/resources/js/webui_resource_test.js">',
    'js/strings.js',
    '../common/js/util.js',
    '../common/js/mock_entry.js',
    '../common/js/volume_manager_common.js',
    '../background/js/volume_info_impl.js',
    '../background/js/volume_info_list_impl.js',
    '../background/js/volume_manager_impl.js',
    '../background/js/mock_volume_manager.js',
    'js/chrome_file_manager.js',
    'js/test_util.js',
    'delete.js',
)]

# Convert all includes from:
#  * foreground/js/main_scripts.js
#  * background/js/background_common_scripts.js
#  * background/js/background_scripts.js
# into <script> tags in main.html.
main_scripts = read('foreground/js/main_scripts.js').split('\n')
bg_common_scripts = read(
    'background/js/background_common_scripts.js').split('\n')
bg_scripts = read('background/js/background_scripts.js').split('\n')
includes2scripts(main_scripts, 'foreground/js/')
includes2scripts(bg_common_scripts + bg_scripts, 'background/js/')
main_html = replaceline(main_html, 'foreground/js/main_scripts.js', scripts)

# Replace banners.js to use updated path.
banners = (read('foreground/js/ui/banners.js')
           .replace("'foreground/", "'../foreground/"))
write('test/js/ui/banners.js', GENERATED_JS + banners)
main_html = replaceline(main_html, 'foreground/js/ui/banners.js',
                        ['<script src="js/ui/banners.js"></script>'])

write('test/main.html', GENERATED_HTML + '\n'.join(main_html))
