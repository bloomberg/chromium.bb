// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ui.ozone.mojom;

import "mojo/public/mojom/base/file.mojom";
import "mojo/public/mojom/base/file_path.mojom";
import "ui/gfx/geometry/mojo/geometry.mojom";
import "ui/gfx/mojo/accelerated_widget.mojom";
import "ui/gfx/mojo/presentation_feedback.mojom";
import "ui/gfx/mojo/swap_result.mojom";

// Used by the GPU for communication with a WaylandConnection on the browser
// process.
interface WaylandConnection {
  // Sets up an associated pipe between the Client and Host.
  SetWaylandConnectionClient(associated WaylandConnectionClient client);

  // Methods used for hardware accelerated rendering:
  //
  // Asks Wayland to create a wl_buffer based on the dmabuf |file| descriptor
  // for the WaylandWindow, which has the following |widget|. The |size|
  // is the size of the buffer, the |strides|, |offsets| and |modifiers|
  // are the descriptions of the drm buffer object. The |format| describes
  // the buffer format (check gfx::BufferFormat) in fourcc form. The
  // |planes_count| says how many planes the buffer, backed by the |file|
  // descriptor has. And the |buffer_id| is a unique id for the buffer, which
  // is used to identify imported wl_buffers on the browser process side and
  // map them with the buffer objects on the gpu process side.
  CreateZwpLinuxDmabuf(gfx.mojom.AcceleratedWidget widget,
                       mojo_base.mojom.File file,
                       gfx.mojom.Size size,
                       array<uint32> strides,
                       array<uint32> offsets,
                       array<uint64> modifiers,
                       uint32 format,
                       uint32 planes_count,
                       uint32 buffer_id);

  // Destroys a wl_buffer created by WaylandConnection based on the |buffer_id|
  // for the WaylandWindow, which has the following |widget|. The |buffer_id|
  // is the unique id of the buffer objects being destroyed on the browser
  // process side.
  DestroyZwpLinuxDmabuf(gfx.mojom.AcceleratedWidget widget, uint32 buffer_id);

  // Attaches a wl_buffer to a WaylandWindow's surface with the following
  // |widget|. The |damage_region| describes changed the region of the buffer.
  // The |buffer_id| is a unique id for the buffer, which is used to
  // identify imported wl_buffers on the browser process side mapped with
  // the ones on the gpu process.
  CommitBuffer(gfx.mojom.AcceleratedWidget widget, uint32 buffer_id,
               gfx.mojom.Rect damage_region);

  // Methods used for software rendering:
  //
  // Asks Wayland to create a wl_buffer based on the shared memory |file|
  // descriptor. There can be only one buffer per |widget|.
  CreateShmBufferForWidget(gfx.mojom.AcceleratedWidget widget,
                           mojo_base.mojom.File file,
                           uint64 length,
                           gfx.mojom.Size size);

  // Asks Wayland to damage and commit previously created buffer for the
  // |widget|.
  PresentShmBufferForWidget(gfx.mojom.AcceleratedWidget widget,
                            gfx.mojom.Rect damage);

  // Destroys the previously created shared memory based buffer for the
  // |widget|.
  DestroyShmBuffer(gfx.mojom.AcceleratedWidget widget);
};


interface WaylandConnectionClient {
  // Used by the browser process to provide the GPU process with a mojo ptr to a
  // WaylandConnection, which lives on the browser process.
  SetWaylandConnection(WaylandConnection wc_ptr);

  // The browser process may request the client to reset gbm device instance to
  // avoid using zwp_linux_dmabuf protocol, which means using wl_egl_surface in
  // a single process mode, and software rendering in a multiple process mode.
  ResetGbmDevice();

  // Signals about swap completion.
  OnSubmission(gfx.mojom.AcceleratedWidget widget,
               uint32 buffer_id,
               gfx.mojom.SwapResult swap_result);

  // Signals about presentation.
  OnPresentation(gfx.mojom.AcceleratedWidget widget,
                 uint32 buffer_id,
                 gfx.mojom.PresentationFeedback feedback);
};
