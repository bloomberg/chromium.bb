{%- macro enum_def(enum_name, enum) -%}
{# TODO: Less generic enum annotations would be nice. We do it this way because
   the bindings generator is still too stupid to generate the right integral
   constants directly. #}
/**
 * @const {!Object}
 * @export
 */
{{enum_name}} = { $: mojo.internal.Enum() };
{%-   for field in enum.fields %}
{%-     if field.value %}
{{enum_name}}.{{field.name}} = {{field.value|expression_to_text_lite}};
{%-     elif loop.first %}
{{enum_name}}.{{field.name}} = 0;
{%-     else %}
{{enum_name}}.{{field.name}} = {{enum_name}}.{{enum.fields[loop.index0 - 1].name}} + 1;
{%-     endif %}
{%-   endfor %}
{%-   if enum.min_value is not none %}
{{enum_name}}.MIN_VALUE = {{enum.min_value}};
{%-   endif %}
{%-   if enum.max_value is not none %}
{{enum_name}}.MAX_VALUE = {{enum.max_value}};
{%-   endif %}

{%- endmacro %}
