// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     java/util/HashSet

#ifndef java_util_HashSet_JNI
#define java_util_HashSet_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char kClassPath_java_util_HashSet[];
const char kClassPath_java_util_HashSet[] = "java/util/HashSet";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_java_util_HashSet_clazz = 0;
#ifndef java_util_HashSet_clazz_defined
#define java_util_HashSet_clazz_defined
inline jclass java_util_HashSet_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_java_util_HashSet,
      &g_java_util_HashSet_clazz);
}
#endif

namespace JNI_HashSet {

// Step 2: method stubs.

static base::subtle::AtomicWord g_java_util_HashSet_dummy = 0;
static void Java_HashSet_dummy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static void Java_HashSet_dummy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_HashSet_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_HashSet_clazz(env),
      "dummy",
      "()V",
      &g_java_util_HashSet_dummy);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

}  // namespace JNI_HashSet

#endif  // java_util_HashSet_JNI
