// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module leveldb.mojom;

import "mojo/public/mojom/base/unguessable_token.mojom";

enum DatabaseError {
  OK,
  NOT_FOUND,
  CORRUPTION,
  NOT_SUPPORTED,
  INVALID_ARGUMENT,
  IO_ERROR
};

enum BatchOperationType {
  PUT_KEY,
  DELETE_KEY,
  DELETE_PREFIXED_KEY,
  // |key| is source prefixed key, |value| is destination prefixed key.
  COPY_PREFIXED_KEY
};

// TODO(dmurph): change to a union type for value population.
struct BatchedOperation {
  BatchOperationType type;
  array<uint8> key;
  // Populated for operations of types PUT_KEY and COPY_PREFIXED_KEY.
  array<uint8>? value;
};

struct KeyValue {
  array<uint8> key;
  array<uint8> value;
};

union GetManyRequest {
  array<uint8> key_prefix;
  array<uint8> key;
};

union GetManyResult {
  DatabaseError status;
  array<KeyValue> key_prefix_values;
  array<uint8> key_value;
};

enum SharedReadCache {
  Default,
  Web,
};

// Options which control the behavior of a database. (This struct corresponds
// with the struct in leveldb's options.h.)
//
// Note: This struct does not have default values. The values are set by a
// struct trait which copies values to/from a leveldb_env::Options instance.
struct OpenOptions {
  // TODO(erg): Find all comparators and copy them into the service.

  // If true, the database will be created if it is missing.
  bool create_if_missing;

  // If true, an error is raised if the database already exists.
  bool error_if_exists;

  // If true, the implementation will do aggressive checking of the
  // data it is processing and will stop early if it detects any
  // errors.
  bool paranoid_checks;

  // Amount of data to build up in memory (backed by an unsorted log
  // on disk) before converting to a sorted on-disk file.
  uint64 write_buffer_size;

  // Number of open files that can be used by the DB.
  int32 max_open_files;

  // The shared read cache to use.
  SharedReadCache shared_block_read_cache = SharedReadCache.Default;
};

// A leveldb database.
interface LevelDBDatabase {
  // Basic Interface -------------------------------------------------------

  // Sets the database entry for "key" to "value". Returns OK on success.
  Put(array<uint8> key, array<uint8> value) => (DatabaseError status);

  // Remove the database entry (if any) for "key".  Returns OK on
  // success, and a non-OK status on error.  It is not an error if "key"
  // did not exist in the database.
  Delete(array<uint8> key) => (DatabaseError status);

  DeletePrefixed(array<uint8> key_prefix) => (DatabaseError status);

  // Rewrites the database to remove traces of deleted entries from disk.
  // Returns OK on success. A non-OK error means that the rewrite failed.
  // If the status is not OK, the database can become unusable which will close
  // the mojo connection.
  RewriteDB() => (DatabaseError status);

  // Atomically performs all |operations|.
  // The DELETE_PREFIXED_KEY applies to all keys that exist before these
  // operations execute. If a 'put' operation precedes a delete prefix, then it
  // will only be deleted if it was a previously-populated key in the database.
  // The COPY_PREFIXED_KEY operations will always ignore all other changes in
  // the operations batch. It will not copy records that were inserted earlier
  // in the operations list.
  Write(array<BatchedOperation> operations) => (DatabaseError status);

  Get(array<uint8> key) => (DatabaseError status, array<uint8> value);

  GetPrefixed(array<uint8> key_prefix)
      => (DatabaseError status, array<KeyValue> data);

  // Get multiple keys and key prefixes and return corresponding values or
  // non-OK error in the same order. Each request has a corresponding result
  // in the same array position. A result can only be either a non-OK
  // db status or a value for the key or key prefix.
  GetMany(array<GetManyRequest> keys_or_prefixes)
      => (array<GetManyResult> data);

  // Copies all data from the source prefix to the destination prefix. Useful
  // for deep copies.
  CopyPrefixed(array<uint8> source_key_prefix,
               array<uint8> destination_key_prefix)
      => (DatabaseError status);
};
