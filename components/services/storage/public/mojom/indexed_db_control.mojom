// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module storage.mojom;

import "components/services/storage/public/mojom/indexed_db_control_test.mojom";
import "mojo/public/mojom/base/file_path.mojom";
import "mojo/public/mojom/base/string16.mojom";
import "mojo/public/mojom/base/values.mojom";
import "mojo/public/mojom/base/time.mojom";
import "third_party/blink/public/mojom/indexeddb/indexeddb.mojom";
import "url/mojom/origin.mojom";

// Recorded in histograms, so append only.
enum ForceCloseReason {
  FORCE_CLOSE_DELETE_ORIGIN = 0,
  FORCE_CLOSE_BACKING_STORE_FAILURE = 1,
  FORCE_CLOSE_INTERNALS_PAGE = 2,
  FORCE_CLOSE_COPY_ORIGIN = 3,
  FORCE_SCHEMA_DOWNGRADE_INTERNALS_PAGE = 4,
  // Append new values here and update IDBContextForcedCloseReason in
  // enums.xml.
};

// Conveys basic information about a single origin's data in IndexedDB.
struct IndexedDBStorageUsageInfo {
  // The origin whose metadata is represented by this structure.
  url.mojom.Origin origin;

  // The total size in bytes occupied by this origin within IndexedDB.
  uint64 size_in_bytes;

  // The last time any IndexedDB data was modified for this origin.
  mojo_base.mojom.Time last_modified_time;
};

// Communicates with IndexedDB clients about changes in IndexedDB.
interface IndexedDBObserver {
  // This function is called when the size of the usage for a particular origin
  // changes (both in memory and on disk).
  OnIndexedDBListChanged(url.mojom.Origin origin);

  // This function is called when the content of a particular object store
  // for a particular origin has been modified.
  OnIndexedDBContentChanged(url.mojom.Origin origin,
                            mojo_base.mojom.String16 database_name,
                            mojo_base.mojom.String16 object_store_name);
};

// Controls the state of IndexedDB within a partition. This is a privileged
// interface and must not be brokered to untrusted clients.
//
// Currently this is consumed and implemented in the browser process, but the
// implementation will eventually live in the storage service which may run
// out-of-process.
interface IndexedDBControl {
  // Binds an IDBFactory to the given origin.
  BindIndexedDB(url.mojom.Origin origin,
                pending_receiver<blink.mojom.IDBFactory> receiver);

  // Retrieves some basic usage information about the IndexedDB state. The
  // returned array has one IndexedDBStorageUsageInfo per origin in the
  // partition that has IndexedDB usage data.
  GetUsage() => (array<IndexedDBStorageUsageInfo> info);

  // Deletes all indexed db files for the given origin.
  DeleteForOrigin(url.mojom.Origin origin) => (bool success);

  // Forcibly closes all connections to all databases within the origin.
  ForceClose(url.mojom.Origin origin, ForceCloseReason reason) => ();

  // Returns the current number of connections.
  GetConnectionCount(url.mojom.Origin origin) => (uint64 connection_count);

  // Called by chrome://indexeddb-internals to download all of the indexeddb
  // data for a particular origin.  This creates a zip file at |zip_path|
  // using the temporary direction |temp_path| which needs to be cleaned up
  // after the user downloads the file.
  DownloadOriginData(url.mojom.Origin origin) => (
      bool success,
      mojo_base.mojom.FilePath temp_path,
      mojo_base.mojom.FilePath zip_path);

  // Called by chrome://indexeddb-internals to populate its page details.
  GetAllOriginsDetails() => (bool incognito, mojo_base.mojom.ListValue details);

  // Disables the exit-time deletion of session-only data, so that internal
  // restarts can preserve that data.
  SetForceKeepSessionState();

  // Adds an observer to be notified about modifications to IndexedDB.
  AddObserver(pending_remote<IndexedDBObserver> observer);

  // Binds the testing interface for extra functionality only available in
  // tests.
  BindTestInterface(pending_receiver<IndexedDBControlTest> receiver);
};
