// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Sync protocol datatype extension for user events.

// Update proto_value_conversions{.h,.cc,_unittest.cc} if you change
// any fields in this file.

syntax = "proto2";

option optimize_for = LITE_RUNTIME;

package sync_pb;

message UserEventSpecifics {
  // Time of event, as measured by client in microseconds since Windows epoch.
  optional int64 event_time_usec = 1;

  // The |global_id| field of the associated navigation, if there is one.
  optional int64 navigation_id = 2;

  // On startup we generate a new random id to identify which FieldTrialEvents
  // other events belonged to.
  optional fixed64 session_id = 3;

  // 4-7 reserved for future scalars.

  // Used for testing and debugging EventLog system.
  message Test {}

  // Reports field trial membership for the subset of trials that have been
  // registered as important to other event types.
  message FieldTrial {
    message FieldTrialPair {
      optional fixed32 name_id = 1;
      optional fixed32 group_id = 2;
    }
    repeated FieldTrialPair field_trial_pairs = 1;
  }

  // Language detection output.
  message LanguageDetection {
    message Language {
      // ISO 639 language code will be used.
      optional string language_code = 1;
      // Whether the detected language is reliable, note this is determined by
      // the CLD3.
      optional bool is_reliable = 2;
    }
    // Top n languages. Typically we just log the top language, but for page
    // that we're not confident about, we may log up to 3 top languages in
    // descending order.
    repeated Language detected_languages = 1;
    // Adopted language code is the code of final determined language.
    // It will be stored only if it's different from the first detected
    // language.
    optional string adopted_language_code = 2;
  }

  // User translated a page or interacted with translate suggestion.
  message Translation {
    // Source language of the translation.
    optional string from_language_code = 1;
    // Target language of the translation.
    optional string to_language_code = 2;
    enum Interaction {
      UNKNOWN = 0;
      ACCEPT = 1;
      DECLINE = 2;
      // This happens when user scroll or click outside the UI without
      // translation.
      IGNORED = 3;
      // This happens when user choose to close the translation window without
      // translation.
      DISMISSED = 4;
      // User manually entered either language.
      // In this case, from_language_code and to_language_code will be user
      // chosen values.
      MANUAL = 5;
      // User choose to revert the translation, in this case, from_language_code
      // and to_language_code will be previous chosen values.
      TRANSLATION_REVERTED = 6;
      // Automatically triggered translation.
      // User sets always translate in user settings.
      AUTO_TRANSLATION_BY_PREF = 7;
      // User navigated through a click from a translated page.
      AUTO_TRANSLATION_BY_LINK = 8;
    }
    optional Interaction interaction = 3;
  }

  oneof event {
    Test test_event = 8;
    FieldTrial field_trial_event = 9;
    LanguageDetection language_detection_event = 10;
    Translation translation_event = 11;
  }
}
