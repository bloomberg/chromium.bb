// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Sync protocol datatype extension for user consents.

// If you change or add any fields in this file, update proto_visitors.h and
// potentially proto_enum_conversions.{h, cc}.

syntax = "proto2";

option optimize_for = LITE_RUNTIME;

package sync_pb;

// Next id: 13
message UserConsentSpecifics {
  // ===========================================================================
  // Fields common to all Chrome User Consents.
  // ===========================================================================

  // The UI language Chrome is using, represented as the IETF language tag
  // defined in BCP 47. The region subtag is not included when it adds no
  // distinguishing information to the language tag (e.g. both "en-US"
  // and "fr" are correct here).
  optional string locale = 4;

  // The local time on the client when the user consent was recorded. The time
  // as measured by client is given in microseconds since Windows epoch. This
  // is needed since user consent recording may happen when a client is
  // offline.
  optional int64 client_consent_time_usec = 12;

  // ===========================================================================
  // Common messages and enums used by multiple user consent types.
  // ===========================================================================

  // The status of a particular User Consent. The status describes the state
  // of the consent as it is: given, not_given.
  enum ConsentStatus {
    // The status is unspecified e.g. because the user was not asked to
    // consent yet or an error happened or the decision was delayed.
    CONSENT_STATUS_UNSPECIFIED = 0;
    // The consent is not given. This means the user either revoked the
    // consent or did not grant it in the first place.
    NOT_GIVEN = 1;
    // The consent is given. This means the user did grant the consent.
    GIVEN = 2;
  }

  // ===========================================================================
  // The specific Chrome User Consent types. Add new User Consent types here
  // and keep them sorted alphabetically.
  // ===========================================================================

  // The user consent for the ARC Backup And Restore feature. The consent
  // status is determined by the corresponding setting on the ARC setup dialog.
  message ArcBackupAndRestoreConsent {
    // Ids of the strings of the setting text presented to the user.
    repeated int32 description_grd_ids = 1;

    // Id of the string of the UI element the user clicked when consenting.
    optional int32 confirmation_grd_id = 2;

    optional ConsentStatus status = 3;
  }

  // The user consent for the Google Location Service. The consent status is
  // determined by the corresponding setting on the ARC setup dialog.
  message ArcGoogleLocationServiceConsent {
    // Ids of the strings of the setting text presented to the user.
    repeated int32 description_grd_ids = 1;

    // Id of the string of the UI element the user clicked when consenting.
    optional int32 confirmation_grd_id = 2;

    optional ConsentStatus status = 3;
  }

  // The user consent for Metrics and Usage reporting on Android for Chrome OS.
  message ArcMetricsAndUsageConsent {
    // Ids of the strings of the setting text presented to the user.
    repeated int32 description_grd_ids = 1;

    // Id of the string of the UI element the user clicked when consenting.
    optional int32 confirmation_grd_id = 2;

    optional ConsentStatus status = 3;
  }

  // The user consent for the Play terms of service is determined by the user
  // action on the ARC setup dialog that presents the Play Terms of Service.
  message ArcPlayTermsOfServiceConsent {
    // The length of the UTF-8 encoded string of the Play Terms of Service
    // text. The length is given in number of bytes.
    optional int32 play_terms_of_service_text_length = 1;
    // The SHA1 hash of UTF-8 encoded string of the Play Terms of Service
    // displayed to the user.
    optional bytes play_terms_of_service_hash = 2;
    // Id of the string of the UI element the user clicked when consenting.
    optional int32 confirmation_grd_id = 3;
    // The status of the Play Terms of Service consent. This specifies whether
    // the consent was given or not given/revoked.
    optional ConsentStatus status = 4;
  }

  // The User Consent for Chrome Sync is determined by the user action on the
  // corresponding Sync Consent dialog.
  message SyncConsent {
    // Ids of the strings of the sync consent text presented to the user.
    repeated int32 description_grd_ids = 1;

    // Id of the string of the UI element the user clicked in order to confirm
    // and close the sync consent dialog.
    optional int32 confirmation_grd_id = 2;

    // The status of the sync consent. This specifies whether the consent was
    // given or not given/revoked.
    optional ConsentStatus status = 3;
  }

  // The specific consent type.
  oneof consent {
    SyncConsent sync_consent = 7;

    ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;

    ArcGoogleLocationServiceConsent arc_location_service_consent = 9;

    ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;

    ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
  }

  // ===========================================================================
  // Client only fields.
  // ===========================================================================
  // TODO(markusheintz): Refactor the code so that these fields can be moved out
  // of this message.

  // The account ID of the user who gave the consent. This field is used
  // by UserEventService to distinguish consents from different users,
  // as UserConsent does not get deleted when a user signs out. However,
  // it should be cleared before being sent over the wire, as the UserEvent
  // is sent over an authenticated channel, so this information would be
  // redundant.
  //
  // For semantics and usage of the |account_id| in the signin codebase,
  // see SigninManagerBase::GetAuthenticatedAccountId()
  // or AccountInfo::account_id.
  optional string account_id = 6;

  // ===========================================================================
  // Deprecated fields. Please do not use them !
  // ===========================================================================
  // TODO(vitaliii): Deprecate them completely once the USER_CONSENTS bridge
  // uses the fields above instead.

  // Which feature does the consent apply to?
  enum Feature {
    FEATURE_UNSPECIFIED = 0;
    CHROME_SYNC = 1;
    PLAY_STORE = 2;
    BACKUP_AND_RESTORE = 3;
    GOOGLE_LOCATION_SERVICE = 4;
  }
  optional Feature feature = 1 [deprecated = true];
  // Ids of the strings of the consent text presented to the user.
  repeated int32 description_grd_ids = 2 [deprecated = true];
  // Id of the string of the UI element the user clicked when consenting.
  optional int32 confirmation_grd_id = 3 [deprecated = true];
  // Was the consent for |feature| given or not given (denied/revoked)?
  optional ConsentStatus status = 5 [deprecated = true];
}
