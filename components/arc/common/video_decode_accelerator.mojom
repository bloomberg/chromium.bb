// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file defines the mojo interface between Android and Chromium for video
// decoding. Any Mojo callee that returns a value does so by callback.
// However, the caller may receive it by out-param (for sync calls) or
// via callback (for async calls).
// However, we only use callbacks to Reset, Flush and Initialize
// in the present design and don't use for other functions.
// This is mainly because other VDAClient functions and VDA functions are not
// correlated.
// Please don't use this design as a good reference, it is strongly recommended
// in mojom that all the function results are reported by passed callbacks.

module arc.mojom;

import "gfx.mojom";
import "video_common.mojom";

// Information of the bitstream buffer.
struct BitstreamBuffer {
  int32 bitstream_id;
  // This handle is passed and used in Decode().
  // The handle fd is ashmem.
  handle handle_fd;
  uint32 offset;
  uint32 bytes_used;
};

struct Picture {
  int32 picture_buffer_id;
  int32 bitstream_id;
  // the crop rectangle with the picture buffer to be displayed.
  Rect crop_rect;
};

// Format specification of the picture buffer request.
struct PictureBufferFormat {
  HalPixelFormat pixel_format;
  uint32 buffer_size;

  // minimal number of buffers required to process the video.
  uint32 min_num_buffers;
  uint32 coded_width;
  uint32 coded_height;
};

struct VideoDecodeAcceleratorConfig {
  VideoCodecProfile profile;
  bool secure_mode;
};

// Next MinVersion: 1
// Next method ID: 8
interface VideoDecodeAccelerator {
  [Extensible]
  enum Result {
    SUCCESS = 0,
    ILLEGAL_STATE = 1,
    INVALID_ARGUMENT = 2,
    UNREADABLE_INPUT = 3,
    PLATFORM_FAILURE = 4,
    INSUFFICIENT_RESOURCES = 5,
    CANCELLED = 6,
    RESULT_MAX = 7,
  };

  // Initializes video decoder accelerator with specific video codec profile.
  // The caller needs to wait for the initialization result (returned by
  // callback) before calling any other methods.
  Initialize@0(VideoDecodeAcceleratorConfig config,
               VideoDecodeClient client) => (Result result);

  // Allocate protected input buffer with |handle_fd| and aligned |size|.
  // This function can be called only in secure mode.
  // If this is succeeded, this returns true. Otherwise, returns false.
  AllocateProtectedBuffer@7(handle handle_fd,
                            uint64 size) => (bool success);

  // Decodes the content in the shared memory of the bitstream buffer. The
  // callee needs to map the the shared memory to read the content and is
  // responsible to release the shared memory by closing the file descriptor.
  Decode@1(BitstreamBuffer bitstream_buffer);

  // Sets the number of output picture buffers.
  AssignPictureBuffers@2(uint32 count);

  // Assigns a buffer to be used by the accelerator with specified
  // |picture_buffer_id|.
  // In secure mode, if a new protected output buffer is allocated for the given
  // |picture_buffer_id|. Any previously-allocated buffer with the same
  // |picture_buffer_id| will be released.
  // Call VDA::ImportBufferForPicture with gfx::GpuMemoryBufferHandle
  // created from |handle_fd| and |planes|.
  // This should be preceded by a call to AssignPictureBuffers().
  ImportBufferForPicture@3(int32 picture_buffer_id, handle handle_fd,
                           array<VideoFramePlane> planes);

  // Returns picture buffer with specified |picture_buffer_id| to be reused by
  // the accelerator.
  ReusePictureBuffer@4(int32 picture_buffer_id);

  // Resets the accelerator, without decoding any pending buffers.
  // When it is done, the callback will be invoked.
  Reset@5() => (Result result);

  // Flushes the accelerator. After all the output buffers pending decode have
  // been returned to client, the callback will be invoked.
  // Flush() can be cancelled by a succeeding Reset(). In that case, the
  // callback is called with Result::CANCELLED.
  Flush@6() => (Result result);
};

// Next MinVersion: 1
// Next method ID: 4
interface VideoDecodeClient {
  // Callback to tell client how many and what size of buffers to provide.
  ProvidePictureBuffers@0(PictureBufferFormat format);

  // Called to notify the client that |picture| is ready to be displayed.
  // The calls to PictureReady() are in display order and Picture should
  // be displayed in that order.
  PictureReady@1(Picture picture);

  // Called to notify that decoder has decoded the end of the BitstreamBuffer
  // with specified |bitstream_id|.
  NotifyEndOfBitstreamBuffer@2(int32 bitstream_id);

  // Called when an asynchronous error happens, for example, illegal state,
  // error while decoding the stream, or a platform/system error.
  // The errors in Initialize(), Reset() and Flush(), will not be reported here,
  // but will be returned in its callback function.
  NotifyError@3(VideoDecodeAccelerator.Result error);
};
