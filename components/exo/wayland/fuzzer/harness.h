// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_EXO_WAYLAND_FUZZER_HARNESS_H_
#define COMPONENTS_EXO_WAYLAND_FUZZER_HARNESS_H_

#include <memory>

#include "base/macros.h"
#include "components/exo/wayland/fuzzer/actions.pb.h"

struct wl_display;
struct wl_registry;
struct wl_callback;
struct wl_compositor;
struct wl_shm;

namespace exo {
namespace wayland_fuzzer {

// When using LPM to fuzz wayland, the wauland_fuzzer::actions proto defines the
// sequence of events that the fuzzer wants to perform. It then falls to this
// harness to actually convert that sequence into the relevant calls, as if it
// were a normal wayland client.
class Harness {
 public:
  Harness();

  ~Harness();

  void Run(const wayland_fuzzer::action& actions);

  void Run(const wayland_fuzzer::actions& actions);

  // TODO(hollingum): This is a macro for now but when we move to autogenerated
  // code this will be generated directly.
#define GET_AND_SET(WLT)                                                  \
  std::vector<struct WLT*> WLT##_list_;                                   \
  void add_##WLT(struct WLT* new_obj) { WLT##_list_.push_back(new_obj); } \
  struct WLT* get_##WLT(uint32_t idx) const {                             \
    return idx < WLT##_list_.size() ? WLT##_list_[idx] : nullptr;         \
  }                                                                       \
  std::vector<std::pair<uint32_t, uint32_t>> WLT##_globals_

  GET_AND_SET(wl_display);
  GET_AND_SET(wl_registry);
  GET_AND_SET(wl_callback);
  GET_AND_SET(wl_compositor);
  GET_AND_SET(wl_shm);
#undef GET_AND_SET

 private:
  DISALLOW_COPY_AND_ASSIGN(Harness);
};

}  // namespace wayland_fuzzer
}  // namespace exo

#endif  // COMPONENTS_EXO_WAYLAND_FUZZER_HARNESS_H_
