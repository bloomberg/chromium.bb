// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This source set defines shared expectations for the module load
// whitelist/blacklist (WL/BL).
// 1. The BL packed data file format used to pass information from chrome.dll
//    to chrome_elf.dll across restarts.
// 2. The APIs exported by chrome_elf.dll to share logs of module load attempts.

#ifndef CHROME_ELF_WHITELIST_WHITELIST_PACKED_FORMAT_H_
#define CHROME_ELF_WHITELIST_WHITELIST_PACKED_FORMAT_H_

#include <windows.h>

#include <stdint.h>

namespace whitelist {

// -----------------------------------------------------------------------------
// This defines the expected contents of a packed whitelist file.
// - At offset 0 of the file: {PackedWhitelistMetadata}
// - Immediately following: {Array of PackedWhitelistModule}
// - Anything else can be stored in the rest of the file.
//
// - It's a requirement that the file be packed little-endian and also that
//   32-bit alignment == 64-bit alignment (so no handling required).
// - It's also required that the array be *sorted*. First by basename hash,
//   second by code_id hash (there can be multiple of the same basename hash).
// -----------------------------------------------------------------------------

// Subdir relative to install_static::GetUserDataDirectory().
extern const wchar_t kFileSubdir[];

// Packed module data cache file.
extern const wchar_t kBlFileName[];

enum PackedWhitelistVersion : uint32_t {
  kInitialVersion = 1,
  kCurrent = kInitialVersion,
  kUnsupported
};

struct PackedWhitelistMetadata {
  // The version of the packed whitelist format. This should always be ordered
  // first for backward compatibility purposes.
  PackedWhitelistVersion version;
  // The number of PackedWhitelistModule elements that follows the metadata in
  // the packed whitelist file.
  uint32_t module_count;
};

struct PackedWhitelistModule {
  // SHA1 of lowercase basename (no path).
  uint8_t basename_hash[20];
  // Code ID. This is equivalent to the string generated by formatting
  // the FileHeader.TimeDateStamp and OptionalHeader.SizeOfImage with the
  // formatting string %08X%x. Then SHA1 the string.
  uint8_t code_id_hash[20];
  // A timestamp used for tracking "last attempted load".  Used to manage
  // lifetime of entries in the local caches.
  uint32_t time_date_stamp;
};

// These struct are directly written to a file. Therefore the padding should
// be consistent across compilations.
static_assert(sizeof(PackedWhitelistMetadata) == 8,
              "The actual padding of the PackedWhitelistMetadata struct "
              "doesn't match the expected padding");
static_assert(sizeof(PackedWhitelistModule) == 44,
              "The actual padding of the PackedWhitelistModule struct doesn't "
              "match the expected padding");

//------------------------------------------------------------------------------
// chrome_elf log API
//------------------------------------------------------------------------------

// Load-attempt log types.
enum LogType : uint8_t {
  kBlocked,
  kAllowed,
};

// Define a flat log entry for any attempted module load.
// The total size in bytes of a log entry is returned by GetLogEntrySize().
// - Note: If this is a |blocked| entry, |path_len| will be 0.
//   (Full path not required for a blacklisted load attempt log.)
struct LogEntry {
  LogType type;
  uint8_t basename_hash[20];
  uint8_t code_id_hash[20];
  // Number of characters in |path| string, not including null terminator.
  uint32_t path_len;
  // UTF-8 full module path, null termination guaranteed.
  char path[1];
};

static_assert(sizeof(LogEntry) == 52,
              "Ensure expectations for padding and alignment are correct.  "
              "If this changes, double check GetLogEntrySize() calculation.");

// Returns the full size for a LogEntry, given the LogEntry.path_len.
// - Always use this function over manual calculation, as it handles padding
//   and alignment.
// - This function will be built into the caller binary.
// - Example of how to use this function to iterate through a buffer returned
//   from DrainLog():
//
//  uint8_t* tracker = buffer;
//  while (tracker < buffer + buffer_bytes_written) {
//    LogEntry* entry = reinterpret_cast<LogEntry*>(tracker);
//    // Do work.
//    tracker += GetLogEntrySize(entry->path_len);
//  }
uint32_t GetLogEntrySize(uint32_t path_len);

}  // namespace whitelist

// Exported API for calling from outside chrome_elf.dll.
// Drains the load attempt LogEntries into the provided buffer.
// - Returns the number of bytes written.  See comments above for LogEntry
//   details.
// - If provided, |log_remaining| receives the number of bytes remaining in the
//   module log, that didn't fit in |buffer|.
// - |buffer_size| can be 0, in which case this simply queries the size of the
//   module log.
extern "C" uint32_t DrainLog(uint8_t* buffer,
                             uint32_t buffer_size,
                             uint32_t* log_remaining);

// Exported API for calling from outside chrome_elf.dll.
// Register an event to be notified when whitelist logs are available via
// DrainLog API.
// - Pass in a HANDLE to an event created via ::CreateEvent(), or nullptr to
//   clear.
// - This function will duplicate |event_handle|, and call ::SetEvent() when any
//   new whitelist log is added.
extern "C" bool RegisterLogNotification(HANDLE event_handle);

#endif  // CHROME_ELF_WHITELIST_WHITELIST_PACKED_FORMAT_H_
