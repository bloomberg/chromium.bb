<?xml version="1.0" encoding="utf-8" ?>
<AutoVisualizer
  xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

  <!--libc++'s short string optimization:
      A basic_string is 3 size_t words long. In the "alternate string layout" that we use,
      they are: pointer to data, size, capacity.
      (In the normal layout, it's capacity, size, data instead.)
      If a string is short enough that it fits in these three size_ts instead,
      the string data is stored inline in these 3 words, with the last byte of
      the storage storing the length of the string.
      The highest bit of the "capacity" word is set for normal, "long" strings,
      and that bit needs to be masked out to know the real capacity.
      If this bit is not set, the string data is stored inline.
      (In the normal layout, if the lowest bit in the first byte is set,
      it's a "long" string, requiring a long string to always have even
      capacity. A short string here stores its length in the first byte
      and the inline data in the remaining storage.)
  -->

  <Type Name="std::__1::basic_string&lt;char,*&gt;">
    <!--<Intrinsic Name="is_long"
            Expression="((__rep*)&amp;__r_)-&gt;__s.__size_ &amp; 0x80" />-->
    <!-- The above doesn't work for reasons I don't understand.
         The below assumes the alternate string layout and little endianness :/
    -->
    <Intrinsic Name="is_long"
        Expression="*(((char*)this) + 3*sizeof(size_t) - 1) &amp; 0x80" />
    <DisplayString Condition="is_long()">{*(char**)this}</DisplayString>
    <DisplayString Condition="!is_long()">{(char*)this}</DisplayString>
    <StringView Condition="is_long()">*(char**)this</StringView>
    <StringView Condition="!is_long()">(char*)this</StringView>
    <Expand>
      <Item Name="[size]" Condition="is_long()"
          ExcludeView="simple">((size_t*)this)[1]</Item>
      <Item Name="[size]" Condition="!is_long()"
          ExcludeView="simple">*(((char*)this) + 3*sizeof(size_t) - 1)</Item>
      <Item Name="[capacity]" Condition="is_long()" ExcludeView="simple">
        ((size_t*)this)[2] &amp; (~((size_t)0) &gt;&gt; 1)
      </Item>
      <Item Name="[capacity]" Condition="!is_long()"
          ExcludeView="simple">22</Item>
      <ArrayItems>
        <Size Condition="is_long()">((size_t*)this)[1]</Size>
        <Size Condition="!is_long()">
          *(((char*)this) + 3*sizeof(size_t) - 1)
        </Size>
        <ValuePointer Condition="is_long()">*(char**)this</ValuePointer>
        <ValuePointer Condition="!is_long()">(char*)this</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="std::__1::basic_string&lt;wchar_t,*&gt;">
    <Intrinsic Name="is_long"
        Expression="*(((char*)this) + 3*sizeof(size_t) - 1) &amp; 0x80" />
    <DisplayString Condition="is_long()">{*(wchar_t**)this}</DisplayString>
    <DisplayString Condition="!is_long()">{(wchar_t*)this}</DisplayString>
    <StringView Condition="is_long()">*(wchar_t**)this</StringView>
    <StringView Condition="!is_long()">(wchar_t*)this</StringView>
    <Expand>
      <Item Name="[size]" Condition="is_long()"
          ExcludeView="simple">((size_t*)this)[1]</Item>
      <Item Name="[size]" Condition="!is_long()"
          ExcludeView="simple">*(((char*)this) + 3*sizeof(size_t) - 1)</Item>
      <Item Name="[capacity]" Condition="is_long()" ExcludeView="simple">
        ((size_t*)this)[2] &amp; (~((size_t)0) &gt;&gt; 1)
      </Item>
      <Item Name="[capacity]" Condition="!is_long()"
          ExcludeView="simple">10</Item>
      <ArrayItems>
        <Size Condition="is_long()">((size_t*)this)[1]</Size>
        <Size Condition="!is_long()">
          *(((char*)this) + 3*sizeof(size_t) - 1)
        </Size>
        <ValuePointer Condition="is_long()">*(wchar_t**)this</ValuePointer>
        <ValuePointer Condition="!is_long()">(wchar_t*)this</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="std::__1::vector&lt;*&gt;">
    <Intrinsic Name="size" Expression="__end_ - __begin_" />
    <Expand>
      <ArrayItems>
        <Size>size()</Size>
        <ValuePointer>__begin_</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
</AutoVisualizer>
